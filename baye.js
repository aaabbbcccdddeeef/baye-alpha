// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function($0) { { var key = UTF8ToString($0); var value = window.localStorage["baye/" + key]; if (value) { var buffer = Module._malloc(value.length+1); Module.writeStringToMemory(value, buffer, false); return buffer; } return 0; } },
 function($0, $1) { { var key = UTF8ToString($0); var value = UTF8ToString($1); window.localStorage["baye/" + key] = value; } },
 function() { { goHome(); } },
 function($0) { { lcdFlushBuffer($0); } }];

function _emscripten_asm_const_0(code) {
 return ASM_CONSTS[code]();
}

function _emscripten_asm_const_1(code, a0) {
 return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 385584;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,128,63,154,153,153,63,205,204,76,63,0,0,128,63,51,51,51,63,102,102,166,63,205,204,76,63,0,0,128,63,154,153,153,63,0,0,128,63,154,153,25,63,154,153,153,63,154,153,153,63,205,204,76,63,0,0,128,63,0,0,128,63,205,204,140,63,154,153,153,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,140,63,102,102,166,63,102,102,102,63,0,0,128,63,0,0,128,63,0,0,192,63,154,153,25,63,154,153,25,63,154,153,25,63,154,153,25,63,154,153,25,63,154,153,25,63,0,0,128,63,205,204,76,63,102,102,102,63,205,204,76,63,102,102,166,63,205,204,204,62,51,51,51,63,154,153,153,63,0,0,128,63,205,204,140,63,154,153,153,63,154,153,25,63,0,0,128,63,0,0,128,63,102,102,166,63,51,51,147,63,205,204,140,63,0,0,192,63,154,153,153,63,205,204,76,63,42,13,0,0,0,0,0,0,34,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,128,9,0,0,128,9,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,21,220,5,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,4,5,6,3,241,15,255,1,3,4,3,3,4,9,19,0,19,0,19,0,19,0,35,0,37,0,37,0,20,0,21,0,21,0,35,0,36,0,38,0,39,0,39,0,40,0,41,0,35,0,36,0,39,0,0,0,0,0,42,0,43,0,0,0,0,0,0,0,0,0,41,0,11,11,11,11,0,0,0,10,9,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,21,21,21,7,7,0,20,17,17,7,7,14,7,7,7,7,7,7,7,0,0,7,7,0,0,0,0,7,0,0,0,0,33,33,33,0,0,0,33,33,0,33,33,33,33,33,33,33,0,0,33,33,0,0,0,0,33,1,1,1,1,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0,255,1,0,0,1,11,10,9,10,9,10,1,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,202,154,59,69,114,114,111,114,58,32,70,105,103,104,116,32,79,114,100,101,114,32,113,117,101,117,101,32,105,115,32,102,117,108,108,0,69,114,114,111,114,58,32,79,114,100,101,114,32,113,117,101,117,101,32,105,115,32,102,117,108,108,0,85,115,105,110,103,32,99,117,115,116,111,109,32,108,105,98,10,0,100,97,116,46,108,105,98,0,102,111,110,116,46,98,105,110,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,0,0,47,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+2060);
/* memory initializer */ allocate([47,114,111,109,47,0,47,100,97,116,97,47,0,123,32,118,97,114,32,107,101,121,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,59,32,118,97,114,32,118,97,108,117,101,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,49,41,59,32,119,105,110,100,111,119,46,108,111,99,97,108,83,116,111,114,97,103,101,91,34,98,97,121,101,47,34,32,43,32,107,101,121,93,32,61,32,118,97,108,117,101,59,32,125,0,37,48,50,88,0,123,32,118,97,114,32,107,101,121,32,61,32,85,84,70,56,84,111,83,116,114,105,110,103,40,36,48,41,59,32,118,97,114,32,118,97,108,117,101,32,61,32,119,105,110,100,111,119,46,108,111,99,97,108,83,116,111,114,97,103,101,91,34,98,97,121,101,47,34,32,43,32,107,101,121,93,59,32,105,102,32,40,118,97,108,117,101,41,32,123,32,118,97,114,32,98,117,102,102,101,114,32,61,32,77,111,100,117,108,101,46,95,109,97,108,108,111,99,40,118,97,108,117,101,46,108,101,110,103,116,104,43,49,41,59,32,77,111,100,117,108,101,46,119,114,105,116,101,83,116,114,105,110,103,84,111,77,101,109,111,114,121,40,118,97,108,117,101,44,32,98,117,102,102,101,114,44,32,102,97,108,115,101,41,59,32,114,101,116,117,114,110,32,98,117,102,102,101,114,59,32,125,32,114,101,116,117,114,110,32,48,59,32,125,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,64,6,0,32,0,0,0,0,0,0,0,0,0,0,0,192,18,1,32,12,0,0,0,0,0,0,0,0,0,0,0,12,0,192,0,0,0,0,0,0,0,0,0,0,0,0,31,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,5,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,25,128,0,0,0,0,0,0,0,0,0,144,27,1,32,36,0,0,0,0,0,0,0,0,0,0,0,8,0,192,24,1,8,63,194,24,65,0,32,20,0,192,6,0,32,0,0,0,0,0,0,0,7,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,34,100,65,128,0,0,0,0,0,0,0,5,0,80,5,0,80,5,0,80,5,0,80,5,0,80,5,0,80,0,0,0,0,0,0,102,102,102,0,0,0,0,0,0,0,0,0,0,0,4,0,128,12,0,192,0,0,0,0,0,0,0,0,0,0,0,3,0,48,2,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,36,4,128,108,6,192,0,0,0,0,0,0,0,0,0,0,0,3,96,54,2,64,72,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,128,16,1,0,16,1,0,16,1,0,8,0,64,0,0,1,0,8,0,64,4,0,64,4,0,64,4,0,128,16,0,0,0,0,2,0,64,8,1,0,32,1,0,8,0,64,2,0,0,0,0,2,0,16,0,128,4,0,32,4,0,128,16,2,0,0,0,0,0,0,36,2,64,72,4,128,144,4,128,72,2,64,36,0,0,0,0,1,32,18,0,144,9,0,72,9,0,144,18,1,32,0,0,0,0,0,14,0,128,8,0,128,8,0,128,8,0,0,0,0,0,0,0,0,0,0,0,128,8,0,128,8,0,128,8,0,128,56,0,0,0,0,0,3,224,34,2,224,40,2,128,40,2,128,40,3,128,0,0,1,192,20,1,64,20,1,64,20,7,64,68,7,192,0,0,0,0,0,62,2,64,40,2,128,40,2,128,40,2,128,36,3,224,0,0,3,224,18,0,160,10,0,160,10,0,160,10,1,32,62,0,0,0,0,62,3,192,56,3,0,48,3,0,48,3,128,60,3,224,0,0,3,224,30,0,224,6,0,96,6,0,96,14,1,224,62,0,0,0,0,0,2,0,32,31,192,32,2,0,0,0,1,252,0,0,0,0,0,0,16,64,136,5,0,32,5,0,136,16,64,0,0,0,0,0,0,0,6,0,96,0,3,252,0,0,96,6,0,0,0,0,0,0,0,0,0,0,192,12,0,0,0,0,192,12,0,0,0,0,0,0,0,32,5,0,80,8,128,136,16,65,4,32,34,2,0,0,0,0,4,4,64,66,8,32,129,16,17,0,160,10,0,64,0,0,0,0,0,0,63,193,132,12,0,96,2,0,64,8,1,4,63,192,0,0,3,252,25,129,152,25,129,152,25,129,152,25,129,152,25,128,0,0,2,4,32,66,4,32,66,4,32,66,4,16,128,240,0,0,0,0,0,240,16,130,4,32,66,4,32,66,4,32,66,4,0,0,0,0,0,28,6,0,128,16,1,252,16,0,128,6,0,28,0,0,0,0,0,0,0,1,152,25,128,0,0,1,152,25,128,0,0,0,0,0,16,2,0,64,8,0,128,16,2,2,32,20,0,128,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,3,254,0,0,0,4,128,72,4,128,144,9,0,144,18,1,32,36,2,64,36,0,0,0,0,2,0,64,8,1,0,32,4,0,128,16,3,254,0,0,0,0,0,0,0,0,0,15,1,8,32,66,4,0,0,0,0,0,0,0,0,0,15,1,8,32,66,100,38,66,4,16,128,240,0,0,0,0,0,16,2,128,32,2,0,32,2,0,32,2,0,160,4,0,0,1,128,36,2,0,112,10,128,168,10,128,112,2,1,32,12,0,0,0,0,0,63,192,0,0,3,252,0,0,0,63,192,0,0,0,0,0,0,0,16,194,50,36,33,132,0,3,254,0,3,254,0,0,0,0,0,0,48,36,196,3,131,2,76,64,56,0,0,0,0,0,0,0,0,0,0,2,28,66,36,34,68,35,132,0,0,0,0,0,0,0,0,0,0,1,143,37,4,32,66,2,80,24,240,0,0,0,0,0,0,16,1,3,252,2,0,64,63,192,128,8,1,0,0,0,0,4,0,76,7,0,192,52,4,64,52,0,192,7,0,76,4,0,0,0,3,32,14,0,48,2,192,34,2,192,48,14,3,32,0,0,0,0,192,48,12,3,0,64,3,0,76,3,48,12,192,48,0,192,0,48,0,192,3,0,12,0,32,12,3,32,204,51,0,192,48,0,0,0,0,0,24,194,82,66,20,33,37,33,140,0,0,0,0,0,0,0,0,0,0,3,12,48,192,0,0,0,0,6,0,96,0,0,0,0,0,0,6,0,96,0,0,0,0,3,12,48,192,0,0,0,0,2,0,32,7,0,168,2,0,32,7,0,136,8,128,136,7,0,0,0,0,112,8,128,136,8,128,112,2,0,32,15,128,32,2,0,0,0,1,128,36,2,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,64,12,1,128,16,2,0,0,0,0,0,0,0,0,0,0,0,1,32,54,2,64,72,0,0,0,0,0,0,0,0,0,0,0,32,5,58,36,96,130,8,0,128,8,0,129,4,32,60,0,0,0,2,0,244,18,193,36,30,0,240,3,192,46,34,97,172,15,128,32,0,2,2,23,64,136,16,65,4,16,64,136,23,66,2,0,0,0,0,64,248,16,195,20,50,3,32,52,3,132,24,129,112,32,0,0,3,128,100,6,0,96,31,128,96,6,1,224,38,34,126,25,192,0,16,66,136,41,2,160,20,0,128,20,66,170,74,160,170,4,64,0,6,0,144,8,0,96,9,0,144,9,0,96,1,0,144,6,0,0,32,131,16,57,3,146,45,82,213,45,82,117,39,34,48,67,112,0,2,0,32,5,0,80,120,242,2,16,64,136,8,129,116,24,194,2,2,0,32,7,0,112,127,243,254,31,192,248,15,193,206,24,98,1,0,0,240,16,130,4,64,36,2,64,36,2,32,65,8,15,0,0,0,0,112,31,193,252,63,227,254,63,225,252,31,192,112,0,0,0,0,0,248,16,66,114,40,162,138,40,162,114,16,64,248,0,0,0,2,0,80,8,129,4,32,36,1,32,33,4,8,128,80,2,0,0,2,0,112,15,129,252,63,231,255,63,225,252,15,128,112,2,0,0,0,3,254,32,34,2,32,34,2,32,34,2,32,35,254,0,0,0,0,3,254,63,227,254,63,227,254,63,227,254,63,227,254,0,0,0,0,0,32,5,0,80,8,128,136,16,65,4,32,39,255,0,0,0,0,0,32,7,0,112,15,128,248,31,193,252,63,231,255,0,0,0,0,2,98,22,64,136,5,3,38,53,96,136,22,66,98,0,0,0,0,0,0,0,0,16,0,199,255,0,192,16,0,0,0,0,0,0,0,0,0,0,0,64,24,7,255,24,0,64,0,0,0,0,0,0,2,0,32,7,0,112,10,128,32,2,0,32,2,0,32,2,0,0,2,0,32,2,0,32,2,0,32,10,128,112,7,0,32,2,0,0,0,0,0,127,247,255,0,0,0,127,247,255,0,0,0,0,0,0,0,15,254,127,195,248,63,129,240,31,0,224,14,0,64,0,0,0,0,15,254,64,66,8,32,129,16,17,0,160,10,0,64,0,0,0,0,0,96,15,1,248,63,195,252,15,0,240,15,0,240,15,0,0,0,0,240,15,0,240,15,0,240,63,195,252,31,128,240,6,0,0,64,6,0,88,4,96,65,132,4,65,132,96,88,6,0,64,0,0,0,32,6,1,160,98,24,34,2,24,32,98,1,160,6,0,32,0,0,7,252,64,100,6,64,101,246,64,100,6,64,103,254,63,224,0,0,0,64,4,0,224,27,3,24,96,205,246,96,129,240,4,0,0,31,2,72,68,72,66,132,44,66,130,44,42,81,66,72,31,0,0,0,1,240,32,132,4,64,68,4,64,68,4,32,129,240,0,0,0,0,0,0,3,0,40,126,68,2,64,39,228,2,128,48,0,0,0,0,0,0,4,0,96,7,0,120,7,0,96,4,0,0,0,0,0,0,0,24,1,128,24,1,128,152,25,131,248,63,1,128,8,0,0,0,1,240,32,132,228,95,69,244,95,68,228,32,129,240,0,0,0,0,0,0,96,100,2,64,36,2,64,36,2,64,38,6,0,0,0,0,0,0,96,100,18,65,36,34,82,36,194,68,38,6,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,0,36,0,0,0,0,0,224,17,1,16,1,0,32,4,0,128,16,1,244,0,0,0,0,0,96,9,0,144,1,0,32,1,0,144,9,0,100,0,0,0,0,0,32,6,0,96,10,0,160,18,1,240,2,0,36,0,0,0,0,1,240,16,1,0,30,1,16,1,0,16,17,0,228,0,0,0,0,0,32,4,0,128,16,1,96,25,1,16,17,1,20,14,0,0,0,1,240,17,0,16,2,0,32,4,0,64,4,0,68,0,0,0,0,0,224,17,1,16,10,0,64,10,1,16,17,1,20,14,0,0,0,0,224,17,1,16,17,1,48,13,0,16,2,0,68,0,0,0,0,2,48,36,130,72,36,130,72,36,130,72,36,130,50,0,0,0,0,2,32,34,2,32,34,2,32,34,2,32,34,66,32,0,0,0,0,2,48,36,130,72,32,130,16,34,2,32,36,2,122,0,0,0,0,2,48,36,130,72,32,130,16,32,130,72,36,130,50,0,0,0,0,2,16,35,2,48,37,2,80,41,2,248,33,2,18,0,0,0,0,2,120,36,2,64,39,2,72,32,130,8,36,130,50,0,0,0,0,2,32,36,2,128,43,2,200,40,130,136,40,130,114,0,0,0,0,2,124,96,66,8,32,130,16,33,2,16,33,2,18,0,0,0,0,2,112,104,130,136,37,2,32,37,2,136,40,130,138,39,0,0,0,2,112,104,130,136,40,130,152,38,130,8,33,2,34,0,0,0,0,3,24,74,68,164,10,65,36,18,66,36,66,71,153,0,0,0,16,66,34,34,36,33,66,20,33,66,20,33,34,34,34,16,64,0,16,66,98,41,36,145,65,20,33,68,20,65,40,34,242,16,64,0,16,66,98,41,36,145,65,20,33,65,20,145,41,34,98,16,64,0,16,66,18,35,36,49,69,20,81,73,20,249,33,34,18,16,64,0,16,66,2,39,164,65,68,20,113,64,148,9,36,162,50,16,64,0,16,66,34,36,36,129,72,20,225,73,20,145,41,34,98,16,64,0,16,66,2,47,164,9,65,20,17,66,20,33,34,34,34,16,64,0,16,66,98,41,36,145,73,20,97,73,20,145,41,34,98,16,64,0,16,66,114,40,164,137,72,148,153,70,148,9,33,34,34,16,64,0,16,66,146,42,164,169,74,148,169,74,148,169,42,162,146,16,64,0,16,66,2,40,164,137,72,148,137,72,148,137,40,162,138,16,64,0,16,66,2,51,37,73,84,149,9,81,21,33,52,35,122,16,64,0,16,66,2,41,164,165,72,84,153,72,84,133,42,98,154,16,64,0,16,66,2,40,164,153,73,148,169,74,148,189,40,162,138,16,64,0,16,66,2,55,165,65,84,21,113,80,149,9,52,163,50,16,64,0,16,66,2,49,37,33,84,21,113,84,149,73,52,163,50,16,64,0,16,66,2,55,165,9,81,21,17,82,21,33,50,35,34,16,64,0,16,66,2,51,37,73,84,149,49,84,149,73,52,163,50,16,64,0,16,66,2,51,37,73,84,149,73,83,149,9,49,35,34,16,64,0,16,66,2,44,165,53,83,84,85,73,85,21,61,98,10,16,64,0,7,1,140,34,34,34,66,20,33,66,18,34,34,33,140,7,0,0,7,1,140,38,34,146,65,20,33,68,18,130,47,33,140,7,0,0,7,1,140,38,34,146,65,20,33,65,18,146,38,33,140,7,0,0,7,1,140,33,34,50,69,20,81,79,146,18,33,33,140,7,0,0,7,1,140,47,34,130,78,20,17,65,18,146,38,33,140,7,0,0,7,1,140,34,34,66,72,20,225,73,18,146,38,33,140,7,0,0,7,1,140,47,34,18,66,20,33,68,18,66,36,33,140,7,0,0,7,1,140,38,34,146,73,20,97,73,18,146,38,33,140,7,0,0,7,1,140,38,34,146,73,20,113,65,18,34,36,33,140,7,0,0,7,1,140,41,34,170,74,148,169,74,146,170,41,33,140,7,0,0,34,3,254,84,36,80,207,229,144,111,228,144,79,228,144,79,224,0,2,128,36,255,224,40,243,9,100,145,143,116,0,163,54,204,32,0,16,66,2,32,36,1,64,21,253,64,20,1,32,34,2,16,64,0,16,66,2,32,36,249,64,20,1,64,21,253,32,34,2,16,64,0,16,66,2,47,36,1,64,20,241,64,20,1,63,162,2,16,64,0,16,66,2,32,37,253,85,85,85,89,213,5,63,226,2,16,64,0,16,66,2,63,164,65,68,21,249,72,148,137,63,226,2,16,64,0,16,66,66,34,36,1,95,212,1,69,20,137,48,98,2,16,64,0,16,66,2,36,36,65,68,20,121,92,20,65,36,162,58,16,64,0,16,66,2,33,36,145,73,20,137,72,149,5,32,34,2,16,64,0,16,66,2,36,36,65,95,20,81,69,20,149,48,226,2,16,64,0,16,66,2,34,36,33,66,21,253,66,20,33,34,34,2,16,64,0,33,2,254,176,11,124,164,66,252,32,130,16,47,226,16,39,0,0,56,2,62,253,40,82,81,74,148,124,140,136,120,132,148,122,32,0,0,0,112,2,0,32,2,0,32,2,0,32,2,0,112,0,0,0,0,3,184,17,1,16,17,1,16,17,1,16,17,3,184,0,0,0,0,7,119,34,34,34,34,34,34,34,34,34,34,39,119,0,0,0,0,7,230,36,66,68,36,66,40,34,130,40,33,7,16,0,0,0,0,3,142,16,65,4,8,128,136,8,128,80,5,0,32,0,0,0,0,7,126,34,66,36,34,65,68,20,65,68,8,64,142,0,0,0,0,6,127,34,162,42,34,161,74,20,161,74,20,160,159,0,0,0,0,6,255,37,82,85,37,82,149,41,82,149,17,81,63,0,0,0,0,7,103,34,34,20,33,66,8,33,66,20,34,39,119,0,0,0,0,1,220,8,128,80,5,0,32,5,0,80,8,129,220,0,0,0,0,7,119,34,33,66,20,32,130,20,33,66,34,39,119,0,0,0,0,6,127,34,161,74,20,160,138,20,161,74,34,167,127,0,0,0,0,1,0,16,3,128,56,5,64,16,1,0,16,1,0,0,0,0,0,0,224,49,130,72,78,68,68,0,67,136,49,130,224,0,0,0,0,1,128,24,1,128,24,1,128,0,0,0,24,1,128,0,0,0,0,0,80,5,0,80,0,0,0,0,0,0,0,0,0,0,0,0,4,128,72,4,131,252,9,0,144,9,3,252,18,1,32,18,0,0,0,3,220,24,128,208,13,0,96,63,192,96,6,0,96,15,0,0,0,1,130,36,66,72,37,1,160,5,128,164,18,66,36,1,128,0,0,0,192,18,1,32,20,0,156,20,130,40,33,2,41,28,96,0,0,1,0,16,2,0,64,0,0,0,0,0,0,0,0,0,0,0,0,64,8,0,128,16,1,0,16,1,0,16,0,128,8,0,64,0,16,0,128,8,0,64,4,0,64,4,0,64,8,0,128,16,0,0,0,0,32,2,1,36,10,128,112,5,0,136,16,64,0,0,0,0,0,0,0,2,0,32,2,1,252,2,0,32,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,128,8,1,0,0,0,0,0,0,0,0,0,0,0,1,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,1,128,0,0,0,0,0,2,0,64,8,1,0,32,4,0,128,16,2,0,0,0,0,0,0,112,8,129,4,16,65,4,16,65,4,8,128,112,0,0,0,2,0,96,14,0,96,6,0,96,6,0,96,6,0,240,0,0,0,0,0,240,25,129,24,1,128,48,6,0,192,24,1,248,0,0,0,0,0,112,9,128,24,1,0,32,1,0,24,9,128,112,0,0,0,0,128,24,3,128,120,5,128,216,25,129,254,1,128,24,0,0,0,0,1,248,24,1,128,30,0,48,1,128,24,19,0,224,0,0,0,0,0,32,4,0,128,24,1,240,25,129,152,25,128,240,0,0,0,0,1,248,17,129,24,3,0,48,6,0,96,6,0,96,0,0,0,0,0,112,13,128,216,13,128,112,13,128,216,13,128,112,0,0,0,0,0,112,13,128,216,13,128,216,7,128,48,2,0,64,0,0,0,0,0,0,0,0,0,24,1,128,0,0,0,24,1,128,0,0,0,0,0,0,0,1,128,24,0,0,24,1,128,8,1,0,0,0,0,0,0,6,1,128,96,24,2,0,24,0,96,1,128,6,0,0,0,0,0,0,0,0,0,31,192,0,31,192,0,0,0,0,0,0,0,0,3,0,12,0,48,0,192,2,0,192,48,12,3,0,0,0,0,12,1,32,51,3,48,6,0,192,12,0,192,0,0,192,12,0,0,31,2,8,78,69,36,82,69,36,82,68,216,32,65,248,0,0,0,0,0,32,7,0,80,9,128,248,17,129,12,32,192,0,0,0,0,0,3,240,25,129,152,31,1,152,25,129,152,63,0,0,0,0,0,0,0,116,8,193,132,24,1,128,24,0,132,7,128,0,0,0,0,0,3,240,24,129,140,24,193,140,24,193,152,63,0,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,132,63,192,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,128,60,0,0,0,0,0,0,0,116,12,193,132,24,1,128,24,224,196,7,192,0,0,0,0,0,3,222,24,193,140,31,193,140,24,193,140,61,224,0,0,0,0,0,0,240,6,0,96,6,0,96,6,0,96,15,0,0,0,0,0,0,0,120,3,0,48,3,0,48,3,0,176,6,0,0,0,0,0,0,7,152,49,3,32,52,3,192,54,3,48,121,192,0,0,0,0,0,3,192,24,1,128,24,1,128,24,65,140,63,192,0,0,0,0,0,6,3,48,99,142,61,99,102,50,99,6,120,240,0,0,0,0,0,7,30,56,195,76,50,195,28,48,195,12,120,64,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,0,0,0,0,0,7,224,51,3,48,51,3,224,48,3,0,120,0,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,12,0,0,0,0,3,240,25,129,152,25,129,240,30,1,176,57,192,0,0,0,0,0,0,112,12,128,192,6,0,48,1,128,152,7,0,0,0,0,0,0,3,252,38,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,3,222,24,193,140,24,193,140,24,192,136,7,0,0,0,0,0,0,3,206,24,65,132,12,128,200,7,0,112,2,0,0,0,0,0,0,7,119,50,35,50,55,35,92,29,193,136,8,128,0,0,0,0,0,3,220,24,128,208,6,0,112,9,129,12,57,224,0,0,0,0,0,3,142,24,64,200,7,0,48,3,0,48,7,128,0,0,0,0,0,3,252,33,128,48,6,0,192,12,1,132,63,192,0,0,0,0,0,0,14,0,128,8,0,128,8,0,128,8,0,128,14,0,0,0,0,2,0,16,0,128,4,0,32,1,0,8,0,64,2,0,0,0,0,7,0,16,1,0,16,1,0,16,1,0,16,7,0,0,0,0,0,0,32,5,0,136,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,240,0,0,0,0,1,128,12,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,1,0,240,17,1,16,15,128,16,0,0,0,0,0,128,8,0,128,15,0,136,8,128,136,15,0,0,0,0,0,0,0,0,0,0,112,8,128,128,8,0,136,7,0,0,0,0,0,0,0,8,0,128,8,7,128,136,8,128,156,6,128,0,0,0,0,0,0,0,0,0,112,8,128,248,8,0,136,7,0,0,0,0,0,0,0,24,2,64,32,15,192,32,2,0,32,2,0,32,0,0,0,0,0,0,0,64,120,8,128,112,4,0,248,8,128,112,0,0,0,0,0,128,8,0,176,12,128,136,8,128,136,8,128,0,0,0,0,0,0,32,0,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,0,32,0,0,32,6,0,32,2,0,32,18,0,192,0,0,0,0,0,128,8,0,128,9,0,160,12,0,160,9,0,0,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,0,0,0,0,208,10,128,168,10,128,168,10,128,0,0,0,0,0,0,0,0,0,224,9,0,144,9,0,144,9,0,0,0,0,0,0,0,0,0,0,192,18,2,16,33,1,32,12,0,0,0,0,0,0,0,0,0,0,240,8,128,136,8,128,240,8,0,128,8,0,0,0,0,0,0,0,120,8,128,136,8,128,120,0,128,8,0,128,0,0,0,0,0,0,176,4,128,64,4,0,64,4,0,0,0,0,0,0,0,0,0,0,96,9,0,128,6,0,16,9,0,96,0,0,0,0,0,32,2,0,112,2,0,32,2,0,40,1,0,0,0,0,0,0,0,0,0,0,144,9,0,144,9,0,152,7,0,0,0,0,0,0,0,0,0,2,8,32,129,16,17,0,160,4,0,0,0,0,0,0,0,0,0,2,34,34,33,84,21,64,136,8,128,0,0,0,0,0,0,0,0,1,152,9,0,96,6,0,144,25,128,0,0,0,0,0,0,0,0,3,24,17,0,160,6,0,64,8,0,128,16,0,0,0,0,0,0,1,248,17,0,32,4,0,136,31,128,0,0,0,0,0,32,4,0,64,4,0,64,8,0,64,4,0,64,4,0,32,0,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,0,32,1,0,16,1,0,16,0,128,16,1,0,16,1,0,32,0,0,127,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,0,32,2,0,32,2,0,0,2,0,0,0,0,0,2,128,80,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,2,128,252,2,128,80,15,192,80,5,0,0,0,0,0,2,0,120,10,128,160,6,0,48,2,128,168,15,0,32,0,0,0,0,0,72,10,128,176,5,0,40,3,64,84,4,128,0,0,0,0,0,0,32,5,0,80,7,0,168,10,128,144,6,192,0,0,0,0,4,0,64,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,16,2,0,32,2,0,32,2,0,32,1,0,8,0,0,0,4,0,32,1,0,16,1,0,16,1,0,16,2,0,64,0,0,0,0,0,0,2,0,168,7,0,112,10,128,32,0,0,0,0,0,0,0,0,32,2,0,32,15,128,32,2,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,64,8,0,0,0,0,0,0,0,0,15,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,128,16,1,0,16,2,0,32,4,0,64,4,0,128,0,0,0,0,0,112,8,128,136,8,128,136,8,128,136,7,0,0,0,0,0,0,0,32,6,0,32,2,0,32,2,0,32,7,0,0,0,0,0,0,0,112,8,128,8,1,0,32,4,0,128,15,128,0,0,0,0,0,0,112,8,128,8,3,0,8,0,128,136,7,0,0,0,0,0,0,0,16,3,0,80,5,0,144,7,128,16,1,128,0,0,0,0,0,0,248,8,0,128,15,0,8,0,128,136,7,0,0,0,0,0,0,0,112,9,0,128,15,0,136,8,128,136,7,0,0,0,0,0,0,0,248,9,0,16,2,0,32,2,0,32,2,0,0,0,0,0,0,0,112,8,128,136,7,0,136,8,128,136,7,0,0,0,0,0,0,0,112,8,128,136,8,128,120,0,128,72,7,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,32,0,0,0,0,128,16,2,0,64,8,0,64,2,0,16,0,128,0,0,0,0,0,0,0,0,0,248,0,0,0,15,128,0,0,0,0,0,0,0,4,0,32,1,0,8,0,64,8,1,0,32,4,0,0,0,0,0,0,0,112,8,128,136,1,0,32,2,0,0,2,0,0,0,0,0,0,0,112,8,128,152,10,128,168,11,128,128,7,128,0,0,0,0,0,0,32,2,0,48,5,0,80,7,128,72,12,192,0,0,0,0,0,0,240,4,128,72,7,0,72,4,128,72,15,0,0,0,0,0,0,0,120,8,128,128,8,0,128,8,0,136,7,0,0,0,0,0,0,0,240,4,128,72,4,128,72,4,128,72,15,0,0,0,0,0,0,0,248,4,128,80,7,0,80,4,0,72,15,128,0,0,0,0,0,0,248,4,128,80,7,0,80,4,0,64,14,0,0,0,0,0,0,0,56,4,128,128,8,0,156,8,128,72,3,0,0,0,0,0,0,0,204,4,128,72,7,128,72,4,128,72,12,192,0,0,0,0,0,0,248,2,0,32,2,0,32,2,0,32,15,128,0,0,0,0,0,0,124,1,0,16,1,0,16,1,0,16,9,0,224,0,0,0,0,0,236,4,128,80,6,0,80,5,0,72,14,192,0,0,0,0,0,0,224,4,0,64,4,0,64,4,0,68,15,192,0,0,0,0,0,0,216,13,128,216,13,128,168,10,128,168,10,128,0,0,0,0,0,0,220,4,128,104,6,128,88,5,128,72,14,128,0,0,0,0,0,0,112,8,128,136,8,128,136,8,128,136,7,0,0,0,0,0,0,0,240,4,128,72,7,0,64,4,0,64,14,0,0,0,0,0,0,0,112,8,128,136,8,128,136,14,128,152,7,0,24,0,0,0,0,0,240,4,128,72,7,0,80,4,128,72,14,192,0,0,0,0,0,0,120,8,128,128,6,0,16,0,128,136,15,0,0,0,0,0,0,0,248,10,128,32,2,0,32,2,0,32,7,0,0,0,0,0,0,0,204,4,128,72,4,128,72,4,128,72,3,0,0,0,0,0,0,0,204,4,128,72,5,0,80,3,0,32,2,0,0,0,0,0,0,0,168,10,128,168,7,0,80,5,0,80,5,0,0,0,0,0,0,0,216,5,0,80,2,0,32,5,0,80,13,128,0,0,0,0,0,0,216,5,0,80,2,0,32,2,0,32,7,0,0,0,0,0,0,0,248,9,0,16,2,0,32,4,0,72,15,128,0,0,0,0,3,128,32,2,0,32,2,0,32,2,0,32,2,0,56,0,0,0,4,0,64,4,0,32,2,0,16,1,0,16,0,128,0,0,0,0,7,0,16,1,0,16,1,0,16,1,0,16,1,0,112,0,0,0,2,0,80,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,192,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,72,3,128,72,3,192,0,0,0,0,0,0,192,4,0,64,7,0,72,4,128,72,7,0,0,0,0,0,0,0,0,0,0,0,3,128,72,4,0,64,3,128,0,0,0,0,0,0,24,0,128,8,3,128,72,4,128,72,3,192,0,0,0,0,0,0,0,0,0,0,3,0,72,7,128,64,3,128,0,0,0,0,0,0,28,2,0,32,7,128,32,2,0,32,7,128,0,0,0,0,0,0,0,0,0,0,3,192,72,3,0,64,7,128,68,3,128,0,0,0,192,4,0,64,7,0,72,4,128,72,14,192,0,0,0,0,0,0,32,0,0,0,6,0,32,2,0,32,7,0,0,0,0,0,0,0,16,0,0,0,3,0,16,1,0,16,1,0,16,14,0,0,0,0,192,4,0,64,5,192,80,7,0,72,14,192,0,0,0,0,0,0,224,2,0,32,2,0,32,2,0,32,15,128,0,0,0,0,0,0,0,0,0,0,15,0,168,10,128,168,10,128,0,0,0,0,0,0,0,0,0,0,15,0,72,4,128,72,14,192,0,0,0,0,0,0,0,0,0,0,3,0,72,4,128,72,3,0,0,0,0,0,0,0,0,0,0,0,15,0,72,4,128,72,7,0,64,14,0,0,0,0,0,0,0,0,3,128,72,4,128,72,3,128,8,1,192,0,0,0,0,0,0,0,13,128,96,4,0,64,14,0,0,0,0,0,0,0,0,0,0,0,7,128,64,3,0,8,7,128,0,0,0,0,0,0,0,2,0,32,7,0,32,2,0,32,1,128,0,0,0,0,0,0,0,0,0,0,13,128,72,4,128,72,3,192,0,0,0,0,0,0,0,0,0,0,14,192,72,5,0,48,2,0,0,0,0,0,0,0,0,0,0,0,10,128,168,7,0,80,5,0,0,0,0,0,0,0,0,0,0,0,13,128,80,2,0,80,13,128,0,0,0,0,0,0,0,0,0,0,14,192,72,5,0,48,2,0,32,12,0,0,0,0,0,0,0,0,7,128,16,2,0,32,7,128,0,0,0,0,1,128,16,1,0,16,2,0,16,1,0,16,1,0,24,0,0,16,1,0,16,1,0,16,1,0,16,1,0,16,1,0,16,1,0,0,6,0,32,2,0,32,1,0,32,2,0,32,2,0,96,0,0,64,10,64,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,128,4,5,128,32,2,0,64,4,0,128,0,0,0,0,0,0,63,128,4,5,128,32,2,0,32,4,0,64,8,0,0,0,0,0,1,0,16,2,0,96,10,1,32,2,0,32,0,0,0,0,0,16,1,0,32,6,0,160,18,0,32,2,0,32,2,0,0,0,0,32,2,1,252,16,65,8,0,128,16,2,0,64,0,0,0,0,0,32,2,1,254,16,32,4,0,64,8,1,0,32,0,0,0,0,0,0,0,1,248,2,0,32,2,1,252,0,0,0,0,0,0,0,0,0,0,1,252,2,0,32,2,0,32,63,224,0,0,0,0,0,0,32,2,3,248,6,0,160,18,2,32,10,0,64,0,0,0,0,0,32,2,0,32,63,192,96,10,1,32,34,0,96,2,0,0,0,0,64,4,1,248,4,128,72,8,128,136,18,130,16,0,0,0,0,64,66,4,65,250,4,128,72,8,128,136,18,130,16,0,0,0,0,1,0,16,0,184,60,0,120,60,0,32,2,0,16,0,0,0,0,65,2,16,64,242,56,0,64,7,3,192,2,0,32,1,0,0,0,0,64,4,0,124,8,128,136,17,0,32,4,0,128,0,0,0,0,64,66,4,64,122,4,128,136,17,0,32,4,0,128,0,0,0,0,0,128,8,0,252,17,2,16,2,0,32,4,0,128,0,0,0,0,64,130,8,64,250,17,2,16,2,0,32,4,0,128,0,0,0,0,0,0,0,0,248,0,128,8,0,129,252,0,0,0,0,0,0,0,64,2,0,64,250,0,128,8,1,1,248,0,0,0,0,0,0,0,0,16,9,0,144,63,224,144,9,0,32,2,0,64,0,0,0,0,64,18,9,64,146,9,3,254,9,0,144,10,0,32,4,0,0,0,0,0,8,0,64,16,0,136,1,0,32,4,1,128,0,0,0,0,65,2,8,64,2,16,0,136,1,0,96,24,0,0,0,0,0,0,0,0,31,128,8,1,0,32,6,0,144,16,128,0,0,0,0,0,64,2,0,65,250,0,128,16,2,0,80,8,129,4,0,0,0,0,0,128,8,0,128,63,128,144,10,0,136,8,128,120,0,0,0,0,64,130,8,64,130,15,7,136,9,0,128,8,128,120,0,0,0,0,0,0,0,65,4,8,128,72,1,0,32,4,0,128,0,0,0,0,64,2,1,66,18,17,0,160,2,0,64,4,0,128,16,0,0,4,0,64,7,128,136,8,129,80,3,0,32,4,0,128,16,0,0,0,64,130,15,64,146,17,2,160,6,0,64,8,1,0,0,0,0,0,0,24,30,0,32,2,3,254,4,0,64,8,0,128,16,0,0,0,64,2,3,65,194,4,0,64,127,192,64,8,0,128,16,0,0,0,0,0,0,0,64,18,128,136,1,0,32,4,0,128,16,0,0,0,0,0,4,0,40,16,128,144,1,0,32,4,0,128,16,0,0,0,64,2,8,66,82,17,0,32,2,0,64,8,1,0,32,0,0,0,0,248,0,0,0,63,224,32,2,0,64,4,0,128,16,0,0,0,64,2,31,64,2,0,7,252,4,0,64,8,0,128,16,0,0,0,0,128,8,0,128,12,0,176,9,128,136,8,0,128,8,0,0,8,64,130,8,64,194,11,0,152,8,128,128,8,0,128,8,0,0,0,0,32,2,1,252,2,0,32,4,0,64,8,1,0,0,0,0,0,0,0,0,1,248,0,0,0,0,3,254,0,0,0,0,0,0,0,0,0,15,192,4,4,128,40,1,0,40,4,128,128,0,0,0,4,0,32,0,1,240,2,0,112,10,129,32,2,0,32,2,0,0,0,0,0,0,128,8,1,0,16,2,0,32,4,0,128,0,0,0,0,0,0,0,0,16,4,128,68,8,33,2,32,0,0,0,0,0,0,64,2,0,64,18,4,128,68,8,33,2,32,0,0,0,0,0,0,32,5,0,80,18,4,128,68,8,33,2,32,0,0,0,0,0,0,0,0,8,0,144,10,0,192,8,0,128,7,128,0,0,0,0,0,64,2,0,64,2,18,1,64,24,1,0,16,0,240,0,0,0,0,64,10,0,161,4,18,1,64,24,1,0,16,0,248,0,0,0,0,0,0,63,128,8,1,0,16,2,0,64,8,1,0,0,0,0,0,64,2,0,67,250,0,128,16,2,0,64,8,1,0,0,0,0,0,32,5,0,83,242,1,0,32,2,0,64,8,1,0,0,0,0,0,0,0,0,0,0,0,0,192,19,0,15,0,0,0,0,0,0,0,64,2,0,64,2,0,1,192,35,0,15,0,0,0,0,0,0,0,0,6,0,144,9,0,97,128,38,0,31,0,0,0,0,0,0,0,0,32,2,3,252,2,0,168,10,65,36,6,0,32,0,0,0,0,64,34,2,64,34,63,224,32,18,129,36,38,64,32,0,0,0,0,96,41,2,96,32,63,224,32,18,129,36,34,64,96,2,0,0,0,0,0,0,1,252,0,64,8,5,0,32,1,0,16,0,0,0,0,0,96,1,129,136,6,0,32,0,1,192,3,128,8,0,0,0,0,0,0,2,0,32,4,0,64,9,0,136,19,195,196,0,0,0,0,0,0,0,128,8,5,0,48,3,128,72,8,1,0,0,0,0,0,0,16,30,0,64,7,227,192,4,0,64,4,0,60,0,0,0,0,0,0,0,0,128,8,3,252,4,64,72,2,0,32,1,0,0,16,1,0,8,0,128,63,192,68,2,128,32,1,0,16,0,0,0,0,0,0,0,0,0,15,128,8,0,128,16,31,224,0,0,0,0,0,0,0,15,192,4,0,64,8,0,131,255,0,0,0,0,0,0,0,0,0,0,0,0,31,192,4,31,192,4,31,192,0,0,0,0,0,0,0,0,1,248,0,128,8,31,128,8,0,129,248,0,0,0,0,0,240,0,0,0,31,128,8,1,0,16,2,0,64,0,0,0,0,0,16,9,0,144,9,0,144,9,0,16,2,0,32,4,0,0,0,0,0,1,0,144,9,1,16,17,2,18,65,64,24,0,0,0,0,0,0,0,1,0,16,129,16,18,1,64,24,1,0,0,0,0,0,0,0,31,129,8,16,129,16,17,1,248,16,0,0,0,0,0,0,0,0,31,129,8,0,128,16,1,0,32,4,0,128,0,0,0,0,0,0,31,193,4,16,128,8,1,0,16,2,0,64,0,0,0,0,0,32,2,1,248,18,1,32,127,224,32,2,0,32,0,0,0,0,0,0,31,128,16,2,0,32,2,3,254,0,0,0,0,0,0,0,0,0,31,192,4,31,224,8,0,128,16,1,0,32,4,0,0,0,1,0,8,32,68,0,128,16,2,0,64,24,0,0,0,0,0,0,64,130,8,67,242,33,2,16,2,0,32,4,0,128,16,0,0,0,0,32,2,0,248,2,128,40,4,128,72,9,128,0,0,0,0,0,0,0,8,0,128,15,193,16,1,0,32,4,0,128,0,0,0,65,2,254,241,1,124,33,2,16,127,234,146,33,34,22,33,0,0,17,225,146,37,36,20,185,64,20,125,36,82,69,39,214,69,0,0,1,15,16,66,132,68,248,36,72,68,132,72,116,140,72,8,128,0,1,15,36,183,235,40,244,75,162,179,207,68,2,128,16,14,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,7,0,80,9,128,248,16,129,12,32,192,0,0,0,0,0,3,240,25,129,152,31,1,152,25,129,152,63,0,0,0,0,0,0,3,252,24,65,128,24,1,128,24,1,128,60,0,0,0,0,0,0,0,32,7,0,112,9,128,152,16,193,12,63,224,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,132,63,192,0,0,0,0,0,1,252,16,192,24,3,0,96,12,65,132,31,192,0,0,0,0,0,3,222,24,193,140,31,193,140,24,193,140,61,224,0,0,0,0,0,0,240,16,130,148,47,66,148,32,65,8,15,0,0,0,0,0,0,0,240,6,0,96,6,0,96,6,0,96,15,0,0,0,0,0,0,7,152,49,3,32,52,3,192,54,3,48,121,192,0,0,0,0,0,0,32,7,0,80,9,128,140,16,193,6,56,240,0,0,0,0,0,6,7,48,99,142,61,99,118,50,99,6,120,240,0,0,0,0,0,6,30,48,195,140,52,195,44,49,195,12,120,64,0,0,0,0,0,1,252,16,64,136,15,128,136,0,1,4,31,192,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,0,0,0,0,0,3,254,24,193,140,24,193,140,24,193,140,61,224,0,0,0,0,0,3,240,25,129,152,25,129,240,24,1,128,60,0,0,0,0,0,0,3,252,24,64,192,6,0,64,8,65,4,63,192,0,0,0,0,0,3,252,38,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,1,152,6,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,0,240,6,1,248,38,66,100,31,128,96,15,0,0,0,0,0,0,3,206,12,64,104,3,0,56,4,192,134,28,240,0,0,0,0,0,2,121,19,33,50,19,32,252,3,0,48,7,128,0,0,0,0,0,0,112,8,129,140,24,193,140,8,130,218,61,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,65,40,17,1,16,19,0,204,0,0,0,0,0,0,0,0,96,9,0,160,9,0,136,12,128,176,8,0,128,0,0,0,0,0,0,0,1,132,12,64,76,5,128,48,2,0,32,0,0,0,6,0,144,4,0,32,5,0,136,8,128,136,7,0,0,0,0,0,0,0,0,7,0,128,8,0,112,8,0,128,8,128,112,0,0,0,0,0,64,3,128,56,4,0,128,8,0,128,7,0,8,1,0,0,0,0,0,11,1,72,4,128,72,4,128,8,0,128,8,0,0,0,0,0,112,8,128,136,8,128,248,8,128,136,8,128,112,0,0,0,0,0,0,2,0,96,2,0,32,2,0,48,2,0,0,0,0,0,0,0,0,8,129,144,10,0,192,10,0,144,8,128,0,0,0,0,0,3,0,8,0,64,10,0,144,17,1,10,32,96,0,0,0,0,0,0,0,8,128,136,8,128,136,9,128,234,8,192,128,0,0,0,0,0,0,0,3,8,16,128,144,9,0,96,4,0,0,0,0,0,0,0,128,7,0,128,7,0,64,8,0,128,7,0,8,1,0,0,0,0,0,6,0,144,16,129,8,16,128,144,6,0,0,0,0,0,0,0,0,31,192,144,9,0,144,9,1,8,0,0,0,0,0,0,0,0,0,6,0,144,16,129,8,24,129,112,16,1,0,0,0,0,0,0,0,7,192,144,16,129,8,16,128,144,6,0,0,0,0,0,0,0,0,0,0,252,18,0,32,2,0,40,3,0,0,0,0,0,0,0,0,9,1,136,8,128,136,8,128,136,7,0,0,0,0,0,0,0,32,2,0,32,15,129,36,18,65,36,15,128,32,2,0,0,0,0,0,0,1,132,4,128,80,2,0,80,9,1,12,0,0,0,0,0,32,2,2,40,82,65,36,18,64,248,2,0,32,0,0,0,0,0,0,0,0,136,18,65,36,18,65,36,13,128], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+5269);
/* memory initializer */ allocate([32,7,0,80,9,128,248,17,129,12,57,224,0,0,0,0,0,3,248,24,129,128,31,1,152,25,129,152,63,0,0,0,0,0,0,3,240,25,129,152,31,1,152,25,129,152,63,0,0,0,0,0,0,3,252,24,193,132,24,1,128,24,1,128,60,0,0,0,0,0,0,1,254,4,192,76,4,192,76,8,193,254,16,32,0,0,0,0,0,3,252,24,65,144,31,1,144,24,1,132,63,192,0,0,0,0,8,128,0,63,193,132,25,1,240,25,1,132,63,192,0,0,0,0,0,4,242,38,66,100,22,128,248,30,195,102,111,48,0,0,0,0,0,1,120,24,193,12,3,0,8,0,193,12,15,128,0,0,0,0,0,7,158,48,195,28,50,195,76,56,195,12,121,224,0,0,0,0,9,0,96,121,227,28,50,195,76,56,195,12,121,224,0,0,0,0,0,3,206,24,129,144,31,1,152,24,193,142,60,0,0,0,0,0,0,1,252,9,128,152,9,128,152,9,132,152,51,192,0,0,0,0,0,6,3,48,99,142,61,99,102,50,99,6,120,240,0,0,0,0,0,7,158,48,195,12,63,195,12,48,195,12,121,224,0,0,0,0,0,0,240,25,131,12,48,195,12,48,193,152,15,0,0,0,0,0,0,3,254,24,193,140,24,193,140,24,193,140,61,224,0,0,0,0,0,3,248,24,193,140,24,193,248,24,1,128,60,0,0,0,0,0,0,0,116,8,193,132,24,1,128,24,0,132,7,128,0,0,0,0,0,3,252,38,64,96,6,0,96,6,0,96,15,0,0,0,0,0,0,3,198,24,64,200,6,128,48,2,2,64,24,0,0,0,0,0,0,0,240,6,1,248,54,195,108,31,128,96,15,0,0,0,0,0,0,3,220,24,128,208,6,0,112,9,129,12,57,224,0,0,0,0,0,3,222,24,193,140,24,193,140,24,193,140,63,224,2,0,0,0,0,3,222,24,193,140,24,192,252,0,192,12,1,224,0,0,0,0,0,3,108,54,195,108,54,195,108,54,195,108,127,224,0,0,0,0,0,3,108,54,195,108,54,195,108,54,195,108,127,240,1,0,0,0,0,3,240,38,0,96,7,192,102,6,96,100,15,128,0,0,0,0,0,3,206,24,65,132,30,65,148,25,65,148,62,224,0,0,0,0,0,3,192,24,1,128,31,129,140,24,193,140,63,128,0,0,0,0,0,1,112,24,129,76,7,192,76,0,193,8,15,0,0,0,0,0,0,7,152,50,67,102,62,99,102,50,67,24,120,0,0,0,0,0,0,0,254,24,193,140,15,192,108,12,193,140,61,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,1,16,15,1,16,17,0,244,1,128,0,0,0,0,0,128,240,16,1,0,30,1,16,17,1,16,14,0,0,0,0,0,0,0,0,30,0,144,9,0,224,9,0,144,30,0,0,0,0,0,0,0,0,31,128,136,8,0,128,8,0,128,28,0,0,0,0,0,0,0,0,15,192,72,4,128,72,4,128,72,15,193,2,0,0,0,0,0,0,0,0,240,16,129,248,16,1,8,15,0,0,0,0,0,0,1,8,6,0,144,16,129,248,16,1,8,15,0,0,0,0,0,0,0,0,18,64,168,10,128,112,10,128,168,18,64,0,0,0,0,0,0,0,7,0,136,0,128,48,0,128,136,7,0,0,0,0,0,0,0,0,59,129,16,19,1,80,25,1,16,59,128,0,0,0,0,9,0,96,57,193,8,17,129,40,20,129,136,57,192,0,0,0,0,0,0,0,29,128,144,10,0,192,10,0,144,29,128,0,0,0,0,0,0,0,15,192,72,4,128,72,4,128,72,25,192,0,0,0,0,0,0,0,48,97,140,24,193,84,21,65,36,56,224,0,0,0,0,0,0,0,29,192,136,8,128,248,8,128,136,29,192,0,0,0,0,0,0,0,6,0,144,16,129,8,16,128,144,6,0,0,0,0,0,0,0,0,31,192,136,8,128,136,8,128,136,29,192,0,0,0,0,0,0,0,15,1,136,8,128,136,8,128,240,8,0,128,28,0,0,0,0,0,6,0,144,16,1,0,16,128,144,6,0,0,0,0,0,0,0,0,31,193,36,2,0,32,2,0,32,7,0,0,0,0,0,0,0,0,25,192,136,8,128,80,5,0,32,36,1,128,0,0,0,2,0,96,2,0,248,18,65,36,18,65,36,15,128,32,7,0,0,0,0,0,29,192,136,5,0,32,5,0,136,57,192,0,0,0,0,0,0,0,29,192,136,8,128,136,8,128,136,31,192,4,0,0,0,0,0,0,51,129,16,17,0,240,1,0,16,3,128,0,0,0,0,0,0,0,55,97,36,18,65,36,18,65,36,63,224,0,0,0,0,0,0,0,55,97,36,18,65,36,18,65,36,63,224,2,0,0,0,0,0,0,56,2,128,8,0,240,8,128,136,15,0,0,0,0,0,0,0,0,56,225,4,16,65,228,17,65,20,30,224,0,0,0,0,0,0,0,24,0,128,8,0,240,8,128,136,15,0,0,0,0,0,0,0,0,15,1,8,0,128,120,0,129,8,15,0,0,0,0,0,0,0,0,57,129,36,18,65,228,18,65,36,57,128,0,0,0,0,0,0,0,7,128,136,8,128,120,2,128,72,29,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,240,0,0,0,15,1,16,17,1,16,17,0,240,0,0,0,1,0,32,4,0,240,17,1,16,17,1,16,15,0,0,0,0,0,17,0,160,4,0,240,17,1,16,17,1,16,15,0,0,0,0,0,8,0,64,2,0,240,17,1,16,17,1,16,15,0,0,0,0,0,0,0,248,0,0,112,8,128,248,8,0,136,7,0,0,0,0,0,1,0,32,4,0,112,8,128,248,8,0,136,7,0,0,0,0,0,8,128,80,2,0,112,8,128,248,8,0,136,7,0,0,0,0,0,4,0,32,1,0,112,8,128,248,8,0,136,7,0,0,0,0,0,0,0,248,0,0,32,2,0,32,2,0,32,2,0,0,0,0,0,1,0,32,4,0,32,2,0,32,2,0,32,2,0,0,0,0,0,8,128,80,2,0,0,2,0,32,2,0,32,2,0,0,0,0,0,4,0,32,1,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,0,248,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,1,0,32,4,0,112,8,128,136,8,128,136,7,0,0,0,0,0,8,128,80,2,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,0,32,1,0,112,8,128,136,8,128,136,7,0,0,0,0,0,0,0,248,0,0,136,8,128,136,8,128,152,6,128,0,0,0,0,1,0,32,4,0,136,8,128,136,8,128,152,6,128,0,0,0,0,8,128,80,2,0,136,8,128,136,8,128,152,6,128,0,0,0,0,4,0,32,1,0,136,8,128,136,8,128,152,6,128,0,0,0,0,1,0,32,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,5,0,32,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,4,0,32,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,0,0,0,8,128,0,8,128,136,8,128,152,6,128,0,0,0,0,2,0,80,8,128,112,8,128,248,8,0,136,7,0,0,0,0,0,0,0,0,0,0,120,8,128,136,8,128,136,7,128,0,0,0,0,2,0,64,0,1,88,26,65,36,18,65,36,18,64,0,0,0,0,1,0,32,0,0,176,12,128,136,8,128,136,8,128,0,0,0,0,5,0,32,0,0,176,12,128,136,8,128,136,8,128,0,0,0,0,2,0,16,0,0,176,12,128,136,8,128,136,8,128,0,0,0,0,2,0,240,16,128,240,4,0,248,16,65,4,15,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,16,3,252,0,64,4,0,64,4,0,64,40,1,0,0,0,0,64,8,1,252,0,64,8,2,128,16,2,128,64,8,0,0,0,0,0,0,1,252,16,65,4,16,65,4,16,64,0,0,0,0,0,0,0,63,225,0,16,1,0,16,1,0,16,0,254,0,0,0,0,0,128,8,1,252,2,64,36,4,64,68,8,65,40,33,0,0,0,0,32,2,1,252,2,0,32,4,0,136,31,192,4,0,0,0,0,1,248,1,0,32,7,192,4,0,64,4,0,64,40,1,0,0,0,0,32,10,0,160,31,192,36,4,64,68,8,65,20,32,128,0,0,0,0,2,64,72,9,1,32,18,0,144,4,128,36,0,0,0,0,0,0,63,224,64,8,0,248,0,64,4,0,64,40,1,0,0,0,0,0,31,225,0,16,1,0,16,1,0,32,2,0,64,0,0,0,0,8,8,128,136,8,128,152,10,128,200,0,128,8,0,128,0,0,0,32,2,0,64,8,1,0,8,0,64,2,0,32,0,0,0,0,0,0,63,224,32,2,0,32,2,0,32,2,0,32,0,0,0,0,0,32,18,65,36,18,65,36,31,192,32,2,3,254,0,0,0,0,0,16,2,0,64,9,1,32,6,0,160,18,0,32,2,0,0,0,0,0,31,192,4,31,193,0,16,1,0,32,2,0,64,0,0,0,0,0,15,128,136,8,128,200,10,128,136,8,128,248,0,0,0,0,0,0,15,128,136,8,128,136,10,128,144,8,0,128,8,0,0,0,0,32,2,3,254,4,0,128,15,128,4,0,64,40,1,0,0,0,0,32,2,0,32,4,0,64,8,0,136,31,192,4,0,0,0,0,1,4,8,128,80,2,0,32,2,0,32,2,0,32,2,0,0,0,0,0,31,192,32,2,0,224,16,1,0,16,0,248,0,0,0,0,0,32,2,3,254,2,0,224,16,1,0,16,64,248,0,0,0,0,0,0,9,0,144,127,224,144,9,0,160,8,0,124,0,0,0,0,0,0,31,192,32,18,3,248,4,64,68,8,65,40,1,0,0,0,0,0,28,0,64,4,0,64,2,0,32,1,0,12,0,0,0,0,0,64,4,128,136,9,1,224,4,0,144,31,128,8,0,0,0,0,0,0,31,128,4,0,128,136,5,0,32,5,0,136,16,0,0,0,1,248,8,128,144,17,1,252,0,64,4,0,128,8,1,0,0,0,0,128,8,0,128,8,0,252,0,64,4,0,128,8,0,0,0,0,0,64,4,0,64,63,224,64,5,0,144,9,1,14,0,0,0,0,0,0,2,0,32,4,0,64,8,1,0,31,192,0,0,0,0,0,0,0,9,0,144,9,0,144,9,1,17,17,18,15,0,0,0,0,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,0,0,0,0,0,129,8,8,128,80,3,0,48,4,129,132,0,0,0,0,0,0,0,65,4,16,65,4,16,65,252,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,255,127,240,0,0,0,0,0,0,0,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,6,0,96,6,0,96,6,0,96,6,0,96,6,0,96,6,0,96,0,0,0,0,0,0,0,7,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,119,119,112,0,0,0,0,0,0,0,2,0,32,2,0,0,2,0,32,2,0,0,2,0,32,2,0,0,6,0,96,6,0,0,6,0,96,6,0,0,6,0,96,6,0,0,0,0,0,0,0,0,0,7,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,119,119,0,0,0,0,0,0,0,0,0,2,0,32,2,0,0,2,0,32,2,0,0,2,0,32,2,0,0,3,0,48,3,0,0,3,0,48,3,0,0,3,0,48,3,0,0,0,0,0,0,0,0,0,0,63,2,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,0,63,3,240,32,2,0,32,2,0,32,0,0,0,0,0,0,0,0,63,3,0,48,3,0,48,3,0,48,0,0,0,0,0,0,0,0,63,3,240,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,224,2,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,224,126,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,224,6,0,96,6,0,96,6,0,96,0,0,0,0,0,0,0,7,224,126,0,96,6,0,96,6,0,96,2,0,32,2,0,32,2,0,63,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,3,240,63,0,0,0,0,0,0,0,0,0,3,0,48,3,0,48,3,0,63,0,0,0,0,0,0,0,0,0,3,0,48,3,0,48,3,240,63,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,224,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,126,7,224,0,0,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,224,0,0,0,0,0,0,0,0,0,6,0,96,6,0,96,126,7,224,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,0,63,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,63,3,240,32,2,0,32,2,0,32,3,0,48,3,0,48,3,0,63,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,63,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,0,63,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,240,63,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,0,63,3,240,48,3,0,48,3,0,48,3,0,48,3,0,48,3,0,63,3,240,48,3,0,48,3,0,48,2,0,32,2,0,32,2,7,224,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,224,126,0,32,2,0,32,2,0,32,3,0,48,3,0,48,3,7,240,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,240,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,240,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,127,7,240,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,224,127,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,240,127,0,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,255,2,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,126,0,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,3,240,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,127,240,32,2,0,32,2,0,32,0,0,0,0,0,0,0,7,255,3,0,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,255,126,0,96,6,0,96,6,0,96,0,0,0,0,0,0,0,7,255,3,240,48,3,0,48,3,0,48,0,0,0,0,0,0,0,7,255,127,240,48,3,0,48,3,0,48,2,0,32,2,0,32,2,7,255,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,126,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,3,240,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,127,240,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,0,0,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,124,0,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,7,240,0,0,0,0,0,0,0,6,0,96,6,0,96,6,7,255,127,240,0,0,0,0,0,0,0,2,0,32,2,0,32,2,7,255,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,126,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,3,240,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,127,240,32,2,0,32,2,0,32,3,0,48,3,0,48,3,7,255,2,0,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,3,0,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,126,0,32,2,0,32,2,0,32,3,0,48,3,0,48,3,7,255,3,240,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,127,0,48,3,0,48,3,0,48,2,0,32,2,0,32,2,7,255,3,240,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,127,240,32,2,0,32,2,0,32,2,0,32,2,0,32,2,7,255,127,240,48,3,0,48,3,0,48,3,0,48,3,0,48,3,7,255,127,0,48,3,0,48,3,0,48,6,0,96,6,0,96,6,7,255,7,240,96,6,0,96,6,0,96,3,0,48,3,0,48,3,7,255,127,240,48,3,0,48,3,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,3,248,115,199,188,251,239,190,251,231,28,127,195,248,14,0,0,14,3,248,113,198,236,254,239,30,239,230,12,127,195,248,14,0,0,14,3,248,113,198,236,249,239,238,238,231,28,127,195,248,14,0,0,14,3,248,121,199,156,245,238,222,224,231,220,127,195,248,14,0,0,14,3,248,96,198,252,225,239,238,238,231,28,127,195,248,14,0,0,14,3,248,113,198,252,225,238,238,238,231,28,127,195,248,14,0,0,14,3,248,96,198,220,251,239,190,251,231,188,127,195,248,14,0,0,14,3,248,115,198,220,237,239,62,237,230,220,115,195,248,14,0,0,14,3,248,113,198,236,238,239,14,254,231,28,127,195,248,14,0,0,14,3,248,127,197,204,155,109,182,219,101,180,76,195,248,14,0,0,14,3,248,110,196,204,238,238,238,238,228,68,127,195,248,14,0,0,14,3,248,108,196,180,239,110,206,235,228,4,127,195,248,14,0,0,14,0,144,127,197,20,171,171,226,139,167,204,75,67,24,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,3,24,64,68,4,128,43,250,128,36,4,64,67,24,14,0,0,14,3,24,64,69,244,128,40,2,128,39,252,64,67,24,14,0,0,14,3,24,64,69,244,128,41,226,128,39,252,64,67,24,14,0,0,14,3,24,127,196,172,202,173,170,227,164,12,127,195,24,14,0,0,14,3,24,95,196,68,159,40,82,137,39,252,64,67,24,14,0,0,14,3,24,72,68,68,191,168,2,146,37,20,96,195,24,14,0,0,14,3,24,80,69,52,156,47,2,144,37,20,95,67,24,14,0,0,14,3,24,68,69,68,148,41,66,162,36,20,64,67,24,14,0,0,14,3,152,72,71,228,138,41,42,146,165,60,96,67,24,14,0,0,14,3,24,76,69,60,254,170,138,186,166,172,88,195,152,14,0,0,14,3,184,74,68,164,186,42,34,186,36,164,74,67,24,14,0,0,14,3,56,95,197,84,183,169,18,159,165,20,111,195,24,14,0,0,161,10,254,169,78,254,137,14,254,173,43,126,181,43,126,181,42,84,34,3,34,39,228,66,121,74,16,247,66,84,41,34,18,51,2,0,67,231,170,147,239,128,171,234,170,251,234,170,251,224,8,59,236,8,95,224,130,191,169,18,191,168,2,191,170,10,191,170,10,191,168,4,254,136,168,170,248,186,254,168,170,138,170,170,138,207,233,10,19,31,241,1,40,148,73,254,176,40,64,247,193,144,223,225,16,82,130,198,71,228,66,71,231,66,87,232,62,197,44,82,74,165,66,103,164,6,33,7,128,87,234,66,249,74,254,250,138,168,250,128,16,57,12,108,33,7,254,89,10,254,249,42,254,249,42,254,249,64,152,53,108,50,32,130,127,37,66,127,165,91,127,167,82,100,39,117,104,134,0,159,75,239,200,73,7,190,74,39,170,74,175,234,2,165,20,202,32,192,17,7,190,74,71,212,64,136,54,31,129,8,31,129,8,31,129,8,18,15,254,18,2,18,245,66,80,249,135,68,168,167,74,33,79,162,255,232,2,255,232,0,145,235,240,193,9,254,228,74,130,164,74,68,4,5,255,80,21,85,241,21,125,81,21,85,65,7,255,194,136,68,56,142,8,34,175,220,112,138,148,34,32,64,255,232,66,132,168,68,32,135,158,32,143,190,81,79,190,81,79,190,0,15,190,81,69,150,255,232,64,255,202,72,213,72,162,145,15,254,32,2,74,160,137,248,15,1,248,62,198,206,234,254,175,234,254,135,110,227,252,31,128,240,16,1,2,95,229,42,254,160,62,150,41,96,174,12,96,253,224,0,39,255,213,39,255,73,32,143,62,112,134,191,233,10,32,36,34,255,39,255,213,39,255,36,37,111,116,39,119,84,111,90,214,167,66,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,33,15,254,41,15,252,8,7,104,255,224,8,248,136,136,248,128,48,65,68,127,65,79,127,65,15,63,68,159,255,84,151,127,68,148,79,32,130,20,170,42,193,175,250,136,175,250,200,186,170,44,192,136,127,34,35,255,66,167,20,162,34,65,251,226,0,39,242,65,52,18,127,0,128,63,248,136,191,168,138,255,170,26,191,170,18,63,82,24,163,23,195,36,226,66,40,243,2,40,42,79,34,34,34,52,66,132,32,8,1,222,233,42,148,189,138,148,191,78,146,9,32,146,17,193,16,2,15,255,16,14,254,136,44,254,129,13,255,133,65,146,104,200,195,18,1,252,34,3,254,2,5,20,81,71,223,146,65,4,255,241,4,32,47,204,33,15,194,136,207,144,80,103,232,0,15,254,37,4,204,18,69,100,58,81,62,250,67,164,54,69,36,146,193,53,18,32,0,64,3,126,16,40,2,138,42,130,169,40,170,140,171,58,128,40,14,23,225,16,249,193,20,49,67,164,82,73,36,18,65,124,16,65,62,64,43,252,164,132,25,127,229,40,159,96,163,63,226,36,63,196,44,2,3,223,4,78,78,190,74,78,190,74,95,232,64,132,16,66,4,15,255,165,47,82,146,79,36,165,250,69,248,80,69,63,80,71,127,248,196,48,49,15,144,169,202,176,249,10,158,255,10,144,169,26,143,79,255,20,79,250,49,165,42,144,243,2,255,51,142,84,41,50,145,8,7,238,8,175,235,131,7,223,33,23,202,84,71,228,2,175,169,17,15,255,17,0,255,64,132,126,100,36,126,68,38,126,66,128,68,2,15,255,0,3,252,32,79,255,160,90,245,41,66,244,32,66,12,0,0,0,255,224,0,0,15,254,0,0,0,0,15,254,0,0,0,65,39,255,137,73,127,253,90,213,254,58,255,252,16,127,60,28,0,15,240,129,239,250,129,175,250,84,238,154,14,170,90,239,224,10,165,5,78,84,189,106,84,161,10,254,161,10,16,255,234,16,1,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,68,68,68,78,68,68,68,74,70,164,154,104,169,17,34,16,193,7,0,144,16,1,96,25,1,8,16,128,144,6,0,0,6,0,96,20,146,73,71,244,24,242,130,127,68,143,254,4,129,126,228,128,127,65,2,127,34,175,190,17,66,127,113,74,255,35,98,88,33,98,51,2,130,40,47,226,170,191,234,170,63,242,72,38,66,66,40,50,2,64,4,223,69,15,16,65,5,144,105,12,48,69,6,144,73,12,159,32,130,63,2,159,191,16,130,127,104,11,63,42,18,41,34,146,20,103,226,80,7,240,72,228,82,99,32,2,126,36,34,126,80,8,255,4,0,64,4,0,64,4,0,64,4,0,64,4,2,64,20,0,128,13,240,164,254,136,159,233,88,149,233,90,181,172,78,138,149,26,97,253,242,138,17,255,245,51,245,68,81,249,4,144,225,4,81,242,0,0,7,158,0,0,0,0,7,158,0,0,0,0,7,158,0,0,0,65,5,255,66,14,40,68,132,255,88,150,137,200,152,141,0,160,8,0,14,0,16,0,128,4,0,32,1,0,8,0,64,3,0,0,0,32,130,127,37,26,146,162,139,42,38,194,168,42,66,172,35,50,34,242,2,63,34,20,65,72,95,109,213,93,109,84,87,125,64,16,6,0,207,144,39,242,65,68,20,127,246,61,85,84,149,85,86,23,66,0,0,63,240,137,8,151,233,18,145,47,18,145,32,18,7,240,0,31,224,40,226,138,40,162,138,40,226,138,72,4,144,137,8,145,7,1,0,30,1,0,255,233,26,156,171,42,191,170,14,255,170,1,63,34,162,127,170,170,128,175,250,201,168,154,190,186,172,42,130,192,8,73,244,145,255,21,42,114,173,74,84,68,132,84,69,106,213,21,33,16,7,222,68,167,202,68,175,254,146,175,234,146,175,234,40,172,159,36,34,52,32,207,146,38,34,136,55,230,8,34,162,73,162,132,16,40,66,68,241,82,21,41,66,164,48,86,69,164,82,198,37,196,96,65,4,255,242,148,254,66,132,254,98,141,255,73,37,125,65,9,255,2,128,36,255,224,32,122,4,160,74,7,144,1,0,9,240,80,3,4,15,255,36,130,72,85,72,226,255,244,68,66,228,48,72,231,4,241,9,255,145,15,148,151,41,149,251,137,16,146,143,68,4,32,129,2,36,20,79,228,146,239,228,146,79,228,16,95,246,16,193,0,16,32,159,42,34,130,76,49,54,34,164,82,37,36,162,17,162,4,64,32,132,127,124,24,127,244,2,123,244,210,105,36,146,173,56,146,18,34,68,255,112,136,255,240,130,255,36,159,255,32,2,127,36,19,127,2,0,63,252,10,255,170,26,191,250,26,190,173,90,149,170,95,203,132,47,254,8,15,254,18,6,152,255,226,64,127,128,64,127,192,64,18,97,88,8,99,3,40,90,45,48,164,209,130,15,255,7,0,168,24,78,8,35,255,177,170,90,162,171,250,129,171,251,1,32,82,3,33,4,63,66,9,72,240,162,46,67,175,234,2,195,169,194,16,31,16,162,9,56,132,127,120,137,28,18,175,170,20,145,73,16,129,136,240,137,127,144,137,80,243,218,42,37,91,156,160,138,255,176,140,8,2,4,255,72,30,255,77,94,255,207,236,162,75,228,154,75,68,211,69,6,188,73,1,184,41,12,190,64,3,252,16,128,144,6,3,158,8,14,95,160,26,129,235,218,145,235,218,145,171,222,129,168,88,130,127,244,16,65,228,16,95,245,17,81,197,113,83,249,36,162,90,67,0,7,248,64,132,8,64,132,8,127,132,8,64,4,0,64,3,254,251,224,162,234,32,170,234,170,170,170,174,136,169,136,153,10,145,71,32,2,126,36,47,194,39,231,66,108,10,127,164,18,65,39,242,65,93,245,81,245,21,81,84,167,74,200,164,68,74,69,26,97,28,97,70,116,170,79,254,170,95,244,170,111,244,170,207,244,34,65,204,99,2,7,255,74,5,46,82,37,174,82,37,254,72,72,72,131,0,204,136,47,254,1,79,255,129,11,212,129,107,244,144,139,85,210,91,67,252,130,20,57,162,165,79,228,162,171,225,162,19,226,42,34,68,58,255,240,16,169,250,148,170,74,164,168,72,132,16,65,4,32,68,12,224,10,254,160,14,0,191,250,16,225,10,84,165,42,146,169,27,17,2,0,32,18,1,32,18,1,32,18,1,32,18,1,32,2,0,32,64,68,4,68,68,68,68,68,68,68,68,68,68,68,68,64,68,4,16,1,128,35,2,32,20,0,224,17,1,16,17,1,16,14,0,0,33,74,127,161,79,138,167,242,20,42,35,85,97,74,127,33,66,36,226,130,36,175,250,82,165,207,83,21,197,145,153,97,24,83,19,79,65,7,190,148,34,4,255,250,201,255,250,148,249,64,20,58,92,71,32,15,128,71,245,20,145,79,148,17,67,148,210,65,37,20,81,67,68,246,233,138,174,234,74,196,236,232,164,137,74,148,205,72,166,8,4,241,233,82,149,239,82,159,233,80,245,105,84,151,177,153,17,35,32,15,158,137,47,158,137,47,158,146,42,68,255,240,224,21,6,72,35,242,36,170,74,191,170,90,165,170,90,165,170,91,201,196,152,146,47,242,162,47,202,164,175,250,238,171,90,181,169,10,222,181,13,255,254,0,30,125,4,92,125,64,20,255,202,180,255,73,60,146,89,99,255,248,173,137,221,169,168,138,148,174,186,176,217,204,64,131,144,7,5,2,72,63,244,80,197,36,146,73,68,152,75,4,208,81,22,15,68,71,252,0,7,254,4,3,252,4,15,254,17,15,255,33,2,16,233,58,84,191,250,56,229,74,147,181,30,64,191,250,200,227,138,70,127,20,149,255,212,149,127,80,133,127,84,149,127,210,37,28,22,57,64,135,8,64,248,8,243,244,33,66,31,63,66,4,64,68,6,128,32,242,8,255,242,190,104,151,190,170,170,190,41,2,255,41,19,35,16,7,248,68,132,72,127,132,72,68,143,254,64,136,8,128,136,48,136,143,248,0,7,248,0,135,248,0,143,255,36,65,80,36,140,199,67,228,34,254,168,106,42,162,42,178,170,148,165,66,85,38,86,67,47,242,149,105,84,255,194,4,126,68,36,162,73,37,20,80,132,16,4,0,127,234,10,168,163,202,32,163,202,32,233,26,133,24,64,124,16,1,192,16,15,224,149,255,145,144,171,202,164,75,196,164,175,241,2,15,255,34,4,190,68,95,200,83,69,79,89,21,106,120,68,12,32,130,63,36,34,0,248,202,184,168,250,184,248,130,73,60,158,39,33,64,127,253,65,127,32,7,62,170,34,162,35,226,34,34,34,62,64,7,191,162,18,33,250,18,63,170,26,132,169,47,161,140,16,0,64,133,255,242,84,252,66,77,255,69,68,186,81,20,84,201,32,48,4,49,252,228,138,136,170,142,175,175,174,42,191,170,42,226,170,42,32,135,239,161,65,34,32,18,63,250,2,191,50,38,34,36,46,130,37,242,113,101,29,234,68,165,68,86,68,108,69,36,99,84,36,128,245,66,255,37,71,84,79,248,145,209,35,124,37,68,84,133,128,16,4,15,255,34,7,254,132,7,255,33,140,68,10,35,20,224,131,134,16,14,255,40,18,255,252,162,170,124,58,168,171,226,200,47,242,136,73,32,254,33,10,255,33,4,254,73,40,146,143,232,17,129,248,225,127,128,64,255,234,82,63,66,80,63,1,4,127,224,65,54,4,254,34,2,63,68,36,132,192,132,255,64,20,255,64,20,1,64,20,255,36,2,255,57,20,85,71,220,37,76,36,127,65,20,85,71,212,19,33,2,31,34,43,68,160,138,127,32,18,1,39,242,1,32,18,127,36,2,255,41,18,85,183,218,37,172,34,127,33,18,85,39,210,19,79,244,149,73,94,255,66,69,231,98,76,230,66,69,231,66,72,36,121,4,255,73,7,144,79,244,160,127,244,130,72,68,164,73,137,140,244,34,4,47,116,76,247,117,90,85,37,95,89,37,149,125,85,168,7,238,66,167,234,82,161,10,255,169,26,169,234,88,197,8,80,130,15,255,4,145,169,41,156,143,8,47,251,8,164,250,72,180,140,255,34,95,230,38,199,181,34,82,35,248,130,255,40,131,136,32,130,8,61,244,132,144,143,223,129,31,213,165,91,85,169,90,21,168,171,9,81,207,162,85,23,36,39,239,128,175,122,145,253,82,51,253,210,51,32,1,254,129,4,255,66,129,40,34,142,40,36,146,135,40,0,0,144,5,255,10,171,255,10,163,255,80,43,255,162,169,82,137,249,2,0,131,255,160,10,64,167,242,149,113,90,37,36,148,145,82,24,65,248,2,3,255,215,9,170,82,22,80,136,179,170,23,59,170,22,63,245,73,255,145,15,255,154,89,126,157,47,126,149,41,126,144,2,127,242,137,254,145,47,18,159,233,144,255,249,49,149,25,149,145,43,16,225,2,16,175,234,18,161,47,18,31,241,16,82,137,36,20,38,129,0,0,0,1,0,32,6,0,192,24,3,128,48,0,0,0,0,0,243,225,34,147,233,34,147,233,0,255,240,168,106,248,168,45,129,15,1,15,255,68,20,127,73,168,84,250,45,125,88,5,127,121,68,50,65,7,223,146,65,252,4,47,255,9,3,40,76,99,17,6,1,140,1,64,255,241,66,127,37,82,127,112,13,127,84,21,127,116,20,127,32,130,127,168,138,255,171,106,225,169,10,191,174,47,148,136,128,22,32,2,195,53,228,66,116,42,139,46,175,42,42,242,64,43,3,15,34,162,28,127,248,156,126,69,120,126,37,94,126,32,62,170,42,126,33,15,145,33,111,24,39,255,148,41,66,146,57,34,16,33,66,24,40,66,132,67,245,4,204,68,68,68,164,73,69,20,96,74,5,31,33,2,254,41,4,127,66,76,126,89,4,254,73,4,255,85,4,63,33,2,126,37,35,126,175,226,68,63,243,85,63,242,84,38,115,253,64,132,62,251,41,42,34,34,164,251,240,129,251,208,129,8,95,130,65,7,254,146,37,126,126,34,126,66,7,255,171,95,181,34,164,68,255,249,4,254,73,4,252,76,84,253,76,84,168,73,196,161,76,8,15,128,128,255,232,132,190,136,140,191,234,82,213,40,162,181,40,134,33,196,20,125,76,84,165,66,148,41,65,21,41,84,98,129,0,15,80,133,127,80,135,24,17,193,44,242,165,74,80,149,137,144,137,8,4,78,68,68,68,68,228,68,68,70,164,154,104,169,17,34,16,193,34,132,16,134,143,255,36,4,144,159,238,146,9,34,146,201,160,148,33,3,16,65,9,254,249,34,146,73,40,254,249,32,146,121,40,254,128,20,255,128,26,73,164,157,85,205,88,225,255,152,65,255,216,3,47,248,129,159,26,33,255,152,73,191,216,73,191,152,65,148,24,131,64,135,127,144,138,126,249,10,255,250,42,255,250,32,62,58,44,62,2,15,255,128,19,254,0,15,255,42,68,67,63,130,72,11,3,14,8,129,255,8,142,80,175,235,144,175,238,144,175,250,72,3,1,207,0,79,136,11,241,33,98,31,191,10,25,33,83,242,33,80,8,255,65,4,127,122,41,36,255,250,201,255,250,144,169,239,146,2,170,196,36,68,68,116,72,68,244,114,116,36,79,68,36,67,85,38,82,67,64,135,191,146,146,42,250,138,191,170,31,178,170,207,164,4,207,147,64,132,127,121,40,140,151,255,201,175,255,136,168,239,146,1,47,102,16,15,255,16,79,228,0,207,206,133,95,212,72,79,228,132,79,223,9,15,254,9,9,254,66,132,254,10,170,254,223,244,80,73,101,52,33,79,128,175,250,148,169,74,255,169,74,148,169,66,36,34,66,68,142,43,4,2,242,169,148,211,139,82,135,239,72,27,237,136,25,67,34,79,175,34,223,251,170,154,170,250,243,41,170,250,73,36,146,146,46,66,136,248,242,245,106,103,164,170,74,164,42,162,169,42,147,57,66,7,126,68,40,126,244,36,126,64,143,234,66,197,75,104,164,48,4,0,124,4,7,254,64,39,254,2,15,255,130,24,81,152,158,3,64,230,240,72,0,128,15,252,136,72,132,136,72,132,136,112,133,8,69,36,81,249,37,28,99,4,255,212,20,127,68,20,127,68,24,127,0,0,0,0,52,108,108,108,60,12,12,28,0,0,0,108,56,48,47,242,16,63,245,17,141,206,16,63,244,32,239,240,169,42,156,130,244,130,79,63,18,128,73,247,229,218,101,180,83,71,52,85,196,70,7,240,1,243,249,1,151,249,2,159,249,34,241,41,18,0,32,12,98,148,41,146,158,41,34,148,41,130,159,41,2,151,41,132,144,73,32,130,127,32,143,127,36,23,0,107,250,2,160,66,255,32,66,28,40,64,68,3,248,4,160,67,196,68,168,73,133,8,192,146,8,31,244,185,42,146,201,255,248,26,189,42,91,165,171,218,161,184,92,130,18,142,40,42,143,106,98,138,44,182,170,170,50,130,73,36,146,135,71,247,4,68,72,68,247,244,12,241,68,20,66,68,68,105,68,8,50,252,117,106,82,117,242,146,109,83,41,16,55,245,16,18,130,70,8,143,255,18,65,58,46,36,30,255,224,64,127,248,160,17,130,4,32,130,255,40,20,126,64,136,126,228,162,126,68,175,126,1,79,34,32,129,63,255,24,169,34,146,37,254,36,191,72,19,61,40,20,66,255,249,16,151,206,68,167,234,169,191,217,6,159,201,4,159,200,80,136,143,255,136,128,248,208,71,117,85,103,119,64,4,36,105,38,73,2,0,32,226,138,76,164,138,144,177,11,32,162,46,79,171,144,192,16,133,158,80,133,63,253,64,63,149,74,255,180,13,126,253,88,39,2,3,255,33,10,255,105,18,156,111,42,255,172,2,255,76,9,127,65,7,158,162,66,136,127,226,136,47,130,0,255,240,40,10,65,34,145,6,16,103,233,82,23,227,82,87,233,16,17,194,41,172,84,3,39,232,2,191,168,162,191,170,170,191,168,66,191,168,66,191,168,4,63,242,164,79,248,8,239,242,2,79,232,2,239,224,145,116,41,62,2,128,255,224,4,255,72,36,124,241,4,124,65,4,24,113,72,254,5,161,108,245,132,164,81,37,255,80,31,254,65,4,252,97,73,255,73,37,36,9,40,127,132,20,127,0,4,255,200,156,255,136,8,127,1,15,255,168,170,255,200,170,191,170,156,191,138,152,191,138,153,43,255,251,217,173,89,57,156,154,149,139,251,203,170,155,253,128,31,255,34,47,255,33,69,127,149,95,213,21,81,99,60,29,127,20,17,127,63,2,16,255,11,191,225,27,242,164,175,228,170,75,234,171,47,225,145,6,44,68,58,253,24,7,113,149,81,117,21,81,117,165,84,82,32,66,31,121,148,149,145,87,209,5,32,95,124,16,93,4,23,194,33,5,104,71,232,129,247,228,90,247,229,255,90,158,255,90,222,130,148,198,10,223,227,84,214,115,66,223,129,72,19,129,255,0,23,246,66,15,191,69,7,190,148,133,127,41,39,248,73,135,255,0,31,246,4,15,255,4,2,72,36,133,84,85,41,65,10,1,16,32,132,6,79,244,129,236,84,165,73,150,137,201,148,165,72,84,129,72,88,130,79,244,129,236,84,165,73,158,137,201,148,165,72,20,129,72,84,130,252,8,127,197,10,208,253,9,92,213,77,92,253,72,85,133,216,87,248,130,127,68,42,128,51,229,0,159,243,8,82,161,73,112,130,16,64,4,0,64,4,0,64,2,0,32,1,0,8,0,98,1,160,6,66,132,254,242,132,126,242,132,126,245,37,126,85,38,255,68,36,76,64,255,116,69,74,84,165,79,84,37,39,82,37,146,149,43,226,148,34,2,63,244,130,127,240,153,79,247,128,0,63,226,146,41,47,255,136,133,8,248,130,8,39,255,136,32,143,191,34,18,33,66,24,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+15762);
/* memory initializer */ allocate([17,15,255,17,0,30,254,0,32,255,240,32,127,228,2,127,228,2,227,226,34,163,234,42,160,143,127,20,145,85,85,25,97,84,18,66,39,228,66,135,238,82,33,4,255,137,30,169,12,82,129,200,80,130,255,248,1,17,34,8,68,67,252,4,7,254,4,3,252,4,7,254,0,143,4,23,241,64,244,8,64,132,14,64,36,2,128,168,5,0,79,242,129,47,240,145,137,20,253,9,18,153,41,92,255,72,20,255,0,65,255,0,14,255,168,26,255,169,26,41,164,106,194,245,26,96,241,65,20,151,121,20,145,73,119,249,64,148,111,120,148,9,67,20,65,71,255,164,186,105,45,212,255,84,5,127,86,26,127,182,16,191,129,4,254,5,65,255,164,74,0,47,228,130,201,40,146,130,200,194,64,135,136,131,239,8,32,130,127,248,130,8,37,66,162,52,18,128,16,63,252,18,149,85,184,2,191,68,42,4,63,244,68,184,70,200,19,241,8,253,8,126,34,175,234,74,164,170,48,130,148,78,56,65,16,143,255,16,131,252,73,8,96,61,252,66,127,240,64,36,132,132,34,170,255,170,170,136,175,250,201,171,234,170,186,172,42,130,192,8,252,225,10,96,161,49,172,4,128,189,242,169,72,88,134,8,67,27,255,248,1,255,248,100,138,107,28,150,136,156,150,186,74,155,136,16,127,244,1,64,23,255,64,4,0,95,245,1,144,25,1,159,241,1,4,79,240,4,255,240,65,116,192,100,119,240,68,116,165,81,126,21,8,79,228,148,127,228,148,73,223,129,27,241,164,169,138,148,74,42,255,240,64,10,0,144,16,130,70,68,56,65,4,0,64,4,0,64,15,207,36,146,121,65,153,89,18,159,255,56,147,72,82,9,16,17,23,206,36,34,127,65,100,22,21,185,42,255,163,130,52,37,34,209,0,15,159,0,0,0,0,15,255,0,0,0,0,15,255,0,0,0,36,71,255,133,47,255,33,143,255,34,2,255,36,18,127,36,19,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,7,159,146,68,32,39,241,73,135,244,73,23,244,40,199,244,8,0,15,255,0,0,0,0,15,159,0,0,0,0,15,159,0,0,0,2,79,47,159,153,13,245,184,89,143,175,40,210,253,241,114,213,35,255,72,79,135,152,77,191,154,157,170,171,200,170,250,205,170,157,51,248,129,72,23,242,72,120,134,255,169,194,172,42,130,202,56,146,9,17,15,254,17,2,127,185,10,62,254,162,42,170,161,8,33,76,98,34,131,164,74,68,255,242,2,62,242,34,82,37,67,136,41,67,99,93,36,76,116,152,130,253,212,84,254,53,223,100,172,68,100,169,145,85,71,84,132,249,249,245,149,213,87,95,86,85,37,85,84,151,81,36,68,100,85,249,4,236,66,74,68,159,81,133,19,64,203,249,0,15,255,146,4,64,255,241,4,255,66,10,62,150,79,88,152,128,22,0,142,191,8,144,63,224,149,159,74,186,156,170,175,168,149,0,63,80,133,239,84,207,50,79,230,16,95,252,4,95,244,36,64,76,12,68,5,255,228,68,248,73,244,241,105,92,245,73,85,234,75,25,17,14,3,248,105,198,236,233,238,238,238,230,156,127,195,248,14,0,0,68,4,127,245,84,85,251,93,105,67,85,210,64,148,138,106,37,30,79,255,81,149,31,127,149,31,127,149,31,122,52,69,78,148,51,113,11,242,169,227,27,255,170,90,229,171,154,233,171,95,243,34,82,2,1,15,159,34,34,84,64,132,22,246,157,8,87,245,72,119,245,8,47,242,1,134,24,145,136,153,241,160,24,241,137,24,241,137,88,3,71,244,65,71,247,65,151,250,32,71,244,201,85,54,127,64,20,6,64,2,63,60,64,136,137,248,145,41,84,213,81,84,10,65,20,96,255,17,9,16,146,41,254,152,41,130,159,233,130,152,33,130,31,231,47,242,129,255,242,129,47,243,146,101,74,255,34,130,73,168,149,7,36,143,40,34,130,255,32,147,17,97,90,19,34,18,65,168,85,2,0,143,255,34,146,63,124,132,127,132,12,191,18,145,45,33,36,33,15,254,129,75,216,165,235,218,161,41,210,129,168,22,2,88,0,127,240,65,63,144,73,127,144,79,255,8,128,144,105,248,177,45,17,31,8,40,239,82,160,191,4,44,138,80,132,255,65,132,44,68,182,137,31,129,0,16,1,96,25,0,8,0,129,16,14,0,0,6,0,96,32,15,255,37,85,127,144,15,255,18,17,63,49,77,53,29,33,25,34,34,127,66,39,255,128,143,127,36,159,127,36,146,127,50,66,66,255,241,33,34,159,233,170,155,169,170,155,169,171,79,245,130,80,6,34,130,38,98,68,255,194,132,42,66,164,76,68,132,152,74,149,7,87,255,18,64,196,127,68,151,127,212,149,127,84,149,74,72,8,255,32,132,20,118,56,190,240,2,241,41,95,245,41,82,245,41,19,182,32,79,199,0,72,68,75,255,225,1,47,202,132,72,74,133,31,224,32,130,144,37,235,18,173,234,80,37,227,82,77,228,80,74,8,31,34,143,255,36,130,254,52,134,126,164,130,127,178,52,38,37,129,134,72,79,255,72,4,159,255,25,63,254,25,34,255,240,4,68,72,76,37,34,250,37,79,143,47,151,9,110,166,173,174,170,13,34,146,25,16,133,20,82,39,193,144,1,127,24,131,8,215,241,8,16,129,127,17,14,34,39,255,144,47,247,36,100,42,17,166,66,136,35,18,70,2,14,126,68,68,136,79,228,18,239,244,18,79,228,16,101,8,32,78,175,9,159,234,40,171,132,168,171,83,254,32,34,34,37,32,140,56,140,10,73,27,17,72,79,10,41,31,255,33,31,209,49,20,223,247,233,18,145,47,18,145,41,62,241,41,18,145,47,18,151,240,0,32,130,127,52,42,128,163,234,0,39,242,8,34,162,75,40,146,16,8,143,255,8,128,30,63,2,0,63,242,0,47,194,132,72,68,252,5,14,80,165,75,86,173,138,88,173,79,86,165,64,145,17,18,15,68,14,255,8,31,1,8,145,85,242,81,85,248,219,253,160,30,2,65,7,167,146,95,165,170,90,189,250,90,165,251,80,38,56,76,4,33,2,255,37,79,255,40,22,124,114,10,124,170,66,255,35,130,86,249,64,62,1,79,148,143,255,128,139,225,34,155,230,34,59,236,34,241,18,10,35,242,37,67,247,165,107,250,165,40,66,255,56,66,132,67,39,71,143,153,37,4,34,161,35,226,36,41,66,8,51,98,193,4,15,254,128,47,190,10,14,190,43,111,170,43,111,190,42,30,127,71,119,85,135,127,40,39,242,72,247,226,72,39,242,34,49,194,227,71,247,18,128,143,255,34,175,255,38,50,93,37,82,93,52,82,66,191,243,36,42,74,68,191,242,73,53,99,244,164,74,132,209,170,97,32,143,136,203,250,137,168,153,9,255,240,136,41,76,146,42,17,64,241,225,18,145,233,18,145,233,0,255,240,136,106,248,168,85,130,143,241,1,16,151,233,18,145,41,18,249,32,255,9,6,168,140,67,2,16,143,255,16,129,248,16,143,255,48,205,251,16,129,248,16,130,24,66,135,164,66,15,255,138,15,160,138,79,148,169,130,16,251,146,70,1,3,255,32,74,132,172,70,4,189,242,68,68,68,84,134,64,68,35,242,41,250,154,191,170,159,169,171,242,8,40,130,72,60,140,8,82,151,189,148,155,189,41,86,165,159,209,37,18,80,97,9,19,10,240,129,4,31,255,0,135,248,65,247,249,8,20,161,137,144,134,48,17,15,254,75,36,114,130,164,164,43,241,1,43,210,65,196,16,6,32,143,254,35,47,170,34,175,226,138,79,191,136,31,189,136,24,130,34,242,117,250,82,245,114,150,6,167,130,8,47,242,8,47,242,8,16,15,191,16,159,149,18,47,255,33,1,160,6,1,144,32,140,4,66,14,63,66,4,254,64,38,254,192,36,254,65,4,159,77,9,63,95,244,68,68,78,170,95,244,0,111,236,130,79,228,130,72,40,254,15,242,34,50,36,85,79,127,0,31,242,65,247,240,65,164,21,127,47,244,129,136,30,129,43,212,165,138,94,189,8,18,129,200,96,0,65,7,159,166,67,254,36,67,240,36,130,56,63,226,162,85,72,176,68,4,79,68,20,129,233,21,241,66,20,65,73,23,249,192,16,6,1,5,255,64,4,255,234,148,255,64,4,254,64,7,255,201,64,146,95,246,40,66,137,255,242,149,41,146,159,85,25,51,33,208,81,2,254,18,9,62,150,73,152,146,1,196,51,248,40,131,254,0,47,228,2,7,255,72,135,255,93,198,170,127,244,57,93,104,56,141,64,32,4,7,254,80,135,255,80,133,248,162,171,252,164,75,252,132,27,255,4,7,252,255,250,73,63,162,72,63,129,2,127,240,80,52,132,255,47,4,160,91,249,233,234,146,234,74,169,164,251,64,234,50,172,51,1,15,254,134,47,210,133,47,202,132,79,255,40,31,129,39,157,130,126,4,166,127,143,232,171,239,232,167,243,200,36,147,201,36,159,231,255,224,2,0,32,2,0,32,2,0,32,2,0,32,2,0,160,4,8,0,128,8,0,128,12,0,160,9,0,136,8,128,128,8,0,128,63,2,16,33,2,16,33,2,16,33,2,16,32,164,10,64,104,2,0,7,248,64,132,8,64,132,136,68,132,48,64,4,2,64,55,254,8,0,254,16,33,2,32,68,4,128,128,16,2,0,64,8,3,0,255,232,2,64,66,4,16,128,136,5,0,32,3,0,72,8,67,2,0,0,0,8,72,70,102,68,72,0,0,0,0,0,0,0,0,0,4,0,64,4,2,68,52,38,81,68,152,68,4,96,64,20,0,128,64,2,0,128,4,0,0,14,0,32,2,0,32,2,0,80,8,254,0,15,252,0,64,4,0,71,252,0,64,4,0,79,255,0,64,0,0,0,64,132,40,66,132,47,254,4,0,128,8,1,0,32,12,0,0,7,254,64,36,2,95,164,2,64,36,2,95,164,2,0,0,0,0,0,124,56,0,128,8,0,128,255,224,128,8,0,128,127,224,0,63,194,4,32,67,252,32,66,4,63,194,4,32,66,20,32,128,0,63,128,0,0,15,252,4,0,64,36,130,72,36,130,72,36,0,64,4,3,248,4,135,254,4,131,248,4,3,252,4,0,64,4,0,64,0,1,248,0,128,80,2,0,32,11,128,160,10,0,184,14,1,128,34,3,191,84,132,132,136,64,0,0,0,0,0,0,0,0,0,0,8,96,72,127,240,32,127,224,64,255,240,128,16,1,0,32,4,0,32,129,136,17,7,254,4,3,252,4,15,255,0,0,0,0,0,0,63,130,8,32,131,248,32,131,248,32,2,64,35,2,24,38,199,134,127,196,4,64,68,4,127,192,64,36,2,126,36,2,64,39,239,128,127,224,64,255,248,65,53,192,64,53,192,0,0,0,0,0,0,0,34,9,52,84,79,247,129,71,164,9,241,17,126,161,4,80,162,17,0,7,254,4,0,64,63,192,64,4,15,255,4,0,64,4,0,64,127,192,32,127,192,64,255,240,128,16,2,0,64,8,0,0,0,0,2,128,36,2,79,255,2,0,64,4,0,128,8,1,0,32,4,0,31,193,4,18,65,20,16,79,255,16,65,68,19,66,4,32,68,8,4,0,64,8,3,200,202,193,48,103,9,172,98,56,33,20,0,128,4,0,64,12,33,35,34,70,24,161,2,8,32,130,4,40,55,1,0,4,128,72,68,140,69,4,32,65,5,12,224,52,1,0,0,0,0,0,0,2,0,80,24,134,20,134,65,132,96,72,136,5,0,32,0,0,64,127,196,68,68,71,252,4,15,255,4,0,64,4,0,64,63,194,4,63,194,4,63,194,4,63,194,4,32,79,255,0,0,0,0,1,0,16,1,0,16,1,0,31,129,0,16,1,0,16,1,0,0,0,0,4,0,64,36,2,120,36,2,64,84,8,192,3,224,0,4,0,124,4,3,255,32,2,0,32,2,0,32,2,0,64,4,0,4,3,254,36,34,68,36,2,0,32,2,0,32,2,0,64,4,0,0,32,4,248,128,176,9,1,8,16,130,4,32,100,3,128,16,0,4,8,68,100,99,68,36,128,64,255,224,0,0,0,0,0,0,0,144,68,134,108,66,108,36,128,16,255,240,0,0,0,0,0,0,0,0,0,0,8,64,132,8,64,132,16,65,4,32,68,4,0,64,0,0,4,146,73,36,146,73,36,146,73,36,146,73,32,0,0,0,0,0,0,0,255,234,74,149,41,66,255,224,0,0,0,0,0,0,0,63,242,33,34,19,255,32,2,0,32,2,0,64,4,0,64,8,0,9,0,145,137,20,146,41,67,148,41,128,144,9,0,144,0,0,0,0,0,144,9,4,148,105,36,145,145,17,17,33,2,16,69,8,32,16,0,128,126,0,32,4,0,128,24,6,128,8,0,128,8,0,128,16,1,248,16,130,16,63,230,34,162,34,34,63,226,34,34,35,254,34,1,64,8,1,128,36,4,64,4,0,64,4,0,64,40,1,0,0,0,0,0,2,72,36,130,72,36,130,72,68,148,73,132,112,0,0,0,128,8,1,240,17,3,48,42,6,64,148,0,128,16,2,0,7,199,128,64,4,0,64,4,0,64,4,0,72,5,0,96,4,0,0,0,72,4,128,136,9,1,16,34,4,64,136,1,0,32,12,0,4,0,64,0,15,255,0,128,12,64,130,16,49,1,16,18,0,32,0,8,4,96,99,8,33,0,2,255,240,0,0,0,0,0,0,0,32,3,223,69,26,138,24,197,4,32,36,1,128,0,0,0,0,0,8,0,128,24,3,16,67,15,224,8,129,12,103,143,128,64,0,0,16,1,0,16,1,8,31,194,8,32,130,8,32,135,248,32,128,8,0,1,0,16,1,0,31,1,0,16,1,16,18,1,64,24,1,0,8,0,64,255,240,0,63,130,8,63,128,0,0,0,0,0,0,0,8,0,64,255,224,128,8,15,252,8,15,252,8,0,128,255,224,0,3,199,192,4,15,255,14,1,88,100,120,193,0,0,0,0,0,0,3,207,192,4,15,252,8,15,255,16,2,0,64,8,0,0,0,0,16,1,0,32,3,255,64,8,0,0,15,255,0,0,0,0,0,0,0,0,56,124,4,0,64,7,254,66,4,32,66,4,32,0,0,0,0,7,254,68,36,66,68,36,66,68,39,254,0,0,0,0,0,0,0,0,8,64,195,16,34,0,0,2,1,16,224,196,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,4,124,242,132,126,162,143,124,37,67,84,229,66,56,44,64,0,34,15,190,42,38,214,177,168,190,113,41,58,85,98,18,208,96,0,67,228,34,243,228,34,163,239,0,39,243,95,229,82,85,47,240,0,40,4,94,149,33,20,41,68,82,253,36,82,69,103,208,69,0,0,17,231,210,57,39,243,68,3,30,125,33,18,56,197,82,18,16,0,143,196,132,15,200,0,175,228,146,73,44,254,72,4,130,111,224,0,0,0,0,0,0,0,0,0,0,0,1,128,36,2,64,24,0,0,60,4,96,255,232,3,170,185,87,170,185,87,170,185,87,255,247,255,127,132,12,94,165,239,64,21,221,64,21,221,64,21,221,64,23,255,39,197,16,143,239,84,39,207,84,39,203,16,103,195,16,207,224,0,0,7,0,128,7,6,8,183,23,130,228,92,43,130,240,78,3,0,0,7,0,128,7,6,8,183,23,130,228,92,43,130,240,78,3,0,127,132,4,65,36,58,69,36,162,84,165,146,80,164,178,68,39,243], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+26002);
/* memory initializer */ allocate([7,0,8,7,0,64,7,128,0,5,0,80,5,0,120,1,0,0,7,0,8,7,0,64,7,128,0,7,0,8,7,0,8,7,0,112,0,128,112,4,0,120,15,128,0,7,0,8,7,0,8,7,0,32,2,0,32,2,0,0,15,128,0,7,0,8,7,0,8,7,0,32,2,0,32,2,0,0,15,128,0,7,0,8,7,0,64,7,128,0,0,0,0,0,0,0,0,0,0,3,128,8,1,0,16,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,30,0,0,0,0,15,254,0,0,0,0,15,30,0,0,0,33,66,73,165,91,127,250,38,81,113,234,162,165,74,8,35,98,67,0,15,30,0,0,0,0,15,30,0,0,0,0,15,254,0,0,0,0,3,240,34,2,32,4,0,64,8,0,128,8,0,0,12,0,192,0,7,252,0,0,0,0,7,252,0,0,0,0,7,28,0,0,0,251,120,165,138,93,187,168,10,191,186,155,191,170,156,127,130,0,31,0,7,252,0,0,0,0,7,28,0,0,0,0,7,252,0,0,0,0,14,238,170,74,220,169,74,212,171,78,188,170,64,196,9,64,136,0,7,126,80,69,116,101,69,84,85,69,116,80,70,4,65,68,8,33,2,32,36,66,254,244,34,124,41,2,16,55,238,40,68,64,130,33,2,16,34,79,126,34,2,188,53,14,16,47,226,16,162,132,68,8,142,136,191,234,136,160,10,136,168,138,80,229,10,32,5,1,140,1,0,32,228,138,252,164,74,120,170,10,32,255,202,32,5,0,136,8,0,64,127,192,0,63,130,8,63,128,162,25,66,136,202,96,192,33,4,84,245,73,124,144,9,124,240,73,124,148,9,64,244,64,60,2,3,254,32,2,124,164,70,124,110,234,170,46,228,16,73,40,254,9,15,254,9,4,60,34,64,60,226,66,62,37,34,234,55,162,6,64,196,112,113,10,254,35,130,86,249,2,126,34,69,36,81,136,102,17,15,254,17,0,0,17,1,16,10,0,160,4,0,160,49,12,12,7,207,68,39,194,68,71,199,0,215,197,8,95,231,72,82,128,24,7,135,128,40,129,80,127,196,132,63,129,0,31,2,144,70,1,152,8,142,80,175,202,0,196,138,132,160,11,252,213,73,84,191,232,0,81,15,136,87,231,66,33,15,144,175,239,164,34,79,152,33,66,98,127,196,0,191,128,0,127,128,136,255,137,24,126,162,74,24,102,98,4,7,254,64,40,132,8,15,254,17,1,144,6,0,216,240,96,0,18,1,32,47,198,80,170,131,254,42,130,248,42,130,250,34,34,30,34,2,16,47,239,130,34,3,32,239,226,72,36,130,48,162,196,196,2,14,16,175,234,68,162,142,254,160,10,124,164,78,124,4,64,124,4,4,68,127,192,0,63,194,0,47,130,32,95,196,32,130,0,32,113,5,8,87,231,66,81,5,16,119,229,36,82,69,24,81,75,98,4,15,254,136,39,252,17,0,224,113,128,68,255,225,80,36,132,68,2,7,16,87,197,0,112,5,56,82,135,40,82,165,42,82,107,64,63,130,8,63,130,8,63,129,0,103,196,68,68,69,84,100,128,64,4,0,64,63,130,72,255,224,160,49,140,6,63,130,168,42,143,254,0,7,188,74,68,164,74,68,164,78,68,4,64,71,252,64,64,0,16,129,8,252,129,30,125,65,52,253,66,20,57,68,136,73,73,162,33,15,144,35,231,36,37,79,148,64,135,148,78,41,128,37,68,82,32,15,182,137,47,210,139,175,150,33,47,182,85,170,146,113,34,54,64,2,6,243,129,8,32,130,190,112,138,136,33,66,20,34,66,66,40,130,136,92,140,158,93,68,180,125,69,20,92,133,84,101,68,226,8,7,252,85,68,228,127,197,84,96,192,64,255,224,160,49,140,6,66,5,252,90,199,116,223,197,116,90,196,32,127,228,32,69,5,140,130,5,252,26,193,116,159,197,116,58,196,32,223,228,32,77,131,6,17,15,254,17,0,0,63,130,72,36,131,248,32,2,4,32,65,252,64,36,226,74,174,170,78,164,74,100,173,234,74,164,170,82,46,102,32,2,16,37,15,80,37,2,80,53,14,72,36,130,132,168,69,2,1,7,80,85,5,80,85,5,80,84,135,72,68,128,132,8,65,2,0,7,124,85,69,84,85,69,84,87,199,64,84,32,66,3,224,0,66,7,188,165,0,0,127,132,72,68,135,248,64,36,2,63,224,0,2,0,48,18,1,32,18,1,16,17,1,16,32,130,8,64,72,2,4,0,32,63,234,0,111,226,146,105,42,254,40,4,130,72,40,126,0,3,248,36,130,72,36,130,72,63,130,0,32,34,2,31,224,0,34,130,36,34,15,126,34,2,60,53,78,84,40,130,148,178,68,66,113,69,18,81,7,126,34,2,62,187,42,84,165,75,136,225,64,34,80,15,190,82,167,42,34,175,190,170,15,160,34,47,162,33,226,0,32,2,124,37,79,84,37,66,124,52,14,64,36,34,66,163,228,0,32,2,124,245,66,84,117,66,84,247,194,64,116,42,194,35,226,0,32,2,124,36,66,84,253,66,84,37,66,84,57,14,40,68,64,130,63,128,64,255,234,82,20,133,60,250,69,60,114,66,60,250,66,76,0,7,252,74,71,252,4,7,252,4,15,254,8,1,8,127,194,4,18,2,16,82,128,192,51,12,12,63,2,144,63,2,0,32,129,248,4,0,128,63,130,8,32,130,8,63,130,8,32,130,8,63,130,8,33,2,32,39,207,68,36,71,68,111,202,68,164,66,68,39,194,68,0,7,252,4,0,128,63,130,8,32,131,248,32,130,8,63,130,8,32,2,254,42,175,254,33,2,124,49,14,254,34,2,68,175,228,66,16,1,126,33,2,32,103,202,68,36,66,124,36,66,68,39,194,68,1,15,144,137,8,190,170,74,212,169,74,148,168,130,20,82,72,194,59,238,8,32,130,62,248,130,62,32,131,136,227,226,8,64,136,8,17,6,32,39,194,84,247,194,84,119,202,160,37,2,254,33,2,16,0,14,156,68,133,248,66,142,168,75,196,72,106,140,168,17,192,0,4,14,92,68,133,72,84,142,92,68,132,72,120,140,190,16,0,0,68,4,156,93,79,84,94,37,92,125,77,84,92,133,84,102,76,194,32,194,112,36,15,64,39,194,212,53,78,84,36,130,148,170,69,66,16,2,56,122,132,168,108,101,128,251,132,168,106,133,144,74,137,198,16,5,124,81,5,124,140,64,84,245,69,84,85,69,16,146,131,68,32,194,112,36,15,64,39,199,84,109,74,84,36,130,84,41,67,34,16,197,112,84,5,64,125,196,84,117,69,84,84,133,84,89,73,34,32,130,40,34,143,68,36,66,130,55,206,36,34,66,68,165,68,136,33,2,146,37,79,16,39,194,16,49,14,254,33,2,16,161,4,16,17,1,146,21,66,16,47,230,16,161,2,254,33,2,16,33,2,16,130,132,196,234,224,160,170,160,176,234,228,164,234,229,68,85,74,116,4,2,72,21,0,64,127,192,64,4,15,254,4,0,64,4,0,64,8,0,128,8,7,240,9,4,148,73,36,146,145,33,16,37,4,32,33,2,16,73,37,84,241,2,124,65,15,16,15,227,16,193,0,16,16,1,30,253,33,18,121,65,18,17,47,218,17,66,16,33,4,16,17,231,210,17,67,146,17,167,212,33,4,32,63,226,34,34,96,32,36,2,94,47,47,82,47,71,84,101,42,242,165,162,84,41,3,16,33,2,254,36,79,40,47,230,146,119,202,160,163,194,36,36,66,140,1,7,124,84,69,40,127,229,162,81,7,124,82,5,60,82,75,76,68,4,78,142,170,76,206,132,76,132,174,234,4,163,76,200,129,8,33,2,124,33,15,124,34,7,254,100,74,146,167,194,16,47,226,16,1,15,126,34,66,24,71,231,66,209,5,124,82,5,60,114,64,76,33,2,16,39,207,144,169,10,188,169,15,144,39,226,144,249,0,144,33,2,126,114,72,24,119,226,66,249,2,124,34,3,60,34,64,76,17,1,254,36,66,40,111,234,162,33,2,254,34,2,60,36,66,140,1,4,254,36,64,40,239,226,162,33,2,254,34,3,60,34,64,76,17,15,252,17,2,0,63,132,8,190,130,40,62,130,26,32,33,254,2,7,32,87,197,132,119,69,84,85,71,116,84,69,76,84,43,62,32,2,0,127,132,8,188,130,72,36,131,200,33,162,2,31,224,0,4,15,252,21,2,112,98,11,252,39,2,168,38,33,148,104,128,198,124,64,84,125,64,84,255,65,20,149,69,148,57,69,68,145,67,8,17,15,254,17,8,36,95,232,168,79,130,168,95,236,136,68,128,24,63,128,64,127,197,84,36,3,248,64,139,200,36,131,216,32,33,254,16,1,124,36,66,68,103,202,16,47,226,16,35,130,84,41,34,16,47,132,136,207,132,32,95,196,168,82,64,64,127,192,64,255,224,0,68,4,124,116,73,244,21,68,84,71,68,76,84,6,66,67,224,0,4,0,32,127,196,4,0,3,248,4,0,64,63,128,80,4,135,252,36,2,124,40,79,116,37,66,212,55,78,76,36,2,66,163,228,0,32,2,124,36,79,84,36,130,64,55,206,84,37,66,72,165,68,98,63,130,8,63,130,8,127,193,16,255,194,72,85,72,226,53,0,200,18,2,32,235,197,68,32,69,36,153,66,148,216,66,132,201,67,8,65,7,144,147,226,66,251,170,170,251,170,166,250,0,34,26,46,30,39,194,68,47,195,68,175,234,40,175,226,68,41,37,84,83,136,84,32,2,126,32,143,136,33,3,16,107,74,82,41,34,16,33,2,16,1,15,160,39,194,84,71,199,84,215,197,16,82,135,126,80,128,8,10,7,188,10,3,184,10,7,188,10,0,128,4,69,82,81,40,240,4,0,128,63,130,72,63,130,136,63,129,0,34,15,254,2,0,32,18,1,32,18,65,36,242,129,48,18,1,32,50,45,34,17,225,0,17,15,30,17,15,94,21,7,252,10,1,248,2,7,254,2,0,32,18,79,40,19,3,34,209,227,248,32,131,248,32,131,248,32,130,24,0,3,248,32,130,72,36,130,72,36,130,72,36,128,160,49,140,4,64,4,124,116,72,84,117,66,84,117,66,84,33,3,40,36,64,130,18,1,16,47,194,0,104,74,72,63,226,0,47,194,132,40,66,252,16,9,124,84,66,84,85,73,84,21,67,84,81,9,40,84,66,130,16,3,248,81,0,224,49,140,6,63,130,72,63,130,72,63,130,8,63,133,16,14,3,24,255,226,72,63,130,72,63,128,68,82,168,250,34,2,16,175,235,68,162,138,254,32,2,124,84,68,196,135,192,68,64,130,8,247,225,74,36,134,252,181,66,212,36,130,84,37,66,162,4,0,128,127,193,16,36,141,246,4,1,16,127,193,16,17,2,16,17,15,254,17,0,64,255,224,224,21,2,72,223,96,64,4,0,64,4,0,64,4,7,252,14,1,80,21,2,72,68,105,240,4,0,64,66,7,188,165,1,8,4,7,252,14,1,80,36,141,246,4,0,64,4,4,68,127,192,0,123,196,164,123,196,164,123,196,164,76,73,140,64,4,238,138,170,170,206,228,170,138,174,238,10,163,170,203,33,102,255,224,96,28,142,68,0,3,248,36,131,248,36,131,248,36,132,88,0,15,252,16,3,248,208,129,248,4,7,100,21,130,72,212,96,128,0,135,74,87,229,0,126,226,170,190,234,170,174,235,170,203,33,102,72,66,72,32,0,252,228,130,72,63,226,72,36,130,136,95,232,0,159,196,0,79,128,136,223,197,36,95,197,36,95,196,0,191,224,0,8,3,248,32,131,248,32,135,252,68,71,252,68,79,254,17,2,16,66,4,32,66,4,36,122,132,48,66,4,160,82,38,34,65,224,0,124,4,78,124,161,10,254,193,10,254,170,170,170,171,172,130,143,232,33,3,222,82,128,132,7,199,192,7,131,192,7,207,194,4,32,62,17,2,16,79,232,146,25,2,252,106,74,164,42,130,144,50,130,70,1,7,188,18,67,188,18,71,188,0,7,254,8,3,252,200,64,252,17,15,254,21,3,248,42,130,72,42,131,248,34,67,168,35,35,158,9,15,254,9,1,8,148,133,158,253,73,116,189,77,72,149,72,226,66,4,36,122,132,48,82,38,94,4,15,254,4,0,64,4,0,64,66,71,168,67,39,30,0,15,254,34,3,164,74,138,178,18,38,30,34,2,36,58,130,48,42,35,30,8,1,84,82,37,74,143,131,0,0,0,60,124,0,64,4,7,252,68,68,68,68,68,84,4,128,64,4,0,32,63,226,0,41,2,146,41,66,248,41,4,146,73,40,206,2,3,252,32,10,248,106,130,248,106,138,248,32,5,252,69,8,144,64,2,252,2,68,36,95,196,100,74,69,36,66,68,164,68,68,12,16,137,40,84,129,30,253,73,116,189,77,84,148,137,84,133,72,226,16,137,72,89,239,212,151,75,212,212,137,118,17,15,254,17,2,16,0,0,136,4,128,80,17,5,36,82,37,66,152,1,4,47,196,0,2,7,16,87,197,0,116,68,40,71,231,144,111,202,144,57,0,16,120,132,190,121,68,62,120,138,156,56,128,72,127,192,64,255,224,0,120,132,190,121,68,62,120,138,156,56,131,248,32,131,248,32,130,24,0,137,220,84,1,84,220,133,28,94,133,188,106,132,232,64,139,254,233,10,148,175,140,144,169,42,206,160,12,32,143,136,32,130,9,254,82,15,190,84,135,126,44,175,126,164,175,126,38,143,216,36,130,86,2,4,32,47,192,36,226,66,36,36,66,84,40,133,0,143,224,0,66,4,252,136,74,252,200,4,254,138,174,170,15,226,170,202,161,6,0,111,184,136,138,132,168,10,190,168,42,132,32,133,16,74,232,0,4,0,32,63,194,4,63,194,0,63,195,84,95,197,84,148,65,12,16,1,126,33,2,124,101,74,124,37,66,124,37,2,32,37,2,142,4,7,252,9,2,148,73,32,144,127,193,8,9,0,96,9,7,14,8,0,64,0,15,254,4,0,96,5,0,76,4,64,64,4,0,64,68,130,68,255,224,64,85,66,200,247,226,72,117,194,72,36,132,136,73,2,72,243,224,0,93,66,72,247,226,72,245,194,104,36,132,8,69,0,72,235,224,128,173,68,72,235,228,232,225,196,40,76,136,8,2,9,252,80,65,252,208,5,254,90,165,254,106,164,134,64,11,254,32,2,124,32,15,0,39,231,16,105,10,84,169,35,18,37,2,32,16,1,194,16,199,224,82,39,204,82,4,226,64,69,216,84,42,126,119,229,40,87,231,42,87,229,0,119,197,0,95,229,84,89,43,48,4,0,64,127,192,64,63,128,64,255,224,160,25,66,136,202,96,192,85,3,158,127,69,72,125,69,242,34,7,248,164,131,248,36,143,254,16,137,72,89,239,212,151,75,200,213,72,98,8,133,68,81,72,240,0,71,196,69,68,84,125,65,20,125,65,84,37,66,68,85,72,136,2,3,254,164,6,252,42,66,148,111,202,72,40,69,82,70,72,60,36,34,68,36,143,240,36,35,100,109,139,82,36,34,68,36,130,80,64,130,236,0,175,136,87,229,40,82,66,164,91,196,164,159,160,2,8,10,190,108,130,190,126,40,170,90,162,234,74,169,40,33,64,34,130,5,252,17,72,224,72,2,248,73,12,144,95,196,0,73,1,8,4,7,252,65,65,224,16,1,248,18,1,32,127,192,0,17,2,8,33,2,254,40,47,8,39,3,64,231,194,80,47,226,0,164,68,130,1,129,224,16,1,0,31,193,32,18,1,32,255,224,0,16,130,4,2,8,32,66,0,50,59,64,168,42,132,168,210,70,36,74,36,64,32,2,126,33,15,144,39,231,82,109,42,82,166,162,66,36,162,68,0,15,254,4,0,64,127,196,68,68,68,164,81,68,4,65,68,8,3,131,192,4,7,252,4,3,248,4,143,254,4,131,248,21,6,76,68,68,40,112,9,124,34,128,40,79,228,40,82,134,72,68,128,136,32,2,126,33,10,144,183,234,82,37,34,106,84,101,66,132,32,70,2,0,16,63,226,0,175,230,16,47,230,146,170,164,198,72,168,132,32,129,16,0,7,252,17,1,16,255,225,16,17,2,16,33,4,16,1,14,16,79,228,146,73,14,252,74,68,164,106,141,16,18,130,70,17,15,254,17,4,16,47,232,146,79,192,164,74,73,24,18,130,70,32,194,112,245,66,254,35,131,84,105,42,124,37,66,124,165,68,124,33,2,84,37,15,126,34,2,60,51,78,84,37,66,72,169,68,34,65,4,16,113,8,126,113,2,56,245,66,148,35,163,16,33,0,16,65,2,16,31,233,18,81,1,252,52,69,68,210,133,16,82,130,198,66,132,36,95,228,164,239,196,164,79,196,164,64,133,254,68,132,24,16,129,8,124,129,30,254,168,42,124,160,138,17,39,210,18,163,68,33,66,18,47,239,84,39,194,84,55,206,84,32,130,254,164,132,24,64,132,16,115,232,34,114,34,34,251,226,34,42,35,34,35,224,34,66,7,190,162,129,68,65,2,32,135,197,68,39,204,68,71,196,68,17,1,32,39,194,68,100,74,68,39,194,68,36,66,68,39,194,68,8,3,248,32,131,248,32,131,248,4,7,252,68,68,84,68,128,64,16,130,16,123,196,164,106,69,164,251,196,164,106,69,164,75,201,164,1,7,16,87,197,16,119,197,68,83,135,8,81,5,124,81,11,48,1,71,18,95,229,84,119,197,84,87,199,84,80,133,254,84,139,24,136,132,136,62,128,158,62,170,42,92,160,74,72,171,210,9,33,166,1,4,32,47,192,132,136,68,132,15,194,132,72,76,132,79,196,132,4,71,40,17,5,40,84,69,0,122,64,164,42,140,144,42,129,70,33,66,18,47,239,16,39,194,84,55,206,84,39,194,84,165,68,76,8,0,128,8,0,128,10,0,144,9,128,136,8,0,128,8,0,128,1,64,18,239,234,16,175,234,146,175,234,146,239,234,146,9,32,150,33,1,16,1,7,144,9,129,20,53,37,146,149,1,16,17,1,16,34,2,124,36,66,124,244,2,124,36,66,124,49,14,254,65,0,16,0,7,252,2,0,64,4,0,208,20,130,76,68,64,64,4,0,64,8,0,128,255,193,64,36,7,248,164,130,72,36,130,88,4,0,64,4,0,64,39,194,64,36,15,254,4,1,72,37,4,32,12,7,0,66,7,188,164,128,36,95,226,168,143,132,168,31,196,16,137,0,48,64,2,30,253,32,20,73,131,20,253,32,18,121,164,148,121,0,16,34,2,32,47,235,80,169,11,126,37,34,82,37,34,86,33,2,16,33,2,254,40,47,108,42,163,68,235,163,0,47,226,84,169,36,48,17,9,254,81,2,124,81,9,254,52,69,124,148,65,124,84,66,76,17,71,210,17,15,254,33,1,20,253,67,20,106,138,74,53,98,34,16,65,4,16,79,222,16,67,140,85,73,36,20,65,4,17,65,8,2,0,32,2,7,252,6,0,160,18,2,32,66,8,32,10,0,64,0,79,132,136,74,190,168,74,140,169,74,164,36,69,4,73,72,8,0,206,240,162,42,148,228,10,16,175,238,56,165,74,146,225,0,16,0,199,112,82,5,20,116,130,48,57,10,126,163,139,84,201,32,16,1,131,224,8,2,72,17,0,64,127,192,224,21,2,72,68,64,64,12,71,4,32,137,80,72,65,4,252,131,144,84,41,4,17,129,32,17,15,252,17,7,224,8,130,80,20,15,254,21,2,72,196,96,64,33,15,254,33,3,156,41,69,8,183,66,2,95,200,32,18,66,98,19,193,196,81,71,136,149,70,178,148,131,246,209,1,244,18,129,222,8,1,16,63,128,136,255,225,16,38,141,134,7,3,128,3,135,192,63,128,128,255,225,16,36,140,70,63,130,72,63,128,72,127,194,4,1,79,146,33,226,112,57,4,158,79,11,20,17,130,18,66,168,198,68,36,92,95,6,80,73,13,94,95,68,84,95,68,84,69,68,100,66,4,72,79,198,36,95,236,72,73,69,98,65,132,96,65,196,224,33,2,16,41,11,84,165,74,84,37,66,84,37,69,124,80,72,0,17,15,254,17,0,64,10,1,24,63,109,16,19,65,4,15,192,0,17,2,16,122,132,198,104,5,188,250,68,164,107,69,168,74,41,158,4,0,160,10,1,16,32,133,246,145,1,16,21,1,36,16,64,252,66,2,32,5,8,136,80,96,240,41,12,144,75,4,132,71,192,0,17,15,254,17,75,254,160,142,248,42,174,250,169,170,252,42,100,250,39,130,72,39,143,0,46,226,170,62,238,16,47,226,56,165,68,146,32,130,40,171,231,72,32,143,62,44,7,92,101,74,92,36,2,190,34,130,254,34,143,254,42,166,254,122,170,254,164,66,124,36,66,124,10,15,254,10,7,252,74,71,252,74,71,252,32,131,248,32,131,248,17,15,254,17,3,248,32,131,248,32,131,248,4,15,254,4,0,64,0,7,254,64,5,226,82,165,170,90,165,170,74,165,74,146,34,38,65,7,222,146,128,64,127,192,64,127,196,68,78,195,88,196,96,64,32,34,2,94,173,42,82,165,170,90,165,170,74,164,130,84,38,38,0,3,184,42,130,168,42,143,254,42,130,168,42,132,168,76,137,152,0,43,226,98,162,42,170,166,170,42,162,170,106,168,130,20,162,36,0,3,252,32,67,252,32,2,248,32,3,254,36,4,136,95,200,4,4,79,40,159,233,146,253,98,186,185,42,254,164,75,124,196,64,124,32,194,112,241,2,254,33,2,80,57,110,146,45,98,146,175,228,130,0,15,252,40,66,68,36,129,8,17,0,160,4,0,160,49,140,6,17,15,254,17,0,128,255,193,0,34,6,248,162,2,32,63,226,0,17,15,254,17,1,80,10,3,24,196,99,248,4,2,72,84,64,128,4,15,254,21,2,72,68,67,248,32,131,248,32,131,248,0,7,254,1,15,254,37,66,146,71,199,68,215,197,68,87,199,0,79,224,0,36,66,254,36,79,84,34,131,84,233,34,124,33,2,84,169,36,48,4,15,252,160,67,184,106,141,16,46,132,6,191,129,80,36,128,192,18,1,32,33,4,8,191,225,8,16,130,88,68,2,72,36,131,248,17,0,160,127,192,64,63,192,128,255,225,0,63,196,32,130,3,254,2,4,16,47,224,130,233,194,112,33,2,30,47,3,16,33,32,14,32,194,112,36,15,64,39,226,72,53,142,76,36,162,72,168,132,8,17,1,18,93,69,24,93,47,14,4,15,254,21,2,72,196,96,64,32,133,72,136,133,126,33,141,24,42,141,168,44,140,136,42,129,16,36,2,124,40,143,124,37,66,124,50,142,74,42,98,16,166,4,24,34,2,72,47,207,36,47,227,72,233,67,98,33,130,96,160,196,240,34,34,20,35,239,170,171,234,170,251,226,8,43,227,136,232,128,8,68,4,120,120,133,124,149,64,124,66,164,70,65,133,4,99,4,12,4,4,120,40,128,124,229,66,124,34,162,70,33,130,132,51,0,12,65,4,254,136,10,190,202,164,190,138,174,190,8,130,190,200,129,62,65,4,8,119,232,0,114,66,24,39,239,64,36,3,64,36,0,128,4,0,32,63,192,0,16,128,144,63,194,0,32,2,0,64,8,0,159,197,20,10,69,244,85,69,244,85,69,244,68,69,244,68,68,76,32,15,190,0,143,144,139,235,162,170,175,170,82,167,42,1,79,162,63,130,8,63,130,8,63,128,0,127,196,4,127,196,4,127,196,4,39,194,68,167,196,68,167,194,0,111,234,130,47,226,130,175,228,130,32,2,124,32,130,16,250,2,126,34,162,42,52,174,146,66,160,68,4,2,72,21,7,252,64,65,240,0,7,252,8,1,8,63,193,4,36,129,80,127,196,4,31,1,16,31,0,64,127,196,68,68,192,64,16,1,16,18,1,64,24,15,252,18,1,32,17,1,8,20,97,128,17,1,84,35,130,254,104,42,124,32,2,254,34,2,72,47,194,68,0,7,124,80,133,16,114,5,126,82,167,74,89,37,34,148,163,4,0,3,252,32,2,0,32,2,0,32,2,0,32,4,0,64,8,0,33,10,144,113,2,62,250,72,212,185,74,148,168,139,136,137,73,162,32,2,124,248,138,144,170,15,254,170,170,170,250,162,74,41,34,38,7,142,72,167,138,72,167,138,0,175,206,132,175,192,132,15,192,132,23,193,68,39,198,68,167,194,0,47,226,130,47,226,130,47,226,130,16,1,124,122,65,36,250,193,64,83,197,164,83,197,0,191,224,0,33,2,16,33,15,84,37,35,82,233,34,16,33,66,8,163,4,192,65,4,16,113,8,84,117,34,82,41,47,16,33,66,136,51,2,192,32,15,188,34,79,164,139,207,164,138,79,188,34,79,164,36,66,140,4,0,238,228,170,234,170,234,234,170,170,238,228,170,234,4,160,86,136,5,220,9,73,212,85,195,212,85,77,220,73,69,212,73,64,172,36,132,144,36,131,248,36,131,248,36,131,248,4,15,254,21,6,76,1,0,16,113,5,84,85,37,146,81,5,18,113,69,8,3,0,192,33,2,16,41,11,84,165,42,82,41,2,16,81,68,136,67,8,192,8,0,128,127,129,0,36,3,248,4,0,64,255,224,64,4,0,64,33,2,16,33,15,16,37,226,80,53,14,80,37,2,80,175,228,0,72,133,200,72,143,94,93,68,52,125,77,84,92,133,84,93,77,98,80,71,212,145,71,212,85,65,12,63,0,64,63,128,64,255,224,192,32,4,158,136,162,138,78,175,138,72,164,170,77,36,146,66,164,68,136,133,200,8,137,94,93,66,52,93,77,84,92,133,84,93,65,98,36,2,78,36,175,234,36,194,106,117,170,202,36,162,76,36,130,72,0,3,252,36,2,64,63,130,8,32,131,248,36,2,64,63,192,0,0,3,252,32,2,248,32,3,252,42,34,148,72,132,164,140,32,128,4,2,72,36,68,66,132,32,0,4,7,252,4,0,64,255,224,0,31,129,8,31,129,8,63,226,0,47,130,0,63,196,146,136,192,198,34,2,32,50,10,252,170,74,32,37,2,80,37,34,146,48,226,0,128,5,252,16,73,4,71,2,80,69,12,80,73,36,146,16,226,0,2,14,32,175,202,64,197,10,144,175,234,16,197,72,82,137,40,48,17,1,16,122,129,36,253,33,40,81,5,164,81,135,32,159,224,0,64,130,8,0,143,126,16,130,136,114,138,152,32,130,8,34,130,16,41,34,84,47,239,170,35,130,4,55,142,16,47,226,16,165,4,32,18,14,32,35,226,66,249,66,16,117,70,82,169,34,16,37,2,32,32,162,8,47,239,136,40,130,234,42,163,172,234,133,106,17,98,34,32,162,236,42,175,68,47,199,2,103,138,72,167,130,132,36,130,252,2,128,36,63,226,32,34,3,212,37,66,84,36,133,74,73,104,34,0,3,248,32,130,8,63,128,0,127,192,64,63,128,64,255,224,0,1,131,224,4,79,254,21,7,84,21,131,82,206,225,80,100,192,64,24,14,124,36,66,68,247,194,0,119,198,144,167,194,16,47,226,0,32,4,254,145,2,80,101,202,80,47,226,0,4,5,36,80,168,250,1,11,212,84,128,138,31,74,2,95,129,8,95,137,8,9,3,252,129,68,18,15,236,144,73,4,234,74,164,170,106,197,106,17,98,34,63,128,16,6,15,84,31,130,80,47,4,72,95,136,68,20,32,128,143,132,136,15,128,0,223,196,32,79,132,32,95,228,0,191,224,0,1,15,124,21,69,124,85,69,124,120,0,254,41,12,188,40,65,24,16,14,124,33,2,84,243,130,16,119,234,144,33,2,16,33,2,16,4,14,64,175,234,128,176,10,124,160,142,16,162,0,66,4,32,62,4,0,32,63,226,128,174,231,74,36,167,250,164,162,74,74,233,16,33,2,16,39,207,16,47,226,8,55,238,72,34,130,8,162,132,16,122,4,160,122,68,168,123,0,32,254,65,36,93,197,0,191,224,0,66,2,32,10,8,184,78,131,168,10,130,184,202,36,130,71,224,0,71,194,68,36,64,68,231,194,80,36,130,132,48,34,0,95,232,0,113,1,16,21,7,92,71,68,212,117,65,92,21,1,66,83,226,0,0,143,8,18,133,46,83,165,106,122,160,174,42,140,162,41,225,0,0,143,200,72,135,168,74,231,168,74,132,232,122,140,254,8,0,128,4,2,124,36,2,64,255,224,64,68,68,164,81,68,4,127,192,0,18,1,60,36,66,168,97,10,104,41,226,34,37,66,8,35,2,192,0,3,248,32,130,8,63,130,64,36,2,32,34,4,16,64,136,6,4,0,64,63,128,64,255,224,160,42,132,164,146,33,34,42,4,64,46,194,36,242,66,180,118,197,108,91,66,36,43,69,72,143,224,0,1,131,224,32,2,0,63,226,32,34,2,96,67,4,40,130,0,32,32,2,120,172,139,72,164,138,72,39,130,0,85,5,72,136,64,0,8,0,64,255,193,0,33,7,248,18,129,32,18,34,34,33,228,0,1,8,16,65,0,254,41,34,146,73,44,254,65,4,16,65,0,16,4,0,64,63,130,72,36,130,72,63,128,64,4,128,124,124,64,0,4,2,72,63,128,64,127,228,2,31,128,0,127,194,72,68,64,192,8,0,64,127,196,164,9,7,252,18,1,40,35,34,34,69,232,128,33,2,16,39,207,84,37,66,84,55,206,84,37,66,84,167,196,68,2,47,170,34,175,170,175,234,170,218,168,170,250,168,170,250,32,66,0,143,190,168,138,188,169,15,254,170,74,190,170,79,212,132,64,140,1,7,126,81,5,124,113,2,126,162,75,62,164,75,84,200,64,12,16,6,254,41,34,186,249,34,254,120,38,186,170,162,186,40,35,6,8,131,10,18,199,168,20,131,148,81,65,34,4,5,36,80,168,250,66,7,188,165,0,128,63,128,128,255,225,8,31,226,72,34,132,24,18,1,32,34,2,248,98,138,40,34,130,40,34,162,74,36,98,128,64,4,254,137,42,186,233,36,254,136,46,186,10,162,186,200,33,6,2,142,200,164,171,234,229,202,232,180,142,72,165,74,84,230,32,64,0,7,248,8,128,136,8,135,248,16,129,8,16,129,8,255,224,0,8,3,248,32,131,248,32,131,248,32,131,248,5,7,252,10,3,24,64,2,0,7,207,36,18,66,164,114,74,164,34,66,68,37,66,136,4,0,64,36,130,72,36,131,248,4,4,68,68,68,68,127,192,4,32,2,254,40,79,244,40,230,244,121,202,244,173,66,164,55,66,12,0,3,254,32,67,228,33,226,228,43,66,236,32,68,164,95,72,12,2,135,126,82,133,16,119,162,20,183,234,40,183,142,168,3,128,0,64,132,232,122,136,190,126,162,170,46,175,170,43,162,234,49,34,38,66,132,36,119,233,72,44,143,126,20,135,126,20,143,72,23,224,64,57,10,144,106,131,68,168,38,184,41,3,124,97,10,84,41,34,48,1,14,40,164,74,130,199,202,16,175,234,16,197,72,146,133,8,32,17,7,188,17,3,184,85,65,16,127,192,68,39,2,64,95,224,0,1,15,16,37,68,84,117,77,124,81,5,84,85,71,84,71,192,0,33,2,18,87,204,24,119,229,32,85,197,20,85,197,148,81,196,0,4,7,252,4,3,248,32,130,72,255,225,16,123,196,164,74,79,254,33,2,254,34,79,120,34,66,126,48,46,124,37,66,124,165,68,124,64,135,8,144,130,62,250,170,170,250,170,190,248,138,138,171,225,130,1,2,16,33,3,216,69,68,146,169,1,16,41,4,64,131,224,0,33,2,146,41,47,254,32,2,254,50,14,254,42,162,170,170,164,134,0,2,4,36,66,68,36,66,68,36,66,68,36,68,68,64,72,4,4,7,252,81,66,8,31,0,32,34,3,252,6,1,160,98,0,96,35,130,72,39,143,16,47,231,32,109,138,58,45,66,52,45,34,48,17,1,16,39,194,16,97,10,254,34,2,124,32,66,40,33,2,8,16,2,60,122,68,164,106,100,192,251,196,164,106,69,164,75,201,164,1,0,146,233,42,254,160,11,254,162,10,254,234,170,170,10,160,134,4,0,64,63,130,72,63,128,64,127,196,68,68,71,252,4,0,64,4,0,32,63,226,32,165,6,140,55,166,72,165,130,64,68,72,60,4,15,252,146,66,16,16,7,248,72,132,232,82,134,200,82,135,248,32,130,62,249,74,254,170,170,190,170,170,190,168,139,190,32,130,126,4,0,32,63,194,32,34,3,252,34,2,112,42,133,36,66,8,32,64,2,252,0,69,228,66,69,36,95,68,20,93,68,84,66,68,12,16,66,132,69,72,52,125,68,84,69,69,84,72,68,36,62,64,12,2,0,32,114,5,126,84,37,148,81,5,16,114,133,40,4,64,130,34,2,32,42,11,124,164,74,136,162,2,32,34,5,80,68,136,132,32,194,112,241,2,254,53,66,84,111,234,84,37,66,254,161,4,124,32,194,120,113,4,254,133,71,84,47,239,84,37,66,254,49,2,124,1,131,224,4,7,252,36,130,72,255,226,72,36,135,252,4,3,248,4,7,252,4,3,248,8,15,254,17,3,248,209,97,240,17,1,240,33,2,254,33,15,124,34,6,254,116,138,252,180,162,120,36,130,120,0,143,190,32,15,188,170,74,188,216,8,156,248,72,190,248,136,152,63,194,0,47,130,0,63,194,144,40,164,164,76,41,248,16,129,248,65,2,254,0,8,124,68,65,124,32,4,124,192,132,254,65,4,48,66,4,32,159,206,32,74,136,168,239,128,40,50,44,34,1,224,0,4,7,252,8,15,254,49,141,246,49,143,254,170,175,190,32,143,190,237,2,84,181,38,208,181,226,176,93,12,148,92,132,138,127,100,34,33,2,28,73,15,124,36,68,124,244,64,124,49,12,254,1,0,16,4,0,32,63,226,0,162,134,42,42,198,184,170,130,170,75,169,198,17,15,254,17,8,64,71,192,68,42,140,32,69,4,80,72,129,6,4,79,40,47,226,36,66,71,72,212,165,108,82,71,74,86,224,34,41,66,144,42,234,164,174,75,174,170,74,174,186,78,228,10,224,32,18,6,16,47,226,68,242,130,254,33,7,16,87,197,16,113,0,16,32,129,16,255,226,16,74,71,56,41,71,188,4,5,36,80,168,250,132,4,124,42,68,32,133,0,136,255,225,0,31,2,148,37,67,204,0,4,252,32,64,116,224,66,116,37,66,84,39,67,4,33,64,8,17,1,16,17,37,20,93,133,16,81,5,16,93,47,18,64,224,0,16,65,4,125,65,20,125,69,84,93,65,20,57,69,68,145,65,8,3,207,164,139,202,164,171,202,144,171,234,214,162,165,42,85,40,38,130,4,32,39,224,66,37,66,144,65,12,16,66,132,40,68,64,130,4,79,168,87,197,68,116,69,124,113,5,10,90,47,100,27,193,0,17,15,254,17,3,248,106,129,232,102,129,152,4,5,84,81,40,240,8,1,0,127,196,132,79,69,20,106,68,68,74,69,4,127,196,4,32,2,0,63,196,164,170,65,164,22,66,36,197,64,132,49,64,8,17,1,16,17,1,16,17,2,168,42,130,168,68,68,68,136,32,0,17,1,16,17,1,16,18,130,168,42,68,68,136,32,0,127,224,0,2,9,252,66,0,248,36,5,252,72,141,116,98,36,248,69,0,136,32,2,60,170,71,36,35,207,164,34,71,60,170,66,36,39,226,0,2,79,164,39,239,164,170,74,254,216,8,188,250,72,188,250,72,188,66,7,188,149,4,64,39,207,160,67,135,80,95,197,16,146,131,68,16,1,124,36,66,68,103,202,16,37,2,94,37,2,80,43,227,0,1,7,254,90,165,84,119,194,84,183,202,16,167,203,84,231,192,16,66,7,188,148,128,0,63,130,72,63,129,0,255,226,72,73,97,240,4,15,254,160,164,68,63,130,72,63,128,64,127,196,68,127,192,64,33,2,146,47,239,72,39,226,200,55,238,72,39,226,72,167,228,64,4,4,68,127,193,32,63,198,32,175,130,32,47,130,32,63,194,0,17,1,146,47,226,72,111,235,72,39,226,72,39,226,72,39,226,64,4,7,124,88,133,126,116,5,94,85,39,86,85,5,82,84,235,128,2,3,254,33,10,254,100,66,68,106,170,16,47,228,16,129,0,16,34,10,144,119,194,0,250,130,40,117,74,144,47,226,16,33,2,16,68,2,32,159,196,0,8,130,136,85,78,32,95,228,32,66,0,32,243,197,20,48,197,20,4,7,252,17,2,168,4,15,254,4,0,64,32,130,8,32,143,126,32,130,72,114,138,168,32,130,8,34,130,16,8,0,128,255,225,0,23,194,8,33,6,254,161,2,16,37,2,32,2,0,32,2,7,252,2,2,32,18,1,32,2,0,32,10,0,64,4,79,40,47,226,16,71,199,16,223,229,32,83,231,72,68,128,190,71,196,68,71,206,68,95,228,160,110,236,170,78,164,180,94,76,42,40,66,72,47,207,32,47,194,32,63,238,64,39,194,144,177,4,254,34,130,40,39,207,40,47,226,0,55,206,68,39,194,68,167,196,68,33,2,16,37,79,84,37,66,186,49,14,124,33,2,16,175,228,0,66,135,40,71,200,40,119,226,0,247,194,68,39,195,68,39,192,68,36,66,254,36,79,16,34,131,68,235,162,0,39,194,68,167,196,68,65,2,16,33,0,254,225,2,40,34,66,66,40,34,0,95,232,0,66,7,188,164,128,68,10,3,24,223,96,0,63,130,8,63,128,0,2,3,254,164,135,254,36,134,32,173,131,118,32,4,248,72,136,248,32,2,0,47,239,16,33,2,144,49,14,16,33,2,16,165,4,32,4,0,64,4,0,64,127,192,64,10,0,160,17,1,16,32,132,4,0,3,248,32,130,8,63,128,64,255,224,224,21,2,72,196,96,64,0,7,252,8,0,128,15,129,8,24,130,80,3,0,32,12,7,0,34,2,252,66,5,248,196,7,254,72,133,36,106,164,112,74,132,96,17,7,212,17,15,254,85,7,212,41,71,200,40,175,234,41,100,66,21,1,80,127,193,80,0,15,254,132,35,248,36,130,72,37,128,64,0,143,200,33,3,148,75,228,130,176,1,60,34,68,36,131,192,36,18,129,36,34,2,60,110,10,32,34,2,36,33,66,20,32,194,4,18,130,36,97,234,240,32,162,6,63,162,72,36,130,168,17,6,8,18,130,60,110,10,20,40,194,64,255,193,64,50,141,16,20,193,128,17,2,16,71,201,16,47,230,8,175,226,72,34,130,8,34,130,16,130,4,252,2,65,254,194,68,252,66,4,168,71,5,168,70,75,254,8,1,0,32,135,252,0,67,248,32,131,248,4,5,36,80,168,248,1,15,144,81,5,126,117,37,148,113,5,40,90,143,42,20,161,134,32,2,124,36,79,68,39,194,68,52,78,124,32,2,0,175,228,0,0,3,248,32,130,136,36,130,8,255,226,8,32,132,8,66,136,16,32,129,16,63,130,72,63,130,72,63,128,64,255,224,64,4,0,64,68,2,158,125,37,84,125,69,88,125,65,18,253,161,20,17,1,16,36,66,40,39,207,84,39,194,84,55,206,16,47,226,16,161,4,16,0,7,0,83,197,36,114,69,60,82,71,36,83,197,0,87,235,0,0,3,248,32,130,8,63,130,8,32,131,248,0,0,0,255,224,0,63,196,0,191,0,0,127,130,168,76,129,40,104,162,170,20,102,34,16,1,124,36,70,68,167,194,68,36,66,124,32,2,0,47,226,0,36,66,40,55,202,212,167,202,84,39,194,16,47,226,16,33,2,16,2,4,164,42,129,32,133,133,132,2,2,164,210,132,80,72,133,6,128,101,184,8,128,136,208,229,40,74,134,168,91,230,128,87,226,0,4,71,40,23,193,84,119,196,84,71,199,16,31,225,16,81,2,16,127,192,68,39,2,64,95,232,64,63,194,68,63,192,68,255,224,2,4,2,72,21,0,64,127,128,8,0,131,248,0,128,8,127,128,8,33,2,146,37,79,16,47,226,2,48,46,126,32,34,2,175,228,2,4,2,72,21,7,252,64,65,240,17,1,240,10,0,164,18,70,28,17,15,254,17,4,248,33,8,32,79,194,76,89,76,36,77,68,8,33,2,146,37,79,16,47,231,2,104,42,126,160,34,2,47,226,0,0,0,0,127,128,136,8,128,136,16,129,8,32,130,8,66,136,16,34,2,124,36,79,84,36,66,72,55,238,34,42,162,250,160,164,4,0,199,112,82,5,84,114,130,0,38,203,68,166,203,68,231,192,0,32,35,242,68,164,170,223,164,74,95,164,74,71,165,202,72,36,6,8,3,240,41,2,80,33,2,32,63,192,132,73,71,244,1,64,8,65,2,254,241,1,124,34,6,254,180,66,126,42,67,20,32,66,12,63,194,4,63,194,0,32,33,254,1,15,254,33,1,16,5,0,32,0,71,196,17,66,84,125,65,84,17,71,212,17,65,196,113,66,8,16,102,120,33,34,84,250,2,16,118,234,194,38,98,66,39,226,0,33,2,30,49,10,124,164,74,124,164,66,124,33,2,254,33,2,16,2,132,254,33,0,124,228,66,124,36,66,124,36,66,124,80,8,254,68,2,124,10,66,32,197,4,140,64,3,248,42,130,168,255,224,0,34,5,252,130,3,252,85,77,252,64,5,252,68,69,34,104,164,248,23,194,68,71,201,68,39,198,0,167,194,8,47,226,72,32,130,24,17,2,16,123,196,164,76,71,164,73,68,148,72,71,148,72,128,0,14,167,172,86,165,68,119,194,130,183,202,68,167,203,68,194,128,254,32,2,0,43,235,8,160,138,8,160,130,8,80,132,136,74,136,16,250,68,152,49,34,12,95,72,2,63,130,8,63,129,16,10,7,252,66,7,188,165,0,64,127,192,64,255,224,16,127,193,16,9,0,48,30,175,44,172,170,132,239,203,2,175,206,132,175,202,132,228,129,254,121,66,136,31,162,4,223,161,8,31,128,144,255,225,16,17,34,14,0,15,188,10,72,168,83,5,40,34,69,36,75,72,40,2,0,32,39,194,68,39,194,68,247,194,0,47,226,16,53,206,80,75,224,0,16,1,12,47,2,144,105,10,254,41,2,138,42,162,198,41,34,8,130,5,252,8,136,80,95,195,36,95,205,36,87,69,84,87,65,12,130,4,32,15,128,168,202,132,248,74,132,168,79,132,0,191,224,0,25,14,16,33,2,62,250,66,100,34,79,168,137,8,168,252,72,130,33,3,222,82,136,132,4,0,64,63,130,72,63,130,72,63,130,8,1,9,16,81,34,84,85,137,80,25,3,16,82,137,40,84,66,130,68,2,124,12,137,48,68,129,166,34,13,252,66,4,168,82,64,96,247,133,40,49,133,40,47,198,32,175,130,32,47,130,32,63,194,0,65,4,254,68,78,40,175,234,146,171,170,146,75,164,170,171,160,134,32,98,120,36,143,200,39,226,72,52,142,74,38,162,70,161,36,8,4,7,252,64,4,56,94,5,32,95,197,32,81,69,140,146,64,16,33,2,16,37,66,94,247,66,212,37,66,92,53,14,66,67,224,0,17,15,254,21,7,252,17,0,160,255,232,66,63,130,72,37,128,64,66,7,188,149,0,0,127,128,72,127,132,64,127,192,196,52,204,64,4,7,252,32,129,16,127,228,66,132,67,248,36,130,72,37,128,64,32,129,16,127,128,72,63,132,64,127,192,196,20,66,84,196,128,64,8,136,80,95,192,36,223,197,32,95,196,100,75,69,40,66,11,254,33,2,124,68,69,40,239,226,146,71,207,84,5,67,92,193,0,16,16,7,190,32,135,190,74,39,170,74,167,170,74,175,200,49,68,162,34,2,16,47,239,128,41,2,158,57,14,144,43,194,164,170,69,60,130,5,252,2,8,248,72,130,248,72,140,248,72,133,252,69,0,136,5,15,80,47,194,84,69,71,252,213,69,84,95,231,0,68,128,132,8,0,128,15,192,128,8,7,248,64,132,8,127,128,0,84,136,164,10,0,160,63,130,168,42,131,248,42,130,168,255,224,0,17,2,8,33,15,124,36,71,0,39,207,144,81,7,92,85,7,80,91,229,0,34,2,32,247,130,40,54,174,42,37,102,130,4,7,252,4,15,254,8,0,128,127,4,144,73,7,240,73,4,144,127,0,132,8,64,124,16,1,0,47,226,146,105,42,146,47,226,146,41,34,146,47,226,130,16,1,0,63,196,4,190,66,164,62,66,164,62,66,4,1,64,8,4,0,32,63,194,32,34,2,60,34,2,252,40,68,132,79,200,132,34,2,16,47,235,144,169,10,158,169,2,144,43,194,164,50,66,60,32,129,16,127,192,160,63,130,168,51,130,232,36,143,254,9,3,8,66,2,16,15,200,132,64,0,252,34,4,32,203,196,160,74,5,126,0,7,220,69,71,212,66,101,64,127,197,84,127,68,8,85,74,34,0,15,126,37,34,122,69,39,126,212,37,122,86,167,186,72,33,6,0,0,0,119,197,4,80,69,12,81,69,36,116,69,4,1,64,8,0,135,212,87,231,212,85,71,222,69,69,222,85,69,212,69,232,208,0,1,252,146,69,116,18,67,252,80,77,116,85,69,116,16,66,12,0,0,0,63,128,8,2,128,72,8,129,8,96,128,8,5,0,32,33,2,30,33,15,124,36,66,124,52,78,124,33,2,254,161,4,16,0,3,248,32,130,8,63,128,64,127,196,68,68,68,84,68,128], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+30737);
/* memory initializer */ allocate([64,65,4,16,114,8,60,116,66,132,34,79,148,32,66,132,49,66,8,0,9,252,82,65,116,210,69,252,80,69,116,117,69,116,16,66,12,1,7,16,85,5,124,117,2,144,47,235,16,162,139,168,228,64,130,33,5,40,12,3,48,200,227,96,20,129,144,231,193,196,5,131,224,1,79,84,47,226,84,69,199,64,215,197,16,95,231,56,69,64,146,33,66,84,47,239,84,165,202,64,247,194,16,47,227,184,229,64,146,1,4,80,39,192,144,225,2,254,33,2,40,36,66,130,95,232,0,10,137,254,74,128,184,200,4,252,66,5,254,103,4,168,18,64,32,63,1,16,14,3,16,123,196,164,49,132,164,255,233,18,21,7,252,0,0,0,127,192,64,4,0,64,4,0,64,4,0,64,20,0,128,0,7,126,80,133,8,112,133,8,80,135,8,80,133,8,114,128,16,0,0,126,112,133,8,80,133,8,80,133,8,112,133,8,2,128,16,64,4,0,123,232,8,120,130,8,32,143,136,32,130,136,50,130,16,0,15,126,33,2,124,36,66,84,37,66,84,37,74,40,68,64,130,31,1,16,95,69,20,95,68,4,123,192,160,251,194,164,42,68,164,65,4,8,119,232,66,112,2,126,33,15,94,37,3,80,43,225,0,8,0,64,127,196,4,0,3,248,4,2,64,39,194,64,84,8,254,0,4,0,39,224,8,224,130,8,32,130,8,40,131,8,34,128,16,1,131,224,4,0,64,63,128,64,4,15,254,8,1,8,63,192,4,8,0,128,255,193,0,20,2,64,127,192,64,37,4,72,148,64,128,32,3,248,64,138,16,18,0,192,51,12,14,12,0,48,56,0,112,17,15,254,17,0,252,244,3,248,36,131,248,36,135,252,4,15,254,34,130,254,50,138,30,175,10,84,39,194,84,39,194,16,47,226,0,1,7,16,1,0,126,249,34,18,65,37,18,138,47,162,4,160,132,34,2,32,47,239,32,37,7,80,111,234,16,165,66,82,41,34,48,16,1,254,40,34,130,107,166,130,171,162,170,42,162,186,40,34,134,32,2,254,40,35,130,171,170,130,171,162,170,42,162,186,40,34,134,1,4,16,47,192,32,21,2,144,79,236,16,73,68,146,81,32,48,0,4,254,40,40,186,72,33,186,42,172,170,75,164,130,72,160,132,2,2,76,78,68,164,110,196,164,78,70,12,18,1,34,34,36,30,32,130,72,34,143,8,36,130,40,48,238,248,32,130,8,160,132,8,2,2,32,18,0,32,34,1,32,3,239,224,2,0,32,2,0,32,1,7,16,87,197,16,111,229,16,85,5,94,101,4,176,81,228,0,0,7,252,0,3,248,32,130,8,63,128,0,32,129,16,255,224,0,64,2,254,32,0,124,228,66,124,32,2,68,34,130,254,80,8,254,2,3,252,160,6,248,32,6,248,168,130,248,32,4,136,69,9,252,16,1,46,122,161,74,254,193,10,124,170,74,60,162,76,60,128,8,16,1,222,17,47,212,56,133,84,146,35,252,32,67,252,32,67,252,4,7,252,4,7,254,0,3,248,36,143,254,72,132,72,127,192,24,33,2,124,161,15,126,162,34,24,52,142,40,39,226,8,33,66,34,17,9,16,81,2,124,85,73,84,53,69,124,145,1,20,87,226,2,1,4,16,39,192,16,15,238,66,42,130,72,39,226,136,49,66,98,33,2,18,39,207,24,47,226,32,39,194,164,51,206,36,67,192,36,1,7,18,87,197,24,127,229,32,87,199,164,83,197,36,115,192,36,1,15,144,143,170,148,175,234,144,171,202,228,35,197,36,139,192,0,33,2,16,33,15,144,39,199,16,105,10,16,161,2,254,32,2,0,64,132,126,117,72,126,117,66,92,36,15,124,37,67,84,40,129,54,121,4,144,73,7,144,73,4,252,121,4,144,73,4,144,111,233,0,2,3,252,37,3,252,37,2,112,32,2,240,73,4,96,137,3,12,1,4,254,42,136,252,74,129,184,40,12,188,74,69,24,82,66,66,33,2,8,32,15,190,74,36,162,147,229,32,34,5,32,132,0,128,1,4,146,41,32,254,240,0,254,161,10,254,170,163,170,202,160,134,64,4,254,112,10,124,36,66,68,247,194,0,84,69,40,143,224,0,68,4,156,121,72,212,10,110,192,73,206,212,89,68,136,105,68,162,19,198,36,66,71,70,64,7,124,66,69,36,98,140,16,66,132,198,16,37,92,185,9,16,253,233,20,185,77,84,145,79,212,2,64,68,4,4,156,73,72,212,233,100,160,141,238,146,13,67,136,201,64,162,34,130,36,36,2,254,244,130,126,36,130,126,52,142,72,71,224,64,33,1,32,0,3,240,33,2,16,33,3,240,18,1,34,34,36,30,1,7,144,73,4,144,81,4,144,74,134,168,82,132,68,68,68,130,0,64,4,248,64,190,136,69,4,82,66,20,80,68,132,129,64,8,68,69,244,78,68,174,238,164,26,78,164,42,100,173,228,4,160,210,2,14,32,191,202,32,170,138,168,170,142,248,162,32,34,1,224,0,2,135,124,81,5,124,117,66,108,180,74,124,184,142,126,2,128,24,16,143,200,1,7,158,75,71,212,1,71,148,16,143,148,18,67,66,32,2,62,248,130,62,34,42,170,170,175,170,34,162,148,50,34,66,0,7,252,68,69,244,68,69,84,95,68,68,69,68,52,64,71,252,65,7,16,143,224,16,117,66,84,253,66,124,33,3,18,32,224,0,1,195,224,34,3,254,34,2,252,40,66,252,40,68,252,72,72,252,1,201,240,81,1,254,209,5,124,84,69,124,84,70,124,64,11,254,64,5,220,85,78,136,85,68,34,96,13,220,85,68,136,85,78,34,2,14,56,164,138,208,162,74,72,185,238,34,165,64,8,3,0,192,8,0,240,17,2,32,85,0,188,52,76,200,19,0,96,24,14,0,4,0,64,127,192,160,49,140,6,1,15,254,33,1,16,5,0,32,32,2,120,36,130,72,244,98,144,33,2,254,51,142,84,73,32,16,32,7,184,74,135,168,76,103,144,79,239,144,27,130,212,201,33,144,31,1,16,17,2,12,68,0,64,255,225,80,36,132,68,4,0,64,3,135,40,82,133,40,116,98,16,57,10,124,163,139,84,233,32,16,33,7,8,87,231,66,82,15,36,82,135,48,82,37,34,145,227,0,0,67,132,41,66,148,77,65,20,253,67,20,89,69,84,144,65,12,34,2,252,53,10,124,168,11,124,164,66,124,36,66,124,36,66,76,113,5,254,82,6,124,90,69,60,98,68,44,4,7,252,4,15,254,33,130,106,34,143,168,175,234,168,251,162,108,42,131,186,234,96,98,33,130,106,34,138,168,175,234,168,171,170,236,186,174,186,2,96,98,48,141,30,85,37,26,253,37,20,117,237,130,81,231,66,76,172,68,19,1,212,37,34,80,127,234,80,39,66,216,53,34,106,36,98,194,35,239,136,137,4,62,122,36,170,178,164,170,134,167,136,73,71,162,133,4,80,9,44,148,89,134,144,75,4,208,73,38,146,72,224,128,33,130,106,34,143,40,95,229,40,83,165,108,42,133,42,147,96,98,0,7,252,17,5,20,49,129,16,255,224,64,2,69,34,80,168,248,0,3,254,32,2,248,40,130,136,42,130,144,40,68,132,71,200,0,32,2,254,40,15,188,42,66,164,59,78,168,42,34,162,169,229,0,159,133,8,31,129,8,223,132,128,95,198,36,85,69,244,64,139,254,238,234,170,238,160,10,124,192,10,254,162,10,124,160,76,20,128,136,65,135,106,146,130,40,15,228,40,67,164,234,82,198,42,75,96,66,63,130,72,63,130,72,42,131,24,63,128,128,4,133,4,81,72,240,0,15,254,4,0,128,127,196,164,74,68,164,74,68,164,73,68,8,18,1,32,18,1,32,18,1,32,18,1,32,34,34,34,65,232,0,0,7,252,17,1,240,17,1,240,17,1,16,31,238,16,1,0,16,32,2,0,63,228,2,132,64,64,36,130,68,68,72,66,20,32,128,64,4,254,116,137,72,71,132,72,71,132,72,68,230,248,64,128,8,64,2,254,4,72,68,71,193,68,39,204,68,68,100,252,64,64,4,0,0,0,63,128,0,0,0,0,0,0,0,0,15,254,0,0,0,1,79,254,1,7,208,1,7,208,1,7,208,68,165,74,40,100,66,9,4,136,72,7,254,16,1,248,20,130,72,37,4,32,133,1,140,0,7,252,74,71,252,64,2,4,2,78,36,34,66,164,48,66,12,66,7,188,162,129,68,34,134,62,190,2,36,33,130,18,34,162,70,18,129,36,34,2,62,110,10,32,34,66,40,33,34,50,36,162,134,0,227,240,4,0,32,127,192,8,3,0,192,16,2,128,71,224,0,159,228,2,10,169,34,179,173,226,146,169,50,146,169,90,144,168,6,65,2,16,7,200,16,65,1,254,34,12,72,72,69,254,72,32,0,1,15,16,33,2,124,33,15,16,47,226,16,58,14,68,79,224,66,17,15,254,17,72,248,82,67,254,138,133,252,10,164,248,138,128,248,32,2,56,250,138,168,170,138,184,170,138,168,186,162,74,36,98,128,3,199,192,36,129,80,255,226,72,68,75,250,36,131,248,36,131,248,24,14,54,169,39,18,253,166,182,165,47,150,171,175,210,169,47,182,42,130,72,251,226,168,117,202,170,37,128,64,255,224,160,17,6,12,0,15,120,36,130,72,68,135,104,213,133,74,84,167,74,72,97,0,64,4,120,116,136,72,116,130,104,245,130,72,36,163,74,40,97,0,64,143,232,85,239,234,84,167,228,8,163,242,8,131,252,21,66,200,0,1,240,17,1,16,25,1,80,21,1,16,17,34,18,32,228,0,32,2,254,41,11,32,167,202,68,37,66,84,85,69,40,132,64,130,1,195,224,32,2,0,63,130,136,40,130,80,69,4,32,141,3,12,64,194,112,36,0,124,228,66,100,37,130,72,41,67,36,80,8,254,17,15,254,17,4,0,47,136,136,72,129,168,41,44,130,71,228,0,0,111,184,138,8,160,171,234,170,170,170,170,170,162,36,84,200,146,0,9,124,84,66,68,84,73,84,52,133,64,148,33,66,83,226,0,64,100,120,116,9,64,71,228,82,69,36,82,85,70,136,73,65,98,64,194,240,2,8,16,95,192,8,17,2,32,196,4,160,81,224,0,34,2,16,47,226,32,250,2,60,34,66,36,58,78,68,69,64,136,17,7,252,17,0,64,2,7,254,8,0,252,8,65,4,33,68,8,8,0,64,0,15,252,16,1,0,31,129,8,16,130,8,34,132,16,2,7,16,95,229,32,114,5,60,82,71,36,84,69,68,153,67,8,4,0,32,63,194,4,63,194,32,63,194,64,39,196,68,73,73,8,2,7,16,80,5,126,98,5,32,83,197,36,98,68,68,69,68,136,66,4,16,64,15,124,82,5,32,147,197,36,34,69,68,133,64,136,18,1,16,32,2,254,98,10,32,35,194,36,34,66,68,37,66,136,2,4,16,32,0,254,226,2,32,35,194,36,42,67,68,37,64,136,34,4,16,79,234,32,226,4,60,130,79,36,2,67,68,197,64,136,65,2,16,2,15,190,70,68,164,122,68,164,73,132,152,170,65,66,17,15,254,17,0,160,251,224,160,123,192,160,251,224,160,10,0,160,18,1,32,243,193,32,18,15,60,18,1,32,243,193,32,18,1,32,2,128,40,238,234,40,162,138,238,162,138,40,238,234,40,2,128,40,0,15,224,2,64,40,3,0,40,2,64,32,1,32,18,0,160,6,0,7,124,85,69,84,117,69,124,84,7,64,84,37,66,83,235,0,0,7,252,74,4,160,123,196,160,123,132,160,123,196,160,74,7,254,66,130,40,14,224,40,226,130,238,34,130,40,46,227,40,34,128,40,2,0,40,226,74,32,175,234,32,165,10,80,232,138,136,16,66,2,1,7,16,95,229,16,119,197,84,85,71,84,85,69,92,145,3,16,2,3,254,32,130,164,42,2,252,36,2,120,74,132,144,146,130,68,133,4,80,63,224,82,159,229,80,63,228,82,201,36,150,81,2,16,10,7,252,74,71,254,18,46,44,63,130,72,36,128,176,240,192,0,17,15,254,17,0,160,17,2,8,192,99,248,16,129,8,34,132,16,0,143,168,34,79,164,172,42,128,223,200,164,250,72,164,250,64,76,4,142,72,168,74,132,176,42,248,164,142,72,164,128,136,18,130,16,32,3,248,64,11,240,0,15,248,36,132,40,253,162,74,36,100,194,2,1,32,17,2,16,32,133,246,137,0,144,17,1,16,37,4,32,33,4,80,84,137,72,232,66,2,79,142,72,4,130,136,202,129,16,33,2,8,32,2,126,250,66,36,34,130,40,57,14,40,68,65,130,17,1,16,255,195,184,85,73,146,1,2,68,36,132,160,49,140,6,65,2,80,132,132,136,16,66,2,79,140,72,68,132,136,74,129,16,32,130,40,170,71,68,36,47,128,39,199,36,170,66,36,37,66,136,4,0,64,255,224,160,49,140,6,63,130,72,63,130,72,63,130,8,17,1,80,36,130,136,112,74,2,47,130,72,36,130,136,42,131,16,17,1,16,32,133,244,137,32,144,21,2,32,4,69,34,80,168,248,33,2,254,49,10,68,175,234,68,175,226,130,41,34,146,34,130,196,36,129,80,255,225,80,36,129,16,127,193,16,255,224,0,17,2,8,4,0,64,127,192,64,4,3,248,4,0,64,255,224,64,4,0,64,16,65,4,124,65,30,252,65,36,17,71,212,16,65,196,241,68,8,32,2,248,40,143,136,45,134,168,122,138,218,168,162,134,48,34,0,33,2,28,34,79,216,169,74,170,249,194,8,41,195,136,235,224,8,34,2,60,37,74,136,169,74,170,169,202,136,187,238,136,11,224,8,66,4,60,118,72,24,118,66,146,39,207,16,39,194,144,55,226,16,0,3,248,32,131,24,42,130,168,36,130,170,42,165,10,64,104,2,4,0,32,63,226,0,175,134,136,109,138,168,42,164,218,72,105,2,34,2,188,54,74,24,166,74,146,39,194,16,39,197,16,79,232,16,136,4,248,20,128,48,196,133,166,79,132,32,95,196,32,191,224,0,128,4,248,32,128,72,4,130,72,199,196,4,95,68,4,65,64,8,82,4,188,133,78,8,91,104,136,233,192,136,43,236,136,23,226,0,128,4,248,8,140,136,77,132,168,74,132,218,104,164,138,16,98,2,4,7,252,4,3,248,8,15,254,36,133,244,132,35,248,4,0,64,0,3,248,32,130,8,46,130,40,42,130,74,68,164,170,145,96,2,37,2,80,95,196,84,223,197,80,95,228,82,69,36,150,81,4,16,0,15,254,4,0,208,52,140,68,4,3,248,32,130,8,63,130,8,4,0,64,4,3,248,4,0,64,127,192,64,10,1,16,32,132,4,20,143,232,16,135,222,87,71,212,85,79,244,32,131,212,37,68,226,1,7,16,81,5,124,113,5,16,95,231,16,82,133,40,148,67,130,32,36,236,170,10,170,238,74,174,170,46,228,169,226,132,72,72,140,33,2,16,33,15,124,33,2,144,55,238,16,34,130,40,164,68,130,34,130,40,47,239,42,47,226,168,63,238,42,34,162,78,164,132,136,39,194,0,247,196,68,167,207,0,39,195,84,231,194,84,39,194,68,32,2,62,32,15,190,170,42,190,168,10,190,186,162,62,34,162,62,32,3,252,64,11,248,40,143,232,42,143,234,168,175,246,41,36,176,66,7,190,164,129,4,16,130,8,111,234,72,34,130,8,34,130,16,18,1,40,34,66,32,127,234,32,37,2,80,40,130,136,48,66,0,16,225,240,34,34,148,100,10,252,32,130,16,47,226,16,37,2,32,0,7,126,84,37,74,116,69,126,85,39,84,84,133,84,153,67,34,64,226,248,2,40,148,68,1,124,32,142,16,47,226,16,37,0,32,66,2,248,0,8,136,69,1,252,32,4,248,200,132,136,79,128,136,64,2,124,240,1,124,36,71,124,168,2,124,37,66,124,37,66,124,66,130,40,4,207,74,28,130,126,108,139,72,45,66,84,37,66,98,18,1,32,255,193,36,127,201,32,255,193,36,35,66,40,66,8,32,5,0,72,127,192,64,63,130,72,63,130,72,63,130,72,36,130,24,32,2,124,33,15,144,33,2,254,50,142,40,34,130,74,164,164,134,33,66,18,247,228,16,167,207,84,39,195,84,231,194,84,37,66,76,34,2,16,95,229,0,210,69,68,93,229,68,85,69,76,84,70,76,17,2,8,73,64,96,25,142,6,31,0,64,127,194,72,21,15,254,33,5,40,12,3,48,194,227,192,32,3,248,36,4,64,68,8,64,1,71,16,95,229,16,119,197,84,87,199,84,87,197,84,85,75,76,1,7,8,87,229,64,117,37,82,86,231,82,85,101,82,149,35,150,4,0,32,63,226,36,36,66,222,52,66,84,68,196,68,133,64,72,2,7,254,68,132,190,88,134,168,95,197,36,85,69,36,149,65,12,17,1,16,125,1,24,17,79,210,17,5,208,81,5,16,191,224,0,124,64,4,125,68,84,125,64,20,125,69,84,125,69,68,125,68,72,255,224,160,127,196,164,127,194,72,71,137,72,39,134,200,163,2,204,0,143,140,139,168,136,175,234,168,171,138,168,171,162,234,80,104,130,63,194,0,95,129,8,31,129,8,31,128,128,31,130,144,6,3,156,34,131,252,66,5,252,210,69,252,82,68,8,95,228,136,68,132,24,16,129,8,32,130,254,96,138,72,34,130,40,32,130,8,34,130,16,8,3,240,33,3,240,32,3,248,32,131,248,4,15,254,4,0,64,17,2,8,64,65,16,17,0,160,10,0,64,10,1,32,33,4,12,119,229,64,91,197,36,115,197,36,83,199,64,87,197,164,81,139,102,16,3,240,34,4,64,191,130,8,36,130,72,36,128,160,17,6,8,4,15,254,128,39,252,0,3,248,32,135,252,68,71,252,68,71,252,2,4,32,34,0,48,226,130,36,34,34,34,42,3,32,34,0,32,2,71,36,84,69,94,108,69,68,85,69,76,100,68,68,69,68,72,32,2,124,32,79,4,80,69,124,80,69,4,32,69,124,136,0,0,65,68,254,129,10,254,233,36,254,137,46,4,15,227,68,194,64,12,2,71,36,84,69,222,84,69,68,85,71,76,84,64,68,5,64,72,4,129,254,228,138,252,170,74,252,164,10,254,249,42,170,15,160,6,31,238,32,175,202,132,175,202,132,175,202,72,231,201,234,1,160,102,132,4,32,31,236,32,68,68,250,65,69,104,105,4,40,12,67,4,2,15,32,18,1,126,116,68,164,66,68,40,81,6,40,68,64,130,64,5,222,84,79,84,93,71,94,220,69,8,88,197,84,89,69,38,64,4,126,113,8,16,117,194,80,37,15,126,32,34,130,48,162,4,32,129,16,127,192,64,63,128,64,255,224,0,63,130,168,42,143,254,128,5,222,20,73,84,93,67,94,84,77,200,88,197,84,90,65,70,0,0,0,63,128,64,4,0,64,255,224,64,4,0,64,4,0,64,17,1,16,17,15,254,17,1,16,31,1,16,17,1,16,31,1,16,32,2,0,39,207,16,33,7,16,111,234,16,33,2,16,33,2,16,34,66,36,34,79,126,34,71,36,107,202,36,162,66,60,34,66,0,33,2,16,123,233,72,8,67,248,4,0,64,255,224,64,4,0,64,0,7,0,87,197,16,113,5,16,95,231,16,81,5,16,81,11,16,16,1,62,124,129,8,252,129,62,80,133,200,80,133,8,191,224,0,1,71,254,65,5,240,65,69,212,84,169,214,8,36,72,81,73,244,24,14,124,33,2,16,249,2,126,113,10,144,33,2,16,33,2,16,1,7,16,17,15,222,74,71,164,77,71,148,76,143,148,9,64,162,34,15,188,86,79,152,86,103,28,80,135,62,34,47,170,33,66,34,0,7,252,64,69,20,74,68,68,74,69,20,64,68,4,65,68,8,0,71,196,69,68,84,109,69,84,85,70,212,68,68,68,85,68,136,64,4,126,116,40,66,6,167,82,37,39,106,36,34,194,52,162,68,64,7,192,83,233,8,16,143,200,16,133,72,84,133,254,116,0,0,0,7,128,75,228,136,120,132,136,72,135,136,72,132,190,104,9,0,64,4,254,72,41,202,234,164,146,138,174,198,8,35,130,200,160,132,4,4,68,127,192,0,127,197,20,74,68,68,74,69,20,64,68,12,133,5,252,5,11,254,73,1,8,47,108,144,79,68,132,71,192,0,32,2,0,39,207,16,33,7,16,105,10,16,161,2,254,32,2,0,65,7,158,162,128,64,127,193,16,31,0,0,127,197,20,95,68,12,8,3,248,32,131,248,32,131,248,8,15,254,17,2,72,223,96,64,4,15,254,0,1,248,16,135,254,64,37,242,81,37,242,64,224,0,4,7,248,0,3,240,33,15,252,128,67,240,33,3,240,33,2,48,32,129,16,127,192,64,4,3,248,4,0,64,255,224,0,42,68,82,36,66,40,175,231,16,33,15,124,33,7,16,175,226,0,42,162,170,33,2,254,32,15,124,36,66,124,48,14,254,40,34,186,170,164,186,65,4,254,96,8,124,228,68,124,224,4,254,72,38,186,74,160,186,17,6,254,32,2,124,244,66,124,112,10,254,40,34,186,42,162,186,4,2,64,63,132,64,4,15,254,0,3,248,32,130,8,63,130,8,127,192,16,61,2,80,61,0,0,255,224,8,60,130,72,60,128,24,126,128,72,117,5,94,118,32,74,254,128,72,116,133,84,117,64,226,40,2,94,42,47,186,42,162,210,58,174,198,43,162,170,171,164,134,9,0,136,8,0,190,252,0,68,4,128,50,2,32,210,48,224,2,34,2,120,84,132,232,132,135,80,7,199,4,95,69,4,113,64,8,2,7,60,86,69,168,113,5,40,84,103,188,82,69,36,83,203,0,4,0,32,63,234,64,103,194,128,119,202,8,33,4,32,68,72,124,16,47,226,146,167,202,16,167,202,16,175,234,16,39,194,68,167,196,17,7,252,17,1,240,4,3,248,36,131,248,4,7,252,4,0,64,17,15,254,17,3,248,32,131,248,32,135,252,68,74,164,63,64,12,34,2,60,36,79,168,33,7,108,104,42,124,164,66,68,39,194,68,33,2,16,34,143,164,172,42,188,168,15,188,34,66,164,251,192,164,64,2,252,8,68,228,90,70,68,74,71,20,78,68,164,78,68,12,239,234,0,167,204,68,167,202,0,175,234,170,201,40,186,137,40,150,66,4,60,116,72,164,114,130,24,34,79,194,35,194,164,50,66,60,4,0,64,10,1,16,36,140,70,4,0,64,4,0,64,4,0,64,16,1,248,48,132,144,6,1,152,96,97,248,16,129,8,31,129,8,33,2,40,66,137,68,232,34,124,64,15,124,4,67,68,199,192,68,32,2,124,36,79,124,36,71,124,109,10,82,164,194,72,37,66,98,119,197,68,87,199,68,39,194,80,181,42,84,164,139,68,197,32,96,34,130,40,250,130,124,250,130,40,250,130,126,114,138,168,34,130,72,0,15,254,4,3,248,36,131,248,36,131,248,36,1,128,14,7,30,4,0,32,63,194,32,47,130,40,63,226,40,47,130,32,37,4,140,17,7,252,4,15,254,42,132,4,17,7,254,4,15,254,10,7,28,47,226,16,39,207,84,39,194,84,39,195,144,229,4,32,5,129,134,0,143,200,72,164,170,122,196,168,124,132,136,93,78,148,9,64,162,32,2,254,33,15,124,37,71,124,109,74,124,169,2,80,35,2,206,0,7,252,4,0,64,4,0,64,4,0,64,4,15,254,0,0,0,1,0,16,242,2,62,36,66,164,34,66,40,57,14,40,68,65,130,2,0,32,242,2,252,34,66,36,34,67,164,228,68,68,9,65,8,17,1,16,127,193,16,255,225,16,40,132,132,141,34,168,74,129,128,9,0,136,127,193,80,38,69,188,145,7,252,17,15,254,33,4,8,20,129,72,36,130,252,100,138,72,36,131,254,32,2,72,40,67,2,32,7,188,72,71,132,73,199,144,74,15,190,40,36,130,169,65,8,18,1,32,33,2,72,68,104,128,8,1,16,32,135,252,32,64,0,4,0,32,127,196,4,31,1,16,31,0,0,63,130,8,32,131,248,0,7,248,0,128,8,63,130,0,64,7,252,0,64,4,2,128,16,0,15,120,36,130,72,36,130,104,37,131,200,228,164,138,8,97,0,0,3,248,4,0,64,255,224,64,246,65,88,37,4,72,148,96,128,34,130,40,34,143,124,34,130,40,50,142,254,32,2,40,164,68,130,63,128,64,4,15,254,0,3,248,32,130,72,36,130,168,17,6,8,17,1,16,17,7,252,17,1,16,17,15,254,0,1,16,32,132,4,66,4,32,115,200,68,114,66,36,37,79,116,33,66,132,49,66,8,32,2,0,63,196,4,72,72,132,16,66,68,126,66,36,1,64,8,68,2,64,15,200,132,82,64,68,36,68,148,223,68,20,66,128,16,17,7,252,17,2,0,127,200,4,62,66,36,34,67,228,1,64,8,18,9,32,84,2,124,88,73,116,53,69,84,151,65,4,81,66,8,32,98,120,36,2,64,247,226,64,36,2,94,53,46,146,73,225,18,34,2,32,35,239,66,41,38,34,116,170,250,164,162,2,32,162,4,2,15,160,139,234,194,169,42,146,170,42,170,171,162,2,80,168,132,65,4,30,122,72,216,9,78,168,173,74,162,237,64,136,41,1,96,4,7,252,4,3,248,32,131,248,17,15,254,4,3,248,4,0,64,17,15,254,17,2,8,32,143,190,72,132,190,82,34,34,83,232,162,1,0,16,113,5,254,81,5,16,87,197,68,116,69,68,7,192,68,66,7,190,148,130,0,47,239,136,43,227,170,234,162,174,168,132,254,17,1,16,33,2,254,97,10,16,39,194,68,36,66,68,39,194,68,66,2,32,2,9,252,66,1,32,47,140,136,72,132,136,79,128,136,0,15,12,31,130,168,42,131,168,234,130,164,42,66,170,171,133,8,33,2,16,33,2,254,241,5,16,87,197,68,84,66,68,87,200,68,16,131,136,19,231,200,3,195,148,41,67,148,68,130,148,26,70,66,4,0,64,4,15,254,4,0,64,63,130,8,32,130,8,63,130,8,4,0,64,63,130,72,63,128,68,255,224,2,63,130,168,42,143,254,31,1,16,29,1,80,127,197,20,31,1,16,31,1,16,21,1,32,18,1,16,36,132,64,10,3,24,192,97,240,17,1,16,31,1,16,0,7,120,84,133,72,120,101,0,95,199,68,82,133,16,82,139,70,34,2,32,34,15,188,36,130,168,114,133,40,81,7,40,68,64,130,0,7,222,64,133,200,85,229,82,93,165,26,81,169,72,25,64,34,127,196,68,68,71,252,68,69,244,81,69,20,95,68,4,127,196,4,2,3,254,32,35,254,36,130,190,56,130,190,40,132,190,136,128,190,12,71,4,17,65,20,125,65,20,17,71,212,69,68,68,125,68,72,1,131,224,41,2,144,41,2,144,40,130,136,74,68,148,143,32,16,124,36,66,68,167,202,16,175,234,146,170,170,198,168,34,138,168,68,4,7,252,64,67,248,8,3,248,36,143,254,32,133,244,9,1,48,33,2,16,39,207,144,33,2,126,49,14,16,39,194,16,161,4,254,68,130,72,14,142,72,47,133,76,238,165,72,71,133,200,64,132,8,3,131,224,4,15,254,21,1,84,245,129,82,53,45,78,4,0,64,32,2,120,36,143,72,39,131,32,111,202,36,34,66,68,165,68,136,32,2,252,36,75,40,169,10,40,173,98,16,39,194,16,33,2,254,34,2,16,47,239,130,39,199,68,111,202,64,167,194,68,39,194,64,32,129,16,0,7,252,4,0,64,255,224,64,10,1,16,32,140,6,8,0,64,127,196,4,31,1,16,31,1,0,31,129,8,31,129,0,0,15,254,128,163,136,3,231,200,42,130,136,42,164,146,135,224,0,0,0,124,244,65,84,149,69,84,85,66,84,81,5,34,132,161,142,66,7,188,165,7,252,64,65,240,17,1,240,16,1,248,16,129,248,65,4,8,119,229,66,131,194,36,35,194,32,43,227,34,35,224,0,66,68,254,114,74,126,37,47,126,33,74,190,174,75,190,234,64,190,39,194,84,47,235,84,167,202,0,39,194,68,37,66,84,34,130,196,8,139,254,72,129,220,149,69,220,36,132,190,216,134,190,72,132,190,63,130,72,255,226,72,63,128,0,63,130,72,36,130,168,17,6,8,4,4,68,36,129,80,4,15,254,9,0,144,17,33,18,32,228,0,4,0,32,0,3,254,32,2,0,32,2,0,32,4,0,64,8,0,148,4,190,20,140,72,79,229,72,100,132,126,84,4,128,191,224,0,2,15,64,47,130,168,47,143,168,47,130,36,54,142,108,74,33,30,32,2,124,244,66,84,37,79,212,37,66,16,82,164,170,132,96,128,4,0,64,63,128,64,4,15,254,4,0,64,63,128,64,4,15,254,1,15,144,39,194,16,79,231,16,209,5,124,81,7,16,79,224,0,16,1,0,151,201,4,144,73,4,147,201,4,144,66,4,39,196,0,16,1,240,34,4,64,191,130,72,63,130,72,63,128,66,4,32,62,64,2,252,4,69,244,68,71,252,68,69,244,68,71,252,64,68,12,66,4,32,242,4,120,162,143,40,34,131,40,226,162,74,36,98,128,4,0,128,127,132,72,127,132,136,127,128,144,22,1,122,36,164,62,132,4,120,8,129,16,207,228,128,75,196,164,90,198,160,74,33,30,2,7,164,74,131,18,17,66,8,95,72,66,63,128,160,17,6,8,33,2,16,39,207,16,47,231,16,105,10,124,161,2,16,47,226,0,32,2,124,36,15,192,39,199,68,108,74,124,164,2,64,39,194,0,2,7,60,84,69,136,119,226,64,181,234,82,181,110,80,9,33,14,4,3,248,36,131,248,4,15,254,0,3,248,36,130,72,27,6,8,16,65,4,41,68,84,131,67,148,1,79,212,32,68,132,125,64,72,64,4,124,244,68,124,164,79,124,32,131,74,230,194,72,37,162,102,130,5,254,4,136,132,66,1,72,47,204,48,70,164,164,83,32,32,32,2,124,36,79,124,36,70,124,112,10,74,166,194,72,36,162,102,64,4,124,116,72,68,119,194,16,47,239,146,42,162,198,56,34,134,16,15,222,1,39,148,73,135,148,1,39,146,9,175,212,17,3,16,255,200,4,191,72,132,191,72,132,138,72,148,255,200,4,255,192,0,0,3,248,36,131,248,36,131,248,4,15,254,21,2,72,196,96,64,4,7,252,36,131,248,36,131,248,4,15,254,76,73,170,41,4,204,64,130,8,47,224,8,228,130,40,32,130,40,33,5,0,143,224,0,1,0,16,226,138,68,168,42,124,160,10,124,228,74,68,7,192,68,113,5,8,119,229,16,249,8,164,119,133,16,114,69,72,113,69,98,2,15,16,31,226,16,34,66,72,55,14,34,44,66,8,163,68,194,136,4,252,16,8,248,72,129,168,63,236,168,72,132,252,64,128,48,63,130,0,127,136,136,126,129,8,36,135,138,18,166,74,28,102,34,8,0,64,127,192,64,9,1,228,4,129,144,98,0,80,24,134,4,4,7,254,68,43,248,4,3,248,4,15,254,4,3,248,32,131,248,1,14,8,39,234,16,162,72,120,241,33,36,244,129,20,82,34,66,2,79,164,34,79,164,175,234,164,218,72,188,250,72,164,251,200,164,57,0,144,125,226,164,57,66,136,125,64,162,8,5,68,81,40,240,72,4,158,73,47,212,73,68,152,121,68,146,73,167,148,73,0,16,17,7,144,23,231,144,75,199,144,79,231,146,17,175,212,17,1,16,4,0,160,17,2,72,66,99,248,1,0,32,63,130,8,32,131,248,64,2,252,0,136,146,77,97,186,41,44,186,77,100,146,79,224,0,4,7,254,73,43,248,9,7,254,9,1,8,102,96,16,14,0,16,0,3,240,2,4,68,85,68,228,68,68,228,85,68,196,127,192,4,0,160,8,239,234,136,174,138,138,174,170,172,238,138,154,18,98,2,0,7,254,145,34,8,64,67,248,4,0,64,255,224,64,4,0,64,33,15,168,36,79,130,151,207,36,155,79,108,38,207,180,34,66,108,64,164,8,95,239,8,94,165,12,126,173,182,94,37,16,106,173,58,32,2,124,36,79,124,36,66,124,48,6,124,161,2,254,161,4,16,63,130,8,63,130,8,63,128,0,63,128,64,255,224,64,4,0,64,65,4,20,95,229,16,125,77,24,93,37,106,92,101,34,109,69,114,39,194,68,39,203,68,167,202,0,167,194,16,47,226,16,33,2,16,39,194,68,47,203,68,167,202,0,39,194,16,47,229,16,73,8,16,64,2,124,1,8,16,65,0,254,17,6,16,33,2,16,33,0,16,128,5,248,8,136,136,72,129,80,37,12,32,69,4,136,80,98,0,4,0,64,255,224,160,17,2,72,196,99,248,4,128,136,18,130,16,34,2,16,47,239,0,39,135,72,108,138,72,36,162,74,40,98,0,18,2,16,127,228,128,107,132,168,250,132,168,106,164,170,76,105,128,66,5,254,64,4,120,228,133,254,80,36,252,98,12,218,3,64,210,1,0,254,224,10,124,164,74,254,168,42,124,226,10,212,3,128,86,4,7,252,0,1,240,17,7,252,64,67,248,12,3,52,6,129,164,4,7,252,17,1,240,0,7,252,67,67,192,7,131,194,7,39,190,16,1,30,125,33,20,17,143,244,41,38,210,171,162,148,73,9,144,32,2,124,32,143,16,81,5,254,81,5,16,33,5,16,77,8,32,32,194,112,249,2,16,113,194,112,249,2,30,119,10,146,33,34,14,0,3,248,32,131,248,0,15,254,16,3,248,0,128,8,5,0,32,1,8,144,73,0,254,145,4,16,31,226,0,199,196,68,68,68,124,0,1,254,224,138,232,170,138,168,170,138,232,224,138,8,2,128,16,7,192,68,119,197,68,87,197,32,87,229,146,117,37,106,7,160,6,17,15,254,17,0,0,23,226,4,103,74,84,39,66,4,33,66,8,16,143,254,16,128,0,79,226,4,135,69,84,21,70,116,32,66,12,34,2,16,47,239,16,34,71,120,104,138,18,166,66,136,35,66,194,3,131,192,4,0,64,255,224,224,21,2,72,196,96,64,4,0,64,0,0,192,112,1,30,17,47,210,17,35,146,85,233,18,16,1,0,16,1,0,39,226,4,96,74,116,37,66,84,39,66,4,33,66,8,4,0,160,17,2,8,64,107,248,0,3,248,32,130,8,63,130,8,4,0,160,31,2,8,223,97,16,31,0,0,63,130,168,42,143,254,17,6,158,162,37,84,40,141,148,42,45,128,43,236,162,43,225,34,128,5,254,4,41,250,132,40,146,154,168,210,178,40,210,177,40,6,64,2,254,0,72,116,85,65,84,39,76,84,64,68,4,65,64,8,79,226,146,9,40,254,73,33,186,42,172,170,75,164,130,79,224,130,17,1,16,123,193,16,255,226,168,110,202,170,42,164,168,76,137,152,71,194,68,247,193,68,39,198,160,183,226,146,37,34,106,39,162,6,16,143,208,167,197,36,123,77,44,122,5,62,120,37,58,124,164,4,32,15,188,42,68,164,171,193,0,63,130,8,36,128,64,27,6,8,15,206,164,174,202,180,175,202,32,175,206,32,159,224,0,21,66,82,63,130,72,53,130,232,63,128,64,63,128,64,127,192,0,84,136,164,2,3,254,32,10,252,104,66,252,104,74,252,42,34,148,72,136,198,16,2,124,68,73,124,36,70,124,165,2,82,36,194,72,37,66,98,16,9,124,100,70,124,148,65,124,53,37,84,148,129,72,86,66,66,32,2,124,36,67,124,172,74,124,165,34,84,36,130,72,37,66,98,2,0,252,224,10,120,164,138,120,160,10,252,224,138,16,5,0,32,4,7,252,0,1,240,17,1,240,0,3,248,1,0,32,2,0,96,34,130,124,242,130,254,97,7,124,173,74,124,37,66,124,34,130,68,40,4,240,146,227,240,85,237,244,85,69,244,68,69,244,74,69,28,32,2,254,32,11,124,164,74,124,164,66,68,39,194,0,47,226,0,8,7,252,20,3,248,4,15,254,4,7,188,10,66,168,17,6,172,4,128,72,228,138,252,164,138,72,164,139,254,224,10,72,8,65,2,34,130,40,42,139,124,162,138,40,162,130,254,32,5,40,76,72,0,32,2,0,35,239,136,168,138,136,248,130,8,40,131,200,231,224,0,129,4,124,60,65,84,148,197,64,23,227,2,87,169,130,48,160,4,68,130,72,4,137,254,68,129,72,36,133,254,192,4,72,72,69,2,4,0,32,127,228,66,132,7,252,8,0,144,18,1,72,47,196,68,0,143,8,16,129,8,241,8,16,129,15,32,18,65,66,87,226,2,32,2,0,71,201,16,225,2,16,65,15,144,1,1,144,231,224,0,4,0,92,232,74,190,186,10,190,172,138,136,235,234,136,9,64,162,16,1,120,32,130,254,100,10,124,41,2,16,47,226,40,36,66,130,36,2,92,168,68,254,186,2,190,108,138,136,43,226,136,169,68,162,0,129,232,226,138,72,164,138,88,166,138,200,244,168,74,20,160,134,63,226,132,47,194,132,47,194,0,39,194,8,33,4,254,65,8,48,16,1,28,40,66,190,105,10,158,42,130,136,43,226,136,33,66,34,1,131,224,32,2,0,63,194,0,32,2,248,40,132,136,79,136,136,0,224,240,225,10,146,165,74,16,175,234,16,225,10,16,5,0,32,3,199,192,4,2,72,21,0,64,255,224,64,4,0,64,20,0,128,16,1,0,63,194,164,74,65,36,36,192,0,4,69,34,144,160,248,4,14,78,68,164,234,68,238,74,78,164,174,74,166,234,193,32,38,4,7,252,4,3,248,0,7,254,138,34,168,27,0,160,255,224,0,17,15,254,17,2,0,35,207,164,35,199,36,83,197,36,114,64,76,32,2,60,34,79,164,35,194,36,114,69,60,82,71,68,69,64,136,36,2,78,36,175,234,164,234,74,174,175,174,42,163,234,233,32,38,32,10,28,78,134,168,170,130,168,106,138,168,42,66,164,171,165,8,36,2,78,164,167,234,36,239,74,46,231,170,170,162,234,33,34,38,8,8,156,73,65,212,137,196,148,61,69,92,213,69,212,66,64,76,0,14,28,46,130,168,234,136,168,138,142,168,42,66,164,171,165,8,7,0,64,127,228,66,95,4,68,67,196,0,79,4,144,73,41,14,1,192,16,239,234,146,175,202,146,168,234,128,235,137,40,18,162,70,33,2,8,35,239,162,34,35,62,98,10,32,34,2,64,164,4,128,0,7,252,8,0,128,31,129,8,16,130,8,63,0,16,1,7,254,1,4,8,39,232,66,68,33,126,36,12,64,68,4,128,72,1,0,4,0,32,0,3,252,32,66,4,63,194,0,32,4,0,64,8,0,17,15,254,17,0,0,10,1,40,51,5,32,150,33,162,17,225,0,2,128,42,228,202,200,181,170,106,164,106,16,239,234,16,1,0,16,18,1,36,34,134,48,166,66,164,33,192,64,255,224,64,4,0,64,39,194,68,167,68,84,175,226,130,103,202,68,39,194,68,164,68,76,71,194,68,7,72,84,95,225,2,39,204,68,71,196,68,71,192,68,0,15,254,0,5,244,85,69,244,85,69,84,95,68,4,127,192,4,40,66,68,33,67,212,225,66,84,41,65,20,49,76,164,6,64,44,18,1,32,34,66,40,99,10,32,38,2,162,34,34,34,33,226,0,0,196,112,33,0,16,239,226,16,33,2,124,36,67,196,36,64,124,33,2,32,39,207,84,39,199,84,111,202,36,163,130,92,37,34,158,32,4,254,136,33,186,42,166,170,170,162,186,40,34,254,40,34,0,32,2,254,32,139,16,169,10,52,165,34,146,33,2,16,33,2,16,69,2,136,15,225,144,169,4,254,41,4,254,201,4,144,79,224,128,32,2,254,32,130,16,249,2,52,37,34,18,57,14,16,65,0,16,2,0,32,251,224,162,140,69,8,80,130,8,81,69,20,138,64,66,0,15,190,32,130,8,33,15,52,37,34,146,57,46,16,65,0,16,32,2,0,47,239,0,39,199,68,103,202,68,39,194,0,47,226,0,64,2,126,32,128,16,227,66,82,41,34,16,33,2,0,95,232,0,32,228,240,73,73,72,239,196,32,143,238,64,7,194,164,209,128,102,34,2,60,36,143,144,39,195,84,101,74,254,33,2,40,164,68,130,4,3,248,36,131,248,4,7,252,68,71,252,4,2,132,101,41,240,2,0,60,116,133,144,87,197,84,85,69,84,95,231,16,66,128,198,2,3,254,164,6,120,41,2,124,101,74,84,47,226,16,66,136,198,36,129,80,127,192,128,255,225,8,63,76,130,20,130,112,10,131,100,34,2,160,55,202,72,169,10,124,165,66,84,47,229,16,74,136,70,68,2,120,8,137,16,71,193,84,37,76,84,95,228,16,66,128,198,8,0,64,127,196,4,63,130,64,63,130,8,63,130,64,36,3,252,32,2,0,71,197,4,144,78,4,32,68,4,72,79,196,69,64,8,16,143,254,20,128,32,127,226,0,63,192,0,36,130,74,36,164,70,68,69,254,100,68,16,223,228,128,79,196,0,74,132,168,74,165,38,17,7,252,17,15,254,4,3,248,36,131,248,36,131,248,17,2,8,2,143,124,34,130,254,65,7,124,213,69,124,85,71,124,82,128,68,32,130,62,34,47,190,170,42,190,248,2,62,40,131,190,232,128,62,65,7,190,149,71,252,17,15,254,36,131,248,36,131,248,17,2,8,8,3,248,32,131,248,32,131,248,0,7,252,4,3,248,4,15,254,63,130,72,46,130,168,46,130,168,63,130,72,46,164,74,95,104,2,33,2,124,36,75,124,172,74,124,160,2,124,33,2,124,33,2,254,33,2,124,44,75,124,164,74,124,160,2,254,33,5,124,65,8,254,63,130,8,63,130,8,63,128,64,36,129,80,127,192,160,18,38,30,35,194,36,251,202,164,171,202,144,173,74,184,175,235,168,34,162,70,33,2,16,41,43,84,161,10,254,162,130,40,34,162,74,36,162,134,4,137,254,68,128,16,223,228,128,79,196,0,74,134,168,74,161,38,8,0,128,255,224,128,9,1,82,21,65,88,41,2,40,68,64,130,32,2,252,42,79,32,47,195,32,101,10,124,33,2,254,161,4,16,39,226,82,169,7,126,33,15,168,83,229,8,87,229,136,144,128,8,36,69,84,149,67,254,73,173,42,92,164,138,95,68,100,85,166,210,34,2,32,47,227,32,162,138,74,166,194,168,40,131,20,33,66,34,32,2,62,34,47,162,171,170,170,250,162,58,42,35,162,235,224,0,0,7,248,64,132,8,94,133,40,82,133,232,82,132,8,127,132,8,64,9,188,138,77,164,140,111,128,3,207,164,34,131,144,226,128,70,36,3,126,40,10,124,164,74,84,191,226,164,41,66,254,32,66,24,17,7,188,17,7,188,17,15,254,0,135,248,4,5,36,80,168,248,4,0,64,127,192,64,21,1,16,255,225,16,17,1,16,33,4,16,4,7,252,36,131,248,36,131,248,4,47,254,4,5,36,80,168,250,4,14,126,168,11,124,164,78,84,191,234,164,169,78,254,0,64,24,0,143,136,139,234,144,171,234,210,169,234,146,169,229,18,73,168,20,24,142,42,34,162,62,248,130,30,114,38,212,160,194,8,35,2,192,4,0,160,17,2,8,223,96,0,0,7,252,8,1,16,63,129,8,33,2,40,180,74,130,167,202,0,47,226,32,84,68,254,132,32,0,64,2,126,4,8,64,84,1,64,36,12,64,68,4,64,71,224,0,2,8,32,95,224,32,239,194,32,47,226,34,42,35,42,34,64,32,4,4,126,40,0,124,228,66,84,47,226,100,37,67,126,33,64,8,65,4,40,84,73,130,231,196,0,128,15,126,1,3,36,199,224,2,17,15,254,17,7,254,72,43,248,20,3,248,4,7,252,4,0,64,3,135,192,68,7,252,66,5,20,96,195,248,32,131,248,32,131,248,32,194,112,37,15,126,84,133,102,80,37,124,36,69,124,132,64,124,4,14,248,10,128,248,234,132,248,68,72,104,171,78,188,18,34,30,128,5,254,18,40,32,95,192,64,41,4,252,193,5,254,65,0,16,0,4,252,40,64,252,136,68,252,16,2,146,205,68,152,73,36,206,32,15,148,170,39,80,33,135,36,36,47,188,34,71,36,83,199,36,64,194,112,1,8,16,79,225,16,33,12,124,68,68,68,71,192,68,17,1,16,33,2,82,101,74,88,41,2,16,34,130,40,36,66,130,4,0,64,4,66,72,37,2,64,68,0,160,10,1,16,32,132,6,18,15,254,18,8,148,81,34,16,223,227,16,82,137,40,84,66,130,2,128,36,255,224,32,114,5,36,82,71,24,13,47,42,68,96,2,1,79,254,1,7,148,73,71,136,13,175,38,68,33,68,81,40,242,127,192,64,127,234,74,18,35,252,98,11,252,34,3,252,34,3,254,20,130,80,102,74,68,43,194,0,63,130,8,36,130,72,11,7,8,64,2,124,244,65,68,39,199,16,175,226,146,42,162,198,40,34,134,4,0,64,127,192,64,4,15,254,4,4,68,68,68,68,127,192,0,32,2,254,36,79,72,37,226,66,44,35,100,229,68,136,9,65,34,17,7,252,17,1,240,17,1,240,17,15,254,36,133,244,132,39,252,32,2,120,36,143,72,36,135,72,108,138,72,36,162,138], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+40977);
/* memory initializer */ allocate([48,98,0,1,15,144,175,202,144,170,143,254,168,74,188,170,207,188,136,64,12,50,78,254,34,130,74,248,226,88,118,38,190,164,66,124,36,66,124,24,14,60,34,66,36,250,66,36,115,202,128,32,2,36,36,34,0,65,7,222,162,129,16,127,193,16,31,1,16,17,15,254,17,2,8,0,7,184,74,132,168,122,132,168,74,135,170,74,164,170,108,105,0,64,4,120,116,137,72,4,132,72,68,132,72,84,166,74,72,161,6,4,8,32,95,192,80,205,133,84,69,68,144,83,4,0,191,224,0,16,139,200,101,3,222,39,75,212,73,67,212,80,137,212,37,68,226,0,4,120,36,128,72,228,130,72,36,130,200,52,130,74,8,161,6,2,0,120,244,129,104,149,133,64,87,194,4,87,69,4,129,64,8,32,2,124,37,15,80,87,197,68,148,69,124,37,5,80,79,200,0,33,2,254,65,9,124,225,2,254,64,15,124,5,67,84,194,128,68,39,132,72,87,137,0,239,196,72,135,143,72,7,131,78,207,128,8,4,0,64,255,224,64,4,7,252,0,0,0,63,130,8,32,131,248,32,2,124,34,79,168,34,231,34,106,42,52,165,66,72,41,66,34,32,130,8,251,226,8,251,234,170,186,226,8,113,202,170,32,130,8,35,194,36,251,196,0,103,234,36,251,194,36,59,206,38,39,194,4,65,7,222,146,130,36,247,226,36,119,226,36,251,199,36,171,194,36,20,2,32,127,138,64,63,2,64,63,128,64,127,193,80,100,192,64,0,7,248,16,129,8,17,1,28,36,66,72,34,132,16,70,137,134,16,3,240,66,11,252,0,67,252,0,67,252,4,5,36,80,168,248,4,0,32,63,226,0,164,6,124,41,6,16,175,226,16,66,136,198,64,2,252,4,136,80,85,193,68,36,140,168,73,5,40,100,68,130,0,7,128,75,199,164,74,71,164,66,70,36,82,70,172,66,0,32,33,2,8,39,239,64,85,5,220,86,137,200,87,226,72,85,72,162,32,2,252,68,77,72,37,4,92,244,64,104,58,140,144,18,130,70,34,2,16,47,207,72,35,2,72,56,110,72,36,130,72,164,132,136,0,1,240,17,1,16,17,1,16,17,1,16,17,34,18,32,228,0,36,129,80,42,129,16,32,133,246,17,1,240,17,1,240,17,1,48,0,7,240,1,0,16,1,7,240,64,4,0,64,68,4,63,192,0,32,143,254,32,135,196,137,71,212,85,71,212,85,71,196,1,79,232,33,2,16,47,239,16,33,2,252,52,78,68,34,130,16,162,132,198,10,79,168,11,35,162,201,227,248,36,131,248,36,143,254,17,2,8,3,131,192,4,7,252,21,14,78,31,0,32,255,224,64,20,0,128,17,2,16,63,230,16,175,194,68,36,66,40,33,2,40,44,98,0,34,3,188,106,77,24,32,133,244,128,35,248,4,2,80,84,128,128,32,33,2,254,164,74,40,161,10,44,172,42,40,162,130,40,164,132,32,194,112,49,10,254,163,138,84,171,162,8,47,226,16,37,2,32,66,2,16,15,232,68,66,129,16,34,140,198,68,132,72,68,128,136,4,7,252,68,75,248,10,1,16,127,192,16,61,2,80,61,0,48,4,0,32,127,229,2,157,193,20,125,65,20,88,137,72,17,67,34,1,4,16,33,0,16,239,226,16,33,2,16,41,3,16,33,0,16,64,2,124,0,64,4,231,194,64,36,2,64,44,35,66,35,224,0,0,15,124,145,15,80,149,15,126,129,10,16,178,173,42,132,160,134,63,128,8,63,130,0,32,65,252,0,0,68,82,37,10,143,128,0,0,7,60,80,5,0,87,230,16,81,5,84,101,36,146,69,4,32,33,2,16,47,239,16,81,5,124,82,69,36,34,133,16,130,128,198,32,130,72,70,165,92,228,130,126,69,207,106,4,131,72,199,224,0,32,2,124,64,73,4,224,66,124,68,15,64,4,35,66,195,224,0,4,15,254,4,7,252,32,131,248,17,15,254,32,15,188,74,73,188,72,4,128,232,229,234,74,166,170,218,164,170,74,164,174,82,166,96,4,0,64,127,192,64,36,129,80,4,15,254,10,1,16,32,140,6,18,1,32,47,130,32,98,11,252,34,2,32,47,130,32,34,3,252,4,7,252,64,75,248,8,1,68,106,129,48,102,128,166,50,0,192,32,2,0,35,207,164,42,66,164,42,66,164,74,68,188,170,65,0,17,15,254,17,0,64,127,192,64,36,129,80,255,224,160,49,140,6,32,2,62,248,130,16,171,231,34,34,175,170,34,165,42,73,72,34,127,192,160,127,196,164,127,192,0,63,130,8,36,130,72,11,3,8,0,7,252,68,68,68,127,196,68,68,71,252,4,0,64,4,0,64,32,2,62,122,168,42,115,226,42,250,162,62,40,131,8,32,128,8,16,1,238,42,34,162,110,234,128,46,226,138,46,162,132,40,194,146,26,14,16,47,226,130,247,194,32,117,74,184,37,130,52,45,34,48,17,1,16,34,130,68,104,42,40,34,130,40,34,130,72,36,130,136,32,15,188,42,68,164,155,192,64,255,224,224,21,2,72,68,64,64,32,15,188,42,66,164,75,200,0,63,1,16,31,192,4,127,64,12,34,2,16,47,239,130,87,197,32,86,69,184,37,133,180,133,32,176,0,15,156,39,3,144,73,4,144,183,225,16,33,4,16,129,0,16,18,5,60,85,5,136,80,128,0,63,130,168,42,130,168,255,224,0,16,5,124,82,69,40,81,5,40,20,96,64,63,128,64,255,224,0,4,1,80,20,130,68,68,64,0,4,15,254,10,1,16,32,132,6,66,7,190,164,128,36,9,0,252,120,0,254,120,128,80,6,35,158,64,2,252,64,68,4,95,69,20,95,69,20,95,68,4,64,68,12,32,129,16,255,228,136,122,132,168,122,132,136,88,128,24,82,72,146,17,15,254,10,7,252,10,71,254,10,71,252,27,2,168,74,96,160,2,3,254,32,35,254,32,2,252,40,66,252,72,68,252,136,64,140,0,0,124,244,65,124,148,69,124,85,2,84,84,132,200,133,64,98,32,2,0,39,207,16,81,5,16,95,229,16,33,3,16,73,8,16,33,66,18,79,233,152,238,130,136,78,174,172,14,131,154,202,97,2,17,15,254,17,0,64,63,130,72,36,131,248,4,0,72,127,192,4,33,2,16,34,143,68,40,39,124,96,10,162,165,66,0,47,226,0,4,15,254,4,7,252,85,68,228,127,192,224,21,2,72,68,96,64,0,175,136,39,226,72,71,135,72,215,69,86,87,71,76,85,96,130,1,15,144,34,130,68,72,39,124,210,5,84,82,71,8,87,224,0,34,2,32,47,207,32,47,2,80,55,206,16,37,66,146,165,36,32,33,2,16,34,143,68,40,34,124,50,14,20,36,66,40,175,228,0,33,7,190,148,130,252,80,68,244,73,68,244,73,68,244,64,192,0,17,1,16,34,130,68,104,42,124,34,2,148,36,66,8,47,226,0,17,15,254,40,131,168,42,131,136,42,128,16,127,192,132,17,66,8,0,160,8,191,230,8,46,130,8,110,170,172,174,138,26,162,100,2,32,143,254,32,128,128,255,225,0,39,134,16,175,194,16,37,2,32,66,132,168,74,238,180,74,38,32,223,197,84,85,69,84,127,228,0,18,5,124,89,1,72,11,3,8,223,96,64,63,130,72,21,7,252,2,15,40,147,201,224,242,2,60,190,10,36,161,139,50,236,160,6,2,15,168,139,202,224,171,202,224,170,138,168,33,5,18,74,168,70,0,3,248,32,130,72,36,130,72,36,130,168,10,33,34,33,228,0,65,4,124,97,73,254,5,78,188,69,14,124,89,6,254,85,2,62,66,7,190,148,130,20,18,15,254,72,135,168,74,135,136,74,133,144,17,1,16,37,2,124,101,10,144,33,2,254,33,2,16,33,2,16,33,2,124,89,68,254,209,69,124,73,4,252,105,5,126,105,4,126,16,2,124,116,69,84,117,69,84,245,69,16,114,133,42,146,163,70,16,65,4,41,68,84,189,64,20,21,69,84,40,65,196,225,64,8,66,132,36,114,9,60,46,4,60,78,4,40,81,38,50,76,160,6,136,100,152,31,8,144,85,225,244,37,76,116,93,68,84,70,64,68,0,171,232,98,226,56,42,234,184,106,162,172,8,132,154,150,98,34,72,2,94,0,40,186,74,161,186,42,172,186,74,164,130,72,160,132,2,14,248,34,131,254,66,134,248,34,10,248,162,4,252,162,1,254,47,130,0,79,140,168,79,132,168,95,196,168,79,132,168,95,196,0,32,129,16,127,224,64,63,192,64,127,224,128,255,225,16,14,7,30,34,2,60,36,74,168,97,2,104,47,230,8,164,130,40,32,130,24,18,5,60,54,67,24,81,1,96,4,79,104,21,2,72,84,96,128,64,2,248,2,8,32,82,1,32,34,12,32,66,5,252,64,0,0,15,239,84,23,207,84,143,239,0,95,239,84,87,207,84,31,230,0,16,143,254,18,128,60,150,69,152,19,3,72,95,233,8,20,129,24,18,5,60,52,69,168,147,1,64,255,224,224,21,2,72,68,96,64,18,5,60,52,65,104,57,5,32,20,0,64,127,192,160,17,6,12,4,132,72,36,128,252,228,130,72,63,226,72,36,131,72,40,129,8,0,7,252,64,4,24,78,4,128,79,196,144,73,5,16,64,7,252,18,5,60,54,133,16,22,15,254,9,7,252,81,70,220,64,71,252,114,5,60,86,69,24,98,69,210,87,197,16,101,4,126,65,4,16,17,15,254,21,2,32,127,138,64,63,130,64,63,194,0,84,136,164,68,4,78,70,175,74,68,166,234,212,164,106,85,70,76,85,36,162,2,143,36,39,226,72,79,231,72,215,229,72,87,231,64,74,161,42,18,1,16,63,194,32,127,202,32,63,194,32,63,226,0,82,72,146,1,7,8,87,229,0,114,69,66,80,7,40,82,133,16,82,139,70,8,0,64,255,224,0,17,2,8,81,64,160,4,0,160,49,140,6,32,1,30,253,32,20,73,132,84,129,34,146,17,162,148,69,8,16,66,2,60,30,8,40,65,33,110,32,13,252,69,4,82,73,33,14,0,207,112,81,5,254,82,133,68,120,32,168,58,140,168,42,129,72,32,194,112,33,2,254,242,133,68,90,165,40,34,133,40,138,128,72,15,238,84,175,234,170,175,234,4,174,234,164,239,74,204,10,64,204,34,34,146,244,66,254,40,35,124,100,74,84,37,66,16,162,164,198,34,2,16,119,228,0,244,66,130,34,143,40,34,130,144,50,130,68,64,196,112,113,10,16,39,239,168,36,66,170,82,132,168,130,128,72,18,1,60,46,2,40,97,74,236,32,3,254,37,2,80,37,34,142,4,7,78,94,165,74,116,165,234,84,167,74,90,229,232,82,139,8,18,9,16,95,226,0,82,137,68,56,37,40,146,129,16,82,130,68,16,3,240,66,15,252,68,71,252,68,71,252,68,68,68,69,72,8,65,4,254,112,9,40,4,68,130,66,132,40,81,6,40,68,65,130,36,130,232,74,142,238,43,36,234,132,173,234,8,174,228,18,194,114,34,2,16,79,239,0,36,68,130,242,128,40,1,3,40,196,64,130,84,74,132,85,71,212,85,71,212,85,71,212,17,79,244,84,73,44,17,7,208,25,15,222,34,71,164,77,73,20,28,135,8,17,67,34,1,15,186,33,79,254,169,10,188,218,72,200,251,232,136,250,128,16,32,194,112,241,4,254,98,138,68,250,162,40,58,142,40,36,130,136,34,2,16,247,228,0,66,74,66,250,130,40,57,14,40,36,66,130,0,64,4,242,73,36,146,73,36,146,201,52,242,73,4,0,64,4,4,15,254,145,34,72,20,3,248,68,15,254,0,3,248,32,131,248,39,194,68,39,207,68,39,195,32,103,234,146,53,34,106,167,164,6,34,2,16,47,239,68,34,130,254,50,14,252,36,130,72,163,4,206,66,69,40,99,5,162,97,224,128,63,130,8,63,130,8,63,130,8,25,14,16,47,226,16,249,2,124,112,6,252,164,66,68,39,194,68,40,4,156,188,4,128,253,228,136,92,132,136,78,135,136,66,132,16,1,7,16,82,133,68,104,38,72,84,133,72,84,134,72,72,133,8,17,7,212,17,15,254,49,4,148,253,69,24,125,37,42,124,100,2,17,1,16,125,1,60,17,79,212,33,68,148,250,68,164,5,64,136,17,15,254,17,0,0,127,128,136,8,128,136,10,128,144,8,0,128,33,2,16,47,239,16,33,7,124,104,10,124,36,66,68,39,194,68,4,0,64,255,224,224,21,2,72,196,96,64,0,5,36,137,32,0,33,2,254,33,15,124,33,66,254,49,78,124,33,2,92,165,4,190,1,14,254,161,10,124,225,74,254,161,78,124,161,10,92,229,0,190,71,194,68,7,207,68,7,197,32,87,229,146,37,35,106,199,160,6,130,4,32,31,200,32,66,0,248,32,4,248,200,132,136,79,132,136,33,2,16,79,229,16,225,2,124,64,15,124,4,67,68,199,192,68,32,3,190,73,41,38,124,5,84,125,229,100,125,229,68,84,72,196,32,2,120,36,143,72,87,133,72,84,133,120,36,133,72,143,192,0,2,0,40,2,79,254,2,2,160,42,71,228,42,130,146,74,168,134,17,15,254,17,2,40,247,226,40,127,226,68,247,199,68,172,66,124,17,15,254,17,0,64,10,3,16,192,225,20,17,1,16,33,4,16,63,130,72,63,130,72,63,128,160,49,141,22,17,1,16,33,4,16,20,129,72,47,198,72,191,226,0,47,194,132,47,194,132,47,194,132,4,0,160,17,2,8,192,97,16,17,1,16,17,1,16,33,4,16,4,0,32,63,234,32,101,2,136,112,106,72,36,132,72,72,137,8,0,200,10,95,224,8,202,132,168,95,164,172,74,134,170,73,97,34,0,7,252,64,71,252,66,4,32,95,197,36,95,197,36,95,201,4,4,0,64,4,7,252,68,68,68,68,68,68,69,68,72,4,0,64,66,7,190,148,128,16,121,4,188,121,68,148,121,68,164,74,73,204,0,0,28,62,2,0,32,3,252,34,2,32,34,4,32,66,8,32,4,0,160,17,2,14,223,64,64,63,128,64,36,129,80,255,224,0,4,0,160,17,2,8,200,96,64,0,3,252,0,128,16,2,0,64,66,2,248,2,137,254,66,128,248,34,4,248,194,5,252,66,0,32,68,130,254,244,129,220,38,166,128,179,194,128,47,226,84,41,34,48,23,133,72,83,5,200,18,96,192,63,1,8,127,192,68,37,4,200,65,4,124,244,64,124,228,68,124,241,4,254,73,38,146,73,96,16,16,1,0,47,194,68,100,74,68,36,130,40,33,2,40,36,98,128,132,68,254,4,64,124,193,4,254,73,36,254,65,6,254,65,0,254,137,4,144,95,192,144,201,7,252,73,4,144,81,6,0,159,224,0,80,79,184,82,7,32,35,207,168,170,143,168,34,143,168,36,130,136,0,7,252,10,4,164,42,143,254,0,3,248,32,131,248,32,131,248,17,15,254,59,133,84,145,32,0,127,128,0,255,226,72,68,64,192,0,196,112,36,0,126,228,130,72,36,130,72,40,131,0,95,232,0,32,2,124,172,75,68,167,202,72,36,130,100,85,36,128,139,0,8,79,194,4,7,200,4,79,194,0,95,237,2,79,196,72,67,1,206,0,3,252,32,67,252,33,2,16,44,130,40,32,68,194,131,0,16,1,7,144,9,1,62,41,36,82,185,33,18,17,33,226,114,160,68,40,79,228,41,64,20,125,66,148,41,79,244,41,66,132,73,72,136,33,2,16,247,194,16,247,201,68,247,198,40,106,135,42,164,160,134,17,15,254,17,0,0,127,128,16,6,1,152,224,99,248,4,7,252,1,14,254,161,10,124,225,10,254,164,78,124,164,74,124,228,64,76,63,130,8,63,130,8,63,128,0,251,232,162,251,232,162,251,232,162,65,7,8,151,226,0,251,234,162,251,234,136,250,192,74,48,140,24,8,0,64,255,224,0,63,130,8,63,128,64,21,2,72,68,64,192,34,2,16,47,234,0,183,202,68,167,194,16,37,66,146,33,34,48,33,10,254,113,2,124,241,2,254,116,74,124,36,66,124,36,66,76,32,10,254,113,2,124,245,66,124,117,74,124,41,2,80,34,2,222,32,2,124,64,137,16,226,130,68,72,47,124,1,3,16,207,224,0,17,1,16,17,7,252,17,1,16,255,225,16,17,2,16,33,4,16,17,15,254,33,7,222,214,69,84,116,128,212,2,15,254,32,131,248,63,130,8,63,130,8,63,128,64,255,226,8,63,128,64,36,132,196,0,15,126,16,130,16,83,232,162,114,162,42,34,163,136,225,64,34,34,15,188,36,79,136,39,207,148,7,239,148,143,207,144,137,9,176,65,4,254,68,68,40,239,228,68,71,196,68,119,204,40,4,160,134,41,2,144,253,2,158,67,71,212,133,71,84,84,135,72,85,64,162,65,4,254,116,72,40,15,238,68,71,207,68,71,196,40,100,164,134,32,4,252,128,129,16,34,134,68,168,34,124,33,2,16,47,226,0,4,0,32,63,234,0,111,194,8,99,74,194,39,194,16,65,8,254,65,2,124,1,15,124,1,5,254,80,5,124,36,67,124,196,64,76,4,7,252,17,0,160,255,226,8,63,130,8,63,128,160,18,70,28,4,7,252,17,0,160,255,224,0,63,130,8,63,128,162,18,38,30,4,8,120,72,129,16,15,194,36,95,236,36,79,196,32,74,0,64,32,2,126,44,43,66,167,170,106,166,162,122,84,37,66,132,160,68,4,7,254,80,163,244,5,7,252,9,3,240,16,2,248,72,128,248,34,130,200,36,143,74,37,194,232,52,142,72,46,131,84,165,68,98,4,0,32,127,228,146,144,130,132,8,3,240,9,0,146,17,34,14,16,33,2,37,34,146,121,33,18,33,103,218,1,32,194,112,32,2,2,15,160,35,194,36,36,71,72,40,130,16,58,142,68,72,32,0,10,7,188,10,0,160,123,192,160,10,7,188,10,0,160,255,224,0,16,1,0,31,130,8,33,4,16,2,0,32,5,0,144,16,134,6,32,3,240,66,0,80,24,206,4,4,2,72,37,4,160,49,140,6,8,0,128,8,3,240,9,0,144,9,1,18,17,34,18,64,224,0,0,11,254,69,1,252,149,69,84,56,197,4,223,197,4,95,193,4,0,7,254,64,5,254,84,133,232,87,229,200,80,133,90,90,169,70,32,130,136,33,15,222,34,74,164,117,71,20,168,130,24,162,68,66,0,4,252,72,68,132,72,68,252,72,68,132,72,68,252,72,64,0,0,1,128,99,196,4,64,68,4,123,196,4,64,68,4,127,196,4,123,196,4,123,196,4,127,194,72,63,130,72,127,192,132,17,70,8,33,2,16,125,132,84,169,1,16,111,232,0,63,130,8,32,131,248,66,2,40,250,64,32,119,229,40,114,130,40,114,170,170,36,166,134,4,0,32,63,226,64,164,6,120,40,134,144,177,2,40,68,72,130,82,15,190,84,39,214,35,175,254,169,47,186,37,111,146,32,162,4,34,2,32,251,226,66,32,35,58,98,170,42,35,162,2,161,68,8,16,9,124,84,66,68,87,201,68,52,69,124,148,65,68,95,226,0,2,3,252,32,10,248,104,130,136,111,138,136,47,132,136,72,139,254,0,3,252,32,67,252,34,2,32,63,194,32,47,132,136,72,136,248,2,15,32,83,229,66,88,37,58,122,160,170,59,172,130,40,161,4,17,15,254,81,7,252,136,66,164,28,71,244,28,66,164,73,64,140,0,3,248,32,131,248,32,3,252,32,66,244,41,68,244,65,72,8,0,0,124,116,69,68,87,197,68,84,71,124,84,64,68,15,224,0,64,4,62,122,10,32,35,226,34,250,34,62,34,5,32,83,232,128,8,4,72,33,15,254,17,2,72,196,99,248,4,7,252,4,0,64,64,2,124,4,72,68,87,193,68,36,76,124,68,68,68,79,224,0,252,4,190,121,68,200,249,64,240,60,33,100,109,129,72,100,96,64,32,2,126,36,15,64,39,194,68,52,78,124,36,2,64,167,228,0,32,2,126,36,47,126,36,130,72,55,238,72,39,226,162,170,37,62,0,3,252,32,2,0,63,130,8,32,131,248,32,2,0,63,192,0,31,129,8,31,129,8,31,129,8,31,129,8,127,224,0,16,130,4,60,2,94,37,3,208,17,225,18,29,37,30,81,5,208,241,224,0,0,7,126,84,37,126,116,130,72,55,234,72,187,238,162,19,226,34,64,4,126,116,40,126,116,130,72,247,226,72,45,227,82,41,33,30,16,1,124,36,66,124,100,74,124,36,66,124,36,66,254,34,130,68,16,1,0,63,194,4,64,65,228,18,65,36,30,65,4,1,64,8,39,194,68,55,202,196,167,202,68,167,194,68,47,226,0,36,66,130,16,1,62,86,5,160,83,201,36,18,65,60,42,2,96,67,224,0,0,7,228,66,71,228,73,68,148,127,68,148,93,69,68,157,65,72,32,2,124,36,79,124,32,2,124,52,70,124,164,66,124,164,68,76,1,7,188,74,71,180,2,199,160,75,231,130,75,167,130,72,165,132,32,2,124,36,79,124,80,5,124,84,66,124,36,69,124,132,64,76,17,1,84,35,130,252,98,11,254,36,130,252,52,162,88,36,66,60,36,129,80,4,7,252,8,15,254,17,131,244,209,33,240,17,1,240,36,129,80,127,192,128,255,225,16,32,133,244,145,33,48,16,64,252,32,2,124,68,73,124,240,2,124,68,79,124,4,67,124,196,64,76,64,5,254,80,143,168,84,229,242,116,13,84,95,69,68,100,172,146,46,226,170,46,239,170,46,227,72,111,235,72,39,226,36,161,132,230,33,2,16,33,15,124,33,66,20,49,78,254,33,2,40,164,68,130,64,5,252,80,79,252,81,7,84,213,69,124,81,5,84,85,78,124,16,1,254,40,34,254,104,138,170,42,162,190,40,130,170,42,163,62,3,199,200,21,7,252,74,71,252,112,133,126,112,132,40,80,134,152,8,2,72,17,7,254,128,35,248,32,130,72,36,128,162,18,38,30,2,4,32,34,0,252,34,66,36,95,236,32,69,4,72,72,65,2,2,4,32,34,0,252,226,66,36,47,226,32,37,3,72,40,65,2,34,2,60,68,137,144,231,194,84,69,79,124,4,3,66,196,32,62,34,2,32,39,194,132,244,66,36,32,66,20,58,78,68,65,64,8,17,15,254,17,7,252,66,69,196,68,71,252,78,69,84,68,71,252,34,2,32,59,196,68,136,71,36,33,79,148,34,66,132,50,130,16,0,7,252,72,64,128,127,1,0,36,3,248,4,7,252,4,0,64,0,3,248,8,143,254,8,131,248,16,3,248,80,137,8,31,128,0,32,130,16,34,42,190,169,74,162,169,10,158,186,46,212,0,128,118,18,1,68,47,226,42,100,74,162,39,194,68,42,130,16,34,130,198,65,2,36,247,224,36,84,37,32,83,194,36,54,142,144,66,128,198,68,2,136,31,200,84,72,129,68,39,132,136,213,4,32,69,1,140,0,7,222,37,47,244,37,135,212,65,43,210,37,162,84,61,2,80,1,15,36,23,229,36,85,36,16,123,192,228,58,140,144,42,129,70,2,14,16,191,235,66,167,202,168,161,10,108,232,42,124,4,64,124,8,0,128,232,235,234,170,170,170,170,174,170,170,160,174,18,162,96,8,0,128,15,0,128,8,15,254,8,0,160,9,128,136,8,0,128,2,0,32,231,202,68,170,138,16,162,142,198,151,128,72,4,128,120,0,0,0,127,193,16,17,1,16,255,225,16,17,2,16,33,4,16,40,130,138,46,207,136,46,162,134,50,14,252,40,66,252,168,68,252,36,130,74,38,207,72,36,167,102,105,10,124,164,66,124,36,66,124,32,10,184,170,143,168,2,143,168,10,143,168,130,137,74,164,172,134,64,5,222,84,135,216,86,141,254,80,133,152,85,165,170,84,100,0,0,71,196,17,65,20,17,79,244,17,65,20,17,65,4,17,65,8,34,66,254,34,66,60,242,66,60,34,66,254,53,78,98,68,0,126,36,135,232,36,131,222,36,163,202,36,175,234,84,166,42,125,32,38,34,2,32,34,2,62,244,34,84,41,2,16,57,14,40,68,65,130,1,15,144,35,226,34,68,71,16,209,5,16,82,135,40,68,64,130,7,135,192,4,3,248,8,15,254,16,131,248,80,137,248,16,129,248,4,0,32,127,228,40,95,196,40,95,132,164,70,132,176,82,136,100,65,5,254,113,5,124,209,69,254,81,69,124,85,37,60,85,70,178,34,10,16,127,226,148,255,226,148,127,198,210,171,194,180,45,35,48,32,2,0,39,207,16,33,3,16,97,10,16,33,2,254,160,4,0,34,2,16,47,239,0,32,2,120,52,142,72,36,130,138,168,165,6,8,0,64,255,224,0,31,1,16,17,1,16,17,34,18,32,228,0,34,2,16,47,234,128,176,10,120,164,130,72,84,132,202,132,160,134,8,0,136,127,0,160,255,224,128,63,140,64,15,128,8,5,0,32,33,2,18,39,207,24,47,227,32,103,202,160,51,194,4,161,68,8,33,2,18,39,203,24,175,234,32,39,194,160,83,196,132,130,64,24,36,3,252,68,15,254,32,131,248,10,7,188,10,7,188,10,0,160,32,2,126,32,79,4,39,66,84,37,67,212,231,68,4,1,64,8,17,7,252,17,0,0,127,224,8,60,130,72,60,128,8,2,128,16,32,2,126,32,79,4,39,71,84,101,74,116,165,66,4,33,66,8,32,2,124,37,79,124,37,71,124,105,10,254,163,130,84,41,34,16,1,15,124,33,2,254,65,7,36,215,229,2,87,199,84,69,64,254,0,15,190,168,143,190,170,47,170,34,175,170,114,170,136,33,66,34,12,135,8,20,129,40,252,129,40,56,229,120,144,129,8,16,129,8,4,7,252,4,3,248,0,7,254,128,33,240,17,1,18,33,36,14,2,0,16,239,234,32,164,138,248,161,42,36,236,138,16,6,129,132,0,7,254,0,131,200,36,130,72,36,131,200,36,128,8,2,128,16,79,130,136,143,132,136,15,130,64,79,205,36,74,68,212,79,64,12,4,0,64,127,192,64,63,130,8,32,131,248,10,0,162,18,38,30,32,65,4,254,65,20,37,71,148,17,66,84,201,65,4,41,76,72,8,0,64,127,197,4,159,2,16,82,0,192,51,141,246,17,1,240,7,196,84,39,192,84,231,194,16,47,226,16,43,131,84,41,32,16,4,2,120,36,15,254,0,3,248,32,131,248,32,131,248,32,130,24,1,0,92,229,10,254,160,10,124,164,74,124,228,74,124,4,64,76,63,130,8,63,130,8,63,130,34,41,67,72,4,99,248,4,7,252,63,130,8,63,130,8,63,130,36,41,131,8,4,101,32,80,168,250,34,2,16,47,226,0,247,130,72,36,130,72,52,172,138,8,161,6,2,0,16,239,234,0,167,138,72,164,138,72,228,170,74,8,161,6,8,0,64,127,228,2,145,2,8,64,67,248,4,0,64,4,7,252,7,143,72,38,130,88,60,174,74,8,97,0,4,69,42,144,160,248,1,7,208,5,0,144,17,1,208,241,5,16,17,33,18,80,226,0,34,2,16,47,239,130,36,66,130,55,206,16,33,2,16,175,228,0,32,2,0,39,239,64,38,34,84,52,142,84,38,34,64,167,228,0,0,0,0,63,130,8,32,130,8,32,130,8,32,131,248,32,128,0,16,1,0,19,199,164,18,65,164,50,69,36,19,193,36,80,2,0,8,0,64,255,232,18,113,192,16,7,207,164,82,133,16,82,168,254,33,2,16,33,15,126,33,7,16,111,202,68,164,66,68,39,194,68,0,7,188,74,68,164,123,192,80,4,143,254,4,0,160,17,6,12,4,15,254,160,167,252,160,163,248,34,2,168,47,130,32,82,73,252,17,15,254,17,0,64,4,15,254,4,3,248,32,130,8,63,130,8,0,143,168,35,239,168,172,138,190,216,8,188,250,72,164,251,200,164,4,0,32,63,226,32,63,194,64,41,2,252,33,5,254,65,8,16,66,2,16,15,238,136,43,229,144,106,142,190,88,132,190,72,133,8,4,7,252,10,3,24,223,96,0,127,192,128,31,128,8,5,0,32,66,5,254,69,4,136,247,100,0,79,196,32,103,204,4,2,128,16,33,2,254,34,143,68,43,163,0,111,234,32,39,194,4,162,132,16,1,7,126,82,133,68,123,162,0,55,202,32,167,203,132,226,128,16,1,7,124,82,133,68,123,165,0,87,199,32,83,197,4,81,75,8,34,2,32,34,2,252,242,66,36,34,66,254,50,14,80,72,129,6,66,7,188,148,128,0,34,2,248,178,138,40,175,226,32,37,2,140,18,1,32,37,2,136,112,106,248,32,3,252,34,2,72,47,194,68,34,2,32,50,10,252,162,74,36,191,226,32,37,2,72,40,67,2,2,7,254,128,33,16,127,193,16,63,130,8,36,130,74,26,38,30,16,143,232,17,7,222,1,35,170,0,135,200,17,69,84,146,67,66,0,7,252,64,5,252,66,4,248,66,4,32,95,196,0,127,224,0,66,7,188,148,131,252,32,2,248,34,2,248,34,2,248,32,3,252,16,9,124,81,2,16,81,9,124,49,5,16,145,1,16,87,194,0,32,2,126,36,15,92,36,135,92,108,138,72,165,226,64,39,226,0,1,15,136,32,2,126,68,7,64,212,5,64,116,5,64,8,1,0,0,7,126,84,5,92,116,133,92,84,135,72,87,229,64,119,224,0,1,0,8,112,5,126,84,7,64,84,5,64,116,4,128,8,1,0,0,8,252,72,64,132,40,66,252,68,140,72,68,132,138,72,161,6,0,3,248,0,0,0,255,224,128,16,1,252,0,64,4,2,128,16,16,15,252,16,1,40,43,2,160,69,8,136,63,130,168,42,143,254,4,4,68,68,71,252,16,5,124,80,69,4,87,197,4,16,66,124,8,0,64,127,229,10,160,69,62,58,65,52,123,65,24,42,164,70,17,15,254,17,15,164,73,131,10,47,76,66,63,128,64,11,3,8,4,15,254,17,2,72,223,96,64,63,128,64,31,0,64,127,192,0,16,66,20,124,197,84,124,197,70,125,193,36,52,67,116,73,40,126,18,1,64,47,194,148,111,202,164,47,194,36,34,130,94,41,35,14,65,4,124,117,73,124,1,4,254,64,4,124,84,70,84,66,128,68,34,2,64,47,203,148,175,202,164,175,194,34,37,66,94,41,35,14,65,2,124,5,73,124,81,2,254,32,12,124,69,68,84,66,128,68,33,2,16,39,194,84,245,66,124,37,66,84,55,206,16,65,0,16,0,3,248,32,131,248,32,131,248,2,2,36,58,130,48,42,35,30,32,2,254,41,47,146,47,226,146,59,174,214,41,34,146,175,228,130,127,196,68,68,69,244,68,68,228,85,70,76,68,68,68,127,196,4,32,194,112,33,15,16,47,226,16,49,14,124,36,66,68,167,196,68,33,2,8,39,239,64,36,3,64,100,10,64,36,2,64,168,5,0,2,7,254,72,7,238,84,165,202,64,197,202,68,165,236,72,137,136,47,193,4,65,70,100,82,68,116,98,69,116,69,69,84,103,68,12,34,2,16,32,2,252,240,2,72,36,130,80,49,14,32,79,192,0,33,2,8,32,15,126,32,2,68,52,78,36,34,130,8,167,228,0,4,46,66,191,42,74,191,171,90,191,170,74,238,169,82,36,32,70,34,66,36,39,239,164,175,234,128,251,202,36,43,195,164,235,192,36,2,135,40,87,197,40,127,229,0,87,199,68,87,197,68,87,203,68,65,2,16,247,224,16,87,194,84,247,194,16,251,130,84,41,36,16,8,128,132,232,11,222,168,10,146,173,43,148,232,72,136,43,225,0,17,15,254,17,0,64,127,194,72,21,15,254,14,3,88,196,96,64,4,0,64,127,192,64,36,129,80,255,224,224,21,2,72,196,96,64,33,2,30,250,34,68,251,234,162,250,163,42,106,170,20,34,34,66,16,143,254,16,128,160,43,194,208,40,128,0,127,196,164,74,79,254,33,2,16,247,199,56,173,66,18,8,15,252,17,0,224,17,6,12,32,2,68,34,143,0,47,231,0,104,10,124,160,2,0,47,226,0,32,2,68,34,143,0,39,227,0,96,10,124,32,2,0,175,228,0,66,7,188,164,129,32,83,197,80,24,128,0,127,196,164,74,79,254,159,228,66,63,168,66,191,170,74,181,170,234,191,169,82,164,168,70,0,2,8,17,0,32,127,192,0,0,3,248,0,0,0,255,224,0,39,233,34,79,162,34,175,166,170,47,162,170,111,170,114,42,162,38,147,228,130,17,33,254,213,37,122,85,37,126,83,167,86,89,33,22,34,130,168,42,239,180,42,34,124,52,78,84,37,66,40,164,164,142,18,5,60,85,5,136,16,3,248,32,130,72,36,128,162,50,44,30,72,132,142,127,36,132,126,238,162,126,164,138,92,166,168,73,68,162,34,130,174,75,73,162,234,2,124,68,79,84,5,67,40,196,160,134,32,2,68,34,138,128,183,202,0,160,2,124,80,4,128,143,224,0,133,5,80,21,233,104,84,66,68,64,13,252,85,69,84,127,224,0,2,15,144,39,194,68,39,207,196,39,194,82,61,78,72,70,64,66,40,2,78,46,175,170,46,199,170,110,170,138,172,194,168,45,130,136,18,5,16,39,197,68,151,193,68,55,197,82,149,65,72,86,66,66,2,7,254,72,5,220,85,69,212,85,133,212,81,69,88,91,9,16,32,1,30,125,36,84,125,68,82,125,36,26,73,68,208,85,6,16,64,2,60,250,72,164,251,200,164,250,74,60,146,74,164,197,64,136,4,8,32,79,128,136,143,132,136,31,130,164,202,132,144,72,132,198,34,66,126,34,79,0,47,226,130,50,14,124,34,66,68,165,68,136,17,7,252,17,0,0,127,196,132,8,3,248,8,129,8,18,130,16,8,0,64,127,196,68,164,3,248,68,0,64,127,192,64,4,0,64,8,0,136,127,0,160,255,192,128,25,2,160,76,72,132,7,192,0,17,1,16,39,162,20,97,139,254,34,2,104,43,3,34,33,226,0,33,2,18,39,239,20,81,133,254,82,9,104,91,34,34,81,232,128,1,15,144,35,239,162,173,74,152,218,72,194,251,200,164,250,72,188,34,2,190,180,42,164,161,138,36,36,34,60,82,68,164,131,192,36,132,133,254,4,136,0,95,225,34,34,4,252,194,68,36,69,68,136,40,143,232,40,131,190,16,167,202,84,167,202,17,47,210,18,161,68,3,131,192,32,2,64,36,3,252,4,2,72,68,72,66,20,0,128,63,128,64,255,232,66,53,128,0,63,130,72,63,130,72,63,130,8,71,199,16,79,232,146,117,66,0,247,194,84,39,195,84,39,192,0,16,143,254,20,135,254,132,39,92,0,3,248,36,131,248,36,131,248,127,192,128,31,131,8,95,128,0,251,226,16,123,234,210,57,226,146,63,194,68,63,194,68,63,193,16,62,128,132,127,226,72,204,96,0,23,193,84,39,198,84,167,194,0,47,226,170,47,226,170,47,226,130,8,1,8,63,192,4,33,5,36,251,224,130,4,7,252,4,15,254,39,194,16,47,239,146,37,66,0,55,206,84,39,194,84,167,196,68,0,135,136,72,132,190,120,164,138,73,39,146,73,36,162,106,169,68,36,129,80,255,225,80,36,132,68,0,0,64,255,224,160,17,6,12,64,2,126,4,40,66,87,225,66,36,46,126,36,34,66,39,224,66,33,2,124,241,2,254,36,71,162,99,202,100,170,130,16,34,130,198,32,2,254,42,175,254,34,7,16,111,234,32,163,194,68,37,66,136,2,8,80,72,129,38,1,2,0,79,204,4,68,132,48,65,0,8,63,194,0,47,130,168,47,130,168,47,130,32,79,132,32,159,192,0,12,71,20,17,79,212,56,69,76,20,15,254,14,1,80,100,192,64,56,65,20,125,67,148,84,65,12,36,3,252,68,15,254,4,0,64,125,1,30,253,163,170,85,33,74,10,67,88,213,96,224,21,130,200,65,7,158,162,64,128,255,226,168,36,130,168,127,196,68,74,69,236,16,9,124,101,66,124,85,73,124,49,5,124,145,1,16,95,226,0,4,15,254,17,4,228,81,71,252,4,7,252,74,69,244,65,68,12,130,5,252,133,5,36,21,67,252,194,5,252,85,69,244,81,65,8,0,15,124,37,66,124,37,79,124,33,2,124,57,14,16,79,224,0,4,0,64,127,192,224,53,140,70,31,0,32,127,192,64,20,0,128,0,3,248,36,131,248,36,131,248,4,0,64,63,128,64,255,224,0,64,7,62,146,162,62,250,170,190,248,138,190,248,128,8,27,238,0,66,2,32,250,0,160,18,3,160,86,9,32,18,33,34,17,225,0,17,15,254,17,0,196,113,65,20,253,67,148,85,73,4,17,65,8,32,143,254,32,128,128,127,129,8,35,129,16,251,194,148,73,73,172,4,15,254,4,3,248,36,130,72,63,130,64,20,0,192,19,6,14,0,7,252,10,7,252,74,71,252,4,15,254,14,1,80,100,192,64,0,15,254,0,7,188,74,68,164,107,69,172,74,68,164,90,192,0,0,3,254,32,2,0,63,226,64,39,194,68,36,68,68,73,73,8,0,135,200,64,135,200,81,229,202,84,165,74,84,165,82,173,96,32,0,207,112,36,2,80,69,7,126,209,5,84,85,39,146,85,0,32,0,3,254,32,2,32,34,2,252,34,66,36,66,68,68,133,64,136,0,65,196,241,65,20,17,79,212,17,67,148,84,73,4,17,65,8,32,3,252,69,5,252,213,69,252,66,5,252,71,4,168,82,68,32,32,35,226,72,164,138,206,165,42,82,166,170,68,36,130,80,166,4,32,34,50,92,164,74,223,164,74,78,165,90,100,164,66,68,164,68,4,0,32,63,234,32,108,34,74,127,170,74,46,163,90,36,36,70,8,0,64,127,128,0,33,1,16,18,1,32,4,7,252,0,0,0,33,2,8,168,7,126,32,15,164,34,71,40,168,130,16,39,226,0,0,4,254,41,8,144,75,192,148,41,76,148,74,69,36,85,66,136,4,0,64,63,128,72,255,224,72,63,132,68,46,129,80,36,132,198,8,0,128,8,7,248,8,128,136,8,128,136,16,129,8,34,132,16,2,15,254,68,133,50,244,165,254,66,5,254,114,45,74,23,161,6,0,0,124,117,69,124,85,69,124,81,5,124,113,4,16,15,224,0,16,1,254,34,130,40,111,234,170,42,162,170,45,98,130,40,162,132,4,79,168,80,7,124,81,7,16,87,229,144,241,1,40,20,65,130,17,7,252,17,8,64,95,192,160,239,130,32,63,194,32,82,8,254,130,4,32,95,224,64,9,14,252,33,2,254,33,2,16,81,8,254,65,6,254,138,128,254,234,132,254,234,164,254,74,166,254,86,194,170,2,3,252,40,131,252,37,2,252,37,67,254,37,69,252,141,129,84,33,2,16,50,138,68,170,42,16,175,194,4,32,130,80,34,2,16,128,133,8,11,232,16,90,128,190,40,132,254,200,132,136,76,129,62,8,0,64,255,233,18,36,128,64,127,196,68,68,68,84,68,128,64,17,2,144,69,232,36,125,66,20,21,68,84,40,128,212,114,64,66,113,5,40,84,71,130,87,197,0,114,69,20,85,69,40,95,235,0,64,135,8,131,224,144,226,133,190,72,142,190,72,134,136,87,226,0,8,0,64,255,225,32,82,133,36,146,64,0,4,65,34,80,168,248,33,2,16,175,203,32,175,10,80,39,194,16,85,68,82,137,32,48,32,132,126,145,14,32,47,132,72,231,224,8,50,204,74,10,160,16,33,10,124,116,66,124,252,66,124,117,42,84,36,130,84,38,32,0,2,9,252,64,0,248,40,130,248,66,12,168,82,70,34,74,0,64,79,202,36,74,66,166,196,133,152,4,7,252,21,2,72,196,96,0,159,4,152,153,68,208,82,10,72,21,15,254,21,2,72,68,64,64,8,7,240,65,7,240,65,7,240,80,132,176,68,5,160,97,192,0,0,15,252,10,0,160,127,196,164,74,69,84,96,196,4,65,68,8,32,2,254,242,132,40,175,239,170,42,163,170,237,98,130,40,162,132,63,130,8,63,130,8,255,226,72,63,130,72,63,128,64,255,224,0,2,14,16,175,234,0,167,206,68,167,202,16,165,78,82,9,32,48,4,15,254,0,3,248,32,131,248,0,7,252,64,73,240,17,38,14,4,8,32,95,192,0,207,132,136,79,132,32,106,133,36,42,64,64,33,2,254,241,2,170,39,195,198,103,202,68,39,194,84,169,36,48,1,15,174,84,165,74,116,165,74,116,165,106,90,239,40,18,129,72,34,3,254,85,68,248,216,198,250,72,132,248,66,4,168,82,68,96,2,0,16,31,229,0,55,193,4,48,133,16,17,2,16,37,4,32,34,2,252,181,74,248,184,202,250,40,130,248,82,4,168,146,64,96,4,15,254,128,39,188,74,66,148,78,67,48,204,227,16,6,3,128,128,4,252,0,128,16,225,2,16,33,2,80,34,5,0,143,224,0,130,7,254,21,72,248,88,194,250,40,140,248,66,4,168,82,64,96,0,7,248,1,0,32,4,0,64,4,0,64,4,0,64,20,0,128,39,194,84,39,207,84,39,195,72,235,2,72,56,98,120,164,132,120,66,7,254,138,78,216,95,198,138,239,132,136,79,134,168,82,64,96,2,7,254,64,5,220,85,68,204,87,68,208,114,132,198,129,128,224,16,65,4,85,67,140,18,79,212,16,99,156,84,73,4,16,65,4,0,79,196,33,67,212,37,68,84,169,65,148,16,66,4,65,72,8,126,65,20,29,66,84,88,65,20,100,143,254,10,33,148,42,132,198,0,79,196,33,67,212,69,74,148,16,66,20,192,128,0,82,72,146,4,2,72,69,72,98,24,14,64,4,7,248,8,128,136,18,130,16,18,137,40,87,194,40,95,233,0,55,197,68,151,193,68,87,194,68,4,142,72,68,133,254,68,142,232,85,196,74,100,140,72,4,128,72,17,1,16,17,7,188,17,3,184,53,69,148,145,33,16,17,1,16,9,47,84,47,226,56,69,103,148,214,229,172,87,71,94,72,65,4,63,128,64,255,232,66,53,129,16,127,193,16,59,141,86,17,1,16,18,1,32,83,229,80,88,133,0,87,197,84,85,65,84,23,193,0,17,225,18,41,68,88,145,64,146,125,32,90,9,66,144,17,0,144,65,7,84,175,239,56,165,111,148,166,239,164,7,227,68,200,65,4,9,8,144,73,3,254,137,5,216,27,130,212,201,36,144,73,0,144,2,11,254,85,65,116,16,67,252,64,12,248,64,5,252,74,129,100,17,130,224,98,11,254,34,2,248,0,3,252,36,66,100,9,131,4,8,0,64,255,226,16,18,0,192,51,140,6,63,130,8,32,131,248,33,2,16,250,130,68,42,35,16,231,194,4,32,130,80,162,4,16,1,15,144,34,130,68,41,47,8,39,194,4,58,142,16,65,128,8,32,143,254,36,135,252,4,15,254,40,132,244,145,34,160,6,7,158,127,192,64,127,232,66,53,128,160,49,140,70,63,0,32,28,0,48,33,10,16,186,138,68,249,34,8,171,205,132,136,143,176,8,128,4,33,2,40,58,132,68,137,39,8,39,207,132,32,130,176,48,130,8,18,1,32,37,2,136,114,106,0,47,130,8,37,2,32,33,2,16,137,5,16,34,143,68,41,39,0,39,207,4,34,130,16,64,136,8,2,8,248,66,1,254,40,133,68,111,173,72,69,4,32,69,129,134,0,7,252,0,67,252,0,71,252,4,2,72,69,0,160,49,140,6,113,5,124,81,6,254,84,69,162,83,198,68,74,132,16,66,132,198,33,2,16,34,138,68,169,42,128,171,202,132,186,140,144,8,128,8,32,2,254,81,8,252,68,66,84,245,65,84,165,68,40,36,64,130,63,130,8,32,131,248,4,0,64,127,192,132,8,65,4,34,132,16,4,0,160,17,2,136,196,96,0,63,128,16,18,0,192,4,0,32,132,5,188,17,73,84,90,194,0,95,205,36,95,197,36,95,193,4,2,14,16,79,196,32,68,142,252,64,68,168,106,140,170,18,162,6,34,2,222,40,175,170,45,103,0,111,234,146,175,226,146,47,226,130,1,15,126,33,2,32,68,71,254,218,165,168,90,135,170,74,161,6,66,4,222,120,170,170,13,100,0,79,228,146,79,230,146,79,224,130,24,6,60,65,69,20,106,192,0,127,196,68,127,196,68,127,196,4,32,65,4,1,79,212,9,68,148,41,65,20,40,68,68,129,64,8,2,3,254,34,10,222,104,162,170,109,106,254,41,34,254,73,40,254,130,5,252,4,8,136,95,193,4,42,140,168,74,164,170,18,98,0,34,2,206,42,175,170,42,167,170,106,170,234,170,226,40,34,130,72,8,0,64,4,0,0,127,192,0,0,1,16,16,130,4,64,64,0,8,0,144,8,143,254,16,1,72,37,2,96,68,68,196,147,192,0,9,7,252,26,2,200,87,128,0,127,193,16,31,1,30,127,0,16,4,142,68,191,234,80,165,10,84,165,142,146,139,33,82,32,224,0,33,3,222,82,128,68,17,15,254,16,1,32,18,130,50,46,36,30,4,7,254,160,164,68,247,165,200,99,5,108,90,6,248,66,5,252,114,5,60,86,70,152,86,101,80,95,198,16,71], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+51217);
/* memory initializer */ allocate([196,16,79,228,0,9,0,136,127,225,64,21,2,100,76,73,60,4,3,248,4,15,254,34,2,40,34,79,32,47,226,80,53,78,88,41,2,178,181,36,14,114,5,40,82,70,254,85,5,84,85,134,146,75,37,82,96,228,0,33,2,84,243,130,254,117,70,146,177,10,254,34,66,24,34,66,66,36,129,80,127,193,80,36,132,68,8,7,252,9,0,96,25,134,4,41,34,84,241,2,254,35,131,84,233,34,32,47,226,68,163,132,198,66,7,190,164,129,80,127,193,80,36,128,128,127,193,16,14,3,16,159,229,2,31,233,0,95,225,16,31,229,218,171,98,218,75,96,150,224,10,126,160,140,190,170,170,170,171,108,162,138,104,128,143,232,0,16,143,254,20,128,32,63,194,4,63,194,0,32,2,0,64,8,0,4,0,126,4,3,252,32,66,4,63,194,0,32,2,0,64,8,0,32,2,62,56,130,16,123,228,162,74,167,170,66,164,8,65,72,34,2,0,16,63,226,32,33,2,252,40,66,252,40,4,128,80,10,0,33,2,8,43,235,34,162,42,62,162,2,32,34,5,64,68,8,128,33,194,16,39,239,82,37,130,114,52,238,72,37,226,74,165,36,166,4,0,126,4,7,252,81,68,164,68,68,164,81,68,4,127,196,4,7,128,64,63,226,68,39,3,196,35,194,64,63,196,68,73,73,8,32,3,240,66,11,248,36,131,248,36,143,254,17,1,240,17,1,240,17,15,254,59,133,84,21,7,254,74,135,248,82,69,168,83,41,158,0,15,124,32,66,124,64,71,126,209,5,84,83,135,84,73,32,48,63,128,64,127,234,82,18,135,188,78,71,152,18,69,254,82,79,188,2,7,60,84,69,164,113,130,40,60,106,60,162,75,164,227,192,0,1,15,158,138,42,212,168,138,148,170,42,156,33,69,20,73,72,156,4,7,254,73,7,252,73,71,252,81,5,20,93,133,16,85,41,142,129,5,220,22,73,84,92,128,148,46,38,156,169,66,212,113,192,0,71,194,4,243,193,4,39,231,16,165,66,56,37,66,146,37,2,32,63,128,8,63,128,8,255,226,72,21,0,224,21,6,72,20,96,128,113,5,16,87,198,16,81,5,254,81,6,84,69,68,84,71,196,4,1,14,212,37,11,94,111,11,80,45,68,84,144,134,154,18,102,66,1,15,8,19,229,34,82,37,62,122,0,160,234,0,160,42,1,64,0,1,248,16,129,8,31,128,0,63,194,4,32,66,4,63,194,4,64,4,124,116,72,68,119,194,0,119,194,68,44,67,68,39,192,0,16,1,120,36,130,72,103,138,0,47,194,132,40,66,252,40,66,0,66,2,60,244,4,140,71,7,80,85,5,84,84,133,72,86,75,66,127,228,2,127,229,32,107,229,100,123,197,16,83,197,100,81,137,102,63,226,2,63,226,168,63,226,168,50,67,254,68,132,48,134,193,130,33,2,84,67,137,254,229,66,146,66,15,126,2,67,68,195,128,198,4,0,124,4,7,254,68,68,112,92,68,60,66,4,20,84,170,120,127,196,0,191,128,40,126,128,40,127,128,138,74,162,202,74,97,130,33,4,124,145,65,254,33,70,124,161,2,124,33,2,254,33,2,16,4,15,252,8,9,36,94,128,64,74,137,244,5,15,254,4,0,64,66,2,60,130,5,254,18,35,248,82,77,28,82,5,20,86,162,184,47,194,4,71,201,4,239,226,16,69,79,56,5,66,146,197,0,32,8,0,64,255,225,16,81,73,18,17,0,64,68,68,68,127,192,0,4,7,252,42,132,164,7,3,192,4,7,248,4,15,252,4,0,192,4,7,252,10,2,168,74,67,240,2,0,64,127,128,64,20,0,128,130,5,252,5,8,216,85,64,80,34,5,252,199,4,168,82,68,32,16,6,60,74,70,180,90,196,164,90,70,180,18,129,32,34,4,32,13,7,16,17,1,16,255,1,16,17,7,208,69,4,82,125,36,78,33,2,254,32,15,124,36,66,68,55,206,16,37,66,146,165,4,32,2,15,188,170,74,212,169,143,164,172,42,188,170,79,164,139,192,36,33,2,16,34,143,68,40,34,32,50,78,40,35,34,34,161,228,0,33,2,16,242,132,68,168,42,32,250,66,40,59,46,34,33,226,0,18,1,32,37,2,136,112,106,64,36,130,80,38,66,68,35,194,0,4,0,160,17,2,8,192,97,16,18,1,64,24,65,4,15,192,0,66,2,32,133,4,136,20,98,72,197,4,96,68,68,68,67,192,0,33,2,16,82,137,68,232,34,32,66,79,40,3,35,34,193,224,0,65,2,16,2,142,68,40,34,64,36,130,80,38,67,68,35,192,0,17,15,254,17,7,252,74,71,252,8,1,248,105,0,96,24,6,0,35,226,42,251,234,170,171,239,144,35,194,136,59,238,172,4,160,24,0,7,252,74,68,164,127,192,64,15,129,136,37,0,32,12,7,0,64,2,254,42,160,254,98,2,60,36,66,168,33,2,96,88,8,126,64,4,254,106,168,170,239,228,32,243,196,68,74,132,16,102,5,128,66,7,190,148,135,252,74,71,252,8,1,248,33,5,32,12,7,0,7,207,84,23,197,84,87,197,40,121,64,254,41,44,184,45,65,48,64,2,124,245,65,124,45,71,124,169,2,126,35,130,84,41,34,16,17,15,254,21,4,120,44,137,48,68,130,134,71,140,72,68,132,120,132,4,124,8,73,72,67,1,72,40,109,120,68,132,72,71,128,72,2,15,60,18,69,68,90,133,24,122,64,254,42,76,164,43,193,0,34,2,60,66,73,68,234,130,24,70,111,188,2,65,164,227,192,0,32,2,120,32,143,40,82,133,40,83,197,4,39,69,4,137,64,8,4,0,32,127,196,144,73,7,252,73,5,248,109,68,146,73,8,144,0,7,120,32,130,40,34,135,40,35,194,4,55,78,4,65,64,8,0,15,120,32,130,40,66,135,40,211,197,4,87,71,4,65,64,8,32,2,124,32,79,164,170,74,164,251,226,2,43,227,194,228,160,4,127,128,8,16,129,16,33,3,252,0,79,244,0,64,4,3,128,0,59,130,168,59,128,0,63,0,16,17,1,252,0,71,228,1,64,8,2,1,254,240,11,72,180,139,254,182,139,220,246,169,72,36,132,72,0,0,124,112,69,36,82,69,36,83,229,2,119,165,2,0,160,4,32,2,124,37,66,124,253,66,124,33,2,124,49,14,16,79,224,0,127,192,4,18,128,160,34,1,32,2,15,254,2,0,80,24,198,4,4,7,252,4,3,248,4,15,254,16,1,240,41,4,96,25,142,6,4,3,248,4,15,254,16,32,164,34,1,32,127,224,80,24,198,2,64,2,252,34,0,32,3,206,36,34,66,68,37,66,136,80,8,254,2,7,16,80,5,112,113,37,244,83,135,84,85,69,146,85,11,32,4,78,254,164,74,0,239,234,40,175,238,170,170,170,214,232,32,134,71,196,68,119,201,68,47,228,170,79,228,0,79,229,68,99,132,198,4,7,252,10,2,168,74,64,64,63,130,72,63,128,72,127,192,4,136,133,252,8,139,254,69,1,252,53,77,84,90,197,4,81,65,8,17,15,254,17,3,248,36,135,252,74,71,252,17,1,16,14,7,28,31,1,16,31,1,16,127,196,164,127,192,0,127,129,16,14,7,28,39,194,68,39,203,68,175,234,170,175,226,0,47,226,68,35,130,198,71,194,68,135,196,68,15,226,170,79,236,0,79,228,68,67,128,198,15,136,136,79,128,136,31,205,84,95,196,0,95,198,136,71,1,140,17,15,254,17,0,64,2,15,254,32,2,0,32,2,0,63,192,0,16,143,254,16,132,32,33,9,254,72,2,128,200,4,128,79,192,0,4,15,254,32,3,248,0,3,248,32,131,248,32,131,248,32,131,248,0,4,126,36,32,126,244,132,72,71,228,72,68,135,74,6,96,66,32,2,16,48,138,128,175,234,64,164,2,64,36,2,64,39,194,0,18,15,254,18,128,132,255,225,8,41,76,146,63,192,144,17,2,16,18,137,40,95,226,40,80,9,124,53,69,84,151,193,84,85,66,124,17,15,254,17,3,248,9,0,96,127,224,162,50,76,32,10,0,64,66,132,40,119,232,40,112,2,124,245,66,84,39,195,84,37,64,124,7,135,128,8,0,248,120,0,128,15,207,128,8,32,130,7,224,0,63,192,8,13,0,32,1,7,254,10,33,36,34,12,32,10,0,64,66,4,206,106,168,170,234,164,170,234,164,234,74,198,40,68,128,136,8,7,60,66,68,164,74,68,164,90,70,180,74,129,32,18,2,32,17,15,254,17,0,72,4,67,254,36,130,80,34,68,84,72,200,4,127,196,4,95,68,4,95,64,0,63,130,8,63,130,8,63,130,8,32,2,126,36,47,218,168,10,188,170,74,188,186,66,60,34,66,60,17,14,32,87,194,68,215,195,68,215,195,40,210,161,42,84,98,128,24,6,60,81,69,20,106,192,0,63,130,8,36,130,72,11,3,8,4,0,64,8,1,16,34,4,64,8,1,16,32,135,252,32,64,0,2,15,160,36,2,126,42,71,36,34,130,40,57,14,40,68,65,130,17,1,16,17,7,222,18,67,164,53,69,20,80,137,20,17,65,34,36,2,126,40,15,124,36,71,84,111,234,84,164,66,126,33,66,8,250,2,62,252,10,188,170,77,180,143,239,172,138,72,190,248,72,140,63,128,64,127,233,82,32,3,254,64,9,252,20,71,254,34,67,252,36,66,254,36,74,252,180,74,124,33,2,254,83,132,84,137,32,16,71,130,72,4,136,134,64,1,124,36,76,68,66,132,16,66,128,198,0,3,252,34,67,252,32,2,252,40,66,252,40,68,252,72,72,252,34,130,254,34,143,56,82,133,56,81,5,254,35,133,84,137,32,16,68,68,40,119,200,16,7,199,16,39,207,16,47,226,16,50,130,68,64,7,252,128,3,248,40,130,72,255,228,136,68,135,252,0,128,48,16,128,144,127,192,64,63,128,64,255,224,64,127,192,160,49,140,6,2,14,32,175,138,32,226,11,254,167,10,168,234,65,34,2,0,32,4,15,254,145,37,16,87,199,16,31,239,16,83,133,84,153,33,16,33,2,16,39,207,16,81,5,254,145,5,56,37,69,146,145,0,16,32,2,126,36,175,126,84,5,94,85,37,94,37,37,94,133,32,158,64,2,252,64,68,4,64,68,4,64,68,4,64,68,4,65,68,8,64,2,254,0,40,66,130,40,42,136,106,146,201,40,114,128,168,4,20,1,46,32,34,66,100,42,66,36,34,66,36,34,66,36,162,68,17,15,254,17,0,60,122,68,188,122,68,188,122,64,68,4,64,140,17,7,252,17,7,252,64,65,240,0,7,252,12,131,112,10,131,102,34,130,254,34,143,254,40,38,124,114,10,212,163,130,84,41,34,48,3,195,164,43,195,164,43,195,164,4,192,0,63,194,148,41,71,254,79,132,16,98,9,252,226,4,160,228,5,252,85,71,84,95,224,0,39,194,8,161,4,254,161,2,80,98,10,254,42,162,170,191,228,0,17,7,188,17,3,184,85,73,18,4,0,252,16,130,144,6,7,128,63,128,16,2,7,252,4,1,64,8,3,248,42,130,168,42,143,254,1,14,16,169,42,84,225,10,254,161,14,56,165,74,146,225,0,16,248,130,42,253,202,136,171,237,156,142,175,168,138,136,160,253,224,128,2,7,254,72,135,222,93,198,170,69,5,220,69,7,222,69,8,80,2,7,254,72,135,254,93,198,170,82,68,168,127,228,168,146,64,32,1,4,146,37,64,16,239,226,56,37,66,146,33,5,16,143,224,0,1,8,148,69,129,16,199,197,144,75,132,212,73,6,144,72,1,126,2,7,32,19,225,66,117,68,144,65,7,84,21,33,146,85,2,32,4,0,64,36,129,80,4,7,252,14,1,80,36,132,68,4,0,64,24,14,32,33,66,4,250,66,40,118,166,178,162,2,36,37,194,128,3,199,192,8,130,80,16,3,248,36,130,72,36,128,162,18,38,30,130,4,16,4,73,68,84,130,72,45,77,82,70,68,68,75,193,0,4,7,254,69,41,32,85,73,242,100,3,248,36,131,248,4,71,254,4,7,254,72,40,80,50,69,74,15,131,0,4,2,72,36,131,248,127,229,10,159,129,8,31,128,128,255,226,72,127,202,74,37,128,64,33,2,124,36,79,124,36,71,124,97,10,254,169,34,154,41,66,16,0,14,252,168,74,252,233,10,144,175,206,144,169,42,138,234,96,194,33,4,124,148,78,124,36,68,124,241,0,254,57,44,154,9,64,16,127,196,4,95,69,4,31,2,32,127,194,68,63,192,160,18,38,30,16,1,248,33,4,32,191,130,72,36,131,248,10,1,34,34,44,30,33,2,16,59,196,148,145,71,212,85,69,84,125,65,44,40,36,126,34,2,60,36,66,136,247,197,84,85,69,124,81,2,42,84,168,134,32,2,254,65,9,32,239,226,170,75,175,170,11,163,170,207,224,130,0,15,254,4,0,128,127,196,164,78,68,164,78,68,164,127,196,4,17,15,254,17,0,0,63,130,72,36,131,248,36,130,72,63,128,0,34,130,40,47,239,40,32,2,124,53,78,84,39,194,84,165,68,124,2,135,254,82,133,0,119,197,84,85,71,124,85,69,84,119,192,68,17,15,254,34,13,124,84,78,124,52,77,124,50,141,42,84,162,134,25,14,16,37,66,82,245,34,144,113,10,146,32,66,8,35,2,192,0,139,136,104,131,172,42,171,202,104,130,138,56,68,24,134,1,128,4,0,32,63,226,16,33,2,254,41,34,146,47,228,146,73,40,254,33,2,16,33,15,84,85,37,146,81,5,18,32,69,24,70,9,128,17,15,254,17,7,252,74,71,252,2,131,254,34,67,24,73,168,38,0,15,254,0,0,64,36,66,72,37,4,160,10,1,16,32,140,6,127,132,8,64,135,248,68,4,64,127,196,32,66,69,20,96,196,4,47,194,132,40,79,252,41,3,144,239,194,144,41,34,138,172,100,130,0,0,0,63,130,168,42,130,168,42,130,168,42,130,168,255,224,0,32,135,200,129,7,222,103,69,84,253,69,84,76,135,212,5,65,162,40,2,94,48,42,162,169,42,254,170,162,170,41,34,170,40,34,134,64,2,252,4,68,68,95,69,84,85,69,244,68,68,116,93,68,12,7,207,68,148,73,124,244,73,68,151,207,68,148,64,68,9,65,8,39,226,66,35,207,164,171,202,164,251,194,16,47,227,128,234,64,66,1,7,124,84,69,84,84,197,64,87,229,2,119,160,2,1,64,8,33,2,16,123,228,34,245,66,8,33,15,190,37,34,18,41,227,18,8,0,128,31,131,8,73,0,96,24,2,248,200,128,136,8,128,248,4,0,160,17,2,8,223,96,0,123,196,164,74,71,180,2,128,32,30,228,170,38,96,170,227,34,72,41,67,98,33,131,100,33,128,96,34,130,254,34,143,124,36,66,124,52,78,124,33,2,254,162,132,198,17,15,254,17,3,248,36,143,254,17,2,232,196,99,248,4,0,192,16,143,254,18,135,254,72,135,222,93,198,170,72,133,254,70,73,188,34,130,254,34,143,124,36,71,124,108,74,124,161,2,254,34,130,198,114,133,254,82,135,124,84,69,124,116,69,124,81,5,254,82,139,70,2,7,254,73,7,254,91,134,212,73,5,252,68,4,252,84,72,124,4,7,254,73,7,252,91,134,214,67,133,224,66,7,254,66,8,96,4,7,252,73,7,252,91,134,212,95,133,72,95,132,168,83,42,30,33,2,16,47,239,16,33,2,124,49,14,56,37,66,146,161,4,16,4,0,64,255,224,64,4,7,252,14,1,80,36,140,70,4,0,64,17,15,254,17,3,248,32,131,248,32,131,248,4,7,252,10,3,24,127,197,84,127,192,64,127,192,64,255,229,20,4,3,248,4,15,254,124,133,72,124,165,72,127,225,8,124,129,8,29,78,20,10,74,66,130,4,32,31,200,32,66,0,248,34,4,112,202,133,36,66,0,32,136,133,252,8,137,252,80,65,252,48,77,252,66,7,254,69,1,140,4,7,254,145,39,252,32,131,248,32,131,248,4,7,252,10,3,24,112,5,254,81,5,32,103,197,68,84,69,124,100,68,68,71,196,68,4,68,254,36,64,124,228,66,124,33,2,254,51,130,84,9,32,16,8,1,16,63,128,72,20,3,252,68,0,64,255,224,64,4,0,64,17,7,252,17,1,240,17,1,240,4,15,254,14,1,80,100,192,64,32,2,124,38,79,84,36,66,254,54,78,84,36,66,126,160,68,24,17,5,16,81,7,144,151,193,144,49,13,16,17,1,126,16,1,0,8,0,64,255,224,0,63,130,72,36,131,248,36,130,72,63,128,0,32,2,124,38,79,84,84,69,254,86,69,84,84,66,126,80,72,152,31,129,72,18,129,8,255,226,72,34,130,8,63,192,8,5,0,32,17,15,254,17,3,248,36,131,248,8,15,254,21,2,232,196,99,248,17,15,254,17,3,248,36,143,254,49,133,244,145,33,240,17,1,240,17,15,254,17,3,248,36,131,248,8,15,254,36,135,252,164,162,88,17,15,254,17,3,248,36,131,248,8,15,254,36,141,244,9,33,48,17,15,254,17,3,248,36,131,248,8,15,254,32,133,84,166,160,208,4,0,64,4,15,254,14,1,80,21,2,72,68,72,66,4,0,64,0,3,248,32,130,8,63,130,8,32,131,248,32,130,8,63,130,8,1,7,16,87,197,16,127,229,68,89,39,16,87,197,16,113,0,254,17,1,16,81,7,190,146,65,100,26,71,40,17,1,40,20,65,130,26,14,124,36,66,124,252,66,124,113,6,84,168,162,48,32,194,112,4,0,160,49,141,246,17,1,240,1,131,224,4,7,252,4,0,192,0,1,238,234,170,170,190,170,172,170,171,234,234,168,172,18,130,104,1,0,16,239,234,146,169,42,146,170,170,198,232,42,130,8,160,132,65,4,16,113,8,124,117,66,84,37,79,108,36,66,196,53,66,72,251,194,164,42,143,168,43,2,168,250,66,164,75,68,168,170,1,32,64,5,238,74,174,170,190,170,172,170,171,234,74,166,172,146,130,104,33,2,16,65,9,124,229,68,84,133,79,108,4,67,68,197,64,72,32,3,252,64,11,248,0,143,200,36,130,136,46,164,42,74,104,66,0,7,248,16,129,16,18,1,60,16,65,4,32,66,4,66,136,16,32,2,254,34,47,36,82,133,46,82,37,34,36,37,66,137,65,8,0,79,228,17,226,4,254,74,180,170,202,164,170,74,36,138,72,76,4,7,252,10,1,16,32,141,246,0,7,252,4,2,72,84,64,128,4,15,254,8,7,252,81,68,164,95,68,68,127,196,68,69,68,8,0,3,248,36,131,248,36,131,248,8,7,252,8,65,4,33,68,8,2,128,36,247,225,72,156,133,126,84,130,126,36,133,72,135,224,64,4,15,254,21,15,254,170,163,184,10,7,252,10,3,20,212,129,134,34,2,62,46,15,40,33,2,42,52,110,254,34,130,42,164,164,134,2,7,16,95,229,0,116,69,108,85,71,84,86,197,68,87,203,4,34,2,16,47,235,0,160,10,170,169,34,146,42,162,130,47,226,0,64,2,252,68,71,252,68,69,244,85,69,84,87,68,68,69,68,8,66,2,60,2,8,248,88,130,248,40,140,248,66,5,252,66,0,32,0,0,252,232,74,252,168,10,160,170,78,168,147,1,34,34,36,30,64,228,240,114,9,148,20,132,32,95,228,72,68,133,48,100,132,134,4,0,64,4,7,252,68,68,68,74,69,20,96,68,4,65,68,8,68,132,72,95,142,78,191,75,84,191,74,84,174,133,84,165,73,98,34,68,168,251,0,34,121,228,128,122,68,168,123,36,162,105,229,0,32,2,126,36,47,126,84,5,82,85,69,88,37,37,82,132,224,128,63,128,64,255,233,82,4,3,152,32,131,184,32,131,250,18,38,30,16,1,32,44,194,132,108,202,132,47,194,80,37,2,82,41,35,14,64,2,252,8,72,132,79,193,128,42,76,168,75,4,162,82,34,30,0,3,252,32,66,4,63,194,0,36,130,80,38,36,66,67,232,0,32,66,68,36,79,100,37,66,84,52,78,84,38,66,74,161,36,32,20,1,64,39,226,130,113,74,16,37,66,82,41,34,16,37,2,32,127,196,144,127,196,144,68,7,252,72,5,248,104,132,248,64,7,254,112,165,254,80,71,116,80,69,116,112,69,116,85,69,116,82,107,82,8,132,80,47,192,32,234,130,168,42,130,248,34,2,64,104,9,254,78,226,34,14,232,136,78,226,34,74,172,102,70,100,170,66,32,102,17,15,254,17,7,252,4,2,124,36,15,254,32,3,252,84,74,172,33,2,16,33,15,158,33,2,16,55,206,68,36,66,68,167,196,68,16,1,0,63,194,32,66,1,252,18,1,32,127,224,32,2,0,32,7,239,194,39,226,64,69,71,126,213,69,126,90,135,170,19,66,34,36,130,252,244,130,254,36,131,180,111,202,80,47,194,16,175,228,16,33,2,16,34,143,68,41,34,124,48,142,16,34,66,146,180,68,124,4,0,160,17,2,72,192,99,248,1,0,160,4,133,68,81,72,240,34,2,16,39,207,68,87,197,68,87,197,80,37,69,72,134,64,66,1,15,136,35,239,162,171,234,162,219,232,168,250,168,164,250,64,50,8,1,0,63,2,16,41,2,48,32,3,252,0,79,228,1,64,8,63,194,4,63,194,32,35,35,244,38,130,168,50,68,36,74,40,64,32,2,124,36,79,124,36,66,124,49,14,16,39,194,16,161,4,254,127,193,16,31,1,16,31,1,28,127,0,16,251,228,146,48,204,178,17,15,254,34,135,124,81,7,56,65,7,240,2,7,252,4,0,192,1,0,16,229,202,80,175,234,0,165,74,84,230,202,68,7,192,4,79,196,72,119,136,72,231,132,78,79,142,8,93,197,84,104,133,84,66,4,124,116,72,124,228,68,124,244,68,124,65,6,254,69,64,146,64,2,248,136,132,248,8,130,248,66,12,248,66,4,32,95,192,0,20,1,64,39,230,146,161,2,84,41,34,48,4,69,34,144,160,248,33,2,8,39,239,66,32,7,126,104,138,8,32,130,8,34,130,16,17,5,8,39,229,66,144,1,126,48,133,8,144,129,8,82,130,16,17,233,66,88,65,40,46,69,30,222,166,136,126,228,168,86,130,94,4,0,32,63,226,2,64,1,252,2,0,32,2,0,32,10,0,64,34,2,16,47,239,130,32,2,124,49,14,16,33,2,16,165,4,32,66,2,16,15,232,130,64,1,124,33,12,16,65,4,16,69,0,32,4,0,64,36,3,248,36,4,64,4,15,252,4,0,64,4,0,64,32,2,124,33,79,20,33,66,124,50,78,36,34,66,36,175,228,0,64,4,124,113,72,20,113,66,124,34,79,36,34,66,164,55,226,0,32,2,124,65,73,20,225,68,124,130,79,36,2,67,36,207,224,0,1,7,16,95,229,146,114,5,48,86,167,172,82,133,36,83,43,32,2,8,32,95,225,34,130,5,82,37,68,200,212,132,68,70,32,64,4,0,64,127,196,132,8,1,72,53,5,32,145,1,72,24,97,0,0,7,252,4,3,248,4,7,252,17,15,254,17,1,16,33,4,16,32,2,124,34,79,164,74,68,168,74,133,16,34,133,40,132,64,130,32,2,62,249,34,146,73,67,8,73,64,162,127,193,4,33,68,8,32,2,62,249,36,148,72,131,20,74,40,0,4,69,34,144,160,248,8,0,128,8,15,254,17,1,16,33,1,32,12,0,160,49,140,4,0,238,240,165,74,40,239,202,32,191,234,64,235,192,164,17,128,102,7,128,64,127,196,68,95,4,72,67,133,252,80,7,254,80,9,252,4,0,32,63,226,0,167,198,64,36,6,254,164,2,64,39,196,0,64,5,238,74,174,170,94,196,170,106,173,234,74,196,168,82,142,104,47,227,16,175,234,146,165,74,0,47,226,16,47,226,170,42,162,134,39,234,144,119,226,18,245,66,0,127,234,16,47,226,170,42,162,134,4,68,254,36,64,16,239,226,16,34,2,124,42,67,36,35,192,36,2,128,202,228,139,254,164,138,72,166,170,204,228,136,74,21,96,162,2,15,160,131,233,66,209,74,16,161,13,40,130,136,68,244,64,130,1,15,188,130,72,52,210,74,40,163,237,2,135,168,2,248,160,4,0,15,188,130,73,36,212,106,0,167,205,36,138,136,16,250,128,68,17,15,254,17,2,124,117,66,124,117,66,124,241,7,254,169,34,186,0,0,252,232,10,128,172,74,168,169,10,144,234,138,196,8,0,252,23,193,84,39,198,84,167,194,16,47,226,146,43,162,138,40,34,134,64,2,252,8,8,196,74,129,144,41,12,168,76,68,128,79,192,0,4,64,72,229,235,242,165,42,82,167,234,210,229,40,82,21,224,146,0,143,136,138,136,168,250,130,40,34,139,168,162,139,164,228,64,130,28,14,62,162,171,42,171,234,160,170,42,162,169,234,64,163,2,14,32,130,16,251,202,164,170,74,164,171,202,164,186,66,36,35,194,0,33,2,32,39,195,68,172,74,68,167,194,68,36,66,68,39,194,68,251,194,16,115,194,16,251,224,0,63,130,72,63,162,2,31,224,0,33,2,32,39,207,68,36,66,68,55,206,68,36,66,68,167,196,68,34,130,40,46,239,40,34,130,238,50,142,40,46,226,40,162,132,40,16,133,16,83,229,42,123,228,42,115,229,16,82,133,126,80,137,8,34,132,40,142,225,40,34,134,238,162,130,40,46,226,40,34,130,40,4,9,156,72,129,220,136,132,156,28,130,190,200,133,8,80,130,8,129,197,224,16,201,112,85,3,82,85,77,72,84,133,68,22,34,64,42,143,94,106,202,74,42,143,254,34,133,196,132,35,248,4,0,192,1,201,224,82,64,168,191,228,168,18,66,250,202,132,248,74,128,248,8,3,248,40,130,72,255,226,136,37,132,0,63,130,168,42,143,254,35,135,168,76,111,184,106,133,144,130,135,252,16,3,248,80,129,248,0,135,40,82,69,68,120,37,124,81,71,20,82,69,36,117,64,136,0,143,170,169,202,136,171,239,136,168,138,190,168,143,136,136,128,8,16,69,68,56,65,20,125,65,20,17,79,244,17,66,4,33,68,8,32,10,140,119,2,64,116,2,124,253,66,84,37,68,136,73,73,34,3,131,192,32,2,0,63,194,32,34,15,254,0,0,32,1,0,8,4,7,254,69,4,72,127,228,160,74,68,168,83,42,226,195,224,0,4,3,252,16,128,144,127,228,66,191,192,128,15,128,136,18,130,16,33,2,126,250,66,126,117,34,8,251,194,16,113,202,164,34,66,76,1,7,16,85,69,56,113,5,124,81,7,254,81,5,16,81,11,16,72,132,136,72,142,158,94,164,170,106,172,170,75,101,32,82,46,30,4,0,64,231,234,130,183,170,74,167,170,74,228,74,64,4,32,62,32,66,4,125,72,84,117,69,84,85,71,84,77,68,4,69,67,200,36,2,64,39,202,132,183,74,84,167,66,68,84,197,64,132,32,62,66,2,32,243,225,66,35,166,170,178,162,186,34,98,32,34,34,30,2,7,32,87,197,132,119,66,84,55,74,68,164,203,64,228,32,62,72,2,128,15,201,4,79,64,148,47,68,148,200,132,130,72,32,126,0,0,252,225,10,32,166,138,164,178,74,32,226,10,0,31,224,0,0,7,126,80,133,16,115,69,82,89,39,16,81,5,0,87,235,0,34,2,16,39,194,0,244,66,40,47,226,0,55,206,68,68,64,124,17,7,28,17,7,28,17,7,92,18,15,254,10,1,148,42,132,196,1,15,136,139,202,128,170,74,152,175,234,128,35,197,36,74,72,60,1,7,136,75,197,0,98,69,24,79,228,128,107,197,36,66,68,60,0,15,188,32,79,132,168,74,188,218,8,160,250,8,162,250,40,158,32,3,252,80,69,244,212,69,244,85,69,84,85,69,116,84,102,66,130,4,32,63,232,32,95,195,36,82,77,36,83,69,40,66,0,32,1,0,254,225,10,68,175,234,68,160,10,254,233,42,146,2,128,68,17,1,16,32,133,244,137,33,16,37,4,32,63,130,168,42,143,254,0,15,124,33,2,84,67,135,16,223,229,16,81,7,16,65,0,16,32,2,124,33,15,84,35,131,16,111,234,16,33,2,16,161,4,16,4,7,252,17,1,240,0,3,240,2,0,64,4,1,64,8,5,36,132,37,244,4,136,224,80,34,228,42,140,226,81,36,164,95,128,16,16,15,226,16,71,200,1,39,196,68,135,210,68,66,136,29,14,32,16,143,254,20,136,248,88,128,112,26,238,248,34,2,248,98,9,254,32,2,238,42,175,170,46,231,170,106,170,238,170,162,170,51,34,102,14,239,170,42,162,238,74,167,170,222,229,170,90,167,170,11,33,102,33,7,190,148,132,252,20,142,112,58,226,248,34,2,252,82,8,254,114,5,250,82,71,120,80,37,116,117,133,112,88,165,82,95,203,8,0,7,188,74,68,164,123,196,164,74,71,188,74,68,164,76,73,140,0,78,238,170,170,174,238,170,168,170,238,226,171,234,162,178,166,100,33,2,252,242,2,252,36,3,254,234,131,116,34,34,248,162,4,32,4,79,40,47,226,40,66,135,170,214,197,40,82,135,40,79,224,0,32,2,126,32,130,16,251,66,82,41,34,16,57,14,0,79,224,0,4,143,72,36,130,74,70,199,72,212,133,72,84,135,74,70,160,70,63,128,64,127,197,84,128,135,190,73,71,190,64,135,158,168,131,136,32,130,72,36,143,72,36,162,122,52,206,72,36,130,74,166,164,70,32,130,8,39,239,74,36,130,126,53,46,82,37,66,136,169,69,34,120,132,190,121,68,62,120,138,190,56,128,0,63,192,68,9,65,8,0,7,188,17,3,184,17,7,188,0,2,36,58,130,48,42,35,30,2,143,168,170,170,172,171,143,168,170,138,168,170,175,170,139,160,38,1,0,32,239,202,148,175,202,164,175,202,64,233,9,254,1,0,16,112,133,16,87,231,74,87,229,82,119,229,40,84,133,254,80,139,8,2,3,254,33,10,16,111,226,146,111,202,164,42,133,16,82,138,198,2,0,32,63,226,34,34,3,252,40,66,136,37,4,32,77,139,6,0,7,252,74,4,160,74,4,164,74,69,28,96,4,0,127,224,0,2,0,16,63,234,0,111,226,16,99,74,82,41,4,124,68,72,124,32,130,228,74,228,160,206,164,132,80,229,228,106,228,164,78,68,164,0,3,252,32,67,252,33,2,144,41,34,244,73,132,146,141,32,142,120,132,190,121,68,8,187,226,136,58,135,254,0,3,252,16,129,248,66,7,188,164,128,32,63,194,4,63,194,0,63,229,82,95,233,82,18,1,16,47,226,130,111,230,128,175,227,170,47,226,170,42,162,134,1,1,16,17,1,16,31,225,0,16,1,248,16,130,8,32,132,8,2,14,16,47,234,130,175,232,128,239,226,170,239,226,170,170,165,6,251,194,36,250,74,180,170,207,172,3,79,164,34,71,68,164,102,130,79,226,40,143,228,170,15,226,0,71,204,0,79,228,84,73,32,48,248,98,56,250,138,172,250,160,42,114,160,42,250,135,42,170,230,72,127,192,160,127,196,164,127,192,0,63,128,0,255,226,72,68,64,192,68,133,88,78,142,94,95,69,84,117,77,244,85,69,72,85,77,34,146,133,78,255,43,170,214,73,42,63,130,8,63,130,8,63,130,8,36,66,40,32,15,124,34,131,40,111,234,40,34,130,72,164,132,136,19,229,8,93,5,62,254,33,42,82,165,106,138,161,8,33,68,34,17,2,8,127,73,18,37,4,32,63,130,72,36,130,168,17,2,8,0,3,240,33,2,16,63,0,0,243,201,36,146,73,36,243,201,36,0,143,190,82,165,62,114,165,62,112,5,126,89,15,62,16,33,12,1,129,224,16,1,0,31,193,32,18,7,254,0,0,128,16,2,0,32,2,124,33,2,84,251,130,16,47,226,16,57,14,16,65,0,16,17,15,254,17,0,0,127,192,64,36,129,80,255,224,64,4,0,64,17,15,254,17,4,0,47,232,16,69,65,56,47,238,16,33,2,16,0,3,248,4,2,72,21,0,64,127,192,64,4,0,64,4,0,64,17,193,112,33,6,254,161,2,124,32,1,248,16,129,10,32,164,6,136,5,126,2,15,184,84,133,104,85,143,200,84,133,90,86,169,6,0,4,254,33,0,146,229,66,16,47,226,16,41,3,16,33,0,16,63,226,2,63,226,132,36,130,252,36,130,72,63,228,72,72,137,8,32,130,8,39,226,74,252,130,124,37,66,212,53,78,136,73,65,34,66,2,40,10,72,160,79,225,32,39,238,82,37,66,136,41,65,34,16,1,62,124,133,80,83,231,162,74,166,170,82,165,42,169,64,34,65,2,254,137,36,252,10,68,152,146,64,64,127,224,136,7,3,140,0,143,136,39,226,74,68,135,124,213,69,84,85,71,72,73,65,34,34,4,64,239,202,148,175,206,164,175,202,34,229,74,94,9,33,14,64,130,16,39,192,68,228,66,124,36,66,68,39,194,68,80,8,254,16,69,72,59,225,34,126,33,34,59,229,98,146,33,34,19,225,34,16,71,196,1,68,84,41,79,244,1,71,212,69,68,68,125,64,8,17,1,16,17,7,208,17,129,84,25,39,16,17,1,16,81,2,16,65,68,16,119,200,16,119,194,84,39,207,84,39,194,212,53,66,76,9,0,144,17,1,16,49,133,20,145,33,16,17,1,16,17,1,16,17,15,254,17,0,72,127,192,64,63,130,72,63,130,72,63,130,72,34,15,252,34,7,252,138,71,244,8,71,244,73,71,244,73,68,60,17,15,254,21,0,32,127,193,16,10,15,254,0,3,248,32,131,248,17,15,254,18,132,252,34,8,248,90,130,248,202,132,248,74,132,152,33,66,18,47,226,16,247,194,84,39,194,84,55,206,84,69,64,76,17,1,16,17,15,208,17,131,148,53,37,16,81,9,16,17,1,16,127,196,84,95,68,68,95,69,84,95,69,84,95,69,84,81,71,252,33,1,32,255,197,40,51,15,254,0,3,240,33,3,240,33,3,240,65,66,16,15,224,16,151,197,84,23,194,84,231,194,84,37,66,76,68,66,40,15,224,170,230,194,254,32,2,124,44,67,124,36,64,124,7,206,68,167,202,68,175,238,40,175,234,84,173,110,56,5,64,48,143,132,136,15,136,136,95,194,80,95,236,136,90,198,114,74,128,96,72,4,158,253,36,146,121,228,146,121,36,158,253,32,34,74,168,68,73,4,144,253,4,190,122,36,202,120,132,136,253,64,20,74,72,66,32,2,254,34,143,40,47,231,170,106,170,206,168,34,130,47,226,130,0,160,8,63,226,8,36,130,122,36,163,252,68,133,106,165,96,194,8,7,248,8,3,240,9,15,252,9,1,0,255,193,32,12,7,56,4,0,64,4,0,64,7,199,192,4,0,64,4,32,66,4,32,62,2,9,252,66,1,248,2,131,254,66,140,64,95,196,136,71,1,140,130,5,252,10,137,36,69,2,172,82,44,168,71,4,168,82,64,96,34,1,32,67,194,224,2,66,92,68,7,252,14,1,80,100,192,64,72,2,190,136,164,234,56,160,138,42,172,210,73,36,34,68,160,132,17,1,16,127,193,16,31,1,16,31,1,16,127,192,0,17,2,8,36,130,72,47,207,72,39,135,72,111,138,72,191,226,0,36,130,132,4,0,64,63,128,160,17,7,254,0,131,200,36,131,200,2,128,16,16,129,8,19,229,200,80,133,126,82,37,34,93,79,8,67,64,194,0,143,136,171,234,136,168,143,190,168,10,136,171,239,136,136,128,126,32,130,8,35,234,136,169,74,190,168,42,186,170,171,186,232,32,6,2,7,16,95,229,40,82,135,16,82,133,198,114,133,40,82,139,72,4,0,32,127,193,16,10,0,64,27,6,12,17,1,16,17,2,16,68,2,126,10,79,126,34,66,60,58,66,188,74,68,254,170,65,66,64,2,6,3,143,32,18,2,62,114,74,164,34,66,68,36,66,132,64,2,60,2,79,40,19,2,40,114,74,164,35,66,40,34,2,32,225,2,124,34,138,68,175,239,4,23,67,84,213,65,116,80,66,12,16,1,30,124,33,2,17,239,208,17,5,18,93,37,14,80,11,254,4,2,72,36,131,248,0,3,248,0,131,248,32,2,4,32,65,252,16,1,0,63,194,0,64,1,240,2,0,64,8,1,4,16,64,252,4,0,64,10,1,16,100,192,64,39,130,64,36,2,64,255,192,0,4,0,32,63,194,4,32,67,252,32,2,252,72,68,132,143,192,132,16,7,222,16,167,202,17,39,210,18,96,64,127,224,160,17,6,12,4,15,64,37,226,106,76,167,74,212,165,106,84,167,18,82,160,68,0,7,188,74,71,188,4,135,252,10,3,24,192,103,188,74,71,188,32,3,248,64,11,240,0,7,240,1,0,18,0,160,10,0,96,2,68,2,124,40,0,120,97,2,32,36,66,68,35,197,0,143,224,0,4,0,32,127,192,128,16,131,252,9,64,144,127,224,144,17,2,16,68,2,124,8,9,120,64,1,120,32,140,8,64,164,10,64,96,2,2,4,16,47,232,0,80,65,68,36,78,40,34,130,16,47,224,0,2,4,32,39,224,64,232,2,124,32,66,8,41,3,34,34,32,30,34,2,32,35,207,68,40,130,32,52,206,68,38,194,68,167,196,68,33,2,16,50,138,168,164,74,186,32,2,124,36,66,68,39,194,68,66,2,32,133,4,80,40,133,116,64,12,248,72,132,136,79,128,136,4,3,248,10,1,16,127,196,68,148,1,248,36,7,252,4,0,64,32,2,12,39,15,16,33,2,144,55,238,16,33,2,16,161,4,16,32,194,112,65,7,144,129,7,126,33,15,144,33,2,144,49,2,16,64,4,60,114,72,36,114,66,70,248,2,60,42,67,36,35,192,36,0,0,56,60,0,64,4,0,64,127,192,64,4,0,64,4,0,64,64,194,112,33,0,16,239,226,16,33,2,16,33,5,0,143,224,0,33,3,222,82,136,132,4,0,160,49,141,246,4,2,36,16,135,254,16,1,12,39,2,16,97,10,16,47,226,16,33,2,16,33,2,16,8,136,80,95,192,80,223,196,84,95,228,84,95,198,216,85,64,80,33,15,144,34,15,190,140,15,190,136,79,136,33,15,162,35,226,0,249,10,144,250,138,168,252,66,18,248,130,60,56,78,8,8,138,80,33,2,20,121,36,30,247,2,30,39,15,148,32,162,154,50,98,66,66,68,36,114,72,126,114,66,36,251,194,36,42,67,60,34,64,0,32,129,16,127,192,0,60,66,84,61,66,84,61,66,84,36,66,204,8,137,220,72,131,222,136,133,84,34,36,252,200,68,252,72,64,252,2,9,252,82,65,252,194,7,254,72,132,248,72,4,248,104,137,254,66,130,32,3,200,224,82,1,60,46,2,40,225,34,26,34,98,66,1,10,124,85,64,124,25,12,254,74,68,188,90,6,188,74,65,126,16,143,240,34,5,60,122,129,40,122,129,72,4,7,252,4,15,254,4,4,68,127,192,16,73,4,158,254,36,170,124,132,136,121,68,162,8,0,128,16,1,252,32,66,72,68,0,64,10,0,160,17,6,12,68,130,136,254,226,138,127,34,164,255,66,164,254,70,196,170,162,146,17,1,16,18,135,228,20,35,60,58,69,100,83,73,40,18,33,30,1,14,16,162,138,68,168,42,120,164,138,72,230,138,80,4,64,60,2,7,16,87,197,68,114,133,68,80,7,124,81,5,16,95,235,0,32,129,16,10,7,252,4,3,248,4,7,252,10,1,34,34,44,30,65,4,254,65,4,84,227,132,254,64,4,254,72,38,186,202,160,254,17,15,254,4,7,252,36,143,254,0,3,248,32,130,232,42,131,248,0,15,124,20,65,124,113,4,124,133,79,124,17,1,20,95,226,2,34,2,32,37,15,72,40,67,122,100,138,72,38,130,80,164,68,60,32,194,112,33,207,112,33,199,114,97,234,68,185,130,204,59,162,206,66,132,200,100,136,74,30,206,88,78,142,200,84,132,84,101,68,98,16,143,232,0,231,200,68,135,254,1,47,242,130,203,164,170,171,178,33,2,146,37,75,16,175,202,68,167,194,68,39,194,68,37,66,72,32,2,12,39,15,16,47,230,40,116,74,170,162,130,40,36,130,136,2,142,36,167,234,72,239,235,72,167,238,72,167,234,64,234,160,170,3,199,192,4,7,254,10,3,24,192,97,16,17,1,16,33,4,16,16,193,112,33,2,254,98,138,68,40,34,40,34,130,72,36,130,136,0,0,0,247,226,8,33,2,32,35,226,130,48,46,2,65,64,8,80,143,170,81,199,8,35,239,162,171,239,162,35,239,162,34,162,36,65,132,224,67,142,224,67,197,226,97,236,68,89,132,204,123,172,206,64,7,118,193,37,90,43,109,146,3,111,218,81,37,54,80,8,254,32,130,42,33,202,136,171,234,162,171,234,162,171,235,162,202,160,36,17,1,146,37,66,16,103,202,68,39,194,68,39,194,68,37,66,72,4,0,32,127,228,146,144,128,0,123,225,8,17,225,194,112,162,4,32,2,0,39,226,18,249,34,18,33,34,82,42,35,34,37,64,136,17,15,254,17,0,0,16,7,220,21,65,84,37,66,84,85,200,128,0,3,240,33,2,16,63,2,16,33,3,240,33,2,16,255,192,0,33,2,16,33,3,124,169,10,16,175,226,16,34,2,68,39,226,2,8,0,64,255,233,18,32,134,124,58,78,36,42,67,68,37,64,136,33,2,16,66,7,62,132,39,84,41,15,144,34,130,168,52,66,130,23,193,4,39,194,4,103,202,0,47,226,130,39,194,36,33,130,230,8,0,64,63,129,16,10,7,252,4,3,248,4,2,72,68,64,192,4,7,252,8,15,254,17,2,104,92,72,66,63,128,224,21,2,72,251,226,8,251,226,8,251,224,64,10,3,88,194,97,248,0,128,16,41,7,208,41,3,190,17,39,210,85,39,210,17,39,226,18,167,196,17,15,254,17,0,0,3,131,192,32,3,252,34,2,32,66,8,32,33,2,108,41,47,124,34,130,146,58,174,254,33,2,254,169,36,186,4,1,176,100,203,242,18,4,200,82,135,248,4,15,252,138,73,236,4,7,254,64,41,124,80,67,124,16,67,126,90,161,16,18,129,70,64,2,32,129,4,16,4,2,68,84,45,66,84,166,72,67,132,0,4,7,252,4,3,248,4,15,254,32,131,248,32,131,248,32,130,24,32,2,124,248,132,16,162,143,196,32,3,184,225,2,16,39,194,0,32,7,252,128,7,248,0,135,200,8,131,74,194,167,202,16,111,226,16,1,62,40,130,190,106,42,234,42,162,170,42,162,200,41,66,34,32,4,238,138,168,170,174,170,170,170,174,234,172,194,168,77,136,136,2,9,252,66,0,248,130,5,252,40,132,248,200,132,248,72,132,152,41,7,208,41,231,228,213,71,72,13,67,226,4,7,252,4,0,192,1,14,254,161,10,124,161,14,254,164,74,124,164,78,124,4,64,76,32,3,252,64,11,248,8,135,232,8,135,248,34,163,234,34,98,98,33,2,254,33,11,124,161,10,254,164,66,124,36,66,124,36,66,76,0,4,254,65,4,124,68,71,84,69,68,84,85,70,84,66,128,68,1,4,254,33,0,124,225,2,254,36,66,124,36,67,124,36,64,76,4,0,32,63,194,0,34,2,32,63,194,32,37,4,80,72,137,4,2,15,16,47,226,0,39,207,68,39,194,16,53,78,82,73,32,48,8,0,64,127,228,146,144,130,68,4,7,252,8,64,132,17,66,8,25,14,16,33,34,82,245,66,144,113,10,168,34,130,68,36,66,130,0,0,56,60,2,0,32,3,252,34,2,32,34,2,32,255,224,0,8,7,30,65,36,20,125,133,20,81,37,18,93,175,20,1,0,16,1,15,148,33,2,126,33,15,146,37,66,56,53,78,146,69,0,32,5,0,72,4,7,252,4,2,68,20,128,80,36,132,68,20,0,128,0,7,252,64,68,68,68,68,68,74,68,148,81,68,4,127,196,4,32,129,16,127,192,160,63,130,168,43,131,8,63,130,8,63,130,8,0,4,254,40,32,146,137,36,146,26,162,170,204,100,130,79,228,130,17,1,16,123,193,36,20,143,188,16,69,60,92,69,60,176,1,254,0,3,252,32,2,8,40,130,80,34,2,80,40,130,0,63,192,0,32,2,60,250,74,164,171,202,164,250,66,60,42,67,164,239,224,0,10,0,160,10,7,252,74,68,164,127,196,164,74,68,164,127,196,4,32,7,190,74,7,160,75,71,168,74,143,168,27,66,160,75,233,128,0,3,252,32,67,252,34,2,168,42,130,248,34,5,36,82,73,252,0,15,62,18,5,36,83,69,40,122,128,180,58,44,160,43,225,0,79,194,128,143,132,136,15,130,128,79,192,64,255,225,80,36,132,68,0,15,192,75,231,146,73,39,146,73,68,212,120,140,148,10,64,194,252,4,188,122,68,164,122,132,208,250,128,196,255,225,16,14,7,28,32,98,56,184,138,62,250,162,62,168,141,190,138,169,190,234,32,38,32,2,240,250,2,254,42,175,234,42,162,228,186,170,50,226,9,254,4,0,64,4,3,248,4,0,64,127,192,64,9,1,8,63,192,4,127,197,84,68,69,244,72,71,252,81,70], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+61457);
/* memory initializer */ allocate([236,73,68,244,64,71,252,68,15,238,68,78,238,170,175,234,72,175,234,72,167,234,72,71,234,32,2,0,39,207,164,34,71,36,106,138,40,161,2,40,36,66,130,2,79,126,34,79,136,169,74,162,217,200,136,251,232,136,251,232,128,4,0,128,63,130,8,63,130,8,63,128,68,118,129,80,36,132,198,4,0,64,10,3,24,192,99,248,4,0,64,63,128,64,4,7,252,4,0,32,63,234,16,98,130,68,107,170,16,39,196,16,65,8,254,36,129,80,63,128,128,127,193,16,38,141,198,4,7,248,4,0,192,4,0,80,4,128,64,127,192,64,10,0,160,17,1,16,32,132,4,4,2,72,21,3,248,8,7,252,17,2,8,95,64,144,17,2,48,1,0,16,1,7,190,9,36,146,41,33,18,42,36,98,132,160,132,65,4,16,121,10,124,33,79,148,33,66,254,169,11,168,228,64,130,33,2,16,41,11,124,161,74,20,47,226,16,82,132,168,132,64,130,2,3,254,168,7,238,42,167,110,162,3,254,50,37,82,82,41,86,16,1,30,17,39,210,17,33,18,255,33,18,33,164,148,253,0,80,40,130,158,125,34,154,41,111,240,1,231,194,69,231,194,68,167,196,33,2,126,37,47,168,39,230,168,115,202,168,163,194,40,35,226,32,1,7,220,18,65,72,35,231,170,107,234,170,43,227,170,42,160,70,4,129,68,37,36,96,25,3,254,209,1,252,17,1,252,17,1,254,64,2,124,241,65,126,41,71,124,170,2,60,38,66,164,35,194,36,2,39,148,43,239,200,40,135,190,32,135,136,107,234,136,56,130,136,33,3,148,73,6,254,145,5,40,34,130,68,68,72,130,37,68,82,72,132,234,90,142,254,210,141,212,101,68,148,82,36,0,234,161,42,4,0,64,63,130,72,36,131,248,36,130,72,255,226,8,34,130,16,68,2,64,159,132,74,40,165,6,4,7,252,14,1,80,100,192,64,16,47,220,2,142,236,170,174,234,42,175,234,42,175,234,106,139,76,33,2,254,32,2,238,250,162,238,34,130,254,50,142,254,70,128,182,65,4,254,64,14,238,74,164,238,98,140,254,66,132,254,70,140,182,1,14,254,160,10,238,170,170,238,162,138,254,226,138,254,6,128,182,1,4,16,33,0,16,225,226,16,33,2,16,41,3,16,47,224,0,33,2,30,127,68,152,137,162,102,32,2,254,34,131,42,34,160,70,34,2,40,34,79,32,47,226,40,50,142,40,36,162,74,168,165,6,33,4,30,71,73,8,225,164,102,176,12,254,2,131,42,194,160,70,17,7,248,21,7,252,8,3,248,208,129,248,8,4,68,81,41,240,34,2,32,247,130,40,58,142,74,36,170,166,80,32,0,42,68,82,0,0,56,60,0,64,4,0,64,127,192,64,4,0,64,63,128,0,16,1,0,32,2,252,96,10,0,32,2,0,32,3,254,32,2,0,0,0,64,4,0,64,4,0,160,10,1,16,17,2,8,64,96,0,0,3,252,4,66,68,40,68,148,16,130,64,2,66,130,40,164,120,32,2,0,251,226,10,250,162,42,250,162,202,41,35,146,34,162,68,16,1,28,39,2,16,97,10,16,47,226,16,33,2,16,39,194,0,1,4,16,33,0,16,225,2,40,34,130,40,44,67,68,40,33,0,0,0,0,63,192,36,18,65,36,18,66,68,4,64,132,17,66,8,32,2,28,39,2,16,241,5,16,95,229,16,81,2,16,87,200,0,32,2,62,72,165,10,242,162,42,66,175,74,1,35,18,194,160,68,32,2,0,47,239,34,34,66,40,52,238,66,36,34,130,169,69,8,16,1,0,47,226,34,98,74,40,34,226,34,36,34,66,41,67,8,0,3,248,32,130,8,32,131,248,32,130,8,32,131,248,32,128,0,1,0,24,1,71,254,17,1,20,125,65,24,17,34,42,36,100,2,9,15,254,9,7,254,16,129,248,16,129,248,16,231,248,0,128,8,16,143,254,20,128,32,127,229,10,164,64,160,49,141,246,17,1,240,17,15,254,17,0,0,127,228,66,132,7,252,14,3,88,196,96,64,248,128,8,112,133,62,114,160,42,250,173,190,168,143,138,171,233,130,33,2,254,40,42,40,181,74,40,164,66,130,39,197,68,87,200,68,66,2,16,159,229,74,10,66,80,72,141,4,79,132,136,79,128,136,4,15,254,145,34,72,74,65,16,32,140,6,63,130,8,32,131,248,33,4,20,81,9,254,229,4,84,143,78,88,4,163,90,202,97,2,0,7,252,64,72,0,30,1,32,18,1,32,18,2,36,34,68,28,39,226,20,32,143,126,34,162,72,49,14,254,35,130,84,169,36,16,63,128,16,6,0,16,127,192,164,50,0,96,127,193,80,36,132,70,4,0,64,127,196,68,74,69,20,68,68,68,74,69,20,64,68,12,17,15,254,17,0,0,16,1,28,253,66,84,73,67,20,41,204,64,39,226,16,47,239,146,173,74,128,175,239,144,47,227,170,234,160,134,23,225,16,47,230,146,165,66,0,47,226,16,47,226,170,42,162,134,7,239,16,31,226,146,37,67,0,239,226,16,47,226,170,170,164,134,16,1,0,17,239,210,37,34,82,69,36,146,41,33,30,41,36,64,63,226,0,47,194,0,127,229,36,145,129,134,1,15,254,17,0,176,14,135,8,18,132,200,32,135,200,8,129,232,240,161,10,80,162,6,1,4,16,33,0,254,130,69,36,20,66,72,226,130,16,34,128,68,0,3,0,8,0,128,4,0,160,10,1,16,17,2,8,64,96,0,71,226,64,247,193,64,47,227,90,109,74,90,40,66,190,50,66,12,17,1,16,253,2,62,50,37,72,124,129,8,29,79,20,18,65,66,0,7,128,75,196,128,80,5,126,74,132,168,106,133,42,68,164,134,17,7,252,17,0,64,42,66,138,71,130,32,17,74,34,170,129,152,1,14,146,73,36,254,64,14,254,65,4,254,106,172,170,10,160,134,36,66,40,64,7,124,132,71,68,39,207,168,34,130,170,52,162,134,64,2,252,0,69,244,68,69,244,68,68,68,95,68,4,65,68,8,72,2,94,0,40,186,73,33,186,41,44,146,75,164,130,72,160,132,17,15,254,17,0,64,255,224,128,16,3,248,80,137,8,31,129,8,123,192,132,57,196,32,123,192,132,74,66,148,74,64,132,41,65,8,84,135,232,85,15,254,67,69,212,117,77,212,85,69,200,85,77,98,64,2,254,2,136,40,79,225,170,42,174,174,44,34,130,47,224,130,17,15,254,17,7,136,83,230,20,80,132,190,106,5,32,68,4,128,0,7,124,85,69,124,117,69,124,82,7,16,84,69,162,90,171,24,32,7,190,138,161,62,250,170,190,249,10,136,250,32,82,53,76,140,8,0,64,127,197,20,191,129,16,127,193,16,36,133,244,4,3,248,4,7,252,81,75,248,17,7,252,32,133,244,149,33,80,10,1,16,0,3,252,0,0,0,0,1,248,0,0,0,0,7,254,0,0,0,8,1,8,63,192,132,127,225,16,32,133,244,128,33,248,0,3,252,4,0,160,17,2,8,196,96,64,36,129,80,127,192,64,4,0,64,73,15,208,73,239,228,5,71,148,73,71,148,72,135,148,73,69,162,63,1,32,12,1,32,123,130,168,17,2,232,255,225,80,36,132,68,15,142,80,162,11,220,181,74,136,181,78,32,191,224,168,18,64,32,4,0,64,127,192,64,36,129,80,255,226,64,34,130,16,40,131,6,32,2,254,37,47,36,33,130,102,49,14,124,37,66,124,161,36,254,7,239,42,18,69,24,86,101,8,123,224,170,235,224,136,43,225,2,16,1,0,23,199,132,16,65,60,24,71,4,16,65,124,80,2,0,33,2,86,41,47,214,89,37,254,145,5,254,36,69,40,129,0,238,0,7,190,16,131,156,16,135,190,8,0,80,18,69,66,152,162,248,8,0,128,31,129,16,34,5,252,18,65,36,31,193,0,16,32,254,143,196,36,10,73,36,69,64,136,33,12,156,73,4,144,95,224,0,4,0,64,127,193,80,36,133,86,17,7,188,49,5,184,149,97,16,20,65,40,47,226,214,107,170,254,32,2,124,36,66,124,36,66,124,17,15,254,17,4,32,34,8,168,74,65,36,34,12,12,67,5,192,1,15,144,37,66,82,69,39,144,209,37,20,80,135,16,70,1,128,17,0,160,4,0,160,53,128,64,127,192,64,36,132,68,148,64,128,68,66,132,17,66,148,85,65,20,253,65,20,84,73,36,80,66,12,130,4,32,10,136,164,82,34,32,34,12,34,66,68,24,70,3,128,33,2,16,65,9,84,229,34,146,65,15,18,0,67,24,198,1,128,18,1,254,42,162,146,106,170,254,36,66,162,39,194,164,33,130,102,2,0,80,232,139,116,162,11,252,162,10,248,232,138,136,15,128,136,33,3,144,73,233,36,125,64,84,124,128,72,125,64,34,82,72,146,33,3,222,81,72,162,23,197,16,87,197,84,85,65,92,33,4,16,0,14,254,162,138,40,175,238,170,170,170,206,168,46,130,15,224,130,29,207,84,85,69,84,85,79,254,85,69,84,117,77,84,38,68,204,17,15,254,17,0,64,7,192,64,4,1,248,16,129,8,31,129,8,16,1,4,16,143,208,18,35,132,84,137,16,18,33,4,17,129,96,4,0,64,4,4,68,68,68,68,68,68,68,68,71,252,0,64,0,0,46,226,170,170,170,170,175,250,170,170,170,170,42,162,42,166,100,33,2,254,56,42,254,168,10,254,173,162,182,41,37,182,77,169,54,32,33,4,253,128,130,20,67,152,88,9,66,16,65,24,22,1,0,64,2,252,0,68,68,68,68,68,74,69,20,64,68,4,65,68,8,113,5,16,87,198,16,85,69,56,95,229,16,98,132,40,68,68,130,33,2,254,240,2,254,40,35,186,234,162,254,36,66,124,164,69,254,2,15,60,148,137,254,181,75,98,180,139,126,164,3,92,77,72,156,114,69,254,81,5,124,113,5,254,85,71,254,80,5,124,84,75,124,17,7,252,4,3,248,4,7,252,21,15,254,0,3,248,32,131,248,129,4,16,9,40,146,89,34,146,41,44,146,73,36,254,64,32,0,4,7,252,64,71,252,64,5,220,68,69,84,76,196,204,85,72,204,34,130,254,65,5,124,225,2,254,85,78,254,0,3,124,196,64,124,33,2,254,36,66,40,255,226,170,44,98,186,58,174,186,72,32,134,20,1,64,39,226,144,97,10,126,33,34,18,34,34,34,36,162,132,4,7,252,17,0,160,127,196,164,81,70,236,74,68,228,65,68,8,36,129,80,127,228,2,159,1,16,63,130,8,36,130,72,11,3,8,1,0,32,239,234,130,168,42,186,234,170,170,171,174,130,8,160,132,8,0,128,8,0,128,15,192,128,8,0,128,8,0,128,255,224,0,4,4,68,36,128,64,127,196,4,95,69,20,81,69,244,64,68,12,36,129,80,127,196,4,95,65,16,31,0,64,255,227,72,211,1,142,33,2,146,37,79,16,39,199,68,111,202,68,39,194,68,37,66,72,33,2,146,37,79,16,39,194,68,55,206,68,39,194,68,165,68,72,17,14,146,37,66,16,247,194,68,119,198,196,167,194,68,37,66,72,34,2,60,46,10,168,177,42,106,160,98,252,37,5,84,85,72,140,17,15,254,17,0,0,16,1,252,32,68,132,4,64,68,1,64,8,16,1,0,63,194,4,64,72,132,4,64,68,0,64,4,2,128,16,32,15,222,72,163,10,253,32,38,120,4,158,121,36,146,121,224,0,4,0,64,36,130,68,68,40,66,4,0,68,1,128,96,24,14,0,1,0,146,229,74,16,167,202,68,167,202,68,231,202,68,5,64,72,0,15,188,42,66,168,75,9,168,2,71,164,75,68,168,122,0,32,32,2,252,66,73,36,228,66,84,72,143,124,4,67,68,199,192,68,4,7,252,9,3,72,223,96,80,127,193,8,63,141,8,31,129,8,0,143,148,138,42,220,168,10,190,168,138,172,36,165,10,74,136,16,33,2,8,39,239,194,168,10,160,250,66,40,43,3,162,234,32,30,3,131,192,4,0,64,127,192,64,4,3,248,32,130,8,63,130,8,4,0,160,17,2,8,223,96,64,127,192,64,63,130,8,63,130,8,16,129,8,125,1,30,255,66,148,109,74,180,40,132,148,170,65,66,47,194,72,39,143,72,39,130,78,63,142,8,46,226,170,164,70,170,16,135,136,75,231,136,76,135,168,74,143,136,40,132,136,170,129,16,47,194,72,39,139,72,167,138,78,175,130,8,46,226,170,36,66,170,66,2,32,139,196,160,10,3,252,34,12,160,82,68,24,70,1,128,65,2,16,241,1,16,39,199,16,169,2,16,33,2,254,32,2,0,0,4,124,36,64,68,232,34,0,39,194,36,34,131,16,34,128,198,1,15,144,39,194,84,69,71,124,213,69,84,87,199,16,81,0,16,4,0,64,63,130,72,36,131,248,36,130,72,63,128,64,4,0,64,1,0,16,119,197,84,85,69,124,85,69,84,119,192,16,1,0,16,17,1,16,47,226,146,105,42,254,41,34,146,47,226,16,33,2,16,4,1,248,16,129,248,16,129,250,16,199,248,2,128,200,50,128,16,64,2,254,8,40,40,68,65,16,47,236,56,69,68,146,65,0,16,32,2,126,36,15,92,84,5,126,86,133,106,38,69,164,139,33,32,33,4,16,151,206,84,37,68,124,245,64,84,55,204,16,1,0,16,65,2,16,7,207,84,21,66,124,117,74,212,39,194,16,33,2,16,66,2,32,2,9,254,82,32,36,37,12,80,73,36,146,80,226,0,4,15,254,128,32,64,127,196,68,127,196,68,127,192,64,4,0,0,34,2,16,47,239,130,81,5,124,149,69,124,37,69,124,137,0,16,17,7,252,17,1,240,17,1,240,17,15,254,37,2,136,32,3,252,23,133,72,83,5,72,24,67,248,32,131,248,32,131,248,32,130,24,33,2,254,33,11,124,172,74,124,164,66,124,36,66,254,34,130,68,132,4,136,31,200,36,95,226,72,74,77,82,66,4,200,67,0,192,4,15,254,4,7,252,0,7,252,68,71,252,64,4,0,64,8,0,4,2,64,36,3,252,68,8,64,63,128,64,4,0,64,255,224,0,16,1,62,82,167,254,146,161,62,125,1,62,17,33,210,114,162,68,16,129,40,82,135,190,148,129,8,27,231,8,16,129,8,19,225,0,13,7,16,17,1,16,17,15,254,17,1,16,17,2,16,33,4,16,39,194,68,71,197,16,231,194,84,71,207,84,7,195,16,193,32,14,4,1,72,101,64,96,56,13,248,16,129,248,16,129,248,16,129,248,2,135,254,66,7,164,74,132,144,90,168,6,63,130,168,42,143,254,12,39,2,16,175,234,84,173,106,84,173,106,56,37,66,146,161,4,1,7,16,85,5,124,121,5,16,87,199,16,81,5,16,95,235,0,63,129,16,10,0,96,25,142,70,4,3,248,4,0,64,127,192,0,16,1,124,81,5,16,87,197,84,85,69,84,37,66,92,65,8,16,4,0,64,36,3,248,68,0,64,255,224,64,10,1,16,32,140,6,32,10,190,72,138,136,43,226,170,106,170,170,42,162,174,168,132,8,66,2,32,251,226,72,32,131,174,47,162,170,74,228,168,170,33,30,64,2,252,8,72,252,88,66,252,68,141,74,76,196,72,95,224,0,1,4,16,39,192,16,239,226,4,47,226,36,41,67,4,33,64,8,0,3,252,32,66,4,63,194,0,32,2,0,32,4,0,64,8,0,127,128,8,14,131,136,8,131,232,42,131,232,8,160,170,127,96,18,4,0,64,4,0,64,255,224,64,4,0,64,4,0,64,4,0,0,0,15,254,8,0,128,16,1,248,48,133,8,144,129,8,31,129,8,33,2,16,34,143,68,40,34,124,48,14,124,36,66,68,167,196,68,0,135,8,80,133,126,80,135,72,82,133,40,80,135,8,2,128,16,17,1,16,33,2,16,97,10,254,33,2,16,33,2,16,33,2,16,4,0,160,53,141,246,17,1,240,17,1,240,20,129,48,21,1,136,65,4,16,113,9,124,69,68,84,71,196,16,81,70,30,79,32,0,4,0,32,127,229,2,138,2,32,18,7,254,5,0,136,16,70,2,64,2,124,4,64,68,228,66,68,39,194,128,48,2,40,4,64,130,4,0,64,63,194,68,36,67,252,4,1,64,12,1,32,225,224,0,16,1,0,31,130,64,68,0,64,255,224,64,10,1,16,32,140,6,17,1,16,47,226,16,111,234,146,47,226,144,37,2,32,37,2,142,63,194,4,63,194,32,50,66,168,34,3,254,39,4,168,82,104,32,1,15,16,23,197,84,85,68,124,121,0,176,233,0,168,42,97,64,33,2,16,34,15,40,84,69,126,144,37,124,36,69,68,87,200,68,2,128,36,2,15,254,2,0,32,126,1,36,17,65,212,240,196,4,0,3,248,0,0,0,255,224,64,37,2,72,68,72,68,20,0,128,4,0,64,4,0,64,255,224,64,4,0,64,4,0,64,127,192,0,4,130,72,36,130,72,255,226,72,36,130,72,39,130,0,63,224,0,33,2,8,47,239,16,39,199,84,109,74,84,165,66,92,33,2,16,4,15,254,4,3,248,36,135,252,4,79,254,4,71,252,4,0,192,32,130,10,32,143,126,32,130,232,52,142,72,39,163,202,160,100,2,32,143,112,36,3,124,229,2,80,105,15,254,0,7,248,33,3,240,136,36,156,29,0,144,205,229,148,73,70,148,82,68,0,191,224,0,34,15,124,34,67,100,227,66,68,104,111,250,8,129,8,227,0,0,31,1,16,31,1,16,31,0,0,127,192,64,39,130,64,84,8,254,2,0,244,226,139,252,166,138,180,177,202,248,232,138,248,8,128,248,8,128,238,245,74,0,191,202,32,170,138,168,247,72,32,63,224,0,64,194,112,33,0,254,225,2,124,36,66,68,39,194,0,95,232,0,17,1,16,33,2,16,111,234,16,33,2,16,33,2,16,39,194,0,18,1,32,47,194,32,127,234,8,47,194,72,34,130,8,34,130,16,16,14,124,34,74,168,113,143,166,37,7,124,161,2,254,33,2,16,66,4,32,119,233,80,41,4,124,69,68,84,85,70,92,65,0,16,3,135,192,68,4,64,68,7,252,68,4,32,66,68,148,80,198,4,8,0,64,255,224,64,63,130,72,36,130,72,36,130,88,4,0,64,33,2,16,39,203,16,175,234,8,175,194,72,34,130,8,34,130,16,4,7,252,64,75,248,8,1,16,63,128,72,4,3,248,4,15,254,64,2,124,244,65,84,37,71,84,173,66,40,34,130,74,36,162,134,1,8,24,65,65,254,193,5,240,69,4,74,84,166,122,92,96,2,17,1,16,82,5,62,86,69,164,82,71,40,81,1,40,20,65,130,0,0,56,124,0,64,127,192,64,255,224,64,4,0,64,20,0,128,32,129,16,255,224,64,63,130,8,63,130,8,63,130,8,63,128,0,4,0,32,127,228,2,129,7,254,1,1,16,9,0,16,5,0,32,4,7,252,4,7,248,8,15,254,16,131,254,40,132,72,128,128,24,32,226,240,34,47,148,36,2,254,48,46,252,36,66,40,161,4,238,18,3,252,98,11,252,34,3,252,34,3,252,0,3,252,32,67,252,3,199,192,40,129,80,127,232,2,63,129,16,10,0,96,25,134,6,2,3,254,37,74,146,109,98,146,111,234,16,47,194,72,67,9,206,17,7,252,68,71,252,68,71,252,0,15,254,0,3,248,32,131,248,16,143,254,16,128,16,247,225,16,34,67,126,160,43,84,229,64,150,32,2,126,36,15,98,37,71,72,108,138,84,38,34,64,39,226,0,34,2,16,47,239,32,36,70,254,112,42,168,170,130,170,42,163,38,1,15,80,37,2,124,57,5,16,95,235,56,37,68,146,129,0,16,32,2,124,32,143,48,32,130,254,49,46,20,33,2,16,165,4,32,33,2,40,244,68,186,160,15,226,42,163,234,234,162,234,42,34,166,16,1,0,29,193,20,253,65,20,17,69,148,148,129,20,82,66,66,32,5,124,136,135,48,32,143,126,33,39,20,81,5,16,117,0,32,136,4,142,14,160,138,190,164,138,24,162,202,202,68,140,73,33,162,1,15,126,17,2,36,39,235,2,165,74,84,181,78,84,9,65,22,8,0,136,8,71,244,9,0,144,127,192,132,8,64,148,8,128,128,0,143,190,136,138,190,168,42,168,173,138,168,175,226,8,81,72,162,34,15,32,15,143,40,146,143,104,3,143,40,18,175,170,36,102,130,18,15,224,75,135,168,6,135,184,18,167,170,18,99,66,0,9,36,17,7,252,17,3,248,42,131,248,4,15,254,24,130,248,72,128,248,63,130,72,34,131,248,4,67,248,5,15,254,48,141,248,16,129,248,15,238,170,170,170,254,161,46,124,161,139,254,166,78,188,18,64,60,127,196,164,127,192,80,6,15,254,16,3,248,80,137,248,16,129,248,127,196,164,127,194,0,63,196,132,190,66,164,62,64,132,126,64,44,63,128,64,255,225,80,100,192,160,53,141,86,14,1,80,36,128,192,8,7,60,64,71,188,64,71,252,73,6,208,73,38,202,74,102,194,127,196,4,127,196,32,79,132,168,79,132,32,95,197,36,87,73,20,4,128,68,4,15,254,4,0,224,21,2,72,68,72,66,4,0,64,2,136,36,66,1,252,198,4,176,74,133,36,66,6,0,159,224,0,32,66,4,46,79,62,42,70,164,117,74,76,170,66,148,32,66,12,4,0,64,255,224,64,127,196,68,68,71,252,14,3,88,196,96,64,2,128,36,63,226,32,34,66,36,50,130,144,35,36,74,88,104,2,16,5,124,82,69,40,81,1,168,4,71,252,0,1,16,10,15,254,125,229,68,124,133,68,125,225,10,120,129,88,244,3,248,4,15,254,4,0,32,127,196,0,73,7,252,73,4,144,79,4,0,85,74,82,17,5,80,57,15,222,58,69,84,145,66,20,253,66,136,17,70,226,137,4,144,61,224,146,190,38,168,62,128,136,92,138,180,73,64,162,32,2,0,251,196,164,82,66,60,80,8,64,2,69,34,80,168,248,0,39,226,66,167,234,72,164,138,126,166,170,106,166,226,136,160,132,255,224,64,127,196,164,74,193,0,255,225,8,49,0,224,25,134,4,33,2,254,34,15,74,47,66,16,54,78,186,33,2,254,33,6,16,4,7,252,0,1,248,16,135,254,16,129,248,6,1,148,106,128,198,63,130,72,63,130,72,63,130,72,36,130,104,37,36,66,3,224,0,17,1,16,87,197,84,85,69,84,85,69,84,21,66,92,33,4,16,33,2,40,36,79,130,39,199,16,105,10,124,161,2,16,47,226,0,33,2,40,36,79,130,39,194,16,49,14,124,33,2,16,175,228,0,127,192,64,127,234,82,20,129,60,126,65,60,58,69,124,18,65,60,0,7,188,10,68,164,74,66,164,42,65,40,41,4,88,130,64,66,4,15,254,85,66,72,85,64,64,85,66,72,85,64,160,49,140,6,66,130,36,4,14,126,44,131,126,36,130,126,44,131,72,39,224,64,4,0,64,4,0,100,246,129,80,37,2,72,68,72,66,20,0,128,0,206,112,161,10,254,229,74,84,175,238,84,165,74,254,225,0,124,20,78,40,32,2,124,252,66,68,119,198,168,162,162,74,36,98,128,1,0,16,114,5,68,95,229,2,84,133,72,116,165,74,8,161,6,1,238,226,165,75,254,240,42,68,174,238,164,183,74,94,228,64,132,8,8,190,168,138,144,171,234,162,170,170,170,170,170,136,137,64,162,3,199,192,36,65,40,255,234,10,59,196,136,106,137,62,32,132,8,72,130,80,0,0,248,200,132,136,79,132,80,85,38,146,72,225,0,0,15,126,33,2,124,68,71,84,213,69,84,85,71,40,68,64,130,68,2,158,253,33,18,85,229,82,85,39,222,21,34,34,34,164,68,32,194,112,44,11,80,165,10,126,161,2,84,85,36,146,133,0,32,72,68,184,254,4,160,123,228,168,122,132,168,254,129,40,74,136,72,84,101,88,255,5,80,93,231,84,221,69,84,127,68,20,85,78,36,10,46,172,191,138,168,174,234,170,174,170,170,191,174,10,10,161,18,63,130,72,36,131,248,36,130,72,63,128,0,4,69,34,80,168,248,24,142,8,32,130,16,249,2,16,114,10,164,36,34,254,36,34,0,0,3,252,0,71,244,0,67,228,34,66,36,34,67,228,1,64,8,16,129,8,33,36,164,115,193,8,33,4,32,123,224,0,255,224,0,0,15,254,34,2,32,58,68,168,171,1,34,18,34,34,65,232,0,1,7,124,65,71,126,65,71,124,65,15,124,33,5,126,249,0,144,4,0,64,127,192,64,255,224,16,1,7,252,33,1,16,5,0,32,249,232,130,251,160,2,251,170,170,170,175,170,171,170,130,168,169,132,0,7,252,74,68,164,74,68,164,74,69,28,64,71,252,64,64,0,16,1,126,32,34,122,96,42,122,36,162,74,39,162,2,32,162,4,16,1,8,40,130,200,106,138,168,40,130,168,44,130,148,34,66,66,64,4,126,112,41,122,0,36,122,68,164,74,87,166,2,64,160,4,0,3,248,32,130,8,32,131,248,32,2,0,32,66,4,31,192,0,32,130,40,34,143,68,41,71,18,105,10,32,34,130,68,47,226,2,17,1,16,42,132,68,255,226,16,63,2,16,63,2,30,255,0,16,17,1,16,17,2,168,68,72,130,4,0,36,82,37,10,144,128,248,0,2,190,36,132,80,147,225,34,34,162,170,122,160,136,1,64,34,68,66,40,7,192,16,225,2,254,33,2,40,36,66,132,80,8,254,4,0,32,127,228,2,132,0,64,127,192,224,21,2,72,196,96,64,64,130,72,4,78,132,41,35,16,34,2,168,52,66,126,0,32,0,7,196,8,35,0,8,231,194,84,39,194,84,47,195,84,36,64,76,33,2,86,41,47,214,41,34,254,49,14,254,36,66,40,161,4,238,33,7,54,85,39,118,85,47,126,81,7,126,82,37,36,81,139,102,68,69,84,78,143,254,78,165,90,100,173,250,74,164,164,68,172,178,8,129,232,232,139,238,171,43,232,168,139,200,234,138,148,10,64,194,17,15,254,17,0,128,8,7,240,9,4,148,81,41,18,37,4,32,0,111,184,32,143,136,171,234,136,217,200,170,248,136,136,248,128,8,18,129,68,41,34,16,98,138,68,40,34,124,36,66,68,39,194,0,4,7,252,4,15,254,8,1,16,62,0,136,63,192,68,37,4,200,65,2,16,15,224,16,231,194,84,39,194,56,37,66,146,81,8,254,127,192,160,127,196,164,127,194,72,21,15,254,14,3,88,196,96,64,31,225,40,47,226,170,111,234,84,35,130,254,35,130,84,41,34,16,68,2,158,253,33,30,85,39,222,17,34,102,4,7,252,4,15,254,162,229,74,62,160,142,170,166,170,62,224,170,72,168,146,17,34,38,4,0,32,127,228,2,151,194,16,103,202,68,39,194,68,39,194,68,64,98,120,4,14,64,39,226,72,36,130,216,52,194,74,8,129,8,4,3,248,4,143,254,4,131,248,68,68,228,85,68,68,68,72,68,1,15,164,35,239,130,170,74,210,217,232,162,253,72,136,249,64,34,17,15,254,17,0,0,123,192,0,251,226,8,113,202,170,32,134,24,66,7,190,148,67,250,32,131,248,32,131,248,32,143,254,17,2,16,63,130,8,63,128,64,127,196,68,68,71,252,4,0,68,255,224,2,225,10,254,162,12,124,201,10,254,180,76,124,132,72,124,132,72,76,225,10,254,162,13,124,170,74,60,186,74,188,202,72,172,136,9,126,32,228,240,66,41,148,228,2,254,66,79,68,2,131,16,194,192,194,112,133,126,81,15,222,138,71,62,93,39,94,85,39,86,84,5,190,2,15,16,47,226,40,66,135,84,209,5,254,81,7,16,81,0,16,4,4,68,68,71,252,8,0,248,16,130,144,6,0,192,48,12,0,17,14,254,37,66,124,245,66,124,113,70,254,162,34,148,52,162,120,8,72,72,95,224,96,219,4,84,91,132,84,89,36,80,66,11,254,228,74,40,183,236,144,163,10,74,185,204,236,137,168,168,149,138,62,36,131,248,4,4,68,127,192,0,63,128,0,255,226,72,68,64,192,1,15,16,17,2,16,33,3,84,101,42,82,41,34,16,165,4,32,32,2,124,36,79,124,32,3,124,100,74,84,37,66,84,162,132,196,33,3,222,81,72,162,63,192,68,255,224,68,127,192,128,16,2,0,17,15,254,21,7,252,32,143,254,32,131,248,12,67,40,213,1,140,32,130,16,34,79,126,34,167,100,107,170,72,170,130,16,34,130,70,1,0,32,228,74,254,164,74,162,163,202,100,234,138,16,2,128,198,33,4,8,79,234,162,229,228,72,141,239,82,5,227,82,197,224,64,1,14,146,69,68,16,71,206,68,69,68,84,101,76,40,4,64,130,4,7,252,4,7,254,136,33,16,62,0,132,127,226,82,68,128,192,65,4,146,117,72,16,119,194,68,37,79,212,37,66,16,50,130,68,8,103,56,66,4,32,123,228,168,74,135,168,66,132,72,132,128,136,39,194,68,39,207,68,39,194,0,46,227,34,234,164,102,10,160,102,17,1,16,37,2,92,103,74,212,37,66,92,37,2,66,35,226,0,8,0,64,127,196,4,144,1,16,18,1,64,24,65,4,15,192,0,33,2,16,37,15,92,87,69,212,149,69,92,37,5,66,147,224,0,36,66,254,36,66,16,250,130,68,43,162,0,55,206,68,71,192,68,40,139,200,73,235,226,42,71,254,170,34,170,60,162,168,169,68,162,40,130,72,32,143,62,32,130,200,53,78,82,38,34,64,171,229,0,115,229,34,83,231,34,35,226,0,55,106,18,165,171,54,229,160,54,1,7,16,87,165,52,117,66,178,32,11,124,164,75,124,196,64,124,0,135,144,73,4,164,123,228,130,75,199,164,74,68,164,75,201,128,17,15,254,17,0,64,8,1,8,63,192,4,31,129,8,16,129,248,33,2,16,34,15,68,39,226,2,48,14,124,36,66,68,167,196,68,4,0,128,17,2,8,127,194,4,0,3,248,32,130,8,32,131,248,4,7,252,4,3,248,8,15,254,17,2,72,213,96,224,53,0,200,249,2,16,249,10,254,169,13,144,138,143,168,138,72,212,252,32,128,4,0,64,4,79,254,4,0,64,10,0,144,20,130,36,192,32,0,4,0,64,127,192,160,25,2,72,192,96,128,68,69,82,145,32,240,66,2,32,2,9,252,66,1,32,37,12,80,72,132,200,82,66,2,32,2,124,36,79,100,37,66,68,47,227,68,228,68,68,9,65,8,65,68,16,95,239,84,85,229,84,105,236,148,85,69,62,65,12,16,4,0,160,57,140,70,63,0,32,63,130,8,36,130,72,27,6,8,2,3,254,33,75,208,101,226,116,117,234,148,41,229,84,97,232,16,128,132,10,29,8,94,87,67,94,85,76,158,73,69,84,101,224,16,32,2,60,32,15,128,39,226,16,33,2,32,50,142,68,79,224,66,33,2,254,240,2,254,40,39,186,106,170,254,164,66,124,36,66,254,2,3,254,32,10,164,114,130,80,104,202,32,42,67,40,69,9,140,159,196,80,31,201,84,95,192,136,47,132,136,207,132,32,95,196,32,159,196,80,31,193,84,223,196,136,79,132,136,79,134,32,95,192,32,10,4,164,50,128,80,200,197,32,74,68,168,85,6,80,72,129,4,32,2,124,36,66,68,247,194,68,36,66,124,56,14,0,79,224,0,25,14,84,41,2,40,116,66,16,37,67,152,225,2,42,40,33,254,64,2,60,242,65,36,35,198,164,178,66,188,32,2,0,39,226,0,1,15,84,39,194,32,79,231,32,210,133,74,85,199,168,73,65,34,32,2,254,40,47,40,37,67,16,111,234,56,37,66,146,161,4,16,0,0,252,116,69,68,84,69,40,82,133,16,114,128,72,8,65,2,4,4,68,68,71,252,8,15,254,18,2,164,42,133,32,133,1,140,128,4,248,1,8,32,84,2,252,37,76,148,74,69,36,69,64,136,65,4,254,73,4,188,233,68,254,73,68,188,105,13,124,20,66,124,33,2,254,41,15,188,41,66,254,57,78,188,41,2,252,52,70,124,36,129,80,127,196,4,31,1,16,31,0,64,63,128,64,255,224,0,36,129,80,255,232,2,63,130,8,63,128,64,255,225,80,36,132,68,113,5,84,83,133,254,120,37,56,82,135,56,81,5,124,81,11,126,2,7,254,66,5,252,66,71,254,66,69,252,66,5,252,80,73,252,33,10,254,121,2,188,249,66,254,121,74,188,41,2,188,42,67,60,17,1,146,37,66,16,111,234,130,43,162,170,43,162,130,40,162,132,32,135,170,73,199,136,75,231,162,75,175,170,26,162,186,202,33,166,65,2,146,5,72,16,79,225,130,43,172,170,75,164,130,72,160,132,33,2,146,245,66,16,47,239,130,43,171,170,171,170,134,224,9,254,159,4,32,4,8,252,69,64,148,82,72,76,37,4,160,17,6,12,36,2,126,40,47,66,39,162,162,50,46,250,34,34,170,175,164,6,130,5,252,2,8,248,68,3,254,68,140,254,72,133,40,80,130,24,131,197,192,4,73,40,72,2,64,89,205,4,93,197,4,95,193,4,68,4,124,132,74,168,193,4,108,153,46,254,1,3,84,201,32,48,17,15,254,81,7,254,144,33,242,36,39,250,4,34,74,63,160,6,34,130,40,34,143,170,38,198,40,118,202,170,162,130,42,36,162,134,133,4,80,85,64,216,205,133,84,69,4,148,80,196,0,191,224,0,144,5,254,40,40,250,82,32,34,63,164,34,202,164,250,64,160,4,228,10,254,180,44,250,210,43,254,162,42,170,202,168,250,128,168,4,64,130,8,0,128,254,224,130,72,34,130,40,40,131,8,34,128,16,4,7,252,9,3,8,223,97,0,31,1,0,127,193,16,63,128,8,33,2,16,167,207,16,175,226,8,55,238,8,36,130,40,32,130,24,33,15,254,37,71,56,87,199,32,95,229,40,117,101,56,85,75,48,117,69,56,87,199,32,95,229,68,123,165,40,83,229,2,87,171,6,2,3,254,36,10,124,106,66,24,98,74,194,33,132,4,67,8,12,68,66,72,255,224,128,127,194,72,95,72,2,63,129,16,17,1,240,36,66,40,39,207,20,39,199,80,111,202,52,165,66,156,33,2,16,120,68,132,121,68,148,121,66,20,125,74,212,84,74,68,85,72,136,7,207,68,151,207,68,39,195,32,167,234,170,180,174,146,2,160,68,68,68,40,119,200,20,119,194,80,255,226,18,35,35,90,41,64,16,39,194,68,39,207,68,39,194,0,55,238,16,37,194,80,171,229,0,123,228,136,123,228,162,122,160,42,254,161,8,81,69,226,80,11,254,1,7,124,82,133,16,127,226,146,39,203,84,165,75,92,225,0,16,1,0,254,228,74,40,175,234,146,167,202,84,229,74,92,1,0,16,17,1,16,47,226,16,99,138,56,37,66,84,43,162,16,33,2,16,17,1,16,123,193,16,255,226,168,68,73,250,16,129,248,16,129,248,1,0,124,225,10,254,181,106,124,165,74,254,225,42,92,5,0,190,39,194,68,55,202,68,167,202,32,167,226,170,36,162,146,34,162,68,136,132,80,31,200,36,95,193,32,63,228,98,202,165,36,66,0,32,68,34,130,124,161,74,124,165,10,126,163,42,90,41,66,16,161,4,0,7,252,64,71,252,66,132,168,74,135,254,74,132,184,72,8,254,127,192,64,4,0,64,255,224,64,10,0,160,17,2,8,192,96,0,64,2,252,130,5,254,4,130,132,82,44,160,75,69,42,74,160,64,65,5,254,66,4,252,232,68,252,72,68,252,104,77,254,4,128,132,0,7,252,68,68,68,68,71,252,68,68,68,68,71,252,64,64,0,18,70,36,39,226,36,250,66,36,35,199,36,82,69,36,115,192,0,32,194,112,49,10,144,175,234,16,33,2,124,36,66,68,39,194,68,16,206,112,33,2,254,242,130,84,41,39,20,85,165,148,117,0,32,2,135,168,79,228,170,122,164,254,74,167,170,79,228,128,73,73,162,34,130,40,42,175,108,34,130,44,54,174,168,34,130,74,164,164,134,16,1,248,49,4,224,49,140,70,4,7,252,4,2,72,84,64,128,79,194,36,34,64,84,232,130,124,36,66,68,39,194,0,95,232,0,2,142,40,170,138,106,226,202,40,166,206,170,162,138,74,228,160,134,2,135,40,90,165,108,114,130,40,54,202,170,162,139,74,232,161,6,1,15,144,137,10,158,169,10,144,171,202,164,34,69,36,75,200,36,65,4,16,117,8,124,117,2,144,39,239,144,34,131,40,36,64,130,33,2,16,249,234,144,169,10,188,170,74,164,186,66,36,35,194,0,0,3,252,32,2,0,63,226,16,33,2,16,33,4,16,69,8,32,0,192,112,228,10,64,164,10,126,164,138,72,228,138,136,8,129,8,32,2,124,48,138,144,166,138,134,32,2,124,81,5,16,79,232,0,64,2,254,129,4,16,17,2,16,33,12,16,65,4,16,69,0,32,0,207,112,17,2,16,71,194,16,17,9,124,96,3,0,79,232,0,17,1,254,32,2,124,100,74,124,32,2,254,40,34,124,33,2,48,4,7,252,0,1,240,17,1,240,0,7,252,64,67,248,4,0,192,2,7,254,64,71,184,72,132,136,83,229,136,72,134,190,88,10,126,64,69,216,68,142,136,83,229,200,100,141,72,75,229,64,99,236,0,32,39,12,86,71,36,82,239,68,82,69,164,118,229,32,85,235,0,71,194,40,33,0,124,229,66,124,37,66,124,37,66,76,80,8,254,32,2,254,40,47,186,40,39,186,106,170,170,171,162,130,40,162,132,251,226,34,251,170,162,170,45,186,138,175,170,139,168,162,250,160,36,1,14,254,162,138,254,229,74,124,165,78,124,161,10,124,225,0,254,0,7,252,64,69,244,64,69,244,81,69,20,95,68,4,65,68,8,64,6,254,136,32,186,232,36,186,234,164,170,91,166,130,72,160,132,0,39,196,68,134,82,84,68,72,253,4,66,68,68,72,85,8,128,4,7,252,17,15,254,36,131,248,36,131,248,4,3,248,4,15,254,39,194,4,34,143,144,39,199,84,111,202,84,39,194,84,37,66,76,32,2,124,34,143,144,39,194,84,55,206,84,39,194,84,165,68,76,34,7,188,148,135,252,64,69,244,64,69,244,81,69,244,64,68,12,33,2,8,71,233,16,226,4,68,143,239,42,2,131,74,196,160,134,2,3,254,32,10,252,96,130,254,105,42,254,41,36,254,73,40,150,17,1,40,36,66,186,96,10,226,42,162,234,42,162,226,42,162,164,32,2,120,36,143,72,40,98,0,55,206,68,34,130,16,162,132,198,2,1,32,10,2,32,18,0,32,127,224,32,5,0,136,48,108,2,79,130,32,31,192,112,234,131,38,47,130,72,37,194,132,80,136,254,0,1,240,17,1,16,17,7,28,64,68,4,64,68,4,127,196,4,3,131,192,4,15,254,21,2,72,196,97,240,17,33,18,32,228,0,8,0,64,127,228,146,144,130,84,4,135,252,4,0,160,49,140,6,127,196,132,95,70,148,70,68,148,84,196,36,72,68,68,127,196,4,17,2,16,71,201,16,33,6,254,161,2,80,37,226,80,43,3,30,65,2,40,4,64,186,225,2,254,33,2,84,41,34,80,82,8,254,65,2,40,4,72,186,65,0,254,33,12,84,73,36,16,69,0,32,127,196,4,127,196,72,95,4,96,127,228,248,88,134,248,72,136,248,4,0,64,4,0,64,127,192,64,4,0,64,4,0,64,255,224,0,1,0,16,113,5,16,87,197,16,81,5,16,113,5,16,15,224,0,16,1,0,63,132,16,130,7,252,68,71,252,10,1,42,34,36,30,130,5,36,18,73,252,64,1,252,34,13,252,85,69,84,85,65,12,127,196,36,66,69,252,70,68,164,82,70,36,74,68,68,127,196,4,34,130,36,36,15,126,44,131,126,100,138,126,36,130,72,167,228,64,16,6,62,32,143,190,34,39,42,170,162,42,114,165,72,89,73,34,9,231,82,81,229,18,113,229,208,85,167,84,85,165,64,91,235,0,34,34,20,32,15,190,170,42,162,251,226,20,41,67,148,226,96,64,65,226,146,245,225,18,45,231,84,165,99,84,37,162,64,43,227,0,143,132,136,15,128,136,239,130,162,41,66,168,44,66,0,95,232,0,63,128,64,4,15,254,9,1,8,32,101,248,16,129,8,31,129,8,4,0,64,255,224,64,36,130,72,63,128,72,4,32,66,3,224,0,125,196,86,126,5,94,127,37,76,163,35,248,32,131,248,32,130,24,34,2,32,35,239,80,41,2,92,55,78,212,37,194,80,164,36,62,32,2,12,39,15,144,33,2,16,49,238,240,33,2,18,161,36,14,4,71,40,80,5,124,116,69,68,87,199,40,82,133,42,84,171,134,17,2,8,123,228,162,104,5,146,65,71,152,9,46,146,8,225,128,1,7,8,87,229,66,96,5,36,82,133,48,98,36,34,65,228,0,1,15,16,17,5,126,81,7,144,9,3,168,202,128,164,44,33,0,1,15,8,23,229,66,80,7,164,10,131,176,202,32,162,41,225,0,32,66,228,43,239,168,45,6,174,122,170,174,172,162,142,40,162,138,3,199,192,36,65,40,8,0,128,127,225,8,9,0,96,9,135,4,32,2,126,33,15,144,34,2,60,54,78,164,34,66,36,163,196,36,0,192,112,225,10,254,165,74,84,175,234,84,229,74,254,1,0,124,33,2,8,39,239,66,34,66,66,51,206,8,33,2,32,162,36,30,1,0,16,119,197,16,81,5,254,81,5,16,119,197,16,1,0,254,33,2,16,39,207,144,175,234,144,249,2,124,41,3,144,239,224,0,66,2,32,15,136,32,66,1,252,34,12,32,79,132,32,66,1,252,33,2,16,39,207,16,81,5,126,145,5,16,39,197,16,65,8,254,0,7,252,8,0,128,15,1,16,21,1,48,33,34,146,49,34,14,65,2,16,247,225,16,41,7,124,169,2,56,37,66,146,33,2,16,127,192,64,13,1,72,100,64,64,0,7,252,4,2,120,36,15,254,17,1,16,33,3,208,69,138,148,25,33,18,33,4,16,129,0,16,1,14,254,8,46,64,166,234,170,234,161,110,162,132,42,116,172,134,4,15,254,42,132,164,63,128,8,63,130,0,63,192,4,2,128,16,2,11,254,85,66,82,143,132,8,15,130,128,207,196,4,66,68,24,0,15,188,32,2,0,47,231,40,34,130,40,58,174,42,68,160,134,0,7,62,0,128,62,250,37,34,82,165,106,90,165,20,130,32,0,8,0,128,8,7,240,9,2,144,25,0,146,21,33,18,32,228,0,34,2,16,47,234,130,183,202,0,47,226,40,82,132,170,132,160,134,4,0,32,127,228,2,159,128,0,63,192,144,9,0,146,17,38,14,1,15,136,39,226,66,66,7,94,213,165,90,90,231,40,68,160,142,34,2,60,36,79,136,47,226,146,57,46,254,34,130,42,164,164,134,4,14,124,168,75,8,175,238,146,169,42,254,162,142,42,4,160,134,34,4,16,239,202,132,167,142,0,191,202,80,165,14,82,169,33,14,34,2,16,47,234,130,180,10,110,170,162,170,54,226,40,36,162,134,4,0,32,127,229,2,144,1,222,37,34,82,89,96,144,17,34,14,33,2,8,39,239,66,82,5,62,85,165,90,42,229,40,132,160,134,0,7,252,8,0,128,15,128,136,8,129,8,16,130,8,34,132,16,1,7,8,87,229,66,114,5,62,85,167,90,90,229,40,148,163,134,128,4,254,1,8,144,81,1,124,33,12,16,65,4,16,79,224,0,0,7,252,4,0,64,4,3,248,4,0,64,4,0,64,255,224,0,8,0,64,0,15,254,32,2,0,32,2,0,32,2,0,63,192,0,32,2,124,33,15,144,33,7,124,105,10,16,161,2,16,47,226,0,0,7,252,64,68,4,106,197,20,81,70,172,64,68,4,65,68,8,18,2,16,64,9,124,17,2,16,103,202,16,33,2,16,47,226,0,0,7,124,81,5,16,81,7,124,81,5,16,81,7,16,15,224,0,35,193,36,251,196,36,67,199,36,4,199,252,4,3,248,4,15,254,4,0,32,255,226,0,32,3,252,8,0,64,84,69,18,145,32,240,4,0,32,127,225,0,31,192,64,8,7,254,16,128,144,6,7,158,1,71,254,65,7,210,65,37,20,125,69,72,100,165,138,101,104,34,68,71,252,17,6,124,37,79,252,117,74,252,251,5,52,53,36,142,37,5,80,159,2,30,93,76,52,93,69,84,84,133,104,101,68,34,16,1,248,32,132,16,191,194,0,47,130,136,42,132,146,72,40,126,4,0,64,127,192,64,63,128,64,127,192,68,4,64,84,4,128,64,65,2,16,47,224,16,231,226,16,47,226,18,33,162,20,81,8,254,34,2,60,36,79,136,39,227,64,109,234,82,37,98,80,41,35,14,0,7,254,68,39,250,68,37,242,68,39,250,68,164,90,68,39,254,5,0,72,232,10,254,185,10,252,169,10,252,233,10,144,15,224,128,34,130,36,52,10,126,172,139,126,164,130,126,36,130,72,39,226,64,4,2,64,20,0,64,127,192,68,4,64,164,9,65,4,33,68,8,145,5,20,34,2,190,182,133,62], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+71697);
/* memory initializer */ allocate([34,131,190,66,136,168,51,224,32,34,130,36,68,5,126,236,130,126,68,143,126,4,131,72,199,224,64,17,15,254,17,0,64,63,192,64,63,192,64,127,192,68,5,64,72,33,15,254,47,0,64,127,193,80,100,192,128,255,225,16,14,7,28,3,131,192,4,7,252,21,6,76,8,7,254,16,128,144,6,7,156,18,1,32,47,194,32,111,138,32,63,226,34,34,162,36,34,2,32,18,1,160,38,2,32,111,202,36,34,66,84,36,194,132,49,66,8,63,194,4,63,194,0,35,195,224,35,130,224,35,197,224,66,40,30,33,2,16,79,229,16,231,194,16,79,239,18,1,33,154,225,64,16,4,0,64,63,128,64,4,7,252,14,1,80,36,132,70,132,0,64,16,143,254,16,135,196,68,71,222,64,71,228,73,69,196,170,65,140,2,0,32,239,138,32,162,11,252,167,10,168,242,74,34,2,0,32,63,130,72,63,130,72,63,128,0,255,226,72,37,2,32,41,131,6,127,196,68,127,196,68,127,194,8,63,130,8,63,130,8,34,130,16,15,142,168,175,138,168,175,138,0,191,234,164,234,138,144,12,192,130,26,14,124,37,79,124,37,71,124,169,68,24,250,165,46,37,37,142,18,1,16,32,2,254,96,10,132,36,66,72,36,130,16,63,226,0,159,197,36,31,201,36,95,194,136,47,140,136,79,132,136,74,128,144,159,197,36,31,205,36,95,196,136,79,133,136,111,132,136,10,128,144,126,68,36,126,68,30,92,68,20,126,196,132,90,70,148,136,65,140,124,68,68,125,228,4,126,68,148,172,68,172,24,0,68,82,169,248,0,7,252,8,64,132,8,64,132,9,64,136,8,0,128,255,224,0,2,3,252,32,10,248,104,130,248,104,138,248,32,5,252,85,75,254,79,130,136,15,136,136,79,130,0,95,205,84,85,69,84,127,228,0,33,2,8,32,15,190,169,74,148,249,66,20,40,131,148,234,64,66,8,0,64,0,15,254,32,130,8,17,0,160,4,0,160,49,140,6,64,2,254,0,37,250,73,36,242,73,36,242,73,165,242,65,36,22,34,4,16,80,9,254,228,66,68,66,143,40,1,3,40,196,65,130,2,0,32,231,234,170,162,170,42,164,170,82,233,41,34,4,160,4,20,14,120,41,2,124,240,66,124,112,74,124,34,2,20,44,163,120,4,15,254,17,0,224,53,140,150,30,0,128,63,129,80,36,128,192,64,2,252,64,68,4,78,68,164,74,68,164,78,68,4,65,68,8,4,64,146,226,10,68,167,202,0,174,234,34,170,174,102,170,160,102,17,2,72,72,105,16,63,128,8,123,194,148,24,194,148,74,65,140,16,130,68,73,33,248,0,143,254,16,1,240,17,2,82,33,35,142,32,66,132,37,239,4,44,66,84,52,78,68,37,66,72,170,5,30,33,194,20,33,79,156,168,138,190,250,170,42,43,99,162,202,160,36,71,194,68,7,200,16,79,225,146,41,44,170,76,100,130,72,160,132,4,7,252,81,66,8,95,65,16,31,0,64,127,196,68,74,68,12,2,1,168,114,65,32,255,225,32,18,129,168,113,1,50,84,162,6,33,15,168,36,79,138,138,143,136,138,143,142,39,143,136,32,130,8,1,7,208,81,5,16,125,132,84,69,39,210,81,5,16,125,0,16,39,226,66,39,239,64,37,226,72,53,46,94,36,130,190,168,133,62,0,4,24,46,8,32,66,1,252,34,12,80,69,4,136,72,129,4,0,7,252,4,2,72,36,130,72,85,72,226,4,0,64,255,224,0,1,0,32,119,197,68,84,69,76,84,5,126,80,39,122,0,32,6,65,7,32,135,199,68,37,66,72,247,226,2,39,163,2,32,160,4,8,1,0,63,2,16,35,2,0,63,192,4,127,64,4,2,128,16,128,4,252,0,8,0,95,224,32,20,2,124,192,68,4,66,132,16,0,9,252,66,0,168,202,132,168,74,133,116,66,6,32,95,192,0,127,196,4,127,196,0,127,196,64,72,133,252,66,5,252,66,11,254,0,7,252,4,0,64,4,15,254,10,0,160,18,33,34,33,228,0,17,7,252,17,0,0,63,192,64,255,224,160,10,33,34,33,236,0,32,2,254,33,15,124,34,71,36,111,234,0,167,194,68,36,66,124,127,128,128,8,7,240,17,1,16,255,224,0,63,130,8,32,131,248,63,130,8,32,131,248,0,7,252,4,15,254,10,1,24,224,96,0,63,130,72,36,130,72,255,228,136,72,132,136,127,225,8,34,132,16,1,3,212,1,15,254,17,1,16,93,5,16,80,165,234,240,96,2,0,7,252,8,0,128,127,128,136,8,129,8,16,129,8,255,224,0,32,2,252,34,15,120,34,131,72,111,234,0,39,194,68,164,68,124,16,1,0,63,130,64,68,0,64,255,224,64,4,0,64,4,0,64,64,7,254,170,135,252,42,143,254,32,131,190,72,139,40,35,236,8,16,1,124,33,2,16,97,10,252,34,66,36,36,66,68,47,226,0,20,1,126,40,2,124,101,74,76,63,226,164,41,66,254,32,66,24,34,2,120,36,130,72,245,130,64,39,194,4,47,67,4,193,64,8,5,0,72,4,3,254,36,2,68,34,66,40,33,36,42,76,104,2,63,128,64,255,234,74,63,133,16,14,3,30,196,3,248,8,131,24,15,206,32,175,138,40,164,142,254,160,10,120,164,142,72,7,128,0,34,2,32,164,15,126,170,162,42,52,174,82,41,34,34,36,162,4,32,2,0,63,197,36,146,65,36,34,66,68,68,72,148,16,128,0,16,1,248,41,4,96,9,131,70,196,3,248,8,128,136,18,130,16,32,2,254,33,11,124,170,74,36,175,226,0,39,194,68,36,66,124,0,8,248,72,128,248,192,5,252,66,5,254,66,6,80,72,131,6,17,1,16,127,193,16,17,15,254,0,3,248,32,131,248,32,131,248,0,15,188,146,75,164,171,202,160,186,9,34,253,224,0,82,72,146,32,194,112,36,15,64,39,231,72,108,138,72,36,130,136,40,131,8,0,15,254,10,0,160,127,196,164,74,69,36,97,196,4,127,196,4,15,239,40,34,130,254,74,167,170,202,164,206,72,39,130,79,224,130,0,135,200,16,129,30,33,35,162,106,74,212,40,131,136,33,0,96,4,46,92,165,11,240,165,238,116,173,75,84,165,78,84,6,64,68,1,0,254,225,10,124,164,74,124,162,138,254,224,10,124,4,64,124,0,0,252,228,74,72,165,10,92,168,74,168,241,9,40,36,100,128,71,196,68,119,200,68,119,194,32,247,226,170,34,163,82,42,160,4,32,2,254,162,143,40,175,226,170,58,174,170,44,98,130,47,226,130,26,78,24,34,66,16,247,226,40,119,234,170,34,162,46,32,130,8,8,3,248,32,131,248,32,131,248,32,131,248,8,4,68,81,41,240,33,1,224,33,0,128,255,225,32,63,197,36,146,65,52,18,128,32,3,199,192,36,129,80,127,192,224,21,6,76,8,5,68,81,40,242,113,5,124,83,135,84,89,37,40,116,101,16,85,69,56,85,75,48,4,0,64,7,192,132,8,129,72,35,0,32,4,1,128,96,0,0,34,130,40,55,202,168,162,138,254,160,2,124,36,66,124,36,66,124,33,2,124,44,75,124,164,74,124,36,66,124,82,4,20,140,161,120,36,130,48,180,138,164,175,234,80,39,194,212,85,69,92,129,0,16,129,197,224,10,72,72,79,1,32,36,140,248,66,5,252,69,0,136,130,4,32,3,200,36,84,66,72,42,140,16,65,4,32,68,0,128,127,196,4,127,197,36,74,133,4,74,4,252,82,11,254,130,0,32,36,66,228,42,143,238,43,38,234,100,171,234,168,66,236,50,162,114,16,143,254,21,2,96,76,73,60,4,15,254,10,1,148,106,128,198,2,3,254,36,67,254,36,66,124,33,2,254,73,36,154,137,64,16,0,3,252,0,65,4,8,64,132,2,64,68,8,67,4,1,64,8,34,2,124,36,79,124,84,69,124,148,69,124,34,5,20,140,161,120,4,7,252,4,3,248,32,131,248,17,15,254,0,3,248,32,131,248,65,4,80,119,200,144,113,2,254,242,130,40,34,163,74,36,96,128,66,2,32,138,4,248,18,2,32,95,236,80,69,4,146,73,33,14,3,135,192,8,1,16,62,0,64,8,131,252,4,4,72,148,64,128,113,5,84,89,38,124,100,69,124,84,69,124,97,4,84,73,36,48,1,0,20,249,0,158,79,4,144,41,65,24,41,36,42,132,96,130,32,2,124,69,73,84,229,66,124,69,79,84,5,67,84,199,192,0,1,14,254,169,42,124,225,10,124,161,14,254,161,10,124,228,64,124,32,2,126,33,15,144,169,138,148,249,42,16,41,3,208,229,0,16,0,7,254,64,5,252,82,69,252,82,69,252,66,4,32,66,7,254,127,192,64,127,234,82,19,199,132,75,199,128,67,199,148,64,132,118,33,2,254,249,36,124,97,10,124,241,2,254,49,14,124,36,66,124,14,238,162,170,42,238,168,14,238,168,170,234,168,174,132,8,160,146,32,130,8,35,234,136,170,170,156,168,138,190,184,142,148,2,64,66,17,1,16,39,194,16,101,74,56,33,2,254,33,2,40,36,66,130,17,5,16,39,197,16,149,65,56,49,5,254,145,1,40,84,66,130,0,7,254,4,0,64,4,0,80,4,192,68,4,0,64,4,0,64,127,196,64,95,133,8,95,133,8,95,132,128,95,134,136,71,9,140,127,192,64,63,130,8,63,130,8,63,129,0,63,132,136,7,3,142,0,1,254,226,10,32,162,138,36,162,74,32,226,10,32,2,0,32,69,5,144,81,239,34,80,133,232,116,141,72,85,69,84,101,76,34,66,132,200,104,232,146,232,4,244,234,68,164,74,70,164,74,161,18,4,2,64,63,132,64,4,15,254,10,0,160,18,33,34,33,228,0,17,1,16,33,2,146,105,42,146,41,34,146,41,34,254,32,34,0,66,39,148,139,225,8,248,138,190,248,138,136,251,224,8,28,142,8,32,194,112,65,9,16,225,2,254,65,15,16,1,1,144,225,0,16,1,64,16,127,228,16,127,4,20,93,69,88,93,36,42,132,96,130,23,197,36,82,133,16,18,128,70,63,130,8,36,130,72,10,3,24,36,4,78,135,1,128,32,230,228,164,66,228,36,66,84,38,66,76,33,7,136,79,230,144,89,79,164,75,134,144,89,4,164,75,233,130,64,2,252,0,68,68,68,69,244,68,68,228,85,68,68,69,68,8,128,101,216,4,136,136,82,226,168,42,141,168,75,229,64,83,226,0,1,7,8,23,225,16,114,68,68,71,135,16,18,1,68,87,226,2,72,132,80,95,238,80,175,202,84,191,234,84,79,202,80,173,129,84,63,130,8,63,130,8,63,128,160,74,66,168,27,0,160,255,224,0,113,5,40,84,69,130,103,197,0,81,70,84,66,68,8,79,228,0,0,15,124,36,66,84,37,71,84,37,66,16,58,142,42,68,160,134,16,129,12,254,161,8,127,230,200,84,135,212,85,71,212,86,68,194,31,129,8,31,129,8,31,129,8,127,224,64,9,1,8,63,192,4,113,5,124,84,71,124,84,69,124,113,5,218,85,197,84,89,43,48,66,4,60,114,69,72,144,4,44,68,68,68,70,197,68,103,196,68,17,7,252,4,3,248,4,15,254,66,2,124,9,66,16,66,128,198,4,0,32,255,232,66,36,3,248,68,15,254,18,1,32,34,36,30,2,7,32,83,197,68,104,133,32,84,101,66,102,228,66,71,228,66,0,7,124,84,69,124,100,69,124,86,37,84,100,132,68,69,36,96,34,132,36,66,9,60,238,4,60,142,14,36,2,131,18,194,160,70,16,1,30,17,39,210,17,227,146,53,37,30,145,33,18,17,225,0,127,228,128,73,231,242,73,37,222,91,38,158,73,36,146,73,232,128,65,4,254,96,8,238,234,164,238,66,142,254,66,132,254,100,132,102,3,3,192,4,15,254,21,2,72,196,97,240,17,1,240,17,1,240,66,7,188,165,1,0,19,199,228,19,195,164,55,197,36,19,193,0,4,15,254,42,131,184,17,7,252,17,15,254,26,2,148,200,128,198,136,4,188,10,75,228,75,193,228,42,76,188,74,68,164,75,192,128,4,0,64,8,129,16,62,0,68,8,131,248,1,0,96,24,6,0,136,5,54,249,34,18,117,162,54,33,47,182,37,162,18,69,168,36,68,66,40,247,193,16,33,7,124,169,2,16,47,226,16,33,2,16,4,68,40,47,224,16,225,2,124,33,2,16,47,227,16,33,0,16,16,1,60,126,65,60,58,69,124,146,65,60,4,1,36,80,168,248,1,0,32,239,234,130,168,42,186,170,170,170,235,170,130,8,160,132,4,7,252,0,1,240,17,1,240,0,3,240,2,7,252,4,0,192,0,0,254,241,2,124,36,66,84,37,67,84,197,64,40,4,64,132,17,1,16,127,193,16,255,225,16,63,141,22,31,1,0,16,128,248,36,2,124,40,143,124,37,71,124,98,10,212,163,130,212,33,34,48,20,1,124,40,130,124,101,74,124,34,2,212,35,130,212,37,34,32,8,1,8,255,200,8,190,138,40,162,139,232,128,136,8,131,128,0,8,1,240,34,7,252,164,67,252,12,1,50,103,65,168,106,96,64,17,15,254,21,3,248,4,143,254,4,135,248,4,2,232,53,132,72,1,15,146,37,66,16,71,199,68,215,197,68,87,199,68,85,64,72,127,192,64,255,234,74,21,3,248,32,131,248,32,131,248,32,130,24,146,69,68,17,71,212,69,71,212,69,71,212,69,68,68,85,68,136,2,0,244,226,139,252,162,10,124,168,139,16,231,202,16,5,0,32,59,130,168,255,224,64,63,130,8,36,129,176,224,227,184,42,131,184,33,2,146,117,72,16,119,194,68,247,194,68,39,195,68,37,64,72,130,5,36,10,136,32,79,129,136,47,140,136,79,132,136,74,128,144,4,7,254,64,42,72,21,3,248,32,131,248,32,131,248,32,130,24,68,66,56,133,68,254,2,2,124,74,76,60,66,68,60,66,64,44,2,14,60,174,10,40,161,46,106,160,107,252,165,14,82,9,33,14,4,0,64,4,0,64,37,2,72,68,72,68,4,0,64,20,0,128,4,65,248,5,7,254,4,1,248,97,8,32,63,224,32,10,0,64,34,2,16,47,239,0,34,135,68,106,170,40,162,130,16,34,130,68,4,2,72,21,0,64,63,130,8,63,130,8,63,130,8,34,130,16,2,0,252,226,75,254,162,74,252,162,11,36,247,73,172,18,66,36,33,3,222,82,136,132,3,131,192,4,15,254,4,0,160,49,140,6,33,1,16,253,0,30,82,72,164,5,69,20,32,133,20,138,64,66,36,2,254,244,162,234,116,166,234,165,106,16,47,226,40,36,66,130,17,1,18,93,69,24,81,37,210,224,224,0,63,128,0,255,224,0,125,4,80,125,228,98,124,66,8,124,137,72,109,68,84,117,64,162,35,194,36,35,207,164,171,202,144,251,226,74,43,99,162,203,160,6,80,143,136,83,231,8,35,239,136,168,143,190,32,143,136,35,226,0,34,2,32,34,2,248,242,130,40,38,194,170,34,130,72,42,130,16,33,2,16,39,207,16,37,66,56,49,14,254,33,2,40,164,68,130,34,130,126,44,143,126,36,130,126,52,142,254,34,66,46,164,36,140,0,7,222,9,36,148,73,135,212,25,34,146,73,168,148,41,1,16,16,66,164,69,75,132,18,65,20,124,97,28,84,73,36,80,66,4,114,5,32,95,135,40,82,133,108,122,165,42,84,133,72,90,139,16,136,132,138,14,204,136,74,164,198,66,4,252,72,70,252,72,64,252,0,7,254,72,40,128,15,193,0,31,192,4,126,64,4,2,128,16,32,162,8,47,239,8,42,134,170,127,170,172,170,130,154,54,98,2,64,4,0,125,233,18,17,47,210,17,37,210,81,165,212,241,0,16,123,232,146,125,101,104,125,229,72,132,3,248,36,131,248,4,71,252,81,229,202,101,108,128,223,77,94,95,69,94,95,69,84,85,70,52,66,130,40,10,136,168,95,224,168,42,140,168,75,132,128,79,224,0,128,5,254,16,40,64,71,193,64,39,204,4,79,68,4,65,64,8,136,69,228,19,237,228,82,69,244,82,197,228,106,69,36,43,64,72,63,226,2,63,226,146,37,66,254,40,34,254,40,36,254,72,40,134,9,15,254,9,1,6,125,130,144,253,225,20,253,67,148,85,67,36,17,15,254,17,1,16,4,0,32,18,69,2,80,169,8,15,128,0,34,2,16,119,232,0,116,66,40,247,226,16,39,195,16,33,0,16,5,3,144,33,226,34,60,66,136,40,130,136,73,68,148,138,64,66,8,0,64,127,193,16,10,15,254,4,0,64,127,192,64,4,0,64,16,39,220,1,4,80,41,15,222,17,71,212,17,69,148,149,67,36,32,194,112,36,11,64,172,10,126,164,130,72,36,130,136,40,131,8,0,0,128,4,0,32,18,5,4,80,37,10,144,129,8,15,128,0,18,1,16,47,226,0,103,202,0,39,194,0,39,194,68,39,194,68,8,129,8,34,167,220,84,133,92,84,133,126,84,133,232,240,128,8,63,130,8,63,130,8,63,128,64,36,3,248,68,3,248,4,7,252,119,197,68,87,199,68,87,197,16,117,5,124,89,5,124,81,11,254,23,201,68,87,194,68,87,201,16,53,5,124,153,1,124,81,2,254,39,194,68,55,202,196,167,202,16,165,2,124,41,2,124,33,2,254,0,0,128,68,130,72,33,0,0,255,192,0,18,2,16,64,136,4,0,39,226,36,162,74,36,175,250,36,162,74,36,36,66,68,168,68,0,71,212,41,66,148,253,66,148,72,72,140,4,3,248,4,15,254,0,7,226,36,66,72,36,47,228,36,130,66,36,68,72,69,8,64,0,7,222,41,34,148,41,143,244,41,34,146,41,164,148,73,8,144,32,4,124,128,1,0,47,230,16,161,2,16,33,2,16,37,2,32,251,226,34,251,234,162,171,237,136,138,143,190,140,136,190,248,136,190,4,3,248,4,7,252,17,0,160,127,192,64,255,224,64,4,0,64,4,0,64,127,192,224,21,2,72,196,99,248,32,130,8,63,130,8,33,2,16,37,11,80,167,202,144,33,2,124,33,2,16,47,226,0,33,2,16,37,15,80,87,197,144,145,5,124,33,5,16,143,224,0,0,3,248,32,130,8,32,131,248,10,0,160,18,33,34,33,228,0,0,1,16,17,68,164,74,68,68,74,68,164,81,68,4,127,192,4,4,14,64,175,234,130,245,42,34,170,174,218,168,170,250,161,70,8,32,2,0,127,196,4,148,64,148,73,69,84,65,71,244,1,64,8,64,2,68,2,136,168,73,33,146,42,172,170,76,100,130,79,224,2,34,130,36,244,2,126,76,133,126,164,138,126,84,135,72,23,224,64,34,132,176,122,64,28,120,4,168,123,4,164,121,196,128,82,72,146,17,1,16,33,2,254,97,10,56,37,66,146,33,2,16,33,2,16,34,2,60,84,69,168,209,133,36,84,165,48,80,133,48,64,196,112,9,7,252,4,3,248,8,15,254,16,2,248,34,132,248,132,129,254,32,2,0,47,239,16,34,7,64,103,202,4,32,66,4,34,130,16,2,0,248,232,138,248,168,138,248,168,138,248,226,73,254,5,1,140,64,196,112,97,8,254,229,68,146,247,196,36,82,230,66,68,160,132,3,131,192,4,7,252,21,2,72,255,97,32,23,194,4,34,132,16,64,130,8,240,129,62,34,166,170,179,226,170,34,162,42,35,226,0,33,130,224,66,5,252,234,131,38,79,143,72,5,227,66,201,65,8,66,4,60,66,5,254,242,165,240,82,69,28,122,173,108,18,130,254,2,0,40,2,67,254,34,2,36,58,66,40,33,36,42,68,104,130,127,192,64,127,196,68,53,128,0,127,192,64,127,196,164,74,68,12,4,0,120,4,3,254,36,34,120,60,34,62,53,68,216,69,11,254,1,0,28,225,10,254,169,42,252,169,42,142,234,138,170,22,194,254,0,2,254,33,4,124,148,66,84,69,73,84,37,68,40,132,64,130,33,4,40,148,66,130,103,202,16,47,226,16,37,66,146,37,2,32,2,4,32,39,192,80,233,2,16,47,226,16,41,3,16,33,0,16,33,15,252,41,7,252,18,3,208,8,135,252,36,131,248,36,131,248,248,2,34,249,74,148,170,173,170,138,175,182,138,40,162,251,232,130,16,1,0,43,196,84,185,65,20,125,65,8,88,137,84,81,66,34,32,2,56,34,143,168,43,130,168,42,130,168,75,164,130,71,232,0,4,7,252,64,5,248,65,4,96,65,5,252,66,68,40,74,8,64,4,7,252,17,3,224,8,135,252,0,67,248,36,131,248,36,131,248,33,2,16,50,10,254,170,170,170,170,162,170,42,162,170,63,226,0,32,15,188,74,67,36,75,201,16,62,0,136,127,194,80,84,128,128,47,226,18,37,207,80,91,229,68,87,197,68,39,197,68,133,64,72,33,2,16,71,169,20,239,226,16,67,206,100,11,195,36,195,192,36,33,2,124,65,9,126,224,34,40,69,143,40,15,227,24,194,64,66,32,2,124,249,4,16,97,10,254,241,2,16,57,14,16,33,2,16,1,0,254,232,42,124,160,10,124,164,74,124,228,74,124,0,0,254,4,7,252,64,67,248,0,3,248,32,131,248,32,131,248,0,7,252,63,130,8,63,130,8,63,130,8,255,225,16,63,128,64,82,169,250,66,2,32,3,239,64,75,228,10,114,133,46,82,133,40,149,227,0,4,0,32,127,192,64,8,1,16,62,0,64,8,1,16,63,128,8,1,4,80,39,192,144,1,14,254,34,130,42,34,162,70,80,8,254,2,3,254,40,10,234,116,67,238,106,75,238,42,71,238,64,75,228,2,14,16,175,234,16,226,10,68,175,142,16,162,10,68,239,224,66,34,2,32,67,233,66,235,162,42,67,175,42,3,163,130,192,160,4,81,15,168,82,167,106,34,207,168,171,143,168,34,175,170,34,98,32,16,143,254,16,130,16,119,197,40,113,4,254,113,5,124,113,0,16,8,2,72,17,7,252,64,75,240,2,0,64,127,192,64,20,0,128,4,0,32,0,3,252,32,68,0,9,0,144,17,1,8,32,132,4,63,128,64,255,232,66,53,128,0,127,192,4,63,192,4,127,192,0,0,0,64,8,3,248,42,130,168,42,130,168,42,130,168,255,224,0,124,132,72,124,128,62,124,164,74,84,165,74,85,34,146,38,164,68,63,128,64,255,224,64,127,197,84,127,192,64,127,192,0,82,72,146,32,228,248,136,129,190,40,134,190,170,34,190,42,34,190,42,35,62,32,2,0,127,132,8,190,130,40,62,130,40,62,128,8,2,128,16,4,4,64,39,192,132,231,66,84,39,66,84,39,67,4,33,64,8,63,192,4,31,192,4,63,192,16,255,226,16,17,0,16,5,0,32,242,33,42,82,165,42,82,167,170,10,174,170,10,160,170,42,161,66,133,68,84,10,128,168,213,4,168,74,132,84,69,68,0,191,224,0,2,15,160,35,226,66,59,164,170,75,171,42,19,162,2,64,168,4,128,4,248,4,136,72,84,130,248,36,140,72,68,164,74,68,96,66,4,68,84,37,64,84,229,66,84,37,66,84,53,66,148,8,65,4,64,2,248,4,128,72,228,130,248,36,130,72,36,163,74,36,96,66,128,133,200,4,128,136,205,197,170,72,164,168,89,4,0,191,224,0,143,132,72,4,128,72,239,130,74,36,162,70,36,37,0,143,224,0,0,3,254,34,2,32,34,2,252,34,2,40,34,68,32,95,232,0,32,2,124,37,79,84,39,194,84,53,78,124,33,2,16,161,4,16,1,7,188,18,69,52,82,199,160,19,227,2,87,169,2,80,162,4,1,15,188,170,74,180,250,74,168,171,239,130,39,162,2,32,162,4,0,0,254,224,138,72,164,138,126,161,138,40,228,138,136,18,128,16,0,4,4,32,129,16,10,0,64,4,0,64,4,0,64,4,0,64,17,15,254,17,7,252,1,2,16,63,224,48,13,3,16,197,0,32,0,7,252,2,2,32,34,3,252,6,0,160,50,12,32,10,0,64,32,2,126,248,138,168,170,138,190,249,130,40,60,140,136,18,128,16,68,71,252,0,7,252,66,4,248,66,5,252,66,4,248,66,11,254,32,5,238,136,3,224,74,237,244,64,69,228,82,69,36,95,68,8,159,229,16,17,9,124,81,1,254,49,13,16,87,197,16,47,228,0,1,15,148,18,5,62,150,143,190,50,133,62,146,129,40,83,226,32,0,0,254,226,138,40,162,138,170,166,202,40,226,128,40,31,224,0,0,7,252,10,0,160,10,4,164,42,129,176,10,0,160,255,224,0,64,2,126,0,128,72,232,130,254,34,130,168,52,130,136,18,128,16,127,192,64,39,130,64,255,226,0,63,130,0,63,192,4,85,73,44,0,0,254,233,42,146,175,234,146,169,42,170,236,106,130,15,224,130,95,224,66,95,164,162,85,39,250,85,37,242,85,37,242,68,36,54,32,2,254,169,43,146,175,234,146,41,34,170,92,100,130,143,224,130,130,5,252,5,8,168,95,194,168,47,140,168,79,132,34,66,32,30,17,1,16,125,129,20,29,7,16,0,3,248,42,130,168,42,143,254,0,7,252,10,2,168,27,0,160,127,196,0,64,4,0,64,8,0,0,15,124,34,130,40,66,135,126,210,133,40,82,135,72,68,128,136,32,34,236,34,79,164,165,106,84,251,66,84,45,239,96,9,225,0,4,2,72,36,131,248,0,15,254,16,3,248,80,137,8,31,129,8,0,192,112,241,1,16,37,199,80,21,5,80,39,195,0,79,232,0,8,0,64,127,192,0,63,128,0,63,128,0,63,130,8,32,131,248,16,7,254,40,129,62,126,36,170,114,164,170,114,164,148,82,74,66,71,194,4,72,68,228,82,70,68,91,69,20,91,69,20,95,68,12,4,2,72,37,4,160,49,140,68,36,130,80,68,0,160,49,140,6,143,132,136,8,136,136,80,96,0,47,132,136,200,132,136,79,128,136,4,0,128,255,225,16,36,135,252,164,163,248,36,131,250,4,32,62,34,2,32,47,207,72,42,67,250,234,130,248,42,130,250,162,36,30,0,14,252,168,74,252,232,74,252,169,46,148,168,138,168,236,64,130,40,2,92,64,9,0,43,230,72,160,130,8,36,130,136,34,130,16,130,7,254,32,41,252,66,1,252,50,77,252,82,69,252,72,129,4,36,2,120,244,130,144,119,194,84,253,66,124,36,2,66,35,226,0,32,2,254,42,66,188,250,66,188,41,2,254,58,78,152,74,64,254,10,15,254,10,2,232,224,162,236,42,134,170,174,96,0,82,72,146,0,3,254,32,2,40,34,66,32,63,194,32,37,4,80,72,137,4,7,207,68,37,66,84,69,71,84,213,69,16,82,135,42,68,160,134,0,7,254,74,133,68,127,229,72,87,229,72,87,229,72,87,233,64,2,0,16,239,234,0,167,202,0,167,202,0,231,202,68,7,192,68,4,7,252,17,0,160,127,196,16,70,5,152,70,5,140,67,9,192,34,2,32,51,202,68,168,138,32,164,194,68,86,197,68,135,192,68,4,7,254,80,169,248,16,129,248,8,15,254,16,128,144,6,7,158,129,4,254,2,140,16,79,228,136,75,69,136,107,37,4,17,130,96,1,15,40,20,69,130,87,197,0,122,0,148,236,64,168,47,225,0,1,15,144,39,194,84,117,69,84,95,235,16,18,130,40,68,72,130,4,0,64,63,130,72,36,130,72,255,224,64,10,1,16,96,192,0,4,3,248,36,143,254,10,3,88,223,97,16,21,1,252,0,67,204,25,14,16,39,194,84,245,66,84,47,231,16,170,130,40,36,66,130,32,2,124,32,143,144,34,7,126,106,170,74,41,34,34,36,162,4,32,2,124,32,143,144,34,2,126,50,174,74,41,34,34,164,164,4,20,65,40,32,2,254,97,10,124,33,2,16,47,226,16,33,2,16,2,3,254,32,10,240,98,2,64,111,202,84,41,69,36,69,72,8,17,0,160,127,192,64,4,3,248,4,0,64,255,224,64,4,0,64,136,132,80,31,200,32,82,1,248,34,12,32,95,196,32,66,0,32,120,4,188,74,69,36,98,69,60,74,68,164,106,69,60,64,4,0,32,3,252,64,11,248,20,131,232,8,131,232,8,167,250,8,96,130,18,1,94,41,34,146,105,42,146,41,34,218,41,66,16,33,2,16,2,3,254,32,10,68,98,130,254,97,10,124,33,4,254,65,8,16,16,128,144,127,192,64,127,192,128,255,225,8,41,68,146,17,2,16,36,66,40,47,239,16,33,7,124,105,10,16,175,226,16,33,2,16,133,5,252,2,8,248,66,1,252,36,12,224,67,69,168,74,65,96,137,5,208,21,237,228,85,69,212,73,71,200,84,133,84,109,43,254,119,229,40,95,231,170,90,165,254,113,5,126,82,69,40,81,139,100,32,194,112,33,15,16,81,5,254,81,5,40,34,133,68,72,73,2,0,207,112,33,2,74,34,71,64,39,194,144,55,238,16,69,64,124,32,194,112,34,15,84,34,130,64,55,206,144,47,226,16,165,68,124,8,0,252,248,128,176,4,7,168,1,143,254,18,1,34,34,36,30,1,233,224,73,64,72,7,206,144,47,226,16,41,34,254,96,9,254,4,15,254,145,34,8,16,1,248,36,0,64,127,192,64,36,131,248,129,197,224,2,0,148,196,132,128,79,229,16,79,230,16,73,32,254,34,130,40,42,175,108,82,133,44,86,165,168,34,165,42,132,96,128,2,0,16,239,234,0,164,138,132,180,170,72,229,10,32,5,1,140,3,199,192,8,2,72,17,0,128,115,196,4,123,196,4,127,196,4,17,15,254,17,2,32,75,199,68,16,66,36,121,64,4,25,70,8,127,192,160,63,130,168,63,128,128,255,225,16,10,0,64,27,6,8,38,234,170,118,98,170,33,15,190,86,133,190,82,133,190,146,128,62,32,3,240,42,239,234,42,167,236,106,170,186,190,162,44,34,130,40,1,0,254,225,10,254,168,42,124,160,10,124,228,74,124,2,128,254,0,15,222,73,36,148,121,132,148,121,36,146,77,175,148,9,0,144,17,2,8,81,64,224,49,140,6,63,128,136,8,128,168,9,0,128,0,15,190,168,79,152,168,79,190,32,175,136,32,131,136,226,128,16,2,8,32,68,1,72,47,194,4,192,4,248,72,132,136,79,128,136,4,0,64,36,2,88,38,131,200,228,130,104,37,2,68,32,65,252,0,7,252,4,0,128,63,130,8,36,130,72,36,128,160,17,2,8,33,2,254,32,15,80,37,226,146,58,174,164,45,66,136,169,68,162,18,1,32,18,9,36,82,131,48,18,1,32,18,15,254,0,0,0,1,7,16,81,5,16,95,229,16,81,5,16,113,0,16,1,0,16,4,0,64,127,196,68,127,196,68,127,192,72,3,32,98,57,172,6,113,5,254,82,135,78,93,37,90,118,69,84,84,133,84,86,75,66,4,15,254,18,1,32,35,194,68,101,74,200,50,130,16,34,130,198,129,5,254,5,8,156,90,66,180,44,204,168,73,4,168,76,64,130,0,0,0,0,0,0,0,0,0,255,224,0,0,0,0,0,0,0,4,7,252,4,7,254,64,43,248,0,3,248,32,131,248,17,7,252,0,7,252,68,4,64,79,133,32,66,5,252,66,4,80,72,135,254,39,194,68,39,207,0,47,226,68,55,206,68,39,194,70,175,196,4,65,4,8,112,8,126,113,2,18,250,194,104,42,66,36,51,34,32,18,1,16,47,194,32,101,10,82,45,67,72,36,130,68,38,34,64,16,1,124,34,66,36,111,234,36,34,66,252,34,2,64,36,2,128,8,0,64,255,224,128,20,131,80,82,9,32,17,1,72,24,97,0,0,15,190,144,137,62,186,42,170,170,171,170,146,169,8,253,64,34,4,7,252,4,3,248,4,131,248,36,3,252,4,64,172,17,6,12,130,4,248,10,131,254,192,4,248,72,132,168,74,132,80,72,139,254,26,14,60,36,66,40,251,66,72,113,230,162,165,66,8,35,2,192,18,1,16,33,34,130,100,74,68,34,130,40,33,2,40,36,66,130,113,5,126,81,7,124,81,71,124,85,5,126,81,37,22,82,139,70,83,230,4,73,131,132,67,231,202,144,129,46,254,129,40,45,228,128,64,194,112,4,9,64,84,2,126,36,140,72,68,132,136,72,129,8,8,0,64,127,228,2,159,65,16,31,1,16,31,1,16,255,224,0,33,2,254,33,15,124,81,69,124,149,6,126,33,37,22,66,136,68,31,1,16,255,229,72,57,79,200,57,229,92,18,175,254,16,130,8,33,2,16,47,239,40,36,71,126,104,74,116,165,66,116,32,66,12,33,2,8,32,143,162,170,42,162,249,66,20,40,131,148,202,64,66,17,1,16,47,226,40,100,74,254,32,66,116,37,66,116,32,66,12,0,7,248,0,130,8,32,131,248,32,2,0,32,66,4,31,192,0,0,7,240,2,0,64,8,1,0,16,2,0,32,66,4,31,192,0,4,0,128,17,3,248,16,129,240,36,0,64,127,192,160,17,6,12,0,132,8,72,132,72,68,132,8,72,133,16,97,4,40,12,67,2,18,15,252,18,0,0,63,0,32,12,1,0,32,66,4,31,192,0,34,2,94,41,47,146,41,34,146,57,46,178,45,162,148,161,4,16,63,130,8,63,130,8,63,129,0,63,196,164,146,66,68,73,65,8,63,130,8,63,128,0,127,196,68,127,196,0,64,36,2,63,224,0,33,2,16,35,234,160,172,10,190,168,75,136,233,0,162,2,32,30,16,1,0,39,194,4,96,138,16,34,2,64,40,34,130,39,226,0,32,4,120,132,129,72,40,102,0,175,194,68,34,130,16,34,130,196,1,7,124,82,133,254,116,69,124,84,71,124,82,5,20,150,163,184,132,4,120,9,1,252,234,66,252,34,130,84,37,34,142,80,8,254,161,12,124,145,71,126,65,71,124,161,2,124,249,2,126,81,8,144,2,3,254,32,10,120,100,130,142,112,10,124,36,68,40,65,8,238,8,0,64,255,224,144,9,2,148,73,40,146,17,1,16,37,4,32,4,15,254,18,67,40,217,129,6,127,197,20,110,196,164,78,68,12,4,7,252,17,15,254,32,131,248,32,131,248,8,4,68,81,41,240,33,207,148,81,66,38,252,2,28,213,66,148,221,66,168,201,67,34,32,2,124,32,75,8,169,10,32,162,2,64,36,34,66,35,226,0,8,0,68,68,66,8,32,129,16,10,0,64,11,3,8,192,96,0,32,129,16,127,193,16,32,132,4,63,130,168,42,130,168,255,224,0,136,132,80,31,200,0,72,131,4,64,13,252,85,69,84,63,224,0,4,68,88,38,0,68,227,194,0,39,194,68,47,195,68,39,192,68,4,4,32,34,64,132,228,66,72,34,130,16,42,131,40,36,65,130,2,4,16,47,224,130,224,2,124,36,66,124,44,67,124,36,64,254,0,4,248,36,128,48,197,4,140,66,4,248,98,5,252,2,0,32,63,130,8,63,130,0,32,65,252,17,1,16,255,225,16,33,4,16,123,132,200,42,132,200,63,130,72,63,129,16,127,193,16,255,226,8,123,192,132,74,66,148,74,64,64,127,192,0,17,0,160,255,224,0,71,196,68,146,142,16,34,132,214,241,0,124,49,12,254,1,0,16,17,15,254,17,7,252,64,68,68,95,68,68,74,69,20,64,71,252,17,15,254,17,7,188,74,68,188,82,68,188,106,69,36,69,68,136,0,7,252,68,68,68,127,196,68,74,69,20,96,196,4,127,196,4,24,6,60,122,68,164,124,100,128,123,196,36,122,132,144,170,129,68,4,7,252,17,0,160,255,224,0,63,130,8,63,130,8,63,130,8,123,196,164,74,69,60,82,68,164,75,198,164,82,68,68,69,68,136,32,2,126,37,47,82,87,229,82,85,34,106,84,100,194,135,224,66,2,0,32,229,10,136,178,106,16,160,10,248,224,138,16,2,0,64,64,4,124,116,72,124,116,66,124,117,2,82,44,195,72,38,64,66,64,226,240,2,40,148,68,1,12,23,2,16,239,226,16,33,2,124,4,7,252,64,75,248,4,3,248,36,131,248,36,131,248,17,2,8,34,2,32,67,231,194,137,66,16,33,2,16,42,131,40,36,64,130,63,128,72,4,143,254,4,128,72,63,128,128,8,1,0,32,4,0,0,135,200,4,128,72,124,132,8,64,135,200,4,128,72,40,129,8,4,14,120,169,10,124,192,74,124,160,74,252,226,8,20,148,170,120,8,7,60,66,68,36,122,68,36,82,70,52,66,128,32,2,0,32,17,15,254,17,0,64,63,130,72,36,143,254,10,1,16,32,204,2,32,2,238,42,175,170,42,167,68,106,170,32,175,226,40,33,2,238,251,232,162,170,170,170,81,72,162,8,15,254,16,128,144,6,7,156,2,7,254,73,5,252,105,4,252,68,4,248,74,132,252,64,73,236,8,0,64,127,228,0,68,69,36,74,132,136,65,4,32,127,232,0,32,4,238,74,170,170,196,68,170,130,14,254,4,67,40,195,128,198,17,15,254,17,7,254,64,43,248,4,3,248,5,0,72,255,224,0,17,15,254,17,7,252,64,64,64,63,130,72,63,128,68,7,199,196,17,15,254,17,7,252,64,65,240,17,1,240,0,3,248,32,131,248,17,15,254,17,7,254,64,40,64,36,66,72,68,0,160,49,140,6,33,194,20,33,207,136,171,234,170,251,226,42,43,227,136,232,160,6,2,4,222,41,32,146,233,34,146,45,162,148,33,5,16,143,224,0,4,15,254,32,3,252,0,14,252,169,78,156,173,78,68,170,102,16,0,15,248,32,131,208,85,196,132,149,64,8,63,130,168,42,143,254,124,68,68,124,132,80,124,65,4,254,132,80,124,33,2,84,75,40,80,6,62,72,131,144,19,230,34,34,175,170,34,167,8,169,66,34,0,15,126,33,2,124,69,71,124,213,69,124,89,7,80,67,0,206,2,14,32,175,138,168,234,138,168,191,234,32,229,10,80,8,131,6,4,128,72,233,234,162,188,42,82,168,170,234,224,42,98,24,160,4,32,2,124,37,79,212,39,194,84,53,78,124,37,66,84,169,69,12,16,2,254,41,38,146,175,226,146,41,34,254,41,34,146,48,162,4,113,5,254,85,135,84,91,229,212,117,229,180,93,229,84,89,235,16,2,0,16,63,234,0,111,226,146,111,234,146,47,228,146,73,41,6,4,7,254,66,5,252,66,71,254,66,69,252,82,69,252,82,73,12,4,15,254,34,132,36,151,238,72,47,228,72,247,224,72,55,236,64,119,197,8,83,7,8,39,195,212,167,202,84,191,206,84,4,64,76,35,226,20,32,143,190,170,170,190,250,162,62,42,163,162,234,160,36,2,0,16,224,10,112,161,139,218,165,202,152,233,73,20,37,32,32,33,1,8,135,4,16,1,162,252,67,140,84,73,69,18,69,0,32,79,194,8,3,8,8,79,225,146,47,236,146,79,228,146,73,32,134,4,0,32,0,3,192,4,0,100,118,129,80,36,132,68,148,32,128,63,0,160,4,3,248,36,131,248,36,131,248,36,128,132,85,41,242,63,0,160,63,130,72,63,130,72,63,130,72,8,15,248,16,134,24,31,193,36,18,65,252,18,65,36,31,193,36,18,66,36,33,68,8,4,0,64,148,169,74,173,107,90,148,170,82,189,232,66,255,224,0,18,1,40,34,66,32,111,202,32,37,2,80,41,34,146,48,226,0,18,1,32,39,230,164,170,130,144,42,130,70,4,5,36,80,168,248,34,3,40,42,74,32,175,202,32,165,2,80,41,34,146,48,226,0,8,0,144,8,128,128,255,224,160,10,1,32,18,34,34,66,40,30,4,0,64,4,7,252,68,68,68,127,196,68,68,71,252,64,64,0,16,1,30,17,39,212,85,133,84,125,37,82,85,167,212,69,0,16,32,130,8,120,132,62,242,162,42,251,226,42,42,163,42,35,224,0,146,5,40,34,69,32,159,225,40,50,133,40,146,161,74,84,162,134,65,2,16,1,8,254,89,34,146,47,236,146,73,36,254,72,32,0,136,132,72,30,232,144,72,225,226,42,76,164,74,229,36,90,66,76,0,15,254,10,7,252,74,68,164,115,196,4,127,196,4,127,196,4,8,0,128,255,225,0,63,133,8,159,129,8,31,129,8,18,129,16,8,0,128,255,193,0,16,1,248,40,130,136,69,4,32,141,131,6,4,0,64,255,224,128,16,3,248,80,137,8,16,129,248,16,128,0,17,1,16,47,226,32,98,10,64,43,195,36,34,66,36,35,194,36,24,142,8,168,135,62,34,175,170,51,230,170,162,162,42,35,226,0,129,132,224,2,1,254,199,4,168,82,100,248,85,6,92,72,65,24,0,3,248,16,129,8,17,0,144,10,0,64,10,3,24,192,96,0,34,2,32,66,5,124,146,78,36,34,68,36,148,79,68,9,65,8,135,196,16,65,0,254,225,2,16,33,2,80,34,5,0,143,224,0,144,132,136,61,73,18,82,1,200,52,77,64,85,5,72,84,66,192,0,3,248,4,0,64,4,15,254,4,0,64,4,0,64,20,0,128,31,0,64,4,7,252,4,1,64,8,3,248,42,130,168,255,224,0,33,2,40,36,79,186,32,6,226,122,170,234,170,162,226,42,162,164,7,128,64,127,228,82,94,68,124,72,132,248,66,5,252,69,9,140,63,130,72,63,130,72,127,196,84,95,68,12,4,5,36,80,168,248,20,198,228,68,70,140,78,70,76,78,68,68,255,224,0,17,2,8,4,0,160,17,2,8,223,96,64,127,192,64,36,132,68,148,64,128,4,0,160,17,134,246,128,3,212,37,67,212,37,67,196,37,66,200,66,2,80,8,131,246,192,69,212,85,69,212,84,69,212,84,139,254,16,1,240,33,4,32,191,130,72,63,130,72,63,128,0,127,192,0,33,2,40,52,74,186,160,10,226,170,162,234,42,162,234,42,34,166,65,2,40,4,72,186,64,1,234,42,172,234,74,164,226,74,160,164,136,4,248,16,138,16,95,193,36,63,205,36,95,196,0,127,228,0,119,197,84,87,198,84,87,197,16,95,230,146,73,36,186,72,164,132,63,128,16,26,0,64,2,15,254,4,32,68,4,0,64,20,0,128,39,194,68,36,79,124,80,5,124,81,5,16,47,229,40,68,72,130,0,15,254,4,7,252,68,70,100,85,70,100,85,68,68,69,68,72,16,1,0,31,194,0,32,3,252,0,64,4,127,64,4,2,128,16,33,2,16,33,234,144,170,10,190,168,42,186,184,44,130,9,64,8,3,135,192,4,3,248,36,131,248,4,7,252,69,69,244,65,68,8,4,0,32,127,228,2,191,128,64,4,7,252,4,0,64,20,0,128,128,5,252,2,0,248,196,133,254,64,4,120,84,134,72,71,128,72,0,15,188,8,68,164,41,64,132,41,68,164,140,64,132,41,65,8,0,7,252,4,0,64,4,3,248,4,0,80,4,128,64,255,224,0,65,68,16,95,238,16,93,37,82,93,68,8,102,173,154,2,96,66,17,15,254,17,0,0,63,128,64,255,224,64,4,0,64,20,0,128,16,1,30,253,34,20,125,138,84,61,34,82,61,162,84,37,2,208,0,0,124,113,5,16,95,229,16,81,5,16,113,4,16,5,0,32,15,136,168,79,128,168,207,132,32,95,197,36,87,69,12,64,11,254,1,0,40,228,74,186,160,10,234,170,170,234,234,170,226,10,160,164,34,130,68,40,42,16,170,138,196,168,42,188,186,76,164,3,192,36,40,4,142,142,161,74,36,165,250,196,165,106,84,229,120,124,132,8,4,1,176,224,225,240,0,131,168,42,131,168,41,128,68,82,169,248,41,4,80,133,225,34,40,68,80,129,7,144,74,132,168,122,68,66,32,138,136,68,170,8,59,226,136,104,138,168,45,66,148,162,68,66,4,15,254,16,131,252,0,67,248,32,131,248,32,131,248,32,130,24,40,129,80,255,226,8,68,75,250,0,3,248,0,3,248,32,131,248,133,4,136,18,72,80,72,131,6,64,12,248,72,132,136,79,128,0,4,7,252,64,67,248,36,131,248,36,131,248,4,7,252,69,69,244,66,130,68,240,1,16,42,135,68,168,34,124,36,66,68,39,194,68,247,225,16,98,1,124,252,66,212,37,66,84,37,66,40,164,68,130,2,15,60,20,134,252,21,79,124,35,2,218,34,194,218,162,164,216,0,15,0,23,197,36,82,69,36,122,64,148,40,140,148,42,65,66,35,131,168,75,139,36,41,205,240,21,1,0,31,192,4,126,64,12,72,34,146,13,104,186,73,34,254,73,44,186,77,101,18,81,34,2,127,197,4,144,3,240,66,11,248,36,131,248,10,1,42,34,44,30,0,3,248,0,0,0,255,225,32,18,1,32,34,34,34,65,232,0,32,2,254,32,2,124,244,66,124,36,66,124,52,78,0,79,224,0,4,3,248,4,15,254,0,3,248,32,131,248,10,67,24,212,129,132,63,226,32,39,194,68,39,194,68,39,194,16,69,68,146,149,32,32,33,194,226,37,79,254,34,2,254,50,14,60,37,66,72,169,68,34,33,2,124,241,4,254,160,15,124,36,67,124,226,162,108,42,66,50,127,228,2,95,36,2,127], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+81937);
/* memory initializer */ allocate([164,162,74,165,42,97,164,2,127,228,2,63,130,8,63,128,0,63,130,8,36,130,72,36,128,160,17,6,8,127,196,4,95,69,20,95,68,4,95,69,84,85,68,164,81,71,252,17,9,124,81,2,254,80,9,124,52,69,124,146,161,100,91,66,34,159,229,16,23,201,68,87,195,68,87,205,16,85,69,146,85,2,32,34,4,60,68,73,120,225,4,254,134,14,180,5,131,52,205,32,48,64,2,252,32,0,0,31,206,80,37,2,84,37,66,140,80,8,254,17,15,254,17,2,0,59,196,164,74,74,180,18,129,34,34,36,30,127,228,64,95,197,4,95,197,4,95,196,168,82,72,96,40,164,250,32,2,60,122,68,164,170,193,32,34,36,158,4,5,68,145,32,242,1,15,8,151,233,66,163,201,0,151,237,40,162,136,42,132,168,134,0,7,252,64,68,4,64,71,244,64,68,4,64,68,4,127,192,0,34,2,32,71,201,68,232,66,36,65,79,4,0,67,20,192,128,0,32,162,8,119,226,72,252,162,76,38,171,150,162,46,0,159,224,0,112,229,112,81,7,16,33,2,254,185,10,40,186,142,68,8,65,2,32,2,60,122,72,36,123,194,36,250,66,60,42,67,36,37,64,136,3,3,192,32,3,252,34,2,32,255,224,64,68,68,68,127,192,4,8,7,252,68,69,84,127,196,228,85,79,254,8,1,252,0,64,24,0,1,248,16,129,8,31,129,8,16,129,248,16,130,8,34,132,16,36,66,40,32,11,124,172,74,68,167,194,40,34,130,74,36,162,134,79,226,2,17,36,162,95,37,18,95,36,162,74,165,42,97,164,6,32,2,28,248,2,0,115,226,8,248,130,16,113,74,162,35,226,2,0,3,248,0,0,0,255,224,64,8,0,128,17,2,8,127,194,4,125,228,82,125,32,20,125,132,84,85,37,82,85,162,148,37,4,16,16,1,0,31,194,4,40,68,68,0,64,100,56,65,4,1,64,8,119,197,68,87,198,0,87,197,68,85,70,84,69,68,40,68,68,130,8,0,128,17,2,8,127,193,36,18,1,32,34,34,34,65,232,0,0,4,124,32,0,0,15,238,16,34,2,68,47,226,2,80,8,254,18,15,252,18,4,248,152,142,248,72,136,248,224,1,252,213,67,254,0,15,158,32,15,128,171,234,136,216,136,144,249,8,164,139,239,130,63,130,8,63,130,8,255,232,130,63,129,64,63,128,64,255,224,64,17,7,208,1,228,82,42,47,202,0,103,202,69,39,194,68,167,196,127,1,16,19,194,4,95,72,44,4,15,254,4,0,64,20,0,128,0,7,254,66,4,32,95,197,36,82,69,36,82,196,32,66,7,254,0,15,126,36,130,72,71,231,106,214,165,106,86,231,72,84,128,126,16,7,240,17,2,20,64,192,64,127,192,64,36,132,68,20,0,128,18,1,40,126,65,32,255,225,32,126,65,40,57,37,90,146,97,66,18,1,40,126,65,32,18,15,254,2,7,164,73,132,146,122,160,70,8,0,64,127,228,2,132,2,68,36,132,80,4,0,160,49,140,6,4,0,32,127,228,66,191,129,16,10,7,252,4,3,248,4,0,64,18,135,228,18,15,254,34,15,164,81,71,212,16,129,202,241,97,34,0,7,252,4,3,248,36,131,248,36,143,254,32,130,8,34,130,16,8,0,128,255,193,0,34,2,32,111,138,32,34,3,252,32,2,0,1,0,32,119,197,68,84,69,124,84,69,68,87,199,68,84,64,124,74,133,252,72,143,222,73,69,102,111,140,136,74,132,168,69,13,140,32,79,184,66,15,188,34,143,168,36,135,240,65,7,240,65,7,240,82,135,190,148,135,190,16,131,154,82,227,248,36,130,72,10,7,24,1,15,136,139,234,160,170,138,168,171,234,168,164,133,72,75,233,0,113,5,8,87,231,64,84,133,72,119,229,72,84,133,72,91,235,0,17,15,254,17,7,252,34,135,176,202,35,30,209,7,252,17,2,16,5,11,254,69,1,252,21,77,252,72,132,248,72,132,248,96,9,254,34,138,254,114,130,254,250,162,254,122,170,254,36,66,124,36,66,124,10,4,164,42,143,254,17,4,164,95,68,68,95,68,68,68,71,252,17,15,254,17,8,248,72,129,220,149,69,220,2,5,252,138,129,36,4,7,252,4,7,252,78,65,80,96,192,192,3,3,8,14,0,16,0,3,248,32,131,248,32,131,248,4,15,254,4,0,64,4,0,64,143,132,136,15,136,0,93,195,84,93,204,32,95,196,112,74,129,36,127,194,72,17,0,224,49,140,70,63,130,72,63,128,68,255,224,2,115,133,40,83,135,0,46,226,170,174,235,16,175,235,56,229,64,146,7,192,68,231,202,0,174,234,170,174,234,16,239,234,56,5,64,146,65,2,80,7,192,144,225,2,254,32,2,124,36,66,124,80,8,254,8,1,0,127,132,8,127,132,8,127,128,128,15,207,128,8,32,126,33,2,16,41,11,16,167,202,16,161,2,16,33,5,16,79,232,0,39,194,68,39,203,0,174,234,170,174,226,16,47,229,56,69,72,146,4,7,252,4,3,248,4,15,254,0,3,248,36,130,72,27,6,12,32,2,252,36,79,168,33,2,110,57,14,124,33,2,254,161,4,16,0,71,196,69,69,84,85,69,84,85,69,84,40,66,68,69,72,8,159,196,136,5,8,32,77,129,38,47,140,32,95,196,32,66,0,32,0,175,136,143,234,136,170,138,250,170,170,172,34,133,74,73,104,34,32,3,252,72,8,248,8,0,248,8,0,64,2,5,4,81,40,240,36,66,40,47,226,214,251,162,254,32,2,124,52,78,124,68,64,124,36,66,40,47,235,214,171,170,254,160,2,124,36,66,124,36,66,124,32,129,16,127,197,84,78,71,252,0,3,248,32,131,248,32,131,248,4,79,168,143,232,214,171,170,254,168,10,124,36,69,124,76,72,124,17,1,16,17,7,208,17,1,16,25,7,16,17,33,18,80,226,0,2,1,252,231,10,168,178,106,248,168,138,248,232,138,248,0,1,252,130,5,252,7,8,168,82,96,248,40,140,248,72,132,248,64,1,252,17,1,16,17,15,208,17,3,144,53,5,18,145,33,18,16,225,0,17,1,16,253,2,16,33,5,16,125,1,18,29,47,18,16,225,0,64,36,226,106,168,170,234,164,170,234,164,170,68,166,66,74,161,4,64,2,252,0,69,244,85,69,244,85,69,244,68,68,68,69,68,8,0,206,240,162,10,16,239,202,8,161,14,32,164,10,160,225,224,0,64,5,220,85,79,84,85,71,254,213,69,84,85,69,84,102,68,204,33,2,254,42,175,68,34,6,62,117,10,158,161,2,30,33,2,16,2,0,32,119,229,80,89,5,30,81,5,16,113,229,16,1,0,16,16,1,0,63,196,128,136,0,248,8,0,128,15,192,128,8,0,128,34,2,160,179,234,80,169,10,30,33,2,16,81,228,144,129,0,16,4,4,64,39,224,160,226,2,60,34,2,32,43,227,32,34,0,32,33,2,254,36,79,40,47,226,146,59,174,146,43,162,170,171,164,134,4,15,254,17,0,224,49,141,246,4,7,252,74,68,164,73,68,8,8,0,64,127,196,4,135,3,128,8,0,240,120,0,132,8,64,124,4,7,254,81,42,136,16,3,252,72,0,248,8,0,252,8,0,128,17,1,124,33,2,124,97,10,254,32,2,124,37,66,84,34,130,196,4,15,254,145,39,252,17,15,254,32,132,68,191,160,64,36,132,196,7,142,136,191,234,164,237,42,188,232,10,188,168,14,188,18,66,60,25,14,16,33,195,144,225,2,60,58,78,36,35,194,2,31,224,0,31,2,16,127,234,72,42,67,250,32,2,248,32,4,248,72,136,248,17,5,80,57,225,16,253,1,60,58,69,100,146,65,36,19,193,0,66,2,32,131,229,32,18,2,252,40,76,132,72,68,252,72,64,0,10,0,248,120,0,240,116,192,48,61,32,14,63,130,168,42,143,254,16,97,56,250,2,32,82,7,190,18,65,164,114,65,36,20,65,132,32,2,126,244,36,126,165,79,126,37,67,126,234,130,170,50,66,50,4,4,68,127,193,0,252,66,56,82,7,190,18,135,168,20,129,136,63,194,4,63,194,80,63,194,80,63,226,160,73,68,136,140,96,128,17,15,254,17,79,160,39,207,168,171,205,168,139,207,128,138,175,170,33,2,20,33,15,28,39,7,16,105,234,116,160,130,26,34,98,66,4,0,64,4,0,124,4,0,64,63,130,8,32,130,8,63,130,8,33,66,18,61,2,30,39,15,148,137,72,152,137,47,170,132,96,130,65,2,16,1,15,158,1,5,16,87,197,68,36,67,68,199,192,68,4,132,252,36,136,120,84,129,120,36,141,254,74,132,196,72,0,254,33,2,8,71,233,66,240,2,126,65,15,16,5,227,80,203,1,30,33,2,124,34,143,254,36,71,124,108,74,124,161,2,254,33,2,16,4,7,252,17,15,254,32,131,248,32,131,248,4,15,254,4,0,64,16,39,196,40,143,226,68,71,200,69,7,194,16,79,200,17,1,32,130,5,252,5,11,254,72,128,248,40,140,248,66,5,252,66,0,32,244,65,68,20,143,80,134,8,252,245,1,80,20,130,84,230,32,0,36,129,80,127,197,20,159,0,8,63,0,64,255,224,64,20,0,128,129,5,210,5,72,88,93,3,62,81,141,212,69,68,84,85,160,144,32,130,8,32,143,126,32,135,72,106,138,40,33,2,40,36,66,130,2,0,32,2,7,254,2,2,32,18,0,160,4,0,176,16,230,0,34,2,36,34,143,176,170,10,254,170,138,168,170,75,164,35,34,32,2,15,164,138,136,176,170,10,254,170,138,168,34,69,36,75,40,32,16,129,8,32,130,254,96,138,136,36,130,40,33,2,40,36,98,128,114,5,36,82,135,48,82,5,254,115,5,40,82,133,36,83,43,32,1,3,254,162,134,254,36,66,124,100,74,124,33,4,254,65,8,16,113,5,124,82,134,254,100,69,124,84,69,124,97,4,254,65,4,16,32,2,252,34,79,36,37,66,136,48,14,124,36,66,68,167,196,68,0,7,124,82,69,36,85,71,136,80,5,124,84,71,68,7,192,68,34,130,36,34,15,62,46,2,36,58,142,16,35,34,74,168,100,2,64,2,252,2,72,36,84,65,84,40,140,124,68,68,68,71,192,68,16,1,34,125,65,20,16,143,232,17,69,212,82,37,0,191,224,0,0,7,124,82,69,36,117,69,136,87,197,68,119,192,0,82,72,146,127,196,164,127,192,64,63,130,8,63,130,8,63,128,64,255,224,64,10,0,160,74,66,168,11,2,168,74,73,32,18,34,34,33,228,0,18,7,190,77,71,136,133,103,248,4,143,254,4,135,248,4,0,64,0,7,248,16,129,8,34,132,16,128,3,248,32,130,8,63,130,8,1,8,252,72,0,168,207,228,168,75,133,0,106,164,170,64,11,254,32,194,112,36,15,64,39,227,72,228,130,72,36,130,136,168,133,8,16,199,176,18,1,188,114,129,40,52,128,0,63,130,8,32,131,248,18,1,120,122,129,104,26,167,86,20,35,248,36,131,248,4,71,254,68,69,244,234,132,238,161,175,234,42,163,234,234,66,228,42,162,178,8,0,132,127,128,144,10,15,252,8,3,248,208,129,248,16,129,248,65,4,18,119,200,24,119,226,32,247,194,164,35,195,36,35,192,0,17,15,254,21,0,32,127,196,144,127,196,144,79,4,0,85,74,82,132,4,32,95,192,8,232,130,80,34,2,80,40,130,0,95,232,0,136,100,152,9,11,208,73,226,148,77,77,148,105,68,148,73,65,164,1,15,16,34,130,68,41,167,96,32,130,16,54,78,8,67,0,192,40,135,200,42,131,152,40,131,168,41,143,206,83,134,136,64,135,200,4,7,252,4,3,248,32,131,248,32,131,248,32,143,254,17,2,8,3,239,200,40,143,236,171,79,244,17,207,244,17,65,212,241,196,22,1,15,144,33,2,30,65,7,16,215,197,68,84,71,68,87,192,68,1,14,254,65,8,124,162,14,254,68,78,186,65,6,254,197,64,146,4,0,64,7,192,64,63,130,8,36,130,72,36,128,160,17,6,8,33,2,16,121,8,16,119,226,16,249,2,16,33,3,16,33,0,16,17,1,16,33,226,16,103,202,68,37,66,84,37,66,40,36,66,130,33,2,16,33,15,126,37,39,16,106,138,40,162,162,74,40,98,0,2,3,254,34,10,80,104,131,54,108,10,48,44,68,24,70,9,128,1,4,40,34,128,68,233,34,32,36,66,24,38,35,12,35,0,192,63,128,64,127,232,66,53,128,0,63,194,0,63,194,168,73,8,204,32,2,254,40,15,188,40,2,254,58,142,170,42,66,164,171,37,32,65,4,254,113,8,124,116,66,124,244,66,124,36,66,254,50,130,68,1,7,16,87,197,32,99,5,80,87,197,16,111,228,16,65,4,16,17,15,254,17,3,224,2,7,84,20,130,68,95,32,0,82,72,146,34,2,60,36,79,136,39,194,20,55,238,20,39,194,16,165,4,32,4,7,120,84,133,144,119,197,20,127,229,20,87,199,16,5,0,32,32,2,254,65,9,16,33,6,92,165,2,80,37,2,80,47,226,0,18,9,60,84,66,8,87,201,20,63,229,20,151,193,16,85,2,32,16,1,240,34,4,64,63,128,72,255,224,72,63,128,64,20,0,128,32,2,254,33,11,16,169,10,30,165,2,80,37,2,80,63,226,0,16,143,254,85,71,212,56,133,84,144,39,252,4,2,120,36,15,254,32,2,124,32,143,16,45,162,92,53,78,148,37,34,32,175,228,0,0,7,252,4,0,64,36,2,124,36,2,64,36,2,64,255,192,0,1,7,208,17,225,36,85,69,212,81,69,8,93,78,20,2,64,66,32,130,8,248,234,136,171,234,162,170,170,170,186,162,8,33,66,34,2,0,16,63,234,0,111,226,16,97,10,92,37,4,80,95,232,0,68,2,158,1,39,210,17,65,20,125,33,18,41,162,84,69,8,16,0,4,254,33,0,16,229,2,92,37,2,208,53,2,80,31,224,0,17,15,254,17,0,64,2,7,248,1,0,96,24,2,0,95,224,0,33,2,16,47,239,16,39,199,36,106,74,40,161,2,40,36,66,130,4,0,64,255,224,64,4,7,248,32,129,16,10,0,64,27,14,14,1,0,16,239,234,16,161,10,252,164,74,68,226,138,16,6,129,134,36,2,64,39,15,174,170,170,170,175,175,170,34,227,80,228,128,132,32,2,0,61,197,20,145,65,20,253,65,20,41,66,84,69,200,0,1,7,16,87,229,16,113,5,124,82,71,36,82,133,16,82,139,70,4,7,72,87,5,66,115,229,0,119,197,68,87,197,68,87,203,68,65,2,16,129,4,16,15,226,16,65,12,16,65,4,16,65,0,16,8,0,64,0,7,248,1,0,32,4,0,128,16,2,128,71,224,0,32,2,0,71,197,68,228,66,68,68,79,124,0,3,40,196,64,130,0,15,188,82,71,36,82,71,36,82,69,188,240,1,36,20,33,0,4,7,252,4,3,248,32,131,248,32,131,248,32,131,248,32,143,254,33,2,124,33,15,124,36,71,124,108,74,124,164,66,124,36,66,254,1,15,124,33,2,124,116,69,124,84,75,124,36,66,124,68,72,254,34,2,32,34,15,120,34,130,40,54,142,40,37,162,74,168,101,2,17,1,124,33,2,124,100,74,124,36,66,124,36,66,124,36,66,254,16,1,254,34,2,68,111,234,18,33,2,124,33,2,16,47,226,0,33,2,16,33,2,16,245,194,80,37,2,80,53,12,80,31,224,0,36,2,76,39,15,68,35,194,0,55,206,68,39,194,68,167,196,68,4,0,64,4,2,64,39,194,64,36,2,64,36,2,64,255,224,0,120,132,136,72,135,168,18,225,232,82,133,40,94,142,40,15,224,0,0,3,248,32,130,8,32,130,8,63,128,0,17,2,8,64,64,0,33,130,96,56,66,4,31,192,0,63,194,4,63,194,4,63,194,4,32,196,112,85,9,80,229,2,124,69,15,80,4,163,74,198,96,66,4,0,64,255,224,64,4,7,252,8,0,64,84,69,18,81,40,240,34,15,120,34,131,106,227,98,66,99,131,192,4,7,252,4,0,192,74,4,78,64,174,234,68,196,74,127,172,74,74,196,168,80,140,8,0,7,252,8,1,16,63,128,72,4,3,248,4,0,64,255,224,0,1,15,144,34,5,62,254,130,168,34,135,40,33,3,168,228,64,130,127,196,164,127,192,64,255,224,64,63,130,8,36,130,72,36,143,254,32,2,60,250,74,164,170,74,164,170,74,188,184,2,36,36,34,0,33,2,16,39,202,144,175,234,136,175,234,136,186,140,152,8,128,24,16,69,4,125,73,20,255,65,20,125,69,84,84,69,196,17,65,8,32,3,188,82,79,228,18,66,188,68,3,248,32,131,248,32,131,248,25,14,16,37,2,124,249,2,16,119,234,144,34,130,40,36,66,130,26,142,36,36,2,254,244,130,126,116,134,254,164,130,72,39,226,64,3,135,192,68,7,252,68,5,240,81,5,80,85,4,160,145,2,8,8,1,252,36,133,48,12,3,32,202,64,168,18,0,80,24,134,6,2,3,254,34,10,248,98,3,252,97,10,252,33,4,80,65,8,48,69,66,84,159,228,84,15,226,146,71,204,84,69,68,92,65,0,16,33,1,16,130,4,68,15,225,2,39,204,68,68,68,68,71,192,68,4,15,254,145,34,8,31,0,64,9,1,248,4,3,248,4,7,252,4,0,64,4,7,252,68,68,68,68,71,252,4,0,64,4,0,64,4,0,64,63,130,72,36,131,248,4,0,0,63,130,168,42,143,254,4,0,64,127,196,68,68,71,252,4,0,128,4,69,34,80,168,248,32,130,8,56,132,62,130,167,170,34,175,190,32,130,136,48,130,8,4,15,254,4,3,248,36,131,248,4,64,168,49,13,72,24,97,0,34,2,32,71,197,68,234,130,16,66,143,70,1,3,8,195,0,8,24,142,8,32,130,62,250,162,42,114,166,190,160,130,8,32,130,8,0,135,136,72,132,190,122,164,170,74,167,190,72,132,136,104,137,8,7,131,192,4,15,254,36,131,248,36,131,248,4,3,248,4,15,254,17,1,16,33,2,254,105,42,146,41,34,254,33,2,16,33,2,16,4,0,64,10,1,16,32,140,6,17,1,16,17,2,168,68,72,130,8,3,240,33,2,144,37,15,252,33,2,144,37,2,16,37,4,32,63,130,72,46,130,72,63,130,8,46,130,168,46,132,8,66,136,16,16,65,36,18,69,36,91,73,108,18,65,36,34,66,36,66,72,4,72,34,146,137,36,218,27,98,146,41,44,146,73,37,18,80,34,2,2,4,60,36,64,136,231,226,2,32,34,62,40,35,2,39,224,2,4,14,78,53,34,226,228,233,248,228,226,226,53,34,66,164,164,68,32,130,8,248,132,62,162,175,170,35,227,170,226,162,42,35,226,0,0,135,136,72,132,254,120,132,168,73,135,136,72,132,136,106,137,16,63,0,16,31,0,16,127,228,66,191,130,72,36,130,88,4,0,64,0,7,188,74,68,164,123,192,0,31,1,16,17,1,18,33,36,14,64,135,8,151,226,74,244,129,126,246,33,84,21,79,72,9,65,34,8,0,64,127,196,4,132,0,64,63,130,72,63,130,72,63,130,8,63,130,8,63,130,32,33,5,248,81,73,242,17,1,240,0,7,252,31,14,160,47,234,170,174,72,170,254,1,52,245,129,52,85,34,48,1,15,80,39,194,144,33,7,254,33,2,56,53,78,146,65,0,16,33,2,80,39,207,144,33,7,126,105,10,56,165,66,146,33,2,16,33,2,80,39,207,144,169,10,254,249,2,56,37,67,146,233,0,16,4,2,64,63,132,64,4,7,252,14,1,80,36,132,68,4,0,64,17,5,18,39,197,24,159,225,32,55,197,164,147,193,36,83,194,36,130,4,34,15,204,40,95,228,32,71,196,196,87,198,68,71,192,68,1,8,80,71,192,144,193,4,254,65,4,56,101,68,146,1,0,16,128,5,254,68,0,162,19,206,88,43,66,84,41,34,80,82,8,254,33,2,16,33,7,190,82,137,72,16,129,8,16,129,8,18,129,16,33,2,16,41,11,124,165,74,84,167,194,80,33,69,30,78,40,0,4,67,248,5,15,254,8,3,248,208,129,248,16,129,248,0,4,164,34,2,16,32,15,124,33,2,16,55,206,16,33,2,16,175,228,0,15,206,132,175,202,144,239,202,212,239,202,144,191,239,146,43,164,134,15,206,132,175,202,144,175,202,212,175,207,16,159,226,146,43,164,134,8,0,64,127,192,64,4,0,64,63,128,64,4,0,64,255,224,0,17,15,254,21,3,232,5,15,254,8,1,248,40,140,248,8,128,248,34,2,16,39,207,144,33,7,16,103,202,16,161,2,16,47,226,0,1,7,144,73,7,188,73,71,148,73,68,148,94,78,36,5,64,136,33,2,8,35,239,136,168,138,136,251,226,8,40,131,136,235,224,0,1,15,136,139,234,162,170,42,128,168,10,128,32,5,62,72,8,128,65,4,254,113,8,124,113,2,254,242,66,126,36,66,148,48,64,12,66,7,188,162,129,68,0,7,120,36,130,104,53,174,138,8,161,6,18,1,16,32,2,254,97,10,16,39,194,16,33,2,16,47,226,0,66,2,16,15,232,16,65,1,16,39,204,16,65,4,16,79,224,0,64,2,124,244,65,68,36,71,124,170,130,40,34,162,74,40,98,0,1,15,8,16,5,62,80,133,8,123,224,136,232,128,136,43,225,0,32,2,28,46,143,168,42,130,168,58,142,168,42,130,164,170,69,34,0,0,60,61,2,80,37,2,80,37,2,72,36,132,68,68,40,64,33,2,16,39,207,84,39,194,84,55,206,18,33,66,24,162,164,198,4,0,64,63,128,128,255,225,0,63,128,16,18,0,192,2,0,16,1,15,16,39,194,16,65,7,254,210,5,124,80,71,40,81,0,8,17,1,16,123,194,16,87,231,144,19,193,196,240,129,48,16,129,4,46,226,170,46,239,136,42,162,102,50,142,124,34,130,254,162,132,68,8,143,254,133,8,252,165,75,254,165,74,252,37,133,212,85,40,80,66,7,190,164,129,248,17,15,254,24,6,82,27,70,104,10,99,96,33,2,8,39,239,64,36,135,72,103,234,72,168,130,136,51,226,0,4,0,32,63,194,0,34,2,32,47,130,32,66,4,32,159,192,0,17,5,16,55,197,16,19,128,64,255,224,160,25,66,136,202,96,192,34,2,32,162,6,254,36,130,72,100,138,40,33,2,40,44,66,0,33,2,124,242,130,254,37,67,124,101,74,124,33,2,124,161,4,254,33,2,16,161,6,16,47,226,16,97,10,16,33,2,124,32,2,0,33,2,20,161,38,16,47,226,16,97,10,40,34,130,68,36,66,130,34,130,36,36,15,126,44,135,126,108,138,126,164,130,72,39,226,64,66,132,36,116,8,254,116,130,126,244,130,126,44,131,72,39,224,64,65,2,32,39,192,68,231,194,64,39,194,68,36,66,124,80,8,254,17,7,144,19,231,228,37,67,136,73,67,250,36,130,72,10,3,16,113,5,16,97,5,40,82,134,68,72,36,0,4,7,252,4,15,254,46,228,34,74,170,68,234,164,16,142,238,42,10,163,68,202,161,18,1,4,254,32,0,124,228,66,124,32,2,124,40,131,126,33,0,48,5,8,72,72,0,254,25,2,252,73,12,252,73,4,144,79,224,128,32,2,124,36,79,68,39,195,16,101,10,92,37,2,80,171,229,0,33,2,16,37,79,84,37,66,124,49,14,84,37,66,84,167,196,0,4,0,124,4,3,248,32,131,248,32,131,248,4,15,254,4,0,64,4,0,124,4,3,248,32,131,248,32,143,254,14,3,88,196,96,64,0,14,252,66,4,96,73,79,184,69,132,212,83,70,82,201,0,48,17,15,254,17,0,64,36,130,72,63,128,64,68,68,68,127,192,0,1,15,144,33,239,162,172,42,146,216,168,130,248,40,130,249,64,8,0,1,252,228,10,160,179,42,220,169,139,116,229,72,146,21,0,32,17,15,254,4,3,248,8,15,254,16,131,248,80,137,248,16,129,248,34,2,32,42,11,124,164,74,132,34,66,20,32,69,4,74,136,16,66,2,32,130,4,248,10,130,168,74,140,248,66,4,40,95,192,4,32,129,16,255,225,8,33,4,164,115,130,16,82,79,190,72,32,0,66,2,60,20,66,16,225,2,40,36,64,0,63,130,8,32,131,248,68,2,124,24,70,32,37,0,136,63,130,8,36,130,72,27,6,8,68,2,124,26,70,32,37,2,140,16,15,254,17,0,224,49,140,6,72,66,72,159,228,68,8,131,18,93,204,68,72,133,82,93,224,66,66,162,84,10,136,84,66,161,0,47,236,146,79,228,146,79,224,130,1,15,16,18,2,62,36,67,164,226,66,40,33,2,40,164,68,130,17,69,216,81,37,206,233,1,32,12,131,252,4,66,80,84,128,128,16,1,124,32,66,8,97,10,254,33,2,16,33,2,16,37,2,32,32,2,60,168,71,8,32,143,200,35,231,8,168,130,8,34,130,16,130,5,252,16,72,32,95,194,136,69,13,252,66,4,248,66,0,32,0,3,248,1,0,32,4,15,254,4,0,64,4,0,64,20,0,128,4,0,128,63,130,8,32,131,248,32,130,8,63,130,8,32,131,248,130,5,252,2,8,248,66,3,254,64,13,252,82,69,36,69,1,140,4,0,32,127,228,2,31,128,16,2,7,254,2,0,32,10,0,64,60,66,26,124,66,154,124,64,88,127,232,2,127,193,80,36,128,192,34,2,16,47,239,130,39,199,0,111,234,16,165,66,146,37,2,32,1,7,124,84,69,56,112,2,124,185,10,84,181,46,146,5,0,32,4,0,32,255,232,2,63,128,0,127,192,64,37,4,72,148,64,128,33,2,8,71,233,66,99,196,0,135,239,16,5,67,84,201,32,48,32,129,16,0,3,248,32,130,8,63,128,0,84,69,42,144,160,248,32,130,72,68,137,72,100,132,104,245,128,72,57,76,146,18,34,64,32,2,30,61,36,84,137,135,212,5,39,210,5,167,212,5,0,16,4,0,64,63,128,64,255,224,64,36,2,120,36,3,64,79,232,0,4,3,248,4,3,248,8,15,254,32,133,244,132,35,248,10,3,16,33,2,124,33,15,124,34,2,254,52,78,186,33,2,124,162,132,68,24,14,60,34,66,36,251,194,36,114,74,188,34,66,36,39,226,0,0,3,248,32,130,8,63,128,64,36,2,124,36,5,64,143,224,0,8,0,64,127,193,16,17,2,168,4,0,64,255,224,64,4,0,64,66,2,32,251,226,80,33,227,168,44,130,190,40,132,148,105,73,34,64,2,60,250,65,36,35,199,36,170,66,60,34,66,36,39,226,0,0,4,120,36,128,72,231,130,72,36,130,120,44,131,72,47,192,0,112,5,120,84,133,72,103,133,72,84,133,120,100,132,72,95,228,0,32,2,124,68,69,68,231,194,68,68,79,124,4,67,68,207,224,0,64,132,8,120,136,14,112,130,8,251,226,34,42,35,34,35,224,34,66,7,190,149,3,248,32,143,254,40,133,36,140,163,248,37,4,200,4,161,108,244,171,230,167,138,144,191,234,146,239,234,146,9,33,6,248,130,62,248,10,148,169,77,170,136,143,190,136,136,136,248,128,8,63,130,8,63,130,8,255,229,0,119,133,40,114,133,144,242,129,70,127,196,164,127,192,0,10,7,188,10,3,184,10,7,188,10,0,160,17,7,252,10,3,248,42,131,56,46,131,248,1,7,252,17,0,176,8,139,254,69,1,252,21,77,140,95,196,8,95,228,136,65,139,254,2,7,32,87,229,80,89,7,30,81,5,16,81,231,16,1,0,16,4,0,64,127,224,64,8,0,252,17,1,16,33,4,16,159,224,0,18,1,32,47,226,32,100,10,124,37,2,144,41,3,16,39,226,0,34,2,32,39,239,80,41,3,30,105,10,30,33,2,16,33,2,16,41,2,144,73,5,222,202,68,148,93,69,84,84,133,212,65,68,34,20,1,64,39,194,160,114,10,60,34,2,32,35,194,32,34,2,32,4,0,64,36,130,72,36,133,84,142,32,64,63,128,64,4,15,254,2,0,16,63,226,0,34,2,168,42,131,116,34,5,252,66,11,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,240,0,0,0,127,192,64,4,0,64,4,0,64,20,0,128,0,0,0,127,224,144,9,0,144,9,0,144,17,1,16,33,4,16,0,0,0,127,224,144,9,0,144,9,0,144,17,33,18,33,36,14,0,7,252,4,0,64,39,194,64,36,3,252,0,64,4,2,128,16,17,1,16,17,1,16,255,225,16,17,1,16,17,1,240,17,0,0,32,130,72,36,130,72,36,143,254,36,130,72,36,132,72,64,136,8,0,7,252,2,0,64,13,3,72,196,64,64,4,0,0,255,224,0,0,7,252,0,0,0,63,130,8,63,130,8,63,128,0,0,15,254,0,3,240,2,0,72,117,1,96,37,4,72,148,96,128,255,224,0,127,192,0,63,130,8,63,128,0,127,197,20,74,69,244,68,68,76,127,192,96,29,6,72,4,2,60,248,68,136,75,227,8,42,140,80,127,192,64,117,197,84,117,192,64,255,224,64,117,197,84,85,79,254,4,0,64,4,0,64,4,0,64,4,0,64,4,0,64,4,0,64,63,130,72,63,130,72,63,128,64,127,196,68,69,69,244,65,68,8,4,0,64,4,0,64,4,0,64,8,0,128,8,1,0,16,2,0,0,2,0,33,2,32,36,2,128,48,2,0,32,66,4,31,192,0,0,192,112,124,0,64,4,0,126,252,0,64,4,32,66,3,224,0,0,0,56,60,0,64,4,0,64,127,192,64,10,1,16,32,140,6,0,67,8,13,0,32,13,131,4,0,1,8,9,0,96,25,134,6,1,195,224,32,3,254,32,2,248,40,130,168,41,164,130,71,232,0,3,135,192,68,4,64,127,196,64,68,4,32,82,70,148,68,192,4,8,1,0,127,196,4,81,68,164,68,68,164,81,68,4,127,196,4,72,133,40,92,132,168,95,132,8,94,133,40,94,165,42,94,169,38,34,130,124,33,15,188,42,66,188,42,66,188,42,68,188,72,40,126,66,7,16,143,231,16,82,71,126,80,47,212,117,69,84,117,97,134,16,7,252,74,71,252,4,15,254,17,7,252,4,15,254,4,0,64,82,131,48,82,66,28,124,129,62,120,132,188,121,68,148,48,135,182,0,0,0,0,1,0,8,0,64,4,0,0,0,0,0,0,0,0,127,0,16,2,14,92,164,74,84,164,142,84,22,32,128,255,224,0,127,130,168,46,226,162,78,168,4,42,67,188,10,7,188,42,68,164,0,1,0,16,129,56,28,131,8,208,129,40,17,33,2,15,224,0,17,1,16,17,1,208,17,1,16,125,4,80,69,4,82,125,36,78,0,3,248,0,0,0,255,225,16,17,1,16,17,2,16,33,4,16,21,1,80,117,193,80,21,7,252,4,15,254,4,0,64,4,0,64,4,3,248,4,7,252,64,67,240,2,0,64,127,192,64,20,0,128,4,7,252,36,129,80,255,224,0,63,130,8,46,130,168,46,131,248,64,4,238,74,46,238,72,4,238,232,170,234,168,174,132,168,160,146,0,3,252,32,2,32,34,2,32,34,2,80,37,4,136,72,73,2,63,226,32,34,3,252,36,2,144,47,194,16,95,228,16,129,0,16,63,226,72,36,130,252,36,131,254,32,2,252,40,68,252,72,72,252,127,228,72,68,71,254,72,133,252,106,164,248,74,132,248,66,8,32,127,230,40,84,135,238,73,38,170,106,135,232,73,69,20,82,42,64,127,229,64,126,37,92,93,5,80,93,229,84,127,68,20,149,66,36,127,228,72,68,71,254,72,133,116,98,37,252,85,69,116,85,73,252,127,228,168,82,71,126,92,133,126,84,4,254,73,36,146,70,201,130,0,3,252,32,2,0,32,2,0,32,2,0,32,2,0,63,192,0,0,7,252,64,4,0,79,4,144,73,4,144,79,4,0,64,7,252,255,233,32,146,15,160,167,141,40,250,137,42,254,169,38,148,15,254,127,196,64,95,5,80,127,196,0,95,5,16,85,4,160,81,7,252,127,228,64,95,133,8,95,133,0,95,197,84,95,197,84,96,199,254,0,143,190,144,137,62,184,138,190,168,11,190,146,169,42,253,64,34,17,1,16,125,1,16,253,129,20,17,39,210,17,1,208,241,4,16,4,0,64,7,192,64,63,194,4,62,66,36,62,66,4,63,194,4,0,64,4,1,64,20,1,64,20,1,64,20,0,64,4,1,64,8,0,72,68,69,68,148,41,66,148,17,66,148,68,72,68,1,64,8,32,34,2,64,167,234,170,162,170,74,165,42,146,162,34,74,160,68,0,79,132,9,65,20,41,68,84,129,71,212,17,65,4,29,70,8,16,79,196,41,68,84,187,64,20,253,66,20,121,64,132,41,65,8,16,41,34,146,175,234,32,163,202,68,166,74,152,32,130,16,162,4,16,69,68,85,71,212,1,71,212,5,71,212,65,68,68,89,70,8,16,65,4,254,65,20,125,69,84,125,67,148,84,73,4,17,65,8,16,71,196,17,66,148,255,64,84,117,69,84,117,64,68,21,64,136,16,69,68,89,73,20,41,76,84,17,69,84,89,73,4,41,76,72,32,33,2,254,168,42,64,167,234,90,165,234,170,162,130,74,168,196,68,47,242,68,46,234,170,174,234,170,174,234,170,170,162,170,167,100,254,34,130,254,170,170,254,160,10,124,160,10,254,37,66,146,163,4,127,165,82,73,39,250,74,166,202,105,39,242,73,37,42,82,170,70,40,68,4,126,76,148,125,68,148,125,68,148,126,68,4,171,74,168,36,79,228,36,66,148,125,74,148,61,66,148,125,66,84,24,70,76,16,67,132,41,67,148,41,71,212,85,71,212,84,79,228,41,68,136,0,7,252,64,68,4,64,68,4,64,68,4,64,68,4,65,68,8,127,196,4,81,68,164,127,196,68,127,69,4,95,68,4,65,68,8,16,1,0,32,2,0,96,10,0,32,2,0,32,2,0,32,2,0,16,1,0,47,226,16,97,10,16,33,2,16,33,2,16,37,2,32,16,1,0,39,130,72,100,138,72,36,130,72,40,162,138,48,98,0,18,1,32,34,2,252,98,74,36,34,66,68,36,66,132,41,67,8,16,1,0,47,194,0,96,10,252,32,2,0,32,3,254,32,2,0,18,1,32,39,226,64,104,10,124,32,130,16,34,2,66,36,34,62,17,1,16,34,2,36,100,74,136,33,2,32,36,66,254,32,34,0,16,1,126,33,34,18,101,42,82,37,34,146,34,34,34,36,162,132,16,1,126,36,2,66,102,74,84,36,130,84,38,34,64,39,226,0,17,1,144,41,2,146,111,74,152,41,2,144,41,34,210,40,226,0,16,1,126,32,130,40,100,138,126,33,130,40,36,130,136,34,130,16,16,1,252,36,2,120,100,138,72,42,130,152,40,162,170,44,162,134,18,1,32,39,194,80,105,10,16,63,226,16,33,2,16,33,2,16,20,1,72,37,2,96,100,10,252,38,2,80,36,130,86,38,2,64,17,1,16,34,130,68,104,42,124,36,66,68,37,66,72,36,34,62,18,1,16,47,226,0,103,138,72,36,130,72,36,162,138,40,99,0,18,1,16,32,2,254,104,42,130,32,2,0,32,2,254,32,2,0,16,1,120,32,3,254,98,10,32,47,194,72,40,130,80,34,2,216,18,1,32,35,194,32,98,10,254,34,2,48,34,130,36,34,2,32,17,1,16,42,2,190,109,74,148,41,66,148,40,130,148,34,66,66,17,1,16,37,2,124,105,10,16,47,226,16,34,130,40,36,66,130,18,1,32,39,226,66,107,170,42,34,162,42,35,162,2,32,162,4,18,1,32,39,194,68,106,138,16,34,130,198,35,2,8,35,2,8,17,1,8,39,226,66,104,10,36,34,130,48,34,34,34,33,226,0,16,1,126,36,34,126,100,10,82,37,66,88,41,34,146,48,226,0,40,2,128,72,229,234,202,164,170,74,164,170,74,165,42,106,228,64,17,1,16,33,2,254,97,10,124,32,2,124,36,66,68,39,194,0,16,1,254,36,130,72,103,138,72,39,130,72,36,226,248,32,130,8,18,1,32,47,226,64,111,203,68,39,194,68,39,194,68,37,66,72,18,1,32,63,226,72,107,75,2,47,194,32,39,194,4,33,66,8,16,1,248,40,130,136,111,138,0,42,130,168,42,162,170,50,98,0,17,1,80,39,194,144,97,10,254,33,2,56,37,66,146,33,2,16,16,129,72,36,66,132,119,170,72,39,130,72,39,130,72,36,130,88,21,1,80,37,3,84,109,138,80,45,131,84,37,2,146,41,35,14,18,1,16,47,226,72,99,10,72,56,98,72,36,130,72,40,131,8,18,1,16,47,226,0,100,138,132,52,162,72,37,2,32,37,2,140,17,1,16,47,226,146,97,10,40,34,162,108,42,67,36,35,34,32,17,1,32,36,66,254,97,42,80,39,194,144,33,2,254,33,2,16,17,1,124,33,2,124,98,10,254,36,130,126,40,130,168,48,130,24,16,1,254,34,130,170,102,202,40,47,226,128,40,2,128,40,3,0,16,1,254,32,2,238,106,170,170,46,226,170,42,162,170,42,162,170,17,1,20,33,34,254,97,10,84,35,130,52,37,66,146,37,2,32,16,1,124,37,66,124,101,74,124,33,2,124,33,2,16,47,226,0,16,1,124,36,66,124,96,10,124,33,2,254,33,2,40,36,66,130,17,1,124,37,66,124,101,74,124,32,2,254,34,2,60,32,66,24,16,1,252,36,130,48,111,234,146,47,226,146,47,226,146,41,34,134,18,1,32,36,130,252,100,74,120,42,2,32,63,194,80,40,131,4,18,1,252,34,2,248,100,11,254,40,131,36,47,162,32,63,194,32,17,1,124,33,2,124,97,10,254,36,66,124,36,66,124,36,66,76,20,129,72,47,194,72,98,11,254,36,2,252,52,66,68,39,194,68,18,129,40,46,226,40,98,138,238,34,130,40,46,226,40,34,130,40,17,1,30,33,2,124,100,74,124,36,66,124,33,2,254,33,2,16,34,2,60,84,69,168,209,5,110,89,5,20,87,229,16,66,132,68,16,1,124,37,66,124,101,74,124,33,2,254,35,130,84,41,34,16,16,193,112,33,2,254,101,74,146,34,2,254,36,130,48,36,130,132,18,1,124,37,66,124,101,74,124,34,130,72,47,226,8,32,130,8,16,1,254,41,38,186,169,34,254,40,34,186,42,162,186,40,163,4,18,1,16,47,226,130,119,202,68,39,194,64,39,194,68,39,194,64,18,1,16,47,226,130,98,138,68,40,34,124,33,2,16,47,226,0,23,225,66,39,226,72,100,138,126,36,130,72,43,226,162,50,34,62,17,1,124,33,2,40,111,234,40,39,194,68,37,66,84,34,130,68,16,1,254,42,66,188,106,74,188,41,2,254,42,66,152,42,66,254,20,129,74,38,194,72,102,170,70,33,2,124,36,66,124,36,66,124,23,193,68,39,194,68,103,202,32,39,226,146,53,34,106,39,162,6,23,193,84,39,194,84,103,202,0,63,226,82,37,66,72,38,66,66,40,2,252,85,70,212,199,68,156,82,68,76,66,5,84,84,166,56,17,1,84,35,130,254,99,138,84,41,34,32,47,226,36,33,130,100,17,1,84,35,130,254,104,42,124,36,66,124,34,130,42,36,162,134,17,1,126,36,34,188,98,10,62,34,130,40,47,226,0,34,66,66,32,130,10,65,5,222,199,69,94,85,68,158,85,70,84,65,228,16,40,130,238,74,165,234,212,70,244,80,38,248,66,4,168,82,68,96,17,1,124,33,2,254,100,74,124,34,130,254,32,2,124,36,66,124,42,67,244,74,141,30,93,70,116,93,69,84,92,132,72,85,68,162,32,2,238,68,69,84,223,228,204,85,102,248,72,132,248,72,132,248,21,1,72,47,227,144,111,202,144,47,194,144,47,226,128,42,163,42,40,130,10,126,132,8,221,229,72,92,132,136,93,134,186,74,165,198,17,1,124,34,130,254,101,74,124,37,66,124,33,2,124,33,2,254,47,226,170,79,228,0,223,228,0,79,196,132,79,196,106,74,69,50,39,130,136,95,228,164,204,164,188,72,4,188,72,4,188,74,69,60,4,0,64,10,1,16,96,136,6,63,128,64,4,0,64,127,192,0,4,0,160,17,2,72,196,96,96,118,65,88,37,4,72,148,96,128,4,0,160,17,2,8,223,96,0,127,192,64,36,132,68,20,0,128,4,0,160,17,2,8,223,96,0,8,132,72,37,1,32,255,224,0,32,2,60,34,69,36,75,200,36,34,66,60,82,68,164,135,224,0,4,0,160,17,3,248,192,99,248,42,135,252,74,71,252,74,68,12,24,0,64,10,3,24,196,96,64,118,65,88,36,132,68,148,32,128,24,0,64,10,3,24,196,98,72,21,7,252,21,2,72,68,64,64,2,1,32,17,2,8,95,104,64,8,1,248,0,128,8,5,0,32,123,196,164,123,196,32,74,67,156,17,7,252,17,15,254,17,2,8,36,143,254,145,39,252,17,15,254,36,131,248,36,131,248,17,2,8,161,68,16,239,196,16,239,74,180,234,202,232,224,138,234,225,96,34,80,2,252,248,74,252,250,138,252,250,130,254,250,130,170,43,67,34,17,15,254,4,2,238,186,170,174,254,133,6,191,69,18,14,7,28,16,1,0,31,194,4,32,68,4,0,64,4,0,64,4,2,128,16,32,3,252,74,75,244,8,67,228,42,67,228,42,67,228,43,66,104,64,7,252,136,71,244,0,67,228,0,67,228,0,67,228,34,67,236,32,3,254,64,43,250,17,33,242,0,35,250,36,163,250,36,163,254,8,3,240,41,2,80,34,3,252,0,65,244,18,129,32,34,36,30,0,7,248,64,133,232,72,132,232,82,134,168,68,164,138,80,106,2,0,7,56,82,133,232,64,132,8,127,129,32,18,34,34,33,228,0,0,0,128,4,0,0,0,15,254,0,0,0,0,0,0,0,0,0,4,0,32,255,225,16,36,132,148,16,131,252,9,64,144,17,38,14,4,15,254,32,131,248,0,7,254,131,35,192,7,199,192,4,32,62,4,7,252,17,2,72,72,65,16,63,128,200,26,2,148,202,128,198,4,15,254,0,3,248,1,7,252,20,66,72,78,33,148,104,128,198,4,15,254,34,15,120,34,131,106,227,98,194,122,130,144,76,192,128,4,15,254,17,5,20,145,32,64,127,196,164,85,68,164,81,68,12,4,15,254,8,3,56,32,131,184,32,131,248,12,67,40,209,129,134,4,15,254,42,130,232,32,131,248,0,3,248,0,15,254,36,132,196,4,15,254,32,3,252,4,14,78,190,174,170,170,238,74,164,166,176,4,15,254,32,3,252,0,7,68,95,71,84,95,71,68,95,75,22,4,15,254,32,3,252,10,14,78,174,174,74,174,238,74,174,162,82,0,4,0,32,0,0,16,2,0,32,12,0,64,4,0,0,0,0,0,9,252,68,0,120,20,130,136,40,140,248,65,4,16,95,224,0,0,41,242,68,32,74,46,162,170,74,173,74,68,164,130,72,161,4,2,8,160,79,193,32,2,3,254,37,4,80,201,36,146,80,226,0,8,8,148,73,67,226,8,161,200,41,12,144,74,68,190,72,32,128,0,0,0,0,7,254,64,40,0,0,0,0,0,0,0,0,0,0,0,15,254,128,39,252,8,3,82,235,67,104,218,129,36,106,32,64,255,232,2,63,130,8,63,130,8,63,128,64,255,224,0,17,2,8,0,4,0,32,0,0,224,2,0,32,2,0,40,3,0,32,0,0,0,4,124,33,0,16,225,2,254,33,2,16,41,3,16,33,0,16,0,4,124,33,0,16,225,2,16,33,2,144,49,2,16,15,224,0,1,4,16,33,0,84,229,66,84,37,66,84,45,67,84,39,192,4,0,4,126,36,0,100,229,66,72,36,130,212,54,34,64,7,224,0,0,4,126,36,0,64,231,194,68,36,66,124,44,3,64,39,224,0,1,4,16,33,0,254,201,36,146,73,36,170,76,102,130,72,160,132,1,4,16,33,0,254,225,2,16,39,194,68,36,67,68,39,192,0,0,4,254,32,64,4,231,66,84,37,66,116,40,67,4,33,64,8,0,200,240,73,0,144,201,4,254,73,4,144,72,166,202,74,96,18,0,4,126,33,32,18,226,162,68,32,2,62,42,35,34,35,224,34,1,4,16,37,64,84,229,66,124,33,2,84,37,67,84,39,192,4,1,4,16,34,0,36,231,226,2,35,194,36,42,67,36,35,192,36,71,226,64,7,224,72,228,130,92,36,130,72,47,227,64,39,224,0,1,4,16,47,224,16,231,194,16,47,226,56,53,66,146,17,0,16,1,4,16,39,192,16,239,226,16,33,2,124,41,3,16,47,224,0,1,4,16,47,224], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+92177);
/* memory initializer */ allocate([16,225,2,124,32,2,124,44,67,68,39,192,68,130,4,32,31,224,64,196,132,106,74,196,168,84,134,20,66,64,66,66,2,32,10,0,252,210,4,32,95,228,80,69,6,146,73,33,14,64,194,112,4,14,64,39,226,64,37,226,210,53,34,146,9,225,18,1,4,40,36,64,130,231,194,16,33,2,124,41,3,16,47,224,0,68,2,120,8,129,124,225,66,254,33,66,124,41,3,16,37,0,32,15,228,130,33,0,124,226,2,80,39,194,16,47,227,16,33,0,16,0,4,238,34,32,170,230,98,102,42,162,34,42,35,34,42,160,68,1,4,146,37,64,16,231,194,68,39,194,68,47,195,68,37,64,72,1,4,80,39,192,144,225,2,254,32,2,124,44,67,68,39,192,68,148,4,190,20,128,72,196,132,200,87,228,72,84,134,72,87,224,128,1,4,32,36,64,254,228,34,124,41,2,16,47,227,40,36,64,130,0,11,224,85,193,212,213,69,212,85,69,104,92,134,84,70,32,64,0,9,252,66,0,66,202,37,180,77,133,116,69,70,146,85,0,32,129,132,224,2,1,252,202,133,36,68,5,254,68,134,48,68,129,132,65,2,80,9,96,146,237,98,146,47,226,16,42,131,40,36,64,130,2,8,80,72,129,38,193,4,252,64,132,16,82,70,18,84,162,120,2,4,60,36,64,136,225,2,102,36,34,118,44,35,66,39,224,0,2,4,16,47,224,68,228,66,170,33,2,254,33,3,16,33,0,16,4,136,252,68,128,120,196,132,120,68,133,254,74,134,196,72,0,252,130,5,252,2,1,252,210,69,172,87,69,252,71,6,168,82,96,32,2,8,60,66,1,254,210,37,240,82,69,124,116,5,254,20,2,124,71,194,68,7,192,68,231,194,32,39,226,210,37,35,106,39,160,6,14,232,170,78,224,0,231,194,0,47,226,32,39,195,4,33,64,8,129,4,40,4,64,186,192,4,234,74,164,234,74,166,226,74,160,164,64,226,240,5,76,254,66,5,254,66,5,124,100,68,168,17,0,108,2,8,16,79,224,68,226,130,254,32,2,124,36,67,124,36,64,124,1,4,254,36,64,40,239,226,130,33,2,124,37,67,84,37,192,16,73,2,94,2,32,8,228,130,148,34,34,0,39,195,68,39,192,68,1,4,254,40,32,254,232,2,254,42,162,254,58,162,162,8,161,4,66,130,254,2,128,124,228,66,124,36,66,124,41,3,126,34,128,198,2,9,36,74,129,252,208,68,248,72,132,248,85,6,84,73,65,12,31,201,36,95,193,36,223,196,136,84,70,122,76,134,48,68,129,134,8,72,72,95,224,72,200,69,2,64,5,252,85,71,84,85,67,254,132,4,36,8,129,84,198,165,184,96,5,252,85,71,84,95,224,0,129,4,254,2,128,254,201,36,254,73,36,186,90,166,186,72,160,132,4,137,254,64,0,226,202,164,234,74,36,166,64,6,252,68,64,140,189,228,132,41,67,222,200,197,212,106,100,248,88,134,248,72,128,248,133,4,72,15,236,144,95,198,144,79,197,144,111,228,128,21,66,82,143,132,16,31,192,164,214,5,252,85,69,140,87,71,84,87,65,12,4,73,246,68,65,244,219,229,84,95,69,84,95,71,84,85,161,48,4,8,124,72,129,254,202,68,210,72,132,254,88,6,188,74,65,60,138,68,166,21,67,254,202,69,182,74,69,180,74,198,180,92,160,18,0,0,60,2,64,36,2,64,36,2,64,52,2,128,32,2,0,32,63,0,32,118,33,84,36,133,246,128,3,240,33,2,84,34,65,252,0,7,128,72,5,0,96,5,0,72,4,128,112,4,0,64,4,0,0,15,126,146,138,40,194,138,40,146,137,42,228,168,74,136,105,0,240,201,112,145,10,16,193,10,254,145,9,16,209,10,16,129,8,16,2,79,36,146,74,126,194,74,36,151,233,36,210,74,68,132,72,132,0,111,120,148,10,64,199,202,84,149,73,84,212,138,84,137,73,34,1,7,16,81,229,16,97,5,124,84,69,68,100,68,68,71,196,0,2,15,32,147,233,80,169,10,30,145,9,30,209,10,16,129,8,16,0,143,8,151,233,74,164,140,126,165,41,82,213,74,136,137,73,34,0,7,124,80,133,16,98,134,68,80,5,124,97,4,16,79,228,0,1,15,8,151,233,16,162,74,120,145,41,36,212,138,20,130,40,64,1,15,28,149,9,80,175,234,16,149,41,84,217,138,16,134,9,128,0,7,124,84,69,124,100,70,124,81,5,16,103,196,16,79,228,0,0,15,248,170,10,174,206,170,170,174,170,170,203,73,228,130,168,50,224,202,112,161,10,254,197,74,84,175,234,84,197,72,254,129,8,124,2,7,124,85,69,124,101,70,124,82,5,80,111,228,16,65,4,16,0,7,124,85,69,124,101,69,124,80,5,254,101,4,74,70,68,66,1,7,124,84,69,124,100,70,124,80,5,124,97,4,124,65,4,254,1,14,32,175,202,148,207,204,164,175,202,40,197,72,188,138,41,30,231,202,68,167,204,68,199,202,68,170,170,68,200,136,238,128,8,170,0,7,222,17,33,20,17,129,20,255,33,18,17,161,20,17,1,16,0,7,222,17,33,20,17,129,20,17,33,210,241,164,20,1,0,16,16,0,158,63,34,20,33,130,20,33,34,18,33,162,20,65,8,16,32,1,30,1,47,212,65,132,20,65,36,18,65,167,148,1,0,16,16,2,30,121,36,148,89,132,20,125,32,82,53,172,84,21,0,144,32,1,30,253,34,20,33,131,148,41,34,146,73,164,148,169,1,16,0,7,222,17,33,20,125,133,84,85,38,210,69,164,84,85,4,144,0,7,222,9,33,20,53,133,52,145,33,18,1,193,208,225,0,16,40,2,158,41,46,244,41,130,148,41,38,178,173,162,148,1,0,16,0,2,158,41,34,146,171,70,212,41,34,146,45,175,20,1,0,16,12,7,30,81,37,20,125,133,20,81,37,82,85,166,212,85,0,16,16,2,30,73,47,212,5,128,20,121,36,146,73,167,148,73,0,16,16,1,30,125,33,20,85,131,148,17,47,210,17,162,148,69,8,16,0,15,222,33,36,148,125,129,84,17,39,210,17,161,212,241,0,16,16,1,30,81,39,212,145,143,212,17,35,146,85,169,20,17,1,16,16,2,158,69,40,52,57,128,20,253,34,18,73,175,212,5,0,16,40,1,30,41,36,84,33,143,212,33,36,146,81,170,84,61,0,80,32,2,30,125,40,84,117,133,84,117,37,82,117,160,84,21,0,144,125,228,82,17,39,148,33,133,20,125,33,18,29,175,20,17,1,16,0,15,238,0,174,234,170,202,170,238,170,170,170,202,168,170,128,8,0,7,222,69,39,212,1,135,212,17,39,210,17,161,212,113,0,16,16,5,30,125,41,20,17,143,244,1,39,210,69,164,84,125,0,16,72,3,30,73,34,20,253,133,20,253,37,82,85,165,212,17,1,16,28,14,30,85,34,148,253,128,148,17,33,210,241,161,20,81,2,16,16,7,222,85,39,212,85,135,212,33,37,18,253,161,20,17,1,16,16,5,94,153,34,148,69,129,20,85,37,146,145,162,148,69,8,16,254,234,74,188,170,74,188,201,10,254,170,74,152,202,72,254,128,8,0,15,238,40,175,234,170,207,234,16,167,202,16,193,232,240,128,8,253,225,18,93,37,20,253,130,20,61,36,18,125,160,84,165,10,208,41,239,210,41,35,148,17,135,212,85,39,210,17,167,212,17,7,208,16,7,222,41,47,244,69,135,212,69,39,210,17,175,212,17,1,16,12,15,14,84,163,138,254,197,74,130,167,202,84,199,200,84,135,200,40,15,238,16,167,202,16,207,234,84,175,234,0,199,200,68,135,200,252,229,10,126,165,170,244,193,170,120,163,74,216,195,72,210,131,8,124,225,10,254,169,42,16,205,106,0,175,234,170,202,168,254,128,8,40,7,206,170,175,234,170,207,234,170,175,234,68,194,136,60,142,8,8,0,128,31,193,8,33,5,252,0,64,4,31,192,4,0,67,252,16,1,240,33,4,32,191,130,72,36,143,254,4,0,160,49,140,6,1,15,208,33,2,60,57,66,148,41,66,148,74,68,164,171,65,72,32,130,8,124,136,126,4,167,74,84,165,74,117,32,82,42,161,68,0,143,200,36,130,94,84,168,138,124,164,74,69,39,210,66,160,68,32,129,8,252,130,62,72,175,10,36,164,138,153,34,82,66,160,68,32,7,220,37,68,220,128,7,254,0,131,200,36,131,200,2,128,16,124,128,136,19,239,202,16,165,10,32,167,202,85,37,82,254,160,68,0,143,200,132,139,94,132,171,74,0,167,146,73,39,162,74,167,196,32,15,190,42,164,190,154,160,62,81,15,200,84,37,114,85,74,220,20,6,92,68,71,92,68,71,252,4,7,252,32,129,16,14,15,30,36,130,232,177,170,236,160,130,232,91,72,162,63,129,16,14,7,28,123,196,164,123,196,228,127,195,32,95,193,32,127,193,16,14,7,28,0,7,128,8,1,0,32,3,128,8,5,0,32,3,0,79,232,0,0,0,0,0,4,4,64,68,4,64,68,4,64,71,252,0,64,0,4,0,64,69,71,100,84,69,100,101,68,68,84,68,132,127,192,4,8,10,40,148,140,152,148,138,40,255,132,0,78,7,8,64,131,248,0,0,0,4,0,64,8,0,128,16,1,16,32,135,252,0,64,0,8,0,144,16,131,252,0,65,16,17,15,254,17,1,16,33,4,16,8,1,16,63,128,136,255,225,16,32,135,252,164,163,248,36,131,248,1,15,126,17,2,36,87,232,130,117,66,84,61,78,84,9,97,0,17,2,8,95,104,144,9,1,80,34,0,64,63,128,64,255,224,0,0,7,252,10,4,164,42,128,160,255,224,64,4,3,248,4,15,254,21,1,72,39,195,192,101,10,36,37,66,140,4,3,248,4,15,254,17,15,208,75,199,148,19,71,148,18,195,70,4,7,252,4,15,254,17,207,244,85,103,224,85,239,226,85,71,200,5,103,252,4,15,254,4,15,254,33,68,190,118,130,190,114,129,62,36,7,252,4,15,254,60,2,28,253,75,84,73,79,200,73,71,162,4,7,252,4,15,254,32,2,124,33,2,16,241,2,254,33,2,16,57,12,16,5,0,32,32,2,60,32,15,128,39,226,16,34,2,60,56,78,4,65,64,8,34,2,32,35,226,64,248,2,124,32,130,16,58,14,66,4,32,62,32,34,34,34,162,42,250,162,42,34,162,42,58,174,74,4,160,130,33,2,8,39,226,64,252,2,64,36,2,64,60,14,64,72,1,0,32,2,124,32,66,4,248,66,124,36,2,64,60,46,66,67,224,0,32,2,124,36,66,68,244,66,124,36,2,64,60,46,66,67,224,0,32,2,126,36,2,72,244,130,94,36,162,74,52,174,146,73,161,36,32,194,112,36,2,64,247,226,72,36,130,72,60,142,72,72,129,8,32,194,112,36,15,192,39,226,82,37,35,212,229,68,136,9,65,34,36,130,72,47,194,72,244,130,72,39,130,72,60,142,72,71,128,72,36,130,68,36,2,254,245,2,82,37,66,88,57,12,178,21,34,14,33,2,16,33,2,30,249,2,16,39,226,66,60,46,66,71,224,66,33,2,16,33,226,16,247,194,68,36,66,124,52,14,64,72,1,0,32,194,112,36,15,64,39,226,72,37,130,72,52,206,138,72,129,8,32,194,112,37,2,80,247,226,80,37,2,74,53,110,98,68,128,4,34,2,16,47,226,130,242,2,36,34,130,48,58,46,34,65,224,0,32,2,126,36,47,126,36,2,80,37,35,84,229,132,146,9,33,14,32,2,124,36,66,84,244,66,254,36,66,84,52,78,126,64,64,24,68,132,72,72,132,168,237,228,74,72,164,170,111,44,18,2,160,68,32,2,254,34,130,40,242,130,170,38,194,40,50,142,40,79,224,0,32,2,126,33,2,36,247,226,18,33,2,124,49,14,16,79,224,0,32,2,254,40,47,186,40,34,186,42,163,170,235,164,130,8,160,132,33,2,84,37,66,124,240,2,124,32,66,124,52,14,68,68,64,60,64,100,56,92,142,136,74,229,40,90,134,168,219,225,64,35,228,0,65,4,32,79,228,130,235,164,170,74,164,170,107,172,130,8,160,132,66,4,16,79,228,0,226,132,146,73,36,170,104,44,130,15,224,2,33,2,8,39,239,144,34,66,120,33,35,164,228,132,148,2,32,64,32,2,124,36,66,124,244,66,124,37,34,84,52,142,84,70,32,64,39,194,68,36,66,124,248,2,124,33,2,16,55,206,16,65,0,254,64,68,228,75,238,164,74,68,244,74,196,164,106,76,228,1,64,8,32,2,124,36,66,124,241,2,254,41,34,170,60,110,130,72,160,132,39,194,68,39,194,0,247,194,68,37,66,84,53,76,40,4,64,130,32,226,112,33,34,74,34,79,8,39,226,8,36,131,168,224,128,24,34,2,16,47,226,130,247,194,0,47,226,40,50,142,74,68,160,134,33,2,254,33,2,124,244,66,124,36,66,124,52,78,124,68,64,254,66,4,32,95,228,72,234,69,250,74,132,248,106,140,250,2,32,30,39,194,68,39,194,68,247,194,32,39,226,170,52,174,146,66,160,4,32,130,16,39,226,74,247,226,82,39,226,32,52,142,254,64,128,8,33,2,16,34,130,70,241,2,124,32,130,144,50,78,146,74,161,56,64,4,238,74,164,170,238,228,170,74,164,238,106,172,170,19,34,102,68,4,120,72,133,16,239,196,164,79,196,48,101,140,86,9,33,14,39,194,4,39,207,4,47,226,146,39,195,84,229,68,92,1,0,16,33,2,124,33,66,254,241,66,124,33,34,84,51,142,84,73,32,48,64,4,254,72,46,254,72,132,170,75,230,136,202,161,42,19,226,2,33,66,84,47,226,84,245,194,64,39,227,16,239,228,84,9,32,16,32,2,254,34,130,254,250,162,170,47,226,16,55,206,16,79,224,0,32,2,254,42,162,170,255,226,16,47,226,32,59,206,68,73,65,8,68,4,92,72,78,190,89,6,156,74,132,136,107,236,136,9,64,162,47,226,0,39,207,68,39,194,0,47,227,170,233,36,254,9,32,150,95,229,16,82,15,124,84,69,124,84,71,124,209,2,84,41,36,48,39,194,68,39,199,68,47,226,170,47,227,0,239,196,68,3,128,198,65,5,254,81,15,124,81,69,254,81,71,124,213,65,124,37,68,76,87,132,40,86,206,170,82,132,88,66,5,252,103,12,168,18,64,32,79,228,130,79,238,170,73,196,170,74,134,190,212,129,62,32,128,8,19,135,168,19,199,232,85,7,254,149,3,248,81,65,240,17,1,240,16,143,222,16,135,222,5,35,252,41,35,240,20,15,254,4,0,64,36,143,168,32,239,146,138,135,72,81,71,34,1,5,34,38,175,152,17,1,16,255,225,16,17,0,0,0,0,0,0,0,0,0,0,0,17,15,254,17,0,128,8,7,240,9,0,144,17,33,18,32,228,0,17,15,254,17,0,0,63,128,144,10,0,188,16,65,4,34,132,16,17,1,16,255,225,16,17,0,64,4,3,248,4,0,64,255,224,0,17,15,254,17,0,0,3,131,192,4,0,64,255,224,64,4,0,64,17,15,254,17,3,248,16,129,16,21,193,68,34,130,16,70,137,134,17,15,254,17,0,128,63,0,144,25,0,208,21,33,18,32,228,0,17,15,254,17,0,0,63,128,8,31,130,0,63,128,8,2,128,16,17,15,254,17,0,0,63,128,8,0,131,248,32,2,4,32,65,252,17,15,254,17,0,64,9,3,224,4,64,136,63,128,16,6,7,128,17,15,254,17,0,64,4,3,248,4,15,254,4,0,160,49,140,6,17,15,254,17,0,0,63,128,0,255,224,160,10,1,36,34,68,28,17,15,254,17,0,0,63,128,0,255,224,128,9,1,8,127,194,4,17,15,254,17,0,64,255,224,64,127,196,68,68,68,84,68,128,64,17,15,254,17,0,64,127,192,64,63,1,16,10,0,64,27,6,12,17,15,254,17,0,0,127,196,64,68,5,252,68,68,132,73,73,8,17,15,254,17,0,0,127,196,0,95,5,16,85,5,36,80,72,252,17,15,254,17,0,0,63,194,0,63,130,8,63,130,0,63,192,0,17,15,254,17,0,0,34,2,36,58,130,48,34,2,162,50,34,30,17,15,254,17,0,64,4,2,64,39,130,64,36,2,64,255,224,0,17,15,254,17,0,64,127,196,68,68,68,164,81,68,4,65,68,8,17,15,254,17,0,0,63,130,8,36,130,72,36,128,162,50,44,30,17,15,254,17,0,128,8,128,176,12,7,254,10,0,144,8,128,198,17,15,254,17,0,0,17,1,16,17,2,144,38,132,40,132,64,130,17,15,254,17,0,64,10,3,24,196,96,32,63,128,16,2,0,64,17,15,254,17,2,0,63,194,164,74,64,164,18,65,68,37,64,136,17,15,254,17,2,0,63,194,8,69,0,64,4,0,160,49,140,6,17,15,254,17,0,0,7,131,160,34,3,248,34,2,36,41,67,12,17,15,254,17,0,0,31,1,16,32,229,240,9,0,144,6,7,158,17,15,254,17,0,64,2,15,254,4,0,80,4,128,68,4,0,64,17,15,254,17,0,64,2,7,252,64,68,4,0,0,0,255,224,0,17,15,254,17,0,0,125,0,144,17,1,208,241,1,18,81,34,14,17,15,254,17,0,0,41,2,80,33,2,16,42,131,36,36,32,128,17,15,254,17,0,64,255,224,64,127,192,224,21,2,72,196,96,64,17,15,254,17,0,0,17,15,254,17,1,240,17,1,16,31,1,16,17,15,254,17,0,0,127,192,64,13,1,72,100,64,64,0,15,254,17,15,254,17,0,136,8,79,254,20,1,80,38,36,66,139,225,0,17,15,254,17,0,136,255,225,0,31,131,16,74,8,96,25,142,6,17,15,254,17,0,0,63,130,8,63,130,8,63,130,8,63,128,0,17,15,254,17,0,0,63,130,8,63,130,8,63,130,8,255,224,0,17,15,254,17,0,64,63,130,72,63,130,72,255,226,8,34,130,16,17,15,254,17,0,0,63,130,8,46,130,168,42,130,232,32,130,24,17,15,254,17,0,32,18,2,32,127,202,32,34,2,32,47,194,0,17,15,254,17,0,0,16,130,8,111,234,8,36,130,8,34,130,16,17,15,254,17,0,64,10,3,24,196,99,248,1,1,32,12,0,32,17,15,252,21,0,128,63,2,16,43,2,0,63,192,4,253,64,8,17,15,254,17,0,128,115,196,36,114,68,36,91,70,40,2,0,32,33,15,254,33,1,0,99,196,164,74,69,164,107,68,168,18,2,32,17,15,254,17,0,0,127,196,68,4,3,248,4,0,64,255,224,0,17,15,254,17,15,254,128,35,248,8,128,136,127,160,138,8,96,130,17,15,254,17,3,252,32,67,252,34,3,252,34,2,20,40,195,4,17,15,254,17,0,0,127,128,136,18,130,16,127,130,8,32,131,248,17,15,254,17,15,254,10,7,252,74,68,164,73,197,4,127,196,4,17,15,254,21,3,248,4,131,248,36,3,252,4,64,172,17,6,12,17,15,254,21,0,124,125,0,100,11,193,0,127,192,160,18,38,30,17,15,254,17,2,40,59,2,36,57,192,64,255,224,64,4,0,64,17,15,254,17,0,0,18,5,36,90,133,48,82,37,226,225,224,0,33,15,252,33,0,0,63,2,16,63,0,0,127,132,8,64,135,248,17,15,254,17,7,252,64,69,244,64,69,244,81,69,244,65,68,8,17,15,254,17,0,0,127,196,4,95,69,20,81,69,244,64,71,252,17,15,254,17,2,64,63,132,64,255,224,224,21,2,72,196,96,64,17,15,254,17,0,0,113,193,112,33,7,124,17,5,124,32,13,254,17,15,254,17,3,224,8,15,254,17,2,8,209,97,16,17,2,16,17,15,254,17,1,40,34,67,254,98,10,32,37,2,80,40,131,4,17,15,254,17,1,24,46,2,32,98,11,252,34,2,32,47,130,0,17,15,254,17,1,0,35,196,128,23,227,8,80,129,8,18,129,16,17,15,254,21,0,160,49,140,6,63,128,64,31,0,64,127,192,0,17,15,254,21,0,160,49,140,230,0,3,248,8,1,8,63,192,4,17,15,254,17,3,252,64,75,228,34,67,228,34,67,228,1,64,8,17,15,254,17,0,64,15,129,16,42,0,192,63,141,8,16,129,248,17,15,254,17,0,64,255,225,16,14,3,24,209,97,16,33,4,16,17,15,254,17,0,64,127,193,16,32,133,20,10,0,64,27,14,14,17,15,254,21,0,32,127,192,128,16,131,252,9,64,144,17,38,14,17,15,254,17,4,0,47,136,32,82,2,32,194,4,32,95,224,0,17,15,254,17,7,252,68,73,64,31,130,64,127,192,64,4,0,64,17,15,254,17,7,254,68,40,72,117,1,96,37,4,72,148,96,128,17,15,254,17,3,248,0,131,248,0,143,254,33,1,16,5,0,32,17,15,254,17,3,248,32,131,248,32,131,248,36,66,40,41,131,6,17,15,254,17,3,248,32,131,248,33,2,144,36,132,132,68,40,32,17,15,254,17,7,252,32,69,72,36,15,254,4,0,160,49,140,6,17,15,254,17,0,0,241,1,16,37,67,84,233,34,18,165,4,32,17,15,254,17,2,0,75,239,8,32,132,8,248,128,8,27,238,0,17,15,254,17,1,8,40,135,126,32,135,168,0,129,136,98,128,16,17,15,254,17,2,32,35,239,66,41,66,16,57,12,40,4,64,130,17,15,254,21,3,248,4,7,254,64,41,240,2,7,252,4,0,192,17,15,254,17,0,4,120,68,190,72,71,164,73,68,132,121,64,8,17,15,254,17,3,248,32,131,248,4,7,252,68,68,164,81,68,12,17,15,254,17,3,248,4,15,254,36,133,246,137,0,188,16,66,24,17,15,254,21,7,168,18,79,254,18,1,168,113,33,42,84,98,2,17,15,254,17,2,0,63,196,0,63,130,136,255,228,72,127,192,16,8,143,254,8,129,16,17,2,158,106,74,212,41,66,136,33,66,98,33,15,254,33,1,32,17,2,124,96,10,68,34,66,40,47,226,0,17,15,254,21,0,160,49,141,246,4,7,252,4,2,72,84,64,128,17,15,254,21,0,160,49,141,246,0,0,136,37,1,32,255,224,0,18,15,254,18,7,252,40,129,80,63,0,32,255,224,64,20,0,128,17,15,254,17,0,124,124,2,136,21,15,254,16,128,144,6,7,158,17,15,254,17,5,40,34,69,32,159,227,40,82,137,74,84,162,134,17,15,254,17,5,0,33,5,84,21,131,144,210,129,40,84,66,130,17,15,254,17,0,64,127,193,16,10,15,254,4,7,252,4,0,64,17,15,254,21,0,32,127,196,4,159,0,0,127,192,160,18,38,30,17,15,254,21,0,32,63,130,8,63,130,8,63,130,36,41,131,6,17,15,254,17,7,254,72,41,248,20,129,16,31,192,4,125,64,8,18,15,254,18,2,16,87,206,16,69,79,84,7,195,18,193,32,14,17,15,254,21,3,248,4,15,254,32,131,248,32,131,248,32,130,24,17,15,254,17,7,252,17,1,240,17,1,240,17,15,254,17,2,8,17,15,254,17,2,12,35,15,160,35,199,40,170,130,40,36,130,136,17,15,254,17,2,0,34,143,68,41,39,16,170,2,68,47,226,66,17,15,254,17,1,240,4,3,248,36,131,248,4,3,248,4,15,254,17,15,254,17,0,64,127,193,16,46,140,6,63,129,80,36,128,192,17,15,254,21,3,248,4,143,254,4,135,252,9,1,16,14,7,28,17,15,254,17,2,40,34,79,126,34,3,60,229,66,72,169,68,34,17,15,254,16,1,220,17,79,244,17,67,148,84,137,20,82,66,66,17,15,254,17,3,248,32,131,248,32,135,252,64,71,252,64,71,252,17,15,254,17,2,0,33,15,158,169,10,188,170,75,164,35,194,36,33,15,254,33,1,64,101,196,68,117,196,68,127,192,160,49,140,6,17,15,254,21,1,32,63,198,32,191,194,32,63,194,32,63,226,0,17,15,254,21,3,248,36,131,248,40,131,248,18,15,254,2,0,32,17,15,254,17,7,188,74,71,168,75,199,164,75,68,168,107,73,34,17,15,254,17,3,240,66,11,248,36,131,248,10,0,170,18,38,30,17,15,254,17,0,128,31,2,16,74,3,28,32,67,156,32,67,252,17,15,254,17,0,64,127,193,16,17,2,168,4,7,252,4,0,64,17,15,254,17,4,8,32,143,148,34,35,136,40,68,144,104,137,4,17,15,254,17,4,0,47,136,136,95,130,136,207,132,136,72,131,254,17,15,254,21,0,32,127,232,2,127,193,0,63,133,8,159,129,8,17,15,254,21,7,254,128,33,248,16,129,248,16,1,248,16,129,248,17,15,254,21,7,254,96,43,188,42,68,164,171,65,40,34,36,30,17,15,254,17,7,252,72,65,32,60,0,144,63,128,68,37,4,200,17,15,254,17,0,14,247,65,84,37,67,84,229,66,146,170,133,56,17,15,254,17,3,240,2,5,68,77,69,100,101,69,68,72,71,252,17,15,254,17,7,188,17,71,164,20,192,64,255,224,160,49,140,6,17,15,254,17,1,4,124,65,30,252,65,20,124,193,4,29,79,8,32,143,254,32,129,16,127,193,16,31,1,16,255,226,160,49,3,252,17,15,254,17,1,0,123,193,36,59,197,100,147,193,36,19,193,0,17,15,254,17,71,254,65,5,208,73,71,212,85,133,82,138,161,70,17,15,254,17,71,254,65,5,240,81,69,84,84,132,170,81,104,34,17,15,254,17,4,36,122,132,50,105,227,240,33,3,240,33,3,240,32,143,254,32,129,240,17,15,254,32,131,248,32,231,248,0,128,8,17,15,254,21,3,248,36,143,254,0,3,248,36,130,72,27,6,12,17,15,254,17,3,248,36,131,248,36,131,248,8,5,68,81,40,242,17,15,254,17,3,184,42,131,184,0,7,252,16,1,248,0,128,48,17,15,254,17,1,248,40,130,248,98,11,252,39,2,168,50,98,32,17,15,254,17,2,0,119,197,84,85,71,124,84,5,66,115,224,0,17,15,254,21,7,252,0,1,240,17,7,252,64,65,240,4,0,192,32,143,254,36,129,80,127,193,80,36,128,128,255,225,16,14,7,24,17,15,254,17,4,12,47,8,132,91,130,168,202,165,36,83,66,34,17,15,254,21,7,254,128,35,248,32,131,248,32,131,248,0,15,254,17,15,254,17,7,188,72,71,188,64,7,124,66,71,40,65,4,238,17,15,254,21,3,240,8,15,254,17,2,232,68,107,248,21,2,72,33,15,254,41,7,232,9,15,254,12,131,82,223,225,72,18,129,248,17,15,254,17,3,252,32,3,254,81,73,72,25,71,254,17,0,176,17,15,254,17,3,248,36,143,254,16,131,244,73,32,248,0,131,216,17,15,254,17,3,248,36,130,232,36,130,168,63,128,68,82,169,248,16,143,254,18,129,16,47,230,68,162,130,254,32,2,124,36,66,124,17,15,254,17,0,144,20,134,150,31,128,0,123,194,148,24,194,148,17,15,254,21,7,252,0,1,240,17,7,252,64,69,244,81,69,244,17,15,254,21,0,32,63,202,128,111,135,32,191,194,32,69,9,140,17,15,254,17,0,64,255,224,160,36,130,168,127,196,68,95,68,20,17,15,254,21,7,252,17,7,254,68,43,248,8,0,248,16,134,24,9,15,254,41,65,8,127,224,160,63,128,168,255,225,176,42,132,164,9,15,254,9,5,0,251,194,36,171,202,164,251,194,36,66,72,76,17,15,254,21,4,248,40,136,248,88,130,248,202,68,152,76,128,132,17,15,254,17,7,252,68,64,160,49,141,246,4,3,248,21,7,252,17,15,254,17,15,190,16,134,62,18,47,170,42,162,42,161,68,98,17,15,254,17,7,200,16,231,210,86,39,200,56,133,84,145,65,34,17,15,254,17,3,248,42,135,254,128,39,248,16,1,240,37,67,44,17,15,254,17,0,64,46,196,164,78,68,164,110,193,16,17,38,14,17,15,254,17,1,16,37,197,80,47,230,16,165,194,80,43,3,30,17,15,254,17,2,144,69,235,164,18,69,84,40,129,212,98,64,66,17,15,254,81,2,64,247,196,160,115,197,80,95,229,16,146,131,70,17,15,254,17,4,252,36,68,164,95,70,164,79,68,164,79,68,140,17,15,254,81,2,252,136,4,248,40,132,252,4,15,254,36,132,68,17,15,254,21,7,254,129,39,28,1,15,188,82,69,24,82,72,254,17,15,254,21,7,254,144,34,252,97,10,124,36,66,124,36,66,124,17,15,254,17,7,188,74,66,148,70,65,176,228,225,128,3,131,192,17,15,254,21,7,252,36,131,248,36,175,254,8,37,68,81,40,242,17,15,254,17,7,252,10,7,252,74,71,252,25,1,80,255,224,64,17,15,254,17,7,254,84,135,238,73,38,168,126,132,136,73,73,34,17,15,254,17,15,136,34,132,62,164,133,62,180,133,190,148,3,62,9,15,254,9,1,248,20,129,40,255,226,64,61,194,84,126,128,86,17,15,254,17,7,168,74,79,254,74,7,168,77,47,170,12,96,130,17,15,254,17,3,248,42,143,254,128,35,248,32,131,248,32,131,248,17,15,254,19,7,200,37,15,254,36,135,252,164,163,248,36,131,248,17,15,254,85,2,134,125,133,80,125,229,84,125,65,20,253,65,36,17,15,254,17,7,168,66,135,124,66,143,168,39,229,0,242,129,68,17,15,254,17,0,40,122,130,108,58,132,236,178,129,108,34,133,254,17,15,254,17,3,248,42,143,254,128,39,252,18,71,168,43,47,30,17,15,254,17,6,168,190,130,30,94,77,84,85,69,104,101,68,34,17,15,254,17,0,64,127,193,16,255,226,8,63,128,68,82,169,248,17,15,254,17,0,64,255,226,40,87,231,40,43,231,168,19,230,32,16,143,254,84,131,144,253,5,190,148,66,20,253,68,136,49,76,162,17,15,254,17,0,8,123,228,148,120,132,62,120,138,156,40,131,136,17,15,254,17,4,124,68,15,126,85,73,90,100,69,126,138,65,12,32,143,254,36,135,252,17,1,240,0,7,254,145,35,248,4,7,252,17,15,254,17,7,252,4,7,252,132,67,88,4,7,252,74,68,172,17,15,254,17,7,252,4,7,252,85,71,252,4,15,254,82,72,146,8,143,254,40,135,162,145,71,254,84,135,220,84,135,254,0,135,200,32,143,254,36,135,252,17,7,252,74,68,236,4,15,254,21,6,76,17,15,254,21,6,124,41,79,164,100,202,176,52,141,86,14,1,80,17,15,254,17,7,252,4,15,254,149,34,248,98,10,248,34,2,252,17,15,254,21,4,124,4,13,254,82,37,84,91,133,84,99,9,254,16,143,254,20,132,246,146,3,254,85,77,244,85,71,252,68,68,172,17,15,254,81,7,222,215,71,200,85,71,226,8,131,252,21,2,200,17,15,254,17,7,124,82,135,252,73,7,184,5,15,254,36,132,68,17,15,254,21,7,254,72,135,254,93,198,170,93,228,80,189,224,80,0,0,0,9,0,144,9,0,144,255,224,144,9,1,16,17,2,16,4,15,254,18,5,40,154,66,64,17,1,16,255,225,16,17,2,16,4,7,252,10,1,16,32,140,6,36,130,72,36,130,72,68,136,8,4,15,254,10,3,24,192,99,252,32,2,144,38,2,144,32,3,252,4,15,254,10,3,24,192,99,248,17,1,240,17,199,240,1,0,16,8,0,64,255,224,144,41,69,82,34,0,64,255,224,160,49,140,6,3,199,200,37,0,128,18,3,192,8,131,252,4,79,254,10,7,28,41,2,144,63,224,144,249,2,188,72,0,64,255,224,160,49,140,6,34,2,32,251,197,68,143,70,84,7,79,68,69,71,72,20,38,62,8,0,128,8,0,128,255,224,128,10,1,32,18,2,36,66,72,28,66,4,32,67,196,68,248,69,36,81,69,20,80,69,40,81,40,254,65,4,40,68,79,130,82,133,40,82,133,40,82,133,74,80,40,254,65,68,84,69,111,216,85,69,2,87,197,84,85,69,254,80,8,254,16,1,0,16,7,192,16,1,0,24,7,0,16,1,0,80,2,0,36,2,32,32,239,66,36,34,66,52,46,66,36,34,66,164,164,68,33,2,16,39,207,16,47,226,16,50,14,124,32,66,104,161,132,4,33,2,16,39,207,84,37,66,124,53,78,84,39,194,16,161,4,16,34,66,36,36,79,94,44,66,84,52,206,68,36,66,68,165,68,72,33,2,16,34,79,126,32,35,40,98,138,254,34,130,40,164,132,136,34,130,40,36,143,158,46,162,74,52,174,170,46,162,50,162,164,68,33,2,16,47,239,16,33,3,124,96,10,124,36,66,68,167,196,68,32,66,120,33,15,126,34,130,68,56,46,36,34,66,36,162,68,68,34,162,42,37,79,170,34,162,144,51,238,66,42,66,24,163,4,192,39,194,68,39,207,128,39,194,84,53,78,124,36,2,66,164,36,62,32,98,120,32,47,82,34,194,4,55,238,68,34,66,4,161,68,8,32,2,124,33,79,126,33,66,124,50,14,124,42,67,36,163,196,36,32,2,126,33,15,126,34,131,68,105,42,20,37,162,148,165,68,32,64,5,254,74,174,234,74,196,234,106,172,186,94,196,40,66,140,40,32,2,126,36,143,92,36,131,126,100,138,92,36,130,136,171,229,0,33,2,16,39,239,40,36,67,186,96,10,254,33,2,84,169,36,48,33,2,124,33,15,168,39,226,4,55,78,84,39,66,4,161,68,8,32,2,254,40,47,186,41,34,186,57,174,150,47,226,130,175,228,130,34,2,124,37,79,124,37,67,124,98,10,80,47,226,16,161,4,16,34,2,62,36,47,146,37,99,58,111,234,58,37,98,146,161,36,6,34,2,16,39,207,0,36,67,40,111,234,0,39,194,68,164,68,124,34,2,16,47,207,132,47,194,144,57,78,254,41,2,168,170,133,68,33,2,126,36,47,126,36,2,94,53,46,94,37,34,158,169,37,22,39,194,84,47,239,84,39,195,0,103,202,68,37,66,84,162,132,68,33,66,84,47,239,84,37,195,64,103,234,16,47,226,84,169,36,16,33,2,254,35,143,84,41,34,124,52,78,124,36,66,124,160,4,254,32,2,254,42,79,188,42,66,188,57,14,254,42,130,144,170,132,254,72,132,136,76,143,30,93,36,162,92,134,136,202,132,212,73,76,34,33,2,40,36,79,186,32,2,226,58,174,234,42,162,234,170,36,166,34,2,16,47,239,68,34,130,254,48,14,124,36,66,124,164,68,124,33,2,254,40,47,124,32,2,124,52,78,124,36,66,124,160,4,254,39,226,66,39,239,64,38,35,84,103,234,84,39,226,148,170,69,68,33,2,244,34,143,170,38,67,68,235,163,16,39,194,16,162,132,68,34,2,60,36,79,120,33,2,254,50,14,210,34,194,220,162,164,216,33,194,16,47,239,146,41,194,242,56,238,128,42,66,146,182,68,188,32,2,124,37,79,124,37,66,108,52,78,124,34,2,20,172,165,120,65,197,224,81,207,16,87,229,82,117,205,112,85,197,84,101,76,166,40,130,80,47,207,80,47,194,84,63,238,84,47,194,216,181,68,82,81,4,174,64,174,234,68,229,90,117,173,254,68,164,138,73,45,38,32,2,126,36,47,126,37,67,126,101,74,126,38,130,170,171,69,34,32,2,238,34,47,238,40,130,238,50,46,170,38,98,170,162,36,102,79,196,72,67,14,72,93,197,84,104,141,84,66,5,252,74,141,36,39,194,84,39,207,84,39,194,36,55,142,18,39,226,16,165,68,178,32,2,238,42,175,170,42,163,68,106,170,32,63,226,72,163,4,204,33,2,8,39,239,64,37,66,126,53,78,84,37,194,128,170,165,74,64,133,136,73,15,222,87,69,212,117,77,200,86,135,212,69,76,98,46,226,34,42,175,102,42,162,16,55,238,66,39,226,66,167,228,66,72,4,190,92,142,144,75,229,226,98,173,234,84,165,72,93,76,34,34,2,124,40,143,124,37,67,124,101,74,254,36,66,124,164,68,124,36,66,40,47,239,40,47,226,170,60,110,254,32,66,254,162,68,12,33,2,254,42,175,84,47,226,84,55,206,16,47,226,146,175,228,16,72,133,212,74,47,192,85,197,200,116,141,254,72,133,200,72,140,136,47,226,170,47,239,0,47,226,0,55,206,68,39,194,42,166,68,178,65,5,200,87,239,84,92,135,62,222,133,168,91,198,168,78,140,8,66,4,248,72,142,248,72,133,252,114,77,252,82,71,254,72,141,8,94,228,170,70,110,170,69,6,254,217,6,252,73,4,252,73,12,254,79,228,16,79,238,146,68,68,144,111,237,144,79,196,144,79,236,128,72,132,238,85,78,124,68,68,254,101,76,162,87,196,84,73,44,48,65,5,254,69,78,254,84,166,252,196,133,254,69,36,204,86,140,70,9,0,136,8,128,128,15,239,128,4,0,64,2,64,20,0,192,4,2,128,36,2,0,62,254,2,32,17,0,18,164,170,170,170,97,130,2,128,36,3,239,224,74,4,144,253,4,144,120,164,138,120,100,130,0,133,12,32,165,126,168,130,120,250,130,40,114,170,186,38,102,2,2,0,32,114,5,32,83,5,40,82,69,36,114,5,32,2,0,32,2,0,32,114,69,40,83,5,32,86,5,160,114,37,34,1,224,0,0,0,120,116,133,72,84,133,72,84,133,72,116,160,138,8,161,6,0,0,60,114,69,36,82,69,36,82,69,52,114,133,32,2,0,32,0,0,124,114,69,36,82,69,36,82,69,36,116,64,68,9,65,8,2,0,32,114,5,124,82,69,36,82,69,36,116,69,68,9,65,8,0,0,12,7,7,16,81,5,30,95,5,16,81,7,18,65,32,14,0,0,130,116,69,40,81,5,16,81,5,16,113,5,16,1,0,16,1,0,16,114,5,36,84,133,120,81,5,32,114,132,68,15,224,2,1,0,16,113,5,124,81,5,16,95,229,16,114,133,40,4,64,130,0,0,252,226,10,32,162,11,254,162,10,80,229,42,146,17,34,14,4,128,72,239,234,72,160,10,252,160,138,16,226,10,66,4,32,62,2,0,32,226,10,32,191,234,32,165,10,80,236,138,168,18,66,2,0,0,254,233,10,144,175,202,148,169,74,148,234,73,36,21,66,136,0,0,254,232,10,188,170,74,164,171,74,168,234,41,34,17,226,0,1,0,144,233,10,148,173,138,144,169,10,146,235,42,210,8,224,0,0,0,124,116,69,84,85,69,84,85,69,84,117,69,40,4,64,130,63,130,8,32,131,248,4,7,252,68,68,164,81,68,4,65,68,8,0,0,32,225,10,16,160,74,34,170,46,160,170,65,36,1,192,0,0,64,244,225,74,20,167,74,68,168,74,244,225,74,20,5,64,36,0,0,254,232,138,136,171,234,170,170,170,170,234,234,136,8,128,254,2,0,32,227,202,32,162,11,254,162,10,40,226,74,36,2,0,32,0,0,124,117,69,84,87,197,84,85,69,124,117,69,16,1,0,16,0,192,248,234,138,168,170,138,168,170,138,168,234,65,36,19,162,8,1,0,16,226,138,68,170,42,16,175,202,4,228,138,48,1,0,8,4,0,124,228,74,168,163,10,72,168,106,48,224,138,0,3,0,8,2,0,16,239,234,130,160,10,254,161,10,16,225,10,16,5,0,32,1,0,16,117,69,84,87,197,16,81,5,84,117,69,84,7,192,4,4,0,64,229,235,234,170,170,170,170,170,170,228,74,170,17,34,32,4,128,72,233,234,170,174,170,74,168,170,170,238,170,18,2,160,68,2,32,68,228,74,136,174,234,68,164,74,136,238,234,0,31,224,0,0,0,254,232,10,190,168,138,136,171,234,136,232,138,190,8,0,254,1,0,16,239,234,16,161,10,124,160,10,0,231,202,68,4,64,124,0,0,254,226,138,40,175,234,170,170,170,206,232,42,130,15,224,130,2,0,32,239,234,32,164,138,72,170,170,172,244,137,20,34,68,66,16,128,136,224,138,62,184,138,136,169,74,148,234,40,128,23,226,0,0,33,226,232,170,234,170,170,170,170,171,106,228,170,66,8,161,4,1,0,254,113,5,124,81,69,124,85,5,126,113,37,46,4,64,130,2,0,62,238,10,40,161,42,42,164,107,252,229,10,80,9,35,14,8,128,138,238,202,136,170,170,214,161,10,254,225,10,16,1,0,16,0,128,40,226,138,40,170,170,188,170,138,168,234,170,186,28,96,0,1,0,16,233,42,84,161,10,254,162,138,40,228,170,74,8,161,6,1,0,84,117,69,124,82,5,60,84,69,168,113,5,32,4,1,128,5,0,80,233,10,252,185,10,184,171,74,212,233,42,144,9,0,144,4,0,124,233,75,148,175,234,148,169,74,188,233,10,160,10,0,192,0,192,240,232,202,176,170,138,170,170,202,168,234,73,36,19,34,32,1,0,40,228,74,130,167,202,0,175,234,32,226,138,68,15,224,66,15,128,136,232,138,136,178,106,32,191,202,112,234,137,36,34,32,32,2,0,16,239,234,72,163,10,40,172,107,72,228,138,72,8,129,8,4,64,40,239,234,16,161,10,124,161,10,16,239,234,16,1,0,16,1,0,16,117,69,56,81,5,254,81,5,56,117,68,146,1,0,16,2,0,16,239,234,130,161,202,224,162,10,60,254,10,34,2,32,30,1,0,16,239,234,146,161,10,42,166,202,168,242,74,36,3,32,32,0,0,248,232,138,248,168,138,248,170,74,168,233,10,144,10,128,196,1,0,32,228,74,254,161,42,80,167,202,144,225,10,254,1,0,16,2,1,252,226,10,252,162,11,254,164,10,120,232,129,80,2,1,220,1,0,16,231,202,16,161,10,254,162,138,172,234,169,42,4,128,152,2,64,126,114,69,0,87,229,66,81,5,124,113,69,36,5,64,136,0,0,254,113,5,124,85,69,124,85,69,124,117,5,48,6,129,134,0,0,126,113,5,124,81,69,36,87,229,0,115,197,36,2,64,60,8,0,134,233,139,208,169,234,148,173,75,148,233,72,148,42,65,68,1,0,84,115,133,16,87,197,68,85,69,84,117,69,40,4,64,130,1,0,32,239,138,136,175,138,136,175,138,32,227,201,224,2,32,30,4,64,56,228,74,32,191,234,80,169,11,124,229,74,84,5,192,16,1,0,16,229,74,84,165,74,186,161,10,124,225,10,16,15,224,0,0,0,238,234,170,234,170,170,234,168,170,202,234,234,216,8,128,8,2,0,252,226,10,252,164,11,254,168,139,36,239,170,32,31,192,32,1,0,254,225,10,124,161,10,254,160,10,124,229,74,84,2,128,68,4,128,72,255,234,72,162,11,254,162,10,64,231,202,164,18,64,60,2,128,254,114,133,0,87,197,84,85,69,124,117,69,84,7,192,68,4,128,72,228,139,254,164,138,236,181,202,106,228,138,72,4,128,72,4,78,68,190,234,132,172,235,68,190,142,78,166,33,202,4,64,66,0,0,254,233,42,186,169,42,254,168,42,186,234,160,186,16,162,4,4,0,126,232,43,66,167,170,162,175,170,34,234,170,250,0,160,4,4,0,126,234,171,42,164,170,146,162,106,64,226,73,74,36,160,56,2,0,16,239,234,0,164,74,68,170,170,16,239,234,16,1,0,16,1,0,124,224,10,68,162,138,252,162,11,254,228,138,48,4,129,132,2,1,254,228,138,252,160,74,120,164,138,120,228,138,120,4,128,88,1,0,82,229,74,144,162,138,68,161,10,82,233,74,40,4,64,130,16,128,136,231,234,74,180,138,220,165,74,84,236,137,84,10,65,66,2,0,16,239,234,130,167,202,16,165,10,92,229,8,80,11,225,0,4,0,238,234,170,234,170,202,234,168,170,202,234,170,220,8,128,8,2,0,16,239,202,132,175,202,144,169,74,254,233,0,168,18,130,68,0,32,250,232,170,250,170,42,250,170,174,170,19,161,34,34,160,36,29,192,68,245,74,136,181,74,0,189,202,84,245,72,136,21,66,34,2,142,168,191,234,168,171,138,128,175,234,16,239,234,56,5,64,146,8,129,254,232,138,32,165,10,136,183,106,0,239,136,136,8,128,248,1,0,254,225,10,254,170,170,146,171,170,146,239,234,146,9,32,134,15,224,128,235,234,170,171,234,170,171,234,136,235,233,8,19,226,0,2,1,254,229,10,136,178,106,248,162,11,252,226,10,248,2,1,254,9,0,146,239,74,152,171,42,206,162,10,252,232,74,252,8,64,252,7,192,84,231,202,84,167,202,16,175,234,146,233,42,186,8,160,132,7,192,84,119,197,84,87,197,0,87,197,68,119,197,68,4,64,76,2,128,200,228,138,90,190,202,72,174,138,200,245,74,84,6,32,64,5,0,150,233,42,214,169,42,254,161,10,252,228,74,40,1,0,238,1,0,254,224,10,68,162,138,254,160,10,124,228,74,124,4,64,124,4,3,248,17,0,160,127,232,66,63,130,72,4,3,248,32,131,248,4,64,40,239,234,16,175,202,32,191,234,64,239,202,144,17,2,254,1,0,146,229,74,254,165,74,146,162,10,254,228,74,56,4,65,130,20,64,168,127,228,34,18,1,252,34,7,254,0,1,252,16,65,252,15,224,130,239,234,128,175,234,144,170,74,188,241,1,124,33,4,254,2,0,60,228,74,120,161,11,254,162,10,212,227,136,212,53,32,32,1,0,254], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+102417);
/* memory initializer */ allocate([225,10,124,162,11,254,164,142,244,178,32,248,7,0,168,4,128,232,228,138,238,165,43,234,168,170,234,234,169,36,26,162,82,2,0,252,226,11,252,162,10,72,175,10,36,239,232,148,21,32,32,8,1,206,234,170,202,190,170,140,190,170,170,238,170,172,14,128,8,2,0,32,239,138,32,191,202,32,164,138,252,224,9,252,21,67,254,31,206,136,175,138,136,175,138,142,191,142,8,157,193,84,8,129,84,4,129,254,228,138,64,171,235,132,171,202,172,235,202,132,9,64,136,1,0,254,225,10,124,164,74,124,164,74,124,228,74,254,2,128,68,1,0,254,225,10,254,170,42,72,167,10,36,239,234,84,9,32,48,15,224,0,231,202,68,167,202,0,175,234,170,233,42,186,9,32,150,15,224,16,119,197,68,87,197,68,87,197,32,119,196,164,1,128,102,15,238,146,175,234,146,170,170,198,168,42,254,226,9,20,20,162,122,2,0,248,232,138,248,168,138,248,164,11,252,232,137,36,47,160,32,4,64,170,225,10,40,173,106,56,164,138,176,225,202,100,1,128,224,3,193,192,234,74,88,175,235,34,175,202,64,235,202,164,17,128,102,8,142,80,191,234,0,164,138,132,160,15,252,149,65,84,63,224,0,34,1,78,254,170,138,168,234,170,170,171,238,232,169,10,17,34,38,18,0,188,228,11,60,171,74,44,175,234,68,237,73,126,0,64,24,19,224,148,224,138,62,186,170,190,170,170,190,234,170,166,20,2,62,2,0,168,239,138,32,191,202,32,175,138,168,239,136,36,31,192,4,68,133,232,169,45,92,94,72,72,238,224,64,228,227,248,32,131,248,10,65,244,234,74,254,164,171,250,181,171,250,228,169,250,4,160,86,2,128,254,226,138,254,170,170,254,170,170,254,228,74,124,4,64,124,15,224,40,239,234,170,175,234,0,167,202,0,239,234,84,9,32,48,0,160,8,239,234,168,171,170,170,175,170,164,239,73,172,18,162,114,29,193,84,245,74,136,181,74,34,164,11,252,232,138,80,2,1,220,1,0,146,239,234,0,174,234,170,174,234,170,238,234,170,10,161,118,8,142,78,191,10,136,168,234,244,170,78,174,138,65,36,26,162,82,1,0,254,228,74,40,175,234,146,175,234,146,235,170,170,11,160,134,1,0,254,234,43,20,164,170,210,178,74,92,225,10,146,9,32,254,4,33,244,228,138,226,160,74,232,170,42,226,234,74,68,30,128,16,0,3,254,224,138,168,164,235,242,164,11,84,255,66,68,36,164,146,2,1,254,245,10,138,191,202,138,175,138,136,239,138,168,18,64,96,10,160,108,239,234,68,162,138,254,161,10,124,225,10,254,2,128,198,7,128,72,231,138,72,191,234,160,174,234,170,238,170,180,30,160,50,2,128,36,231,234,72,175,235,72,167,234,72,231,234,64,10,160,170,2,0,254,237,106,186,175,234,186,173,106,16,239,234,40,4,64,130,2,0,216,242,106,248,165,10,168,173,138,136,255,201,36,23,65,12,4,0,124,232,139,124,165,74,124,165,74,254,228,74,124,4,64,124,4,64,40,239,234,214,171,170,254,160,10,124,228,74,124,4,64,124,14,160,44,234,138,74,171,75,2,167,138,72,231,138,132,4,129,254,4,64,254,229,74,254,160,10,124,164,74,254,232,42,186,10,160,186,4,129,254,228,138,236,181,170,72,167,202,0,239,234,16,9,65,50,1,192,16,239,234,146,169,138,242,169,234,176,237,169,44,20,162,24,2,0,252,228,139,254,168,74,252,168,74,252,226,10,20,20,162,120,1,0,254,234,170,124,162,138,254,162,138,84,235,170,16,15,224,0,0,64,224,234,234,160,174,170,132,174,234,164,250,234,164,14,64,4,15,238,16,175,234,146,165,74,0,175,234,16,239,234,170,10,160,134,1,1,254,244,42,238,170,171,68,171,75,2,239,138,32,10,129,100,15,206,16,175,234,146,164,74,144,191,202,144,239,202,144,15,224,128,1,0,254,229,74,254,170,170,124,162,138,254,226,138,106,10,64,50,0,7,252,64,68,4,64,68,4,64,68,4,64,68,4,127,192,0,127,196,4,94,68,36,68,69,244,68,68,68,84,68,132,127,196,4,0,7,252,72,68,132,127,196,164,82,68,196,82,70,20,127,196,4,0,7,252,68,68,164,81,70,140,74,68,196,73,68,116,64,71,252,0,7,252,80,69,244,107,69,52,101,68,148,85,68,36,127,196,4,0,7,252,68,68,164,85,70,76,95,68,20,74,68,68,66,71,252,127,196,68,127,196,132,95,70,148,79,68,148,79,68,148,75,71,252,127,196,4,95,68,68,95,68,148,127,196,4,95,69,20,95,71,252,127,196,68,95,68,68,95,68,68,127,197,20,95,69,20,83,71,252,127,196,68,95,68,68,127,196,164,95,68,68,127,196,68,68,71,252,255,232,2,191,170,170,255,233,18,159,40,162,154,170,210,136,175,254,33,2,16,39,239,144,171,202,144,175,234,146,185,162,20,33,2,16,32,130,8,34,143,190,170,138,200,171,234,136,185,66,20,34,66,66,32,130,8,39,239,202,172,138,252,173,74,212,189,66,72,41,67,34,16,1,28,125,66,84,24,130,84,68,35,248,36,130,72,37,128,64,32,130,126,248,138,188,169,10,254,170,75,190,36,66,84,40,66,12,33,2,124,249,10,252,169,10,254,168,10,252,189,66,84,34,130,68,32,2,62,250,42,190,170,170,190,170,170,174,186,162,62,34,34,62,33,66,18,251,234,232,170,138,190,170,138,190,186,130,40,35,226,32,35,226,34,251,234,160,171,234,168,171,42,190,186,130,94,36,130,190,35,194,36,251,202,164,175,234,170,175,235,128,39,194,36,33,130,230,32,130,62,249,74,254,170,42,190,170,42,190,184,130,126,32,130,8,33,66,54,249,74,190,169,74,190,168,138,190,184,130,126,33,66,34,32,226,120,250,170,156,175,234,156,170,170,254,186,162,62,34,162,62,4,4,68,127,192,0,127,129,16,18,1,56,40,130,80,67,9,206,32,2,62,32,42,130,168,42,190,170,10,160,186,46,162,10,32,30,32,2,126,34,74,164,170,74,254,170,74,164,186,78,68,4,64,132,32,130,8,39,234,136,168,138,254,170,42,162,185,78,136,3,64,194,32,2,62,34,10,160,170,170,164,170,74,170,186,14,160,3,224,0,32,2,62,32,74,148,170,74,190,168,202,148,186,78,68,9,64,8,32,2,124,36,74,196,173,74,212,173,74,212,186,142,170,4,160,134,3,135,192,8,15,252,17,2,8,196,96,64,36,130,72,63,128,0,4,4,68,127,192,64,10,3,24,196,96,32,63,128,16,2,0,64,4,4,68,127,192,0,63,130,8,42,130,72,42,165,42,64,104,2,4,4,68,127,192,0,63,130,72,36,131,248,32,34,2,31,224,0,32,130,8,32,138,190,168,138,136,171,234,162,186,44,162,3,224,0,4,4,68,127,192,0,255,224,8,124,132,72,124,128,8,2,128,16,4,4,68,127,192,128,127,129,0,36,7,252,4,2,80,84,128,128,32,2,62,34,170,170,171,234,170,170,170,190,184,140,136,0,128,8,32,130,8,32,138,190,170,170,170,171,234,170,186,172,170,3,224,0,21,1,72,39,231,192,162,66,20,32,192,64,36,130,72,36,131,248,33,2,16,35,234,162,172,42,186,170,170,170,187,172,130,0,160,4,4,4,68,127,193,0,99,196,164,74,69,164,107,64,168,18,2,32,32,2,62,34,42,190,170,138,168,171,234,168,186,172,170,3,96,34,32,2,124,34,74,152,170,74,210,171,138,144,191,204,144,1,0,16,32,2,62,34,42,190,170,42,186,170,170,186,186,46,162,2,160,36,32,194,112,33,10,254,169,10,168,172,106,168,186,140,168,4,128,136,33,2,16,35,234,194,171,170,170,171,170,170,187,174,130,0,160,4,34,2,60,34,74,200,171,202,148,175,234,148,187,206,144,1,0,48,34,66,126,34,74,128,175,234,210,169,10,188,185,76,164,4,64,140,32,130,8,35,234,136,170,170,156,171,234,136,185,206,170,0,128,8,4,4,68,127,193,0,18,143,196,53,37,144,82,73,126,16,33,0,33,2,16,47,234,40,165,74,254,181,74,124,181,78,124,1,32,14,4,4,68,127,192,0,127,196,68,127,196,68,95,69,20,95,71,252,34,66,24,34,74,144,175,234,160,175,202,164,187,206,164,2,64,44,33,2,126,32,10,188,170,74,188,168,10,188,184,78,126,0,128,24,33,2,8,35,234,162,169,74,162,168,10,190,184,142,136,3,224,0,32,2,254,40,42,254,168,138,170,171,234,136,186,174,170,11,225,0,33,66,62,33,74,190,170,42,136,171,234,136,185,206,170,0,128,8,32,2,254,34,138,254,170,170,254,162,10,254,180,78,40,1,0,238,4,4,68,127,192,40,127,228,32,126,69,20,124,133,74,73,105,66,4,4,68,127,192,0,63,130,72,63,130,72,63,128,128,85,73,242,4,4,68,127,192,128,63,130,72,63,130,72,63,128,160,50,172,30,4,4,68,127,192,64,27,14,14,56,130,168,58,130,168,56,130,152,36,66,40,47,234,16,175,234,32,175,234,64,183,206,144,17,0,254,33,2,84,33,10,254,165,74,146,162,10,254,178,78,36,1,128,102,36,66,40,47,234,0,164,74,136,178,171,204,168,79,42,30,224,34,32,2,62,34,170,190,170,10,190,171,42,190,189,46,94,9,33,30,33,130,224,34,11,254,170,139,170,170,203,170,162,107,112,202,193,32,68,71,252,4,15,254,0,1,248,16,135,254,64,36,242,73,36,246,33,2,146,37,74,170,172,74,190,170,74,188,186,78,60,2,64,44,33,2,254,34,138,254,164,74,124,164,75,124,225,0,254,1,0,16,33,2,146,37,74,254,165,74,146,165,74,174,171,79,94,4,64,132,32,162,236,34,138,170,164,74,186,160,10,124,180,78,124,2,128,254,4,7,120,165,45,106,189,237,106,189,237,106,181,168,66,255,224,0,4,4,68,127,194,128,51,225,212,64,135,190,144,167,236,42,132,94,4,4,68,127,193,0,125,225,8,125,228,82,85,175,250,40,132,84,8,1,0,32,4,64,8,1,128,40,4,128,8,0,128,8,0,128,18,1,16,32,4,252,146,2,32,99,202,36,34,66,68,37,66,136,16,1,120,36,132,72,151,130,72,100,138,120,36,130,72,47,194,0,34,2,32,71,233,66,24,34,122,100,170,122,36,162,122,32,162,4,20,65,40,32,4,124,145,2,124,97,10,16,47,226,16,33,2,16,18,1,36,36,132,112,146,66,254,98,42,124,42,66,24,34,66,194,17,1,16,39,196,16,149,66,56,97,10,254,35,130,84,41,34,16,17,1,16,37,228,80,149,2,254,97,10,16,37,226,80,43,3,30,17,2,146,69,73,16,47,230,130,171,162,170,42,162,186,40,162,132,17,2,124,68,73,124,36,70,124,160,2,254,33,2,124,33,2,254,16,226,240,69,41,44,36,6,124,169,3,254,33,2,84,39,194,4,40,134,168,190,130,30,93,76,52,93,68,148,92,132,136,95,68,34,40,133,200,149,3,222,87,77,212,73,71,212,80,133,212,101,68,226,95,9,94,63,5,80,223,228,164,95,71,68,95,69,68,95,69,12,0,0,128,16,6,0,4,0,128,16,6,32,4,0,128,48,12,0,8,8,128,80,2,0,80,9,0,48,5,0,144,1,0,80,2,0,18,9,32,82,2,120,82,137,40,50,133,40,146,129,74,84,162,134,0,9,124,81,2,16,81,9,16,63,229,16,145,1,16,81,2,16,9,8,136,80,2,62,82,9,32,50,5,32,146,1,64,84,2,128,16,9,124,80,66,36,82,73,62,48,37,2,151,161,2,80,162,4,16,9,124,81,66,20,81,73,124,50,69,36,146,65,36,87,226,0,17,9,16,82,66,66,87,233,42,50,133,40,146,161,74,84,98,128,16,9,124,85,66,84,87,201,84,53,69,124,145,1,16,81,2,16,18,9,32,103,194,68,88,73,116,53,69,116,148,193,64,84,34,62,18,137,40,111,226,42,87,233,168,63,229,42,146,161,46,84,130,136,17,9,20,81,2,254,85,9,84,63,69,84,148,129,74,89,98,34,17,9,40,84,66,130,83,201,0,55,229,16,145,1,36,87,226,2,17,9,8,87,226,66,80,137,126,48,133,72,146,129,8,82,130,16,32,139,200,68,138,136,42,194,234,122,170,202,40,130,136,170,133,144,41,10,146,73,68,216,169,34,146,108,234,16,39,194,16,175,228,0,23,233,66,103,226,0,87,233,66,55,229,66,151,225,66,84,162,68,34,34,194,164,164,74,174,162,74,110,171,90,36,162,66,164,164,68,17,9,40,84,66,130,87,201,16,63,229,16,149,65,146,85,2,32,17,9,40,84,66,130,87,201,0,50,5,20,148,65,40,87,226,0,18,5,16,47,194,0,87,137,0,55,133,0,151,129,72,84,130,120,33,10,32,68,74,254,36,66,162,99,202,68,42,130,16,162,132,70,17,9,124,81,2,40,87,233,4,55,69,84,151,65,4,81,66,8,32,10,248,74,138,248,42,130,248,98,10,252,39,2,168,178,100,32,32,2,254,170,164,170,175,226,32,99,202,68,42,130,16,162,4,192,18,5,76,36,69,108,148,65,68,55,197,40,146,161,74,84,98,128,17,9,40,84,66,130,87,201,16,63,229,16,151,193,68,84,66,124,34,2,16,175,228,0,164,66,68,106,170,16,47,226,16,161,4,16,45,10,80,69,234,210,42,130,136,109,202,106,36,162,72,182,132,144,36,234,74,68,170,238,36,162,74,110,234,170,42,162,234,161,36,38,33,2,16,175,228,84,169,34,124,100,74,124,36,66,124,160,4,254,47,138,168,79,138,168,47,134,0,191,194,160,41,66,168,172,100,128,47,226,146,175,228,146,175,226,68,103,202,68,39,194,68,164,68,76,47,234,146,73,42,254,40,2,190,106,42,190,42,34,190,170,37,62,47,202,40,65,10,254,34,162,216,97,10,254,35,130,84,169,36,16,33,10,124,66,138,254,36,70,124,164,66,124,33,2,254,161,4,16,34,10,248,69,11,252,40,134,248,168,130,248,37,2,82,169,37,14,32,10,254,72,138,216,42,230,242,170,66,164,47,66,164,172,165,18,33,10,254,82,170,196,47,227,68,103,202,68,39,194,16,165,68,178,40,138,232,82,234,82,62,70,164,190,226,164,62,226,164,170,68,100,39,202,16,79,234,16,47,230,214,171,162,254,33,2,254,160,4,170,36,74,254,68,74,238,42,162,238,99,10,72,47,227,72,167,228,64,32,130,8,59,228,136,74,139,40,20,130,126,32,132,8,128,128,8,124,133,78,125,37,116,124,129,20,254,99,138,85,169,36,16,129,48,33,2,40,36,71,146,87,197,68,183,193,68,39,196,74,133,64,98,4,1,248,97,1,254,226,33,252,18,65,252,18,65,252,8,129,4,8,0,128,31,129,8,40,132,144,5,0,32,5,1,136,96,96,0,32,2,0,60,4,64,72,10,0,32,2,0,32,2,128,48,2,0,64,4,124,112,137,16,18,4,126,66,164,42,68,166,146,66,160,4,65,4,16,119,233,16,17,4,84,69,68,84,71,197,16,97,36,14,66,4,32,119,233,64,11,196,0,71,132,8,80,166,10,64,96,2,64,4,12,119,9,16,1,4,16,79,228,16,81,6,16,71,192,0,64,196,112,113,9,16,17,4,254,65,4,16,82,134,40,68,64,130,66,4,32,119,233,64,9,4,16,71,228,18,81,38,34,66,160,68,33,2,16,122,4,164,151,224,2,32,2,60,42,67,36,34,64,60,65,4,32,111,234,130,8,36,186,74,164,170,75,165,130,104,164,132,65,4,124,113,9,254,72,36,124,64,132,254,65,5,16,101,4,32,65,4,40,116,73,130,71,196,16,79,228,16,85,70,146,69,0,32,64,4,124,116,73,124,4,68,124,64,4,74,70,197,72,102,164,70,65,4,254,115,137,84,73,36,124,68,68,124,84,70,124,64,0,254,65,4,86,121,41,214,41,36,254,65,4,254,68,69,40,97,4,238,66,132,254,114,137,124,68,68,124,68,68,124,81,6,254,66,128,68,68,68,254,113,9,124,2,5,254,68,4,124,73,69,124,98,68,254,66,132,254,114,137,56,1,4,124,69,68,124,65,5,124,97,4,254,74,69,228,74,135,254,145,164,234,74,164,234,90,70,228,74,160,178,78,228,170,110,234,136,10,164,102,68,132,252,68,133,254,100,132,132,65,4,254,113,8,124,69,68,254,74,164,124,82,134,254,70,64,178,4,0,32,63,194,0,36,2,68,36,130,80,38,4,66,68,40,62,4,0,32,63,194,0,47,130,32,34,3,252,37,4,82,73,41,14,4,0,32,63,194,32,63,194,32,47,130,136,37,4,32,69,9,140,2,3,254,40,2,248,48,130,232,42,130,232,40,132,154,72,40,126,2,3,254,32,2,72,40,131,190,40,130,156,42,164,136,72,136,136,2,3,254,36,66,40,47,226,16,39,194,16,79,228,16,129,0,16,2,3,254,36,131,254,36,130,120,32,2,252,72,68,252,136,129,6,4,7,252,66,7,254,74,133,252,106,164,248,74,132,250,66,40,30,2,3,254,32,2,16,37,98,146,45,98,146,47,228,40,68,72,130,4,3,252,34,2,252,41,66,252,42,66,252,37,5,254,65,8,16,2,3,254,34,2,252,34,67,254,36,130,252,53,100,84,66,136,196,2,7,254,73,5,208,73,231,228,81,69,212,84,137,84,45,68,34,1,3,254,36,66,254,36,66,124,33,2,254,41,36,254,65,8,254,2,7,254,64,5,252,82,69,252,82,69,252,74,133,116,98,40,248,2,7,254,80,5,222,100,165,246,85,69,254,85,69,254,85,74,52,4,7,254,66,7,254,85,69,116,80,69,252,64,7,254,74,137,100,2,7,254,74,133,124,124,133,124,84,132,254,72,68,252,72,72,140,16,1,0,24,5,64,80,9,0,16,1,0,16,1,0,16,1,0,32,2,0,47,203,36,170,74,36,162,66,36,34,66,68,37,66,136,32,130,8,48,138,254,160,138,8,36,130,40,32,130,8,34,130,16,33,194,112,49,10,144,161,10,254,161,2,16,33,2,16,33,2,16,32,2,124,49,10,144,161,10,254,161,2,40,34,130,74,36,162,134,33,2,16,47,235,16,161,10,252,164,66,40,33,2,40,36,66,130,32,2,126,52,10,194,166,74,84,36,130,84,38,34,64,39,226,0,33,2,16,33,11,124,173,74,84,165,66,124,33,2,16,33,2,16,34,2,32,55,202,80,169,10,16,47,226,16,33,2,16,33,2,16,36,2,64,55,202,128,167,138,0,47,130,8,32,162,10,32,98,2,36,2,72,37,11,96,164,11,254,37,2,80,36,130,84,38,34,64,33,3,16,42,138,68,168,42,124,36,66,84,36,130,66,36,34,62,32,130,40,34,139,68,164,74,146,34,2,32,36,66,254,32,34,0,33,2,8,32,3,126,169,10,24,161,66,18,33,2,16,33,2,16,32,2,124,49,74,148,161,74,124,34,66,36,34,66,254,32,2,0,33,2,16,49,10,254,161,10,16,39,194,68,36,66,68,39,194,68,33,2,20,177,42,144,175,234,56,35,130,84,37,66,146,33,2,16,32,2,124,49,10,84,163,138,16,47,226,16,33,2,16,33,2,16,32,2,124,52,74,196,167,202,68,36,66,124,36,66,0,47,226,0,33,2,16,55,202,212,165,74,84,47,226,16,34,130,40,36,66,130,34,2,32,55,234,80,169,10,30,33,2,16,33,226,16,33,2,16,32,2,124,36,75,124,172,10,82,165,66,88,41,34,146,48,226,0,34,130,40,47,235,42,175,234,168,47,226,42,34,162,78,36,130,136,32,2,252,34,75,36,165,74,136,32,2,124,36,66,68,39,194,68,39,194,68,50,138,16,162,138,198,161,2,124,33,2,254,33,2,16,33,2,16,50,10,68,175,234,66,32,2,124,36,66,68,39,194,68,32,130,104,48,138,30,174,170,74,36,162,170,46,162,18,34,162,68,32,2,254,40,11,148,169,42,144,47,226,144,42,131,40,36,66,130,32,34,250,40,171,170,170,170,170,42,162,170,34,34,82,36,162,134,33,2,84,53,74,124,160,10,124,32,66,124,36,2,66,35,226,0,34,2,32,55,234,130,167,170,74,39,162,74,39,162,2,32,162,4,36,2,124,52,74,168,161,10,40,44,98,0,39,194,68,36,66,124,32,2,254,41,43,16,175,202,32,37,2,124,33,2,254,33,2,16,33,2,254,49,10,254,168,42,124,32,130,16,47,226,16,37,2,32,33,2,16,55,234,144,167,202,84,39,194,16,35,130,84,41,34,16,34,2,174,58,170,170,170,74,42,33,2,16,39,194,16,47,226,0,32,2,124,37,75,124,173,74,124,161,2,124,33,2,16,47,226,0,32,2,254,57,42,146,175,234,146,43,162,214,41,34,146,47,226,130,39,130,72,55,138,0,175,202,164,170,66,252,40,2,130,39,226,0,36,66,40,55,202,148,167,202,80,39,226,50,37,162,148,33,2,16,33,2,32,36,75,126,170,170,68,42,34,60,36,66,168,33,2,238,32,2,254,56,138,190,168,138,170,41,194,190,40,130,148,42,34,254,33,2,124,49,10,254,164,74,40,39,194,16,47,226,16,33,2,16,34,130,40,46,235,40,162,138,238,34,130,40,46,226,40,34,130,40,33,2,146,53,74,16,175,234,130,43,162,170,43,162,130,40,162,132,47,226,130,58,170,254,169,42,254,42,34,162,43,162,130,40,162,132,47,226,146,57,42,186,169,42,254,40,34,186,42,162,186,40,35,6,36,3,126,42,170,42,165,42,170,36,66,16,32,130,162,42,163,24,34,2,16,47,235,0,164,74,68,42,162,16,47,226,16,33,2,16,39,194,68,55,202,68,167,202,0,47,226,170,42,162,170,63,226,0,33,2,124,181,74,124,161,10,254,32,2,124,36,66,84,34,130,68,46,226,170,46,235,0,167,202,0,47,226,32,35,194,4,34,130,16,32,2,254,42,170,254,178,10,16,175,226,32,35,194,68,37,66,136,33,2,146,47,235,0,175,234,16,47,226,170,42,162,162,40,162,132,34,130,200,36,171,92,174,138,72,46,131,88,36,130,84,38,34,64,39,226,128,39,203,68,175,202,68,39,194,32,39,194,164,33,130,102,33,2,124,49,10,254,162,10,72,47,2,36,47,226,84,41,34,48,40,130,80,47,203,80,175,202,84,191,226,84,47,194,216,53,66,80,65,5,254,81,7,124,209,69,254,85,69,124,85,69,124,101,68,76,39,194,68,39,203,68,167,202,16,47,226,68,39,194,16,37,66,178,34,131,64,175,235,72,167,234,72,39,226,72,39,226,64,42,162,170,33,2,124,50,138,254,165,74,124,37,66,124,33,2,124,33,2,254,34,130,254,50,138,124,170,170,8,47,226,18,37,2,94,43,3,30,33,2,254,48,10,254,168,42,186,42,162,254,32,2,254,37,66,178,36,66,254,52,74,254,170,170,254,32,3,254,52,162,120,36,130,120,63,128,64,8,15,254,17,2,8,68,104,64,38,130,84,85,64,128,113,5,126,98,5,124,90,70,60,70,65,152,232,98,168,73,65,128,64,2,252,0,68,4,64,69,244,64,68,4,64,68,20,64,128,0,64,2,124,0,69,228,64,69,228,64,68,4,127,68,4,65,68,8,64,2,252,4,69,244,68,69,244,68,69,244,69,68,116,68,68,76,64,2,252,0,68,68,95,68,68,74,69,68,105,68,244,64,68,12,64,2,252,0,68,68,95,68,36,74,68,68,74,69,20,64,68,12,79,194,4,136,72,68,191,72,4,156,73,84,149,74,52,128,72,12,159,228,2,18,40,34,143,171,34,149,41,138,144,42,250,128,40,6,64,2,252,0,68,228,74,68,228,64,69,244,81,69,244,64,68,12,159,228,2,63,170,74,191,170,74,174,171,90,164,171,250,128,40,6,79,226,130,78,37,34,127,37,82,95,37,82,95,36,74,67,164,6,79,194,68,95,69,20,95,69,20,95,69,84,82,69,148,80,68,12,79,226,42,130,107,254,130,43,170,170,171,178,129,168,170,180,40,6,79,194,4,14,68,164,78,68,164,95,69,20,95,69,20,95,68,12,159,196,4,22,74,36,182,74,36,190,73,68,149,73,84,163,72,12,95,192,4,131,75,196,149,75,244,161,73,228,146,72,196,179,72,12,95,192,20,190,74,68,191,74,36,177,73,228,146,73,228,146,73,236,95,226,18,145,47,170,164,106,18,184,170,162,169,44,138,168,41,6,47,192,4,95,69,20,95,69,20,95,68,100,69,71,252,74,69,20,95,192,36,187,74,172,145,74,236,196,75,244,132,72,164,145,72,12,79,194,68,31,68,68,127,68,164,95,68,4,95,69,84,127,196,4,47,192,68,95,68,68,95,69,20,95,69,20,127,196,164,81,68,12,95,224,34,170,41,58,252,169,2,213,47,210,145,41,42,164,168,6,95,224,34,186,40,190,254,170,170,186,170,210,249,40,170,140,168,134,4,0,64,68,2,64,36,0,64,4,1,64,36,4,64,4,0,64,17,1,16,17,1,240,1,0,16,127,1,16,17,1,16,33,4,16,18,133,36,82,5,62,126,1,36,242,133,16,83,37,74,152,97,2,64,2,0,0,8,0,72,1,0,32,14,0,32,2,0,32,0,0,68,2,64,15,232,128,80,0,252,32,140,48,68,4,130,72,32,126,32,1,124,4,68,68,36,64,196,23,198,64,36,34,66,35,224,0,64,2,252,8,72,164,73,64,132,36,140,80,66,4,80,72,129,6,66,2,32,159,196,32,2,2,248,66,12,32,95,196,32,66,0,32,64,2,252,0,8,0,95,224,80,37,4,80,201,36,146,80,226,0,66,2,32,130,5,254,2,2,112,74,141,36,98,36,32,66,0,32,128,5,254,2,8,32,75,193,164,42,76,252,64,68,4,65,64,8,66,2,32,31,232,32,82,65,36,63,196,32,194,36,34,65,224,0,0,4,248,40,136,136,72,129,248,40,140,136,72,132,248,72,128,0,64,2,252,136,68,132,8,66,244,72,76,132,72,68,252,0,0,0,66,2,16,128,5,254,2,2,48,34,140,36,66,4,32,66,0,32,66,2,16,0,9,254,72,128,136,37,12,80,66,4,80,72,129,6,66,2,16,31,232,0,71,129,72,36,140,72,72,164,138,80,162,6,73,2,80,1,8,254,65,33,18,34,172,38,68,36,66,72,161,4,157,5,80,21,9,190,85,35,82,85,45,146,82,37,42,20,65,0,72,130,136,136,133,254,8,130,136,47,140,136,72,132,248,72,128,0,66,2,40,2,72,32,95,193,112,39,12,168,74,133,36,66,0,32,68,130,68,132,5,254,9,2,148,73,140,144,83,37,82,32,224,0,34,1,60,130,4,252,8,66,132,79,204,128,72,5,0,80,2,0,66,2,32,143,132,168,10,130,168,127,236,32,69,4,136,80,66,2,128,5,252,21,73,84,85,67,84,213,69,156,80,69,252,16,64,0,72,2,128,15,201,32,74,130,184,78,141,168,75,132,162,72,32,126,66,2,32,5,8,136,84,64,32,47,140,8,73,4,96,66,0,16,68,2,156,17,73,84,85,65,84,61,77,84,69,196,144,73,1,16,65,130,224,8,8,144,73,0,254,33,12,84,73,37,18,69,0,32,66,2,16,31,232,32,68,128,240,34,12,64,72,132,252,64,64,0,65,2,146,5,72,16,71,193,16,33,12,254,65,4,16,65,0,16,66,2,16,15,232,130,64,0,64,20,130,80,198,4,66,68,32,62,156,68,68,4,73,200,80,131,8,93,12,84,69,36,94,84,32,128,64,2,252,8,72,252,73,1,144,47,236,144,73,4,170,76,96,130,64,2,248,129,4,32,5,2,136,80,76,248,66,4,32,95,192,0,64,2,252,0,8,252,72,64,252,40,76,252,72,68,0,95,224,0,66,2,32,31,232,64,79,193,68,7,194,68,199,196,68,69,64,72,128,37,242,4,40,74,78,160,170,42,173,74,68,164,130,16,162,4,65,2,16,15,232,16,69,65,56,33,12,254,65,4,40,68,64,130,66,2,60,2,8,248,72,129,168,42,140,168,74,132,80,72,129,4,128,5,252,18,73,36,95,193,36,50,77,84,88,197,4,95,193,4,128,5,252,16,73,4,87,65,84,53,69,116,208,69,4,95,193,4,65,2,80,135,196,144,1,2,254,65,12,56,69,68,146,65,0,16,65,2,32,15,200,132,72,65,252,40,76,132,79,196,132,72,64,252,68,2,64,8,9,252,85,65,84,53,77,84,85,69,84,127,224,0,66,2,80,8,137,6,79,128,0,47,196,32,197,4,136,95,192,4,133,4,80,21,64,216,133,4,208,21,130,84,201,4,146,81,34,14,34,1,32,7,232,130,71,161,74,39,174,74,39,162,2,32,160,4,68,2,124,12,137,48,68,129,166,47,140,32,74,4,252,66,0,32,136,36,74,0,169,250,66,160,170,42,172,74,74,37,34,64,160,4,17,8,144,65,224,40,152,132,136,27,226,136,202,132,200,72,132,8,79,194,4,7,200,4,79,193,8,47,236,72,66,132,8,66,128,16,68,2,64,4,233,234,74,162,170,74,172,170,68,164,174,17,2,0,66,2,32,159,196,32,31,195,36,95,204,32,71,4,168,82,64,32,128,5,252,2,8,248,68,129,254,32,12,248,72,132,136,79,128,136,130,4,32,31,200,32,74,130,112,95,236,112,74,133,36,98,32,32,95,227,34,18,41,250,82,33,114,50,45,250,82,165,58,82,33,254,0,4,248,40,136,136,79,129,32,34,12,188,74,4,160,23,226,0,79,194,132,15,200,0,79,193,132,47,204,132,79,196,132,73,64,136,130,5,36,31,200,32,69,2,136,84,108,32,79,132,8,65,0,32,64,194,240,8,8,128,79,193,144,41,12,144,127,228,0,72,129,4,72,130,112,8,136,32,95,224,80,47,197,84,197,68,92,65,0,16,136,4,248,17,10,32,95,193,36,50,69,252,194,4,82,73,35,14,66,2,16,31,233,2,71,129,0,47,204,80,69,4,146,73,33,14,66,2,34,15,200,40,95,192,32,39,204,196,87,198,68,71,192,68,132,132,72,31,232,72,71,129,72,39,140,72,95,228,0,72,129,4,72,66,152,9,11,208,73,225,212,43,76,148,74,68,164,12,64,132,72,2,148,9,75,212,74,33,200,42,140,144,73,4,164,75,224,130,65,2,124,1,9,254,72,32,84,41,12,80,95,228,40,68,64,130,128,5,252,4,8,160,83,32,212,45,141,116,69,69,146,69,0,32,128,5,252,18,73,252,82,65,252,32,5,254,200,132,136,80,134,8,79,130,136,15,136,32,95,193,36,63,205,36,95,196,32,66,32,30,66,2,80,8,137,4,79,130,32,95,204,32,82,68,168,95,192,0,0,11,190,106,162,170,186,166,170,43,227,160,106,10,162,41,229,128,68,2,32,159,197,4,15,130,0,95,204,32,74,133,36,10,0,64,132,4,32,31,201,4,66,2,248,74,140,248,74,132,248,66,0,32,66,2,16,15,200,132,64,1,120,36,140,120,68,4,124,68,64,124,79,130,8,15,136,8,95,224,32,43,44,108,74,133,36,42,32,64,128,37,250,16,169,250,82,33,34,31,165,170,170,162,186,66,32,38,130,132,168,31,200,168,75,129,128,47,204,32,95,196,112,74,129,36,128,5,252,5,9,252,85,67,84,95,204,32,95,196,32,127,224,0,128,5,252,2,8,64,95,193,84,55,77,84,87,69,84,95,193,4,6,139,136,72,128,170,190,196,136,28,133,168,233,68,148,74,32,192,66,2,172,18,73,172,82,65,252,34,13,252,72,132,80,71,3,142,68,2,248,8,136,248,72,128,248,32,12,248,66,4,248,66,1,252,8,8,128,84,226,42,156,164,138,62,164,138,220,70,170,72,161,146,69,2,136,16,72,248,68,130,168,81,12,0,95,197,84,85,67,254,136,68,72,63,232,0,92,65,84,61,77,84,93,69,68,85,65,72,130,5,252,16,72,248,64,0,248,40,140,248,72,132,248,64,1,252,159,197,4,31,201,0,87,193,32,52,77,124,81,5,124,33,4,254,64,2,252,9,72,252,72,1,188,42,76,188,74,68,188,82,66,60,73,2,158,29,40,164,75,225,234,42,172,190,94,4,162,73,224,128,130,5,252,2,8,248,68,1,254,40,141,116,98,37,252,74,129,36,66,2,248,2,9,252,68,0,144,47,132,8,223,197,84,85,67,254,79,194,72,7,136,72,71,129,78,47,142,8,46,226,170,36,64,170,68,130,252,4,136,36,95,224,72,40,77,74,79,196,72,72,129,8,133,5,252,5,9,252,80,64,248,34,12,248,66,4,40,95,192,0,66,67,254,130,5,252,18,67,252,210,68,8,95,228,136,68,128,24,128,5,252,133,5,252,21,67,252,66,13,252,71,4,168,82,64,32,79,226,128,139,196,128,15,226,170,74,76,178,72,69,126,82,66,12,79,130,136,15,136,136,79,130,0,93,204,68,85,68,204,85,64,204,95,227,2,31,169,66,90,97,90,59,173,86,89,37,82,82,33,254,72,130,238,21,72,0,65,130,224,67,140,224,67,197,224,66,32,30,68,2,248,8,136,248,72,128,248,40,140,248,66,69,254,68,129,132,136,133,4,5,8,32,77,131,6,79,140,32,95,196,168,71,3,254,130,5,254,17,9,124,81,65,254,49,77,124,81,5,124,36,68,124,65,2,252,4,137,254,82,32,16,47,204,64,71,196,68,73,65,8,128,5,252,16,72,248,72,129,248,40,140,248,66,5,252,72,129,4,136,133,252,8,139,254,66,3,252,82,77,252,82,69,252,72,129,4,68,130,252,4,137,254,82,32,72,47,12,36,79,228,84,73,32,48,8,139,254,72,129,252,2,75,254,66,65,252,82,73,116,26,194,36,8,139,222,72,129,220,170,164,136,34,13,254,68,132,72,67,1,206,133,5,252,5,9,252,85,65,252,53,77,252,72,132,248,72,128,248,131,196,32,31,233,34,95,129,34,17,229,240,149,66,254,33,4,48,159,197,36,31,201,36,95,192,64,40,141,240,68,69,252,74,129,100,130,4,248,10,136,248,66,1,252,50,77,252,66,4,20,84,162,120,136,132,136,21,2,30,158,68,52,17,66,168,20,132,20,189,64,34,37,9,80,75,161,148,175,228,144,27,194,228,11,196,164,171,193,36,37,9,124,73,1,168,47,232,132,91,194,164,11,196,132,169,65,8,130,4,16,31,233,80,95,193,84,63,205,72,86,165,76,86,162,70,161,5,16,1,231,160,36,10,62,120,162,136,106,234,168,42,133,222,156,132,72,9,3,222,151,69,212,21,65,212,86,139,212,5,64,98,8,75,228,73,225,196,128,69,212,52,205,196,64,69,68,72,67,236,148,37,92,63,1,80,157,229,84,29,65,84,63,68,20,149,66,36,8,139,222,72,129,220,42,169,252,80,65,252,16,69,252,144,65,12,8,139,42,81,193,8,123,225,34,187,229,98,19,229,34,146,161,36,66,2,248,5,11,254,74,128,248,42,140,248,66,4,248,66,1,252,95,195,4,31,201,16,87,193,16,30,229,34,164,66,238,68,64,204,8,139,238,73,35,228,170,230,170,62,160,138,92,170,164,72,64,138,128,133,212,21,9,126,93,65,94,61,77,94,85,69,212,65,224,16,133,5,252,21,73,252,85,65,252,32,12,248,72,132,248,69,3,254,8,8,248,81,3,254,148,69,162,17,5,124,144,1,124,36,68,124,2,11,254,80,65,116,149,69,252,40,132,248,200,132,248,64,3,254,2,11,254,104,130,80,175,198,84,63,230,84,191,194,216,85,72,80,143,196,32,63,234,34,90,192,0,63,196,32,223,197,84,85,65,12,138,164,236,18,137,254,116,67,254,81,13,124,81,5,254,82,129,68,68,2,248,8,136,248,72,131,252,82,77,252,82,71,254,72,129,8,130,5,252,8,136,248,64,1,252,48,68,248,196,69,168,69,69,178,157,197,84,12,201,84,70,0,144,47,205,144,111,196,144,79,192,128,16,139,148,82,35,128,171,103,146,45,163,182,85,107,154,17,33,54,73,194,212,9,65,200,37,73,162,101,1,220,5,5,220,133,3,254,130,5,254,8,8,252,64,2,78,62,162,170,106,234,74,42,164,16,130,4,216,48,105,252,85,65,252,32,13,252,85,69,252,85,65,12,146,68,168,31,192,168,146,68,248,10,128,248,74,139,254,8,129,4,157,229,68,28,137,94,93,32,146,63,37,90,157,162,170,73,65,162,159,196,32,63,226,170,20,11,252,85,65,220,73,75,220,9,64,172,0,0,64,2,0,0,127,228,2,128,0,0,0,0,0,0,0,0,4,0,32,127,196,132,136,3,240,9,0,144,17,33,18,32,228,0,8,0,64,127,196,4,0,7,252,8,1,0,63,133,8,144,129,248,8,0,64,127,196,132,4,1,16,82,69,34,84,169,136,47,132,0,4,7,252,72,67,248,16,3,248,80,137,248,16,129,248,16,129,24,4,15,254,128,35,248,32,2,240,32,3,248,42,34,148,76,136,134,4,15,254,136,37,84,159,32,0,63,130,72,63,130,72,63,130,72,4,15,254,145,35,248,17,15,254,16,131,244,73,32,248,0,131,216,4,15,254,145,35,248,17,15,254,34,133,196,132,35,248,4,0,192,4,15,254,144,37,124,81,7,124,18,79,126,80,5,60,146,65,60,4,15,254,136,39,252,17,11,250,81,73,242,4,2,80,84,128,128,4,15,254,145,35,248,17,15,254,36,133,244,138,33,148,108,128,132,4,15,254,128,39,252,74,79,254,32,131,248,10,33,148,104,128,198,4,15,254,145,35,252,17,15,254,49,133,244,132,34,120,36,5,252,4,15,254,145,35,248,17,15,254,36,133,244,128,33,240,17,1,240,0,4,0,32,0,0,224,2,0,32,2,0,32,5,0,143,224,0,79,226,8,36,128,126,225,130,40,36,130,136,34,133,16,143,224,0,4,4,124,41,0,16,225,2,254,33,2,16,33,5,16,143,224,0,128,5,252,16,77,116,85,69,84,87,69,4,81,69,8,191,224,0,68,2,64,7,206,160,35,194,32,35,194,32,34,2,32,95,232,0,136,4,252,18,0,40,235,130,232,59,130,168,40,34,126,80,8,254,4,4,64,39,192,132,225,2,84,41,35,18,37,2,32,95,232,0,136,4,128,30,236,170,74,164,170,74,165,42,106,228,64,191,224,0,71,194,8,33,0,108,232,35,124,33,2,16,47,226,0,95,232,0,130,4,72,8,64,252,224,66,120,36,130,72,39,130,0,95,232,0,128,196,240,8,0,254,200,4,188,74,69,36,99,196,0,191,224,0,136,4,248,20,128,48,204,135,38,79,132,32,74,4,252,66,11,254,2,75,254,66,1,252,210,69,252,82,69,252,82,69,44,64,11,254,63,232,0,93,193,84,213,69,220,85,69,84,85,68,0,191,224,0,130,132,36,95,224,32,202,68,104,75,5,40,74,68,64,191,224,0,9,36,84,33,0,124,228,66,124,36,66,124,36,66,84,84,136,254,148,132,136,20,160,92,206,133,72,101,69,84,74,36,0,191,224,0,68,2,136,31,192,136,212,70,122,72,133,80,66,4,80,72,139,254,130,4,248,2,13,252,72,133,36,79,132,32,95,196,0,191,224,0,129,132,224,2,3,252,10,141,36,68,5,252,68,132,48,108,137,254,130,5,252,16,64,248,200,132,248,72,4,252,72,68,252,64,11,254,143,132,8,79,128,8,223,228,32,74,132,112,74,133,36,70,11,254,2,9,36,95,192,0,223,228,32,95,197,84,85,69,20,112,137,254,130,4,248,8,128,248,232,130,248,32,2,248,34,2,248,82,8,254,8,139,254,69,1,252,213,69,156,80,69,252,80,69,252,64,11,254,29,201,68,93,193,0,221,197,4,93,69,8,81,69,34,191,224,0,136,133,200,9,237,228,73,71,244,80,133,200,101,68,228,160,1,254,133,4,248,5,1,252,194,4,248,74,132,248,74,133,252,72,139,254,15,136,136,79,128,136,207,132,0,93,197,84,76,197,84,100,73,254,155,197,20,21,65,172,196,5,252,82,69,252,82,69,252,64,11,254,143,196,132,15,192,132,207,196,80,72,133,252,105,4,254,73,11,254,18,72,168,95,192,168,210,68,136,93,229,72,106,132,190,80,139,254,131,196,32,31,237,34,95,133,64,90,69,88,105,100,80,98,9,254,17,233,234,101,33,246,213,69,254,85,69,254,85,69,84,98,75,254,136,133,222,21,34,94,217,36,158,116,196,204,117,68,102,104,9,254,130,7,254,40,161,4,197,5,252,68,5,180,70,133,164,70,11,254,137,37,36,9,33,254,212,165,50,84,165,254,82,69,180,82,43,254,0,0,0,127,128,8,0,131,248,0,128,8,127,128,8,0,0,0,32,143,190,32,143,190,32,143,190,32,135,252,0,67,252,0,71,252,8,0,240,17,1,240,2,7,252,8,3,72,15,3,104,10,103,96,8,0,240,9,1,240,2,15,254,72,132,234,84,198,232,68,166,166,0,3,248,32,131,248,36,2,64,63,130,72,36,132,74,72,169,6,0,7,188,74,68,164,122,69,60,80,5,36,84,36,128,132,0,62,127,196,4,127,196,80,73,5,124,73,5,184,106,132,144,138,128,196,127,228,2,127,228,0,93,229,68,89,197,84,85,197,132,81,73,8,63,194,4,63,194,32,63,194,32,61,194,68,72,133,222,136,129,152,63,194,4,63,194,72,42,227,104,47,227,136,42,228,168,77,232,128,127,228,2,127,229,84,111,228,180,85,39,16,87,229,36,81,137,100,63,194,4,63,194,80,47,130,32,53,66,136,93,228,136,189,225,8,0,7,124,16,129,16,114,132,196,64,39,124,17,1,16,95,226,0,32,15,184,74,131,16,202,195,248,0,131,248,32,3,252,0,64,24,0,14,254,36,130,72,231,136,72,135,142,72,36,226,248,160,132,8,81,5,28,82,79,200,87,239,234,82,175,254,86,5,226,146,33,30,238,226,66,36,46,238,138,136,168,238,226,162,42,34,162,174,164,4,213,100,226,223,104,228,213,100,66,255,225,16,127,196,164,95,68,76,4,0,64,36,130,72,36,131,248,4,128,64,4,0,64,4,0,64,34,2,32,35,207,68,84,69,132,82,69,20,32,69,4,73,72,8,32,2,120,32,143,8,87,133,72,84,5,64,36,69,68,75,200,0,32,2,124,34,143,40,82,133,254,82,133,40,34,133,72,132,128,136,32,2,124,33,15,16,95,229,16,81,5,40,34,133,74,132,160,134,32,2,126,36,15,100,85,69,72,84,133,84,38,69,64,79,232,0,32,130,72,36,175,74,86,197,72,84,133,72,36,165,106,148,96,0,33,2,16,34,143,68,89,37,8,80,5,124,32,69,8,72,136,16,33,2,16,33,207,112,85,5,80,87,229,18,35,37,90,73,72,16,41,2,80,33,15,124,81,69,36,83,69,44,34,69,68,149,64,136,32,2,124,33,79,20,81,69,124,82,69,36,34,69,36,79,232,0,47,194,4,34,143,16,95,229,18,81,69,16,33,5,16,141,0,32,32,130,72,36,143,104,85,133,72,84,133,72,38,133,84,137,64,34,32,2,60,34,79,164,75,196,164,74,69,36,35,197,0,79,232,0,33,2,16,33,15,124,85,69,84,87,197,84,37,69,84,79,200,68,64,4,238,74,174,170,170,171,254,170,164,170,74,170,170,170,161,118,4,7,252,32,129,16,255,224,128,127,193,16,57,0,96,25,134,4,32,2,124,34,143,40,82,133,170,86,197,40,34,133,40,79,232,0,33,2,30,47,79,24,81,37,110,80,5,126,34,133,42,84,168,134,33,2,80,39,207,144,81,5,254,81,5,56,37,69,146,145,0,16,4,15,254,17,5,20,145,32,64,255,224,144,17,0,224,25,134,4,34,2,16,39,207,0,84,69,130,82,133,40,33,5,40,68,72,130,36,66,40,32,15,124,82,133,40,82,133,254,34,133,40,138,128,72,33,2,8,39,239,66,80,197,112,81,5,30,39,5,18,137,32,14,32,2,124,37,79,124,85,69,124,81,5,124,33,5,16,143,224,0,33,2,124,37,79,124,85,69,124,80,5,254,34,5,60,136,64,12,32,2,124,36,79,68,87,197,16,95,229,146,41,37,170,136,32,134,72,4,94,64,46,146,175,234,146,171,170,214,73,36,146,168,160,132,66,2,168,138,69,32,67,137,192,8,15,254,17,1,32,12,7,56,36,66,40,39,207,20,87,197,80,87,229,50,37,37,90,137,65,16,39,226,66,39,239,64,84,229,120,84,229,120,36,229,120,136,161,6,78,228,162,74,46,206,170,170,170,170,170,206,72,36,130,168,160,132,33,2,254,33,15,124,81,5,254,84,69,124,36,69,124,140,64,76,33,2,16,47,239,16,87,197,16,95,229,40,38,164,164,147,64,34,33,2,254,33,15,124,81,69,254,81,69,124,33,5,94,133,0,190,35,194,36,35,207,36,83,197,0,87,229,66,39,229,66,135,224,66,34,2,124,37,79,124,85,69,124,82,5,80,47,229,16,137,0,16,36], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+112657);
/* memory initializer */ allocate([66,40,39,207,84,87,197,84,87,197,16,47,229,16,137,0,16,32,15,188,42,65,24,42,100,64,63,130,72,42,130,72,42,130,24,79,132,136,79,142,136,175,138,0,191,203,84,85,69,84,191,224,0,32,194,112,37,79,40,87,197,16,95,229,32,35,197,84,72,136,20,33,2,126,32,15,60,82,69,60,80,5,126,36,37,60,72,136,24,121,1,16,253,227,84,82,139,20,6,39,252,9,0,96,25,134,4,34,130,254,34,143,124,82,133,254,85,69,124,37,69,254,132,64,76,34,130,254,34,143,124,84,69,124,84,69,124,33,5,254,82,136,68,33,2,126,36,47,106,85,37,106,87,229,72,38,165,76,78,168,70,32,194,112,37,47,44,87,229,146,87,197,32,35,197,84,72,136,54,33,2,8,39,239,74,83,5,32,83,197,40,39,229,0,74,72,66,33,2,84,39,207,16,95,229,16,87,197,84,39,197,20,79,232,2,17,7,208,19,239,212,56,133,84,63,226,32,63,226,72,67,8,204,39,226,16,37,207,80,95,229,64,87,197,64,39,229,2,138,161,38,65,4,254,69,78,56,175,234,0,175,234,130,75,170,170,171,160,254,47,226,40,47,239,170,95,229,0,87,197,0,47,229,84,137,32,48,37,66,56,47,239,130,87,197,68,87,197,16,47,229,146,137,96,16,39,194,84,39,207,84,87,197,36,87,133,16,39,197,84,137,32,48,33,2,124,34,143,254,84,69,124,84,69,124,33,5,126,73,8,16,33,2,254,33,15,254,84,69,124,82,133,254,32,5,124,84,72,124,33,2,254,36,79,116,85,69,124,80,2,124,84,69,124,132,64,254,124,132,126,125,68,62,124,138,92,60,128,136,255,225,16,14,7,28,0,15,94,164,175,254,170,174,190,74,143,190,84,165,170,81,43,38,65,4,254,74,142,254,170,202,250,170,138,144,74,74,200,17,34,62,47,226,16,47,239,146,85,69,46,95,165,46,39,165,174,146,160,46,0,7,240,17,1,28,32,68,84,132,129,80,36,132,68,20,0,128,4,1,80,36,132,68,16,15,254,32,132,68,149,34,72,20,0,128,3,135,192,36,129,48,63,128,16,2,15,254,4,0,64,20,0,128,32,15,188,74,67,24,202,99,240,2,0,64,127,192,64,20,0,128,17,15,254,41,71,56,41,71,188,0,3,240,2,15,254,4,0,192,0,3,240,2,0,64,4,192,112,28,6,64,4,0,64,20,0,128,0,3,240,2,0,64,36,1,64,12,0,64,7,0,76,20,0,128,2,15,160,11,225,66,35,163,170,226,162,58,34,98,32,162,36,30,0,14,120,36,138,72,167,143,72,20,131,120,212,129,72,95,226,0,0,14,254,42,170,170,170,168,170,234,162,174,108,42,130,47,230,0,226,66,68,172,75,94,164,79,68,21,67,76,212,65,68,85,66,72,2,15,60,20,133,16,83,199,132,8,67,188,200,64,132,43,193,0,247,193,36,82,133,16,82,133,86,123,128,144,239,192,144,41,1,16,16,7,188,42,65,24,42,103,248,16,129,252,0,71,228,1,64,8,1,15,16,18,5,36,87,231,130,11,195,164,202,64,164,43,193,0,2,14,60,46,138,20,166,207,0,31,227,40,210,129,42,84,98,128,2,142,74,44,203,88,164,175,70,17,3,254,209,1,16,81,2,16,4,78,40,39,234,40,162,143,40,31,227,40,210,129,40,84,130,136,0,14,254,32,10,238,138,174,170,42,166,238,170,162,170,170,164,170,2,79,36,23,229,36,83,199,164,11,194,164,207,224,128,42,65,66,7,206,84,39,202,84,167,207,16,31,227,56,213,65,146,81,2,16,2,142,64,47,235,72,164,143,126,20,131,126,212,129,72,87,226,64,1,14,36,39,234,16,175,239,36,20,163,48,208,193,48,80,226,112,117,197,80,111,229,16,101,68,152,78,3,248,8,128,252,0,71,236,250,5,62,37,79,136,105,74,34,127,128,136,15,192,4,126,64,24,17,7,208,17,239,212,34,131,212,68,35,248,16,129,252,0,71,236,2,15,94,20,165,106,85,103,128,11,227,170,203,224,170,43,225,0,1,14,124,36,74,124,164,10,118,245,33,122,213,97,90,89,34,54,239,226,40,175,234,170,175,239,0,23,195,0,223,225,84,89,34,48,1,14,126,37,42,90,166,175,82,23,225,16,244,65,170,82,162,24,239,194,132,175,202,136,143,206,144,46,230,162,170,66,254,170,69,108,2,174,236,34,170,230,165,79,124,21,67,124,210,129,254,82,130,68,1,14,254,37,74,124,162,143,124,18,131,254,211,65,104,90,98,48,0,1,0,16,2,64,120,1,0,32,7,128,0,1,192,96,0,0,16,2,124,73,15,16,33,4,126,249,0,16,25,14,16,5,0,32,32,130,8,64,137,126,224,130,72,66,143,40,0,131,136,194,128,16,34,2,32,67,229,64,227,194,4,64,143,144,2,33,162,225,224,0,34,2,32,66,9,120,226,130,104,66,143,90,4,163,74,200,97,2,33,2,8,75,239,32,34,4,32,250,0,32,26,14,64,4,0,128,32,2,60,72,15,0,39,228,16,249,0,32,26,142,68,15,224,2,73,4,144,153,46,148,45,132,144,249,0,144,59,44,210,8,224,0,39,194,4,66,137,16,224,132,254,129,47,20,1,3,16,197,0,32,34,66,36,66,73,126,226,66,36,67,207,36,2,67,36,195,192,0,33,66,20,69,73,84,239,226,84,69,79,84,5,195,64,199,224,0,34,4,40,66,74,254,228,4,124,133,79,84,4,131,84,201,65,34,68,4,120,148,142,144,39,196,4,240,64,124,48,76,4,7,192,4,66,132,40,143,238,42,79,232,168,239,224,42,50,172,78,4,128,136,33,2,16,69,73,84,231,194,16,69,79,84,5,67,84,199,192,0,33,4,16,146,14,68,47,228,2,247,192,68,52,76,68,7,192,0,1,4,254,66,137,68,235,162,0,71,207,32,3,195,4,193,64,8,36,2,158,66,9,64,237,226,68,68,79,68,4,67,68,197,64,72,36,4,124,148,142,176,68,200,146,231,192,16,53,12,126,1,0,16,32,2,254,65,9,124,229,66,124,69,79,124,1,3,80,194,0,222,41,34,84,65,9,124,228,66,124,68,79,124,4,67,68,197,64,72,36,66,40,71,201,20,231,194,80,71,239,18,3,35,90,201,64,16,33,2,124,65,10,254,228,68,162,131,206,68,10,131,16,194,128,196,33,2,124,66,137,68,239,226,4,71,79,84,7,67,4,193,64,8,34,130,40,78,232,40,226,132,238,130,142,40,14,227,40,194,128,40,65,4,146,149,78,16,47,228,130,251,160,170,59,172,130,8,160,132,39,194,68,71,201,68,231,194,0,68,143,74,6,195,72,198,160,70,64,68,120,145,14,254,37,68,254,245,64,84,15,227,16,199,192,0,32,194,240,69,73,40,239,226,130,71,207,36,2,131,16,198,129,134,68,68,116,133,106,164,229,68,142,128,14,124,4,67,68,199,192,0,33,4,146,69,74,254,194,5,254,132,78,250,4,131,88,196,32,62,34,2,16,71,233,66,227,194,36,67,207,32,3,227,34,195,224,34,37,66,84,74,137,84,229,66,0,71,207,84,7,195,84,199,192,68,34,130,254,66,137,56,225,2,124,69,79,124,1,3,126,193,0,16,34,2,46,66,169,122,226,226,122,74,175,46,2,163,42,194,224,32,39,194,68,71,201,68,231,194,0,79,239,16,5,195,80,203,225,0,64,133,200,148,203,90,222,165,72,156,173,68,20,141,208,2,0,64,33,2,124,69,73,124,225,2,254,64,15,124,5,67,84,194,128,198,64,4,124,149,78,124,37,68,124,240,0,32,49,76,162,10,161,24,71,228,136,155,238,170,43,228,170,251,224,200,58,140,144,10,224,192,68,4,92,168,77,254,106,8,190,234,128,200,43,236,136,9,64,162,72,68,72,145,238,18,45,228,80,245,224,82,53,236,160,9,225,0,47,194,132,79,201,144,239,196,138,140,110,124,4,67,124,196,64,124,32,2,254,66,138,170,230,196,254,128,14,124,4,67,124,196,64,124,33,2,124,65,9,124,228,66,124,68,79,124,4,66,254,194,128,68,79,228,128,155,206,128,47,228,168,251,96,132,59,236,132,18,66,12,33,2,254,64,9,124,228,66,124,64,14,254,8,34,186,202,160,186,1,4,254,66,136,146,234,164,254,129,14,254,9,35,186,200,160,132,72,68,72,159,238,72,72,73,2,223,193,84,53,77,84,63,224,0,72,132,80,95,232,80,239,196,84,159,238,84,15,194,216,213,64,80,33,2,8,71,233,66,227,132,32,131,206,40,15,226,0,194,128,68,79,228,40,175,238,170,79,232,0,239,224,0,47,236,84,9,32,48,71,196,68,151,206,68,79,232,170,239,224,0,47,204,68,3,129,198,79,228,146,175,238,146,79,232,36,231,128,16,47,236,84,9,32,48,78,228,170,166,110,170,65,8,108,233,32,104,33,12,100,0,128,112,69,68,168,165,78,124,69,72,124,229,64,124,49,12,254,5,64,146,72,4,190,156,142,190,94,40,42,222,161,106,52,141,212,1,64,34,66,5,252,69,10,138,223,196,138,143,142,136,15,130,168,210,64,96,36,66,40,79,233,214,235,164,254,128,14,124,4,67,124,196,64,124,32,2,254,69,73,124,229,68,254,128,14,124,5,67,124,197,64,254,65,5,124,133,74,124,217,4,254,138,142,188,10,66,188,200,1,126,39,194,68,71,201,0,238,228,170,142,238,16,15,227,56,197,64,146,79,228,170,175,238,0,95,232,68,231,192,16,50,172,100,11,32,32,84,133,254,164,137,254,228,132,234,149,108,252,8,66,164,197,1,140,2,0,64,4,0,136,17,3,224,4,0,144,16,131,252,0,64,0,36,133,82,101,194,72,117,192,40,255,229,80,125,69,74,125,96,34,0,0,0,18,65,36,36,132,144,36,129,36,18,64,0,0,0,0,18,66,72,73,2,72,18,67,248,36,130,72,63,130,72,36,131,248,36,132,144,36,131,240,33,3,240,0,7,248,68,135,248,64,35,254,0,15,190,32,130,8,32,143,136,32,130,8,56,142,8,66,128,16,0,15,120,36,130,72,36,135,72,36,130,72,56,174,138,16,162,6,1,7,16,47,226,16,39,199,16,47,226,18,49,44,26,1,64,16,0,143,40,34,66,68,40,39,124,34,66,36,52,78,68,9,65,8,2,15,144,32,2,254,36,79,68,34,130,40,57,14,40,68,64,130,0,15,124,33,2,16,33,7,124,33,2,24,57,78,16,79,224,0,0,15,126,32,66,4,39,71,84,37,66,116,57,78,4,65,64,8,2,143,36,34,2,254,34,143,170,34,194,72,53,174,170,72,97,0,1,15,144,33,2,30,33,15,144,39,194,68,60,78,68,71,192,68,2,143,76,44,163,72,36,231,120,36,130,72,60,174,74,4,96,66,1,15,32,39,194,68,36,79,68,39,194,68,60,78,68,71,192,68,0,15,126,36,34,126,36,143,72,39,226,72,60,174,74,70,96,66,8,14,128,72,229,234,74,174,170,74,164,170,114,173,46,42,4,64,0,14,254,68,132,120,68,142,120,68,132,78,111,140,8,0,128,8,2,143,168,34,130,124,34,143,168,34,130,254,48,14,40,68,64,130,0,7,126,33,2,124,116,66,84,37,66,84,57,14,40,4,64,130,15,14,46,74,164,170,79,206,42,70,164,170,114,204,40,10,128,72,4,14,156,80,4,64,235,229,136,72,132,136,104,140,136,10,128,144,5,14,80,85,68,216,229,4,216,85,68,80,105,44,146,16,226,0,4,14,120,72,133,80,66,14,88,88,100,248,104,140,136,15,128,136,32,3,252,68,65,80,36,132,196,0,7,252,4,3,248,5,15,254,0,14,254,72,36,32,79,206,32,69,4,124,97,12,254,1,0,16,0,142,8,87,228,144,226,133,188,72,132,190,104,140,136,23,226,0,4,142,72,79,196,72,71,142,72,71,132,72,95,230,0,196,128,132,4,142,252,68,132,32,79,142,168,74,133,252,98,12,80,8,129,4,1,15,16,39,194,40,244,66,254,32,66,116,53,78,116,64,64,12,1,14,30,65,4,254,73,46,156,79,36,142,107,141,42,18,162,70,15,142,136,79,132,136,239,132,0,73,4,212,105,140,146,12,224,0,1,15,82,37,66,144,34,143,68,33,2,82,57,78,40,68,64,130,2,14,16,79,228,130,71,206,0,79,228,16,101,76,146,17,32,48,1,14,254,72,36,64,230,228,170,74,165,110,100,140,138,8,161,6,0,14,254,72,36,40,68,78,16,79,228,56,101,76,146,1,0,16,15,206,132,79,196,144,73,14,252,73,4,144,119,205,68,36,68,124,0,14,254,72,36,186,64,14,124,68,68,124,116,76,124,4,64,124,3,14,72,91,100,0,78,46,170,78,164,170,110,172,162,10,160,164,0,206,240,69,68,254,66,14,254,68,4,252,106,77,24,34,128,198,29,207,68,84,69,220,80,15,220,81,69,212,113,77,8,17,65,34,2,174,84,74,132,84,66,174,64,79,228,170,105,44,170,15,224,130,0,206,240,69,69,254,82,46,252,68,4,124,106,76,152,18,64,66,1,14,254,73,4,188,73,78,254,73,68,188,105,13,124,20,66,124,2,143,126,34,130,56,33,15,124,37,66,124,49,14,124,65,0,254,2,143,124,34,130,254,33,15,124,37,66,124,53,78,124,66,128,68,14,238,42,74,164,170,68,78,170,66,4,254,100,76,40,1,0,238,1,14,146,79,228,40,71,238,200,87,228,72,103,236,72,7,224,64,2,14,252,74,68,180,77,78,164,77,68,252,98,13,84,20,162,56,17,14,158,66,5,224,73,238,138,78,132,174,106,141,40,19,130,110,1,7,124,34,130,254,36,71,124,36,66,124,49,6,254,1,0,16,2,142,170,70,196,254,66,142,254,65,4,124,97,12,254,2,128,198,4,14,110,68,164,228,234,164,64,89,36,84,111,236,56,5,64,146,1,206,16,79,228,146,239,132,146,75,230,176,213,161,44,36,160,24,1,1,208,245,197,100,93,68,136,237,68,162,73,198,212,217,192,20,113,5,124,114,132,124,121,10,184,57,7,252,4,3,248,5,7,252,233,69,222,74,69,222,232,69,108,65,100,248,106,140,168,5,1,136,95,71,28,93,71,92,85,79,254,128,35,248,4,1,240,4,71,254,121,4,144,127,196,144,123,192,16,255,225,18,93,165,20,81,11,254,71,196,68,247,196,68,231,196,0,247,197,84,117,68,84,79,228,0,64,100,120,241,4,74,226,68,16,246,101,66,118,100,66,71,228,66,32,2,0,47,239,40,34,135,40,106,138,40,34,162,74,36,98,128,33,2,16,35,239,162,36,39,18,104,170,10,32,34,2,32,162,4,32,2,124,32,79,132,32,71,124,108,10,64,36,34,66,35,226,0,32,2,252,36,79,100,37,71,68,98,138,16,162,130,40,36,66,130,32,2,124,32,79,164,34,71,36,107,234,2,39,162,2,32,162,4,32,2,126,36,15,72,36,135,126,108,170,74,165,34,146,42,163,68,32,130,72,36,143,74,38,199,72,108,138,72,165,162,106,36,98,0,33,2,16,33,15,84,37,39,82,105,10,20,32,130,48,44,2,0,4,0,64,255,225,80,36,140,70,63,130,8,63,130,8,63,130,8,33,2,16,33,15,126,37,39,82,110,170,66,164,34,66,36,162,68,32,2,124,36,79,84,37,71,84,101,74,16,162,162,42,36,162,134,34,2,32,35,239,72,32,135,8,107,234,8,160,130,8,32,130,8,34,2,36,34,143,48,34,7,126,107,10,40,162,66,42,35,2,32,32,2,72,36,143,72,36,135,72,100,138,168,169,67,36,36,34,0,8,3,240,41,2,80,34,3,252,4,71,244,14,129,80,36,128,64,34,2,16,47,239,32,34,7,60,106,74,36,162,66,68,37,66,136,32,2,124,37,79,84,37,71,124,108,10,64,164,34,66,35,226,0,32,2,124,32,79,168,33,7,126,105,42,20,33,2,16,37,2,32,4,7,252,14,3,88,196,97,240,0,7,252,21,2,72,84,64,128,34,66,36,39,239,164,32,7,126,105,42,18,161,162,20,33,2,16,16,1,62,16,135,200,17,3,144,51,229,82,81,41,18,17,225,18,34,130,36,34,15,126,34,135,42,106,170,44,164,130,90,42,163,6,32,2,252,41,15,144,43,199,164,108,138,152,170,66,194,47,226,0,32,2,124,33,15,84,35,135,16,111,234,16,161,2,16,33,2,16,33,2,16,33,239,16,39,231,66,108,42,126,164,2,64,36,2,128,16,1,62,18,167,170,19,227,170,54,165,62,80,137,8,16,129,8,32,2,60,34,79,188,32,7,126,105,10,60,160,66,4,33,66,8,16,129,8,16,135,190,18,163,170,55,229,42,82,169,42,19,225,0,32,2,124,36,79,68,36,71,68,103,202,0,162,130,68,40,34,0,32,194,112,36,15,64,39,231,72,108,138,88,164,194,74,40,130,8,32,98,120,36,15,126,36,7,94,109,42,90,165,66,144,41,35,14,33,2,16,34,143,68,41,39,8,104,10,124,32,66,40,33,2,8,34,2,32,39,207,132,39,71,84,109,74,84,167,66,4,33,66,8,32,194,112,36,143,72,36,135,126,108,138,74,164,162,102,37,34,8,32,194,112,36,15,80,37,7,126,105,10,84,169,34,18,37,2,32,33,2,8,39,239,66,32,7,36,106,138,48,162,34,34,33,226,0,32,2,252,36,79,40,33,7,40,109,106,16,167,194,16,33,2,254,33,2,18,39,207,20,47,231,16,107,234,80,169,226,2,32,162,4,33,2,18,39,175,20,47,231,16,99,74,88,169,34,18,32,226,0,32,2,124,34,143,40,34,134,170,118,202,40,162,130,40,47,226,0,34,2,62,46,143,18,34,167,70,96,10,254,162,130,42,36,162,134,32,2,124,33,15,160,36,135,124,105,74,16,167,194,16,47,226,0,33,2,30,33,15,124,36,71,84,109,74,84,165,66,40,36,66,130,33,2,16,37,79,56,33,7,126,106,138,40,164,162,74,40,98,0,33,2,84,37,79,124,32,7,124,104,74,124,164,2,66,35,226,0,32,2,230,34,207,36,36,71,78,98,74,164,164,226,160,49,226,0,32,194,112,33,15,16,47,231,16,105,10,124,164,66,68,39,194,68,32,2,32,36,207,68,36,71,68,102,202,68,164,66,68,39,194,68,34,130,74,44,207,88,38,166,70,113,10,254,161,2,16,33,2,16,34,2,78,40,15,32,37,230,196,116,74,68,164,66,68,37,66,72,33,2,40,36,79,130,39,199,0,104,10,254,162,2,68,47,226,66,32,131,188,72,138,168,19,226,72,68,143,254,14,3,88,196,96,64,8,0,64,127,192,160,42,132,164,4,15,254,14,3,88,196,96,64,36,129,80,127,192,128,255,226,8,68,75,250,14,1,80,100,128,64,33,2,8,39,239,66,33,7,16,111,234,36,162,66,24,35,66,194,32,2,238,34,47,34,42,166,102,118,106,170,162,34,34,42,162,68,32,130,8,251,226,8,113,202,170,32,129,240,17,1,146,37,36,14,33,2,80,39,207,144,33,6,254,112,10,124,164,66,68,39,194,68,32,98,248,37,79,40,39,199,8,105,10,254,161,2,16,37,2,32,34,2,60,36,143,16,39,199,84,111,202,84,167,194,84,37,66,140,34,2,16,39,207,0,36,71,40,111,234,16,167,194,16,33,2,16,40,130,72,32,207,42,42,167,72,96,170,68,168,130,16,38,2,0,32,2,124,32,79,124,32,71,124,105,10,84,165,130,144,34,130,198,33,2,16,39,175,148,39,231,16,171,194,100,43,194,36,35,194,36,32,143,190,32,135,28,170,162,8,17,2,8,223,96,144,21,2,32,33,2,124,33,15,126,32,39,40,101,138,40,175,226,8,33,66,34,16,207,176,34,5,60,122,129,40,122,129,64,255,225,80,100,192,64,33,2,30,33,15,124,36,71,124,108,74,124,161,2,254,33,2,16,32,2,254,42,175,170,47,231,32,107,202,68,42,130,16,38,2,128,32,66,120,33,15,254,37,71,84,111,234,84,37,66,254,33,2,124,34,2,16,47,239,0,39,199,68,103,202,16,165,66,146,37,2,32,33,2,254,32,15,124,36,71,124,104,10,124,160,130,254,33,2,48,33,2,60,45,79,126,41,70,188,117,10,124,181,2,254,37,2,190,33,2,124,33,79,126,33,71,124,105,10,90,163,66,84,41,34,48,32,2,126,36,47,126,36,135,72,103,234,72,171,226,162,50,34,62,33,2,124,241,2,124,114,6,254,164,74,186,49,2,124,34,130,68,34,66,126,34,79,188,34,71,60,106,74,254,165,66,98,36,2,126,33,2,16,47,239,16,47,231,170,111,234,146,175,226,146,41,34,134,33,2,254,35,143,84,41,39,124,100,74,124,164,66,124,32,2,254,33,2,254,241,2,254,41,39,214,107,170,254,163,130,84,41,34,16,34,130,168,42,239,180,34,39,124,108,74,84,165,66,16,34,162,198,39,194,68,39,207,0,47,231,68,103,202,68,167,194,70,47,194,4,32,2,124,36,79,68,39,199,0,110,234,170,170,162,170,46,226,0,35,195,160,83,207,228,19,194,160,71,192,64,127,193,80,100,192,64,34,130,200,36,175,92,46,135,72,110,139,84,165,66,84,38,66,66,34,2,220,41,79,214,42,6,220,121,74,212,185,66,136,41,66,162,32,66,136,37,239,18,45,230,80,117,234,82,165,226,64,43,227,0,34,2,16,47,239,68,34,134,254,113,10,124,161,2,84,41,34,48,40,2,94,40,47,186,42,167,186,104,42,186,170,162,186,40,162,132,36,66,40,39,207,144,39,199,16,111,234,32,165,194,72,43,226,0,42,34,84,32,15,126,34,135,68,105,42,124,161,2,254,33,2,16,33,2,254,40,47,124,32,7,124,108,74,124,164,66,124,32,2,254,39,226,74,39,239,64,37,231,82,109,234,82,165,226,82,41,226,18,47,194,70,39,175,170,41,38,46,112,10,254,170,162,170,63,226,0,33,2,124,33,15,126,34,7,254,100,74,186,161,2,254,37,66,146,39,226,64,37,79,118,37,71,118,109,74,118,165,66,84,39,226,0,39,194,68,39,207,68,39,199,0,110,234,34,170,162,102,42,162,102,34,130,126,44,143,126,36,135,126,100,138,126,161,2,254,33,2,16,34,34,114,37,47,114,37,231,114,101,170,246,163,34,82,41,162,52,33,2,124,36,79,124,36,71,124,98,10,254,164,66,146,39,194,16,33,2,254,32,15,124,36,71,254,164,66,124,34,162,100,43,34,32,33,2,254,32,15,124,36,71,124,96,10,254,168,34,186,42,162,186,83,207,164,35,202,164,251,194,36,68,192,64,127,193,80,36,132,68,33,2,254,40,175,112,36,7,124,108,138,72,175,226,0,36,66,130,33,2,254,40,47,84,41,39,40,100,74,130,167,194,68,39,194,68,32,130,138,37,239,12,35,230,208,118,234,74,164,226,106,36,226,0,47,226,130,47,239,170,41,199,190,106,42,190,170,34,190,50,34,38,34,130,254,34,143,184,33,7,124,109,74,124,161,2,124,33,2,254,33,2,254,37,79,56,47,230,0,119,234,66,167,162,74,36,162,126,32,162,8,47,239,136,42,135,186,106,170,252,170,163,118,42,162,96,39,194,16,47,239,146,37,71,124,96,10,126,161,2,60,32,66,24,41,34,84,47,239,130,39,199,68,103,202,16,167,194,16,47,226,0,81,34,124,81,131,254,86,73,188,82,66,60,4,7,252,21,2,72,72,68,244,82,206,68,95,199,84,223,101,92,95,69,84,85,70,52,32,66,196,36,143,238,43,167,234,106,170,234,171,67,228,34,66,42,72,132,138,92,142,190,94,134,170,206,68,174,75,37,160,87,230,0,41,15,222,43,71,212,213,71,72,21,64,162,255,225,80,100,192,64,4,7,252,21,7,252,72,65,248,48,133,248,4,7,252,21,2,72,64,5,254,90,143,72,94,237,74,117,5,244,84,69,68,84,166,146,34,130,36,39,239,200,39,231,72,103,234,72,167,226,64,42,162,170,33,2,108,41,47,124,34,135,84,103,202,16,175,226,146,43,162,134,36,2,124,40,143,124,37,71,124,101,74,254,164,66,124,36,66,124,36,66,254,34,143,254,42,167,174,108,42,254,160,66,254,36,66,44,47,226,130,47,239,170,41,199,170,106,138,190,172,130,190,48,130,8,39,226,20,32,143,126,34,167,72,111,234,170,175,226,170,43,162,134,37,2,92,41,79,200,39,231,144,170,130,218,34,194,202,34,130,16,47,226,16,47,239,146,37,71,0,103,202,84,167,194,84,39,194,68,39,194,136,39,239,84,38,167,92,108,10,92,164,2,156,41,67,28,33,2,254,36,79,116,37,71,124,96,10,254,161,2,84,41,34,48,120,132,190,121,68,62,120,138,156,56,128,72,255,225,80,100,192,64,33,2,254,44,175,108,42,167,68,107,170,0,175,226,84,41,34,48,136,133,12,248,162,8,251,234,136,216,136,136,249,72,148,249,72,162,17,7,222,19,79,212,32,131,148,74,41,136,4,79,254,9,7,14,0,15,188,34,66,36,60,100,128,75,203,36,18,130,16,66,136,198,0,15,188,34,66,36,59,196,164,74,75,60,18,66,36,66,72,126,2,15,190,36,2,60,56,132,144,75,235,42,20,162,18,66,168,68,0,143,148,34,34,8,57,4,164,72,139,18,22,66,8,67,8,192,0,15,124,68,68,124,112,5,124,84,75,84,37,66,84,66,136,68,1,15,144,34,130,68,56,36,188,72,11,84,21,66,40,64,8,254,0,207,112,37,67,168,79,196,136,177,1,254,33,4,16,133,0,32,4,79,168,32,2,124,53,69,124,85,75,124,33,2,254,65,8,16,0,15,120,33,3,32,82,229,226,170,162,234,66,68,170,132,1,254,1,15,8,39,226,66,51,197,32,83,234,40,47,228,0,66,72,66,1,15,124,33,2,254,120,37,124,80,11,124,36,66,124,66,136,254,32,2,0,251,228,18,161,47,50,37,35,146,225,34,34,34,162,68,32,2,126,244,4,92,165,79,84,37,67,92,229,2,82,40,226,0,33,2,16,241,4,254,161,15,16,39,195,68,228,66,68,39,194,0,32,2,126,248,68,4,167,79,84,37,67,212,231,66,4,33,66,8,32,130,14,248,132,62,162,47,162,35,227,160,226,2,32,36,2,128,32,2,124,244,68,68,164,79,68,39,195,0,226,130,68,40,34,0,33,2,80,253,4,124,169,15,16,39,227,144,226,130,40,36,66,130,33,2,16,250,132,68,169,47,32,36,131,146,226,66,8,35,2,192,32,194,112,249,4,84,163,143,144,39,227,144,225,2,16,37,2,32,32,194,112,252,4,80,165,15,126,33,3,212,229,34,146,37,2,32,32,2,124,250,68,36,162,79,84,40,131,60,226,66,36,35,194,36,32,130,10,248,132,126,160,143,120,34,131,168,227,162,234,32,98,2,32,2,124,249,4,40,167,207,20,33,3,124,225,2,16,47,226,0,33,2,16,242,132,68,171,175,16,33,3,188,225,2,16,39,226,0,34,2,60,244,68,168,161,143,36,36,35,60,226,66,36,35,194,0,32,2,252,250,4,232,170,143,232,42,131,184,238,162,42,34,98,32,33,7,60,33,15,188,33,5,168,127,193,64,63,128,64,255,224,64,32,2,254,248,36,170,175,239,146,40,163,254,234,34,186,40,34,134,32,2,238,240,36,170,164,79,170,32,3,238,226,162,170,36,66,170,37,66,84,250,132,84,165,79,0,39,195,84,231,194,84,39,194,0,33,2,124,249,4,124,162,15,254,36,67,186,225,2,254,34,130,68,33,2,254,250,132,254,170,175,254,42,131,170,234,194,186,50,98,0,33,2,146,245,68,254,165,79,146,36,67,110,234,67,84,37,226,132,4,7,252,4,3,248,36,131,248,36,143,254,4,3,248,32,131,248,9,0,136,11,199,192,8,0,190,252,128,80,6,1,162,97,160,6,33,5,20,73,40,30,127,4,146,73,69,148,64,132,154,58,96,66,127,192,64,63,130,8,63,130,8,63,128,68,7,231,200,3,35,206,17,71,210,17,7,222,71,7,208,69,71,216,17,47,234,20,97,2,61,2,84,61,32,16,255,226,80,61,66,88,61,34,106,124,96,66,73,79,210,73,7,158,79,7,148,73,79,216,80,166,138,65,103,162,125,68,82,125,4,94,127,1,20,81,71,212,145,167,202,17,103,226,249,68,146,125,5,94,167,5,80,1,71,216,85,37,106,254,96,2,254,130,138,170,134,206,43,143,234,0,167,204,68,135,218,70,103,194,1,75,254,161,10,248,234,130,250,233,170,252,170,138,250,33,100,34,0,15,124,130,9,32,211,138,72,166,141,88,132,143,74,6,160,70,47,130,32,82,8,184,36,128,104,245,129,72,85,130,106,20,160,6,39,207,160,2,5,56,36,143,200,6,135,88,84,165,106,116,165,6,16,71,216,16,71,216,68,39,204,43,15,254,16,1,240,37,35,46,87,207,160,170,15,184,170,143,200,6,135,88,84,167,106,84,167,6,121,4,252,122,132,124,121,10,184,57,15,254,16,1,240,37,35,174,4,0,64,7,192,64,4,7,248,16,128,144,6,0,144,48,140,6,16,1,0,127,1,16,33,34,18,64,235,248,32,131,248,32,131,248,0,3,248,32,131,248,32,131,248,8,7,240,9,1,18,17,34,14,0,7,124,81,5,16,81,7,254,81,5,16,81,7,16,1,0,16,63,130,8,63,130,8,63,128,0,63,128,64,255,224,160,17,6,12,63,130,8,63,130,8,63,128,0,63,128,0,255,224,128,16,131,252,63,130,8,63,130,8,63,128,64,255,225,80,36,140,70,4,0,64,31,193,4,31,193,4,31,192,0,63,226,32,34,2,80,72,137,6,0,199,112,84,5,64,87,231,72,84,133,72,84,135,72,8,129,8,2,7,32,83,197,68,88,71,68,82,69,12,81,71,100,1,64,8,63,130,8,63,130,8,63,128,64,36,66,72,74,1,16,32,140,6,63,130,8,63,130,8,63,129,0,63,196,68,164,66,164,63,64,8,33,3,208,69,138,148,17,2,254,64,11,248,32,131,248,32,131,248,63,130,8,63,130,8,63,128,128,115,196,164,90,70,180,18,130,32,63,130,8,63,130,8,63,128,64,127,192,0,17,0,160,255,224,0,32,1,28,1,71,52,21,207,148,57,69,92,84,9,32,81,226,0,0,14,252,168,74,252,168,14,164,170,138,176,234,33,34,17,226,0,4,67,232,5,15,254,13,3,100,195,195,248,32,131,248,32,131,248,63,130,8,63,130,8,63,128,36,127,228,40,122,132,146,106,169,70,2,135,74,92,197,88,86,167,70,81,5,254,81,7,16,1,0,16,63,130,8,63,130,8,63,136,164,74,130,176,82,137,36,34,36,30,63,130,8,63,130,8,63,128,64,127,196,132,255,225,16,14,7,28,0,7,126,84,37,16,87,199,32,85,5,124,81,7,126,1,0,16,1,78,18,175,234,16,175,238,146,175,234,146,175,238,146,9,32,134,2,14,80,168,139,38,161,14,248,161,10,32,175,142,136,8,128,248,63,130,8,63,130,8,63,135,160,170,129,36,111,235,248,32,131,248,1,14,254,168,42,124,160,14,124,164,74,124,164,78,124,0,0,254,30,175,44,172,170,68,168,79,122,161,10,254,161,14,40,4,64,130,0,206,240,165,74,254,169,46,124,162,10,60,166,78,152,2,128,198,15,238,130,167,202,68,167,206,68,167,202,16,175,238,0,4,64,130,8,142,72,191,234,170,174,174,10,174,170,36,164,78,234,4,160,210,0,238,240,161,10,254,173,110,186,169,42,254,161,14,254,0,0,170,14,238,170,166,106,170,167,206,200,183,234,72,167,238,72,7,224,64,2,142,254,161,10,254,161,14,254,164,170,254,180,206,234,3,96,98,63,130,8,63,130,72,255,228,164,123,193,16,255,225,148,42,140,198,4,7,252,4,1,16,255,225,16,63,130,8,36,130,72,27,6,8,41,15,252,41,2,240,32,3,248,0,3,248,36,130,72,27,6,8,0,15,188,138,72,164,170,74,188,169,138,152,33,133,42,74,168,70,0,143,136,137,8,164,171,234,130,171,202,164,34,69,36,75,200,36,34,15,120,34,131,106,229,162,134,127,162,8,36,130,72,27,6,8,17,37,212,81,133,210,224,227,248,32,130,72,36,130,72,27,6,8,2,15,144,143,234,144,170,74,248,169,10,36,36,133,20,138,32,64,0,15,188,138,72,188,170,138,168,170,74,210,32,133,16,136,128,0,0,15,190,138,10,172,170,10,190,171,74,182,37,69,84,73,40,24,4,7,252,36,143,254,21,2,72,64,99,248,32,130,72,10,7,24,1,79,144,143,234,144,173,74,184,169,138,180,37,69,18,77,8,32,4,7,252,36,133,84,255,232,2,63,130,8,36,130,72,27,6,8,1,15,180,141,136,144,170,138,196,169,10,82,41,69,16,74,136,70,0,175,190,136,136,190,170,170,190,170,170,4,39,229,36,73,72,12,32,2,124,60,66,84,37,71,84,85,69,16,82,135,42,4,160,134,32,10,190,170,47,162,2,175,170,10,175,152,129,136,170,178,172,70,0,7,190,18,37,98,86,165,170,178,161,24,29,143,42,2,160,70,16,7,190,18,47,226,70,163,42,146,165,8,252,131,26,74,168,70,16,2,158,69,43,178,1,39,82,85,39,90,84,135,90,86,164,198,40,7,222,41,47,242,17,39,210,85,167,200,85,143,218,70,164,198,80,15,190,82,39,34,34,175,170,170,175,136,33,143,154,34,175,198,28,1,30,125,37,82,121,37,210,65,165,74,118,133,74,151,163,166,18,130,32,111,202,32,37,65,76,31,2,64,255,224,64,4,0,64,119,193,68,119,196,16,119,193,84,103,225,80,63,196,64,255,224,64,18,1,32,82,71,168,147,1,32,26,7,32,18,33,34,17,225,0,16,97,120,81,7,156,87,9,16,25,231,112,17,33,18,16,225,0,16,129,8,80,135,190,80,137,72,27,231,34,18,33,34,19,225,34,16,1,124,81,7,188,81,73,126,24,7,60,18,65,36,19,193,0,16,129,40,83,231,200,144,129,126,24,7,62,18,33,34,19,225,34,17,1,124,81,7,168,151,225,4,23,65,212,119,65,4,17,65,8,19,193,36,83,199,164,147,193,36,27,199,36,23,225,0,18,65,66,33,2,60,57,74,254,249,74,188,49,14,252,41,3,254,41,3,126,33,2,124,164,79,124,164,2,126,54,174,106,47,226,170,50,162,6,33,2,254,160,15,124,164,67,124,96,10,254,40,34,186,42,162,186,19,199,212,17,71,164,20,195,240,4,7,252,4,15,254,4,0,192,66,2,168,138,68,56,78,11,60,60,0,64,255,224,64,20,0,128,34,44,172,74,69,20,224,229,228,74,78,174,74,69,36,107,76,72,36,44,76,74,69,20,238,228,4,78,78,174,74,68,228,65,76,8,121,4,252,122,132,126,121,10,184,57,7,248,4,15,254,4,0,192,8,131,240,10,15,254,10,3,200,199,131,128,15,143,130,12,32,126,25,14,32,36,67,126,225,34,80,55,206,144,47,226,16,33,33,254,7,135,192,7,131,192,7,135,194,3,227,136,227,3,28,231,35,142,33,12,60,89,68,254,241,69,188,73,14,252,89,4,254,81,3,254,32,133,112,121,2,28,251,5,16,169,197,112,41,5,18,32,228,0,16,66,152,68,139,168,1,206,168,170,142,188,170,142,170,162,170,102,85,3,144,125,228,100,93,69,72,93,96,240,120,0,250,248,32,126,20,14,124,40,130,124,53,78,124,37,67,254,228,66,124,32,33,254,20,78,254,34,130,170,54,206,254,36,66,124,60,78,124,32,33,254,238,74,184,238,138,168,239,194,136,124,236,184,124,132,138,126,164,6,32,3,252,64,9,248,0,3,240,1,0,144,8,160,138,16,98,2,32,3,252,64,9,248,0,3,240,1,1,80,21,33,74,36,100,66,32,3,252,64,11,248,0,7,240,1,1,16,85,37,74,124,96,66,32,3,254,64,9,240,0,3,248,0,130,168,42,162,170,42,100,34,32,3,252,64,11,248,32,131,232,82,128,200,50,164,154,20,96,130,32,3,252,64,9,248,0,135,248,20,133,88,54,161,74,127,96,2,32,3,252,64,11,248,0,143,232,146,139,168,146,170,170,254,104,34,32,3,252,64,11,248,16,143,232,16,135,200,68,167,202,41,108,114,64,7,252,128,7,248,34,131,232,34,131,232,0,167,250,85,111,250,16,1,0,16,3,252,33,5,16,146,0,160,4,0,160,17,6,12,16,129,8,252,129,30,125,69,116,125,67,148,84,137,20,17,65,34,33,7,144,73,7,188,76,135,168,34,143,168,65,7,168,74,137,196,16,133,62,80,133,126,120,36,40,117,133,40,87,229,8,81,73,34,17,69,84,95,231,84,69,196,64,119,197,16,95,229,56,85,105,16,17,5,124,84,71,252,68,164,126,116,133,126,86,165,190,82,169,38,1,199,224,40,129,80,127,192,128,255,225,0,31,130,72,67,9,206,25,238,16,39,234,210,85,194,114,245,226,64,171,130,170,170,165,70,0,67,196,37,66,84,61,66,84,37,67,212,36,68,68,85,72,136,0,7,156,72,4,128,123,228,136,73,7,158,72,36,130,104,169,4,0,71,136,73,4,160,120,68,136,73,7,160,72,68,136,105,9,32,4,15,252,32,3,248,0,3,248,32,131,248,32,131,248,32,130,24,2,135,40,82,133,124,114,133,40,95,231,40,82,133,40,84,139,136,0,7,60,80,5,0,127,229,40,82,135,40,82,165,42,84,171,134,1,7,16,81,5,254,113,5,40,82,135,40,84,69,100,89,43,0,1,7,16,81,5,126,113,5,36,82,71,40,84,133,82,91,235,2,1,7,16,95,229,16,117,69,84,85,71,124,81,5,18,81,43,14,1,7,16,81,5,124,117,69,84,85,71,108,84,69,68,85,75,72,33,1,224,41,15,252,16,3,248,80,137,248,16,129,248,16,129,24,2,7,32,83,229,66,117,69,144,81,7,16,82,133,40,84,75,130,2,135,36,82,5,254,114,133,42,82,167,76,85,133,106,88,171,6,1,7,16,95,197,32,115,5,80,87,199,16,85,69,146,85,43,32,2,7,32,83,197,32,114,5,254,82,7,48,82,133,36,82,11,32,0,135,8,80,229,8,115,229,34,82,39,62,82,5,32,82,11,64,0,7,124,85,69,84,119,197,84,85,71,124,81,5,16,81,11,16,1,7,16,87,197,84,117,69,124,85,71,84,87,197,16,81,11,16,4,7,252,68,71,252,68,71,252,32,131,248,32,131,248,32,130,24,2,7,32,83,229,80,121,5,30,81,7,16,81,229,16,81,11,16,0,103,120,85,69,84,117,69,84,85,71,84,85,69,82,89,203,4,1,7,16,82,133,68,121,37,32,84,135,16,82,69,8,81,11,96,2,7,32,87,197,68,120,69,116,85,71,84,87,69,4,145,67,8,0,199,120,84,133,72,116,133,126,84,135,72,84,165,102,85,43,8,0,7,124,80,133,24,118,69,130,87,199,16,81,5,16,95,235,0,1,7,16,89,37,84,113,5,254,82,135,40,82,165,42,84,107,128,0,7,126,84,37,126,116,37,122,86,167,106,87,165,66,84,171,68,0,7,124,84,69,84,117,69,124,85,71,84,86,197,68,87,203,68,1,7,16,82,133,70,123,133,0,87,231,16,82,5,68,87,235,2,4,71,40,81,5,40,116,69,16,95,231,16,85,69,146,85,11,32,2,7,16,95,229,32,116,133,112,82,71,72,81,133,36,84,43,0,116,69,40,80,7,124,82,133,40,127,229,40,82,133,40,84,139,136,4,71,40,80,5,124,113,5,16,95,231,16,82,133,40,84,75,130,1,7,16,89,37,84,113,5,254,81,7,56,85,69,146,81,11,16,0,7,126,81,5,32,117,5,42,84,199,24,82,197,74,82,139,16,0,7,124,84,69,124,113,5,124,85,71,84,86,197,68,85,75,72,1,7,16,85,69,84,123,165,16,87,199,16,81,5,16,95,235,0,0,103,120,82,5,84,114,133,124,80,135,16,87,197,16,85,11,32,1,7,8,87,229,66,112,5,60,80,7,126,82,133,42,82,171,70,0,7,126,84,37,126,116,133,72,87,167,92,86,165,138,82,139,16,1,7,124,81,5,124,113,5,254,84,71,124,84,69,124,84,75,76,1,7,254,82,133,68,121,37,124,85,71,124,85,69,124,81,43,14,2,135,40,94,229,40,114,133,238,82,135,40,94,229,40,82,139,40,1,7,54,85,37,82,119,101,82,87,231,16,81,5,40,84,75,130,2,7,16,87,197,68,112,5,56,80,7,124,81,5,84,89,43,48,1,7,8,87,229,66,112,5,126,81,7,92,85,5,80,91,235,0,1,7,60,93,69,126,121,69,188,85,7,126,85,5,252,85,11,190,1,7,124,81,5,124,114,5,254,84,71,186,81,5,124,82,139,68,1,7,126,81,5,126,116,37,106,85,39,122,85,37,126,85,43,86,15,199,16,82,5,252,117,69,116,85,71,116,85,69,84,95,203,0,3,135,40,83,133,40,115,133,0,87,199,84,85,69,84,95,235,0,112,5,238,90,165,238,112,5,124,80,7,126,81,5,60,80,75,24,1,7,40,84,69,186,112,5,122,84,167,122,84,165,122,84,171,90,1,7,84,83,133,124,113,5,254,82,135,84,89,37,124,81,11,126,5,71,56,87,197,16,119,229,36,85,39,16,87,229,36,81,139,102,239,234,0,167,206,68,167,202,0,239,234,170,175,234,146,169,38,134,34,15,188,36,131,180,74,138,180,18,35,248,32,131,248,32,130,24,1,7,8,87,229,66,113,133,32,83,199,40,82,133,126,82,75,66,1,7,84,83,133,124,114,5,254,84,71,146,85,69,56,85,75,50,113,5,254,90,165,68,119,197,32,84,135,124,81,5,124,81,11,126,113,5,124,82,133,254,121,37,124,85,71,16,87,197,68,87,203,0,116,69,228,84,229,228,112,69,238,82,167,234,80,165,164,84,171,242,2,135,124,82,133,254,112,37,124,82,7,84,83,133,212,85,43,32,119,197,68,87,199,0,94,229,170,126,229,16,95,229,56,85,107,16,113,5,254,84,71,116,85,69,124,114,133,56,82,133,56,80,11,126,112,133,126,85,71,126,85,69,126,117,101,126,85,69,118,85,75,148,5,71,56,95,229,84,121,37,68,86,231,164,85,69,94,88,75,4,66,4,32,123,228,66,64,135,136,8,131,148,201,64,164,42,65,66,73,3,16,73,226,34,252,133,8,252,133,72,85,69,212,18,65,66,33,15,144,35,229,34,252,64,144,233,10,144,234,128,168,42,65,66,9,7,16,17,239,210,18,69,8,150,137,40,214,137,52,255,64,34,33,1,16,253,228,146,50,15,200,0,135,136,72,135,148,73,71,162,49,4,144,181,224,18,122,4,200,120,128,8,236,139,84,109,75,98,1,7,222,70,36,94,109,101,94,85,37,86,109,4,78,68,8,62,64,2,248,8,142,136,13,138,168,170,132,168,61,172,138,16,98,2,1,199,212,69,196,84,109,197,84,87,229,84,110,36,66,67,232,0,3,15,214,137,40,214,217,42,254,169,10,252,218,72,152,138,96,126,40,2,124,252,66,68,86,200,212,85,79,212,86,197,68,172,96,130,5,79,184,137,8,168,220,74,170,175,205,168,141,72,130,135,224,0,30,1,32,18,2,24,64,3,240,17,1,16,10,0,64,27,6,12,32,15,184,34,143,168,140,103,0,23,199,36,66,135,16,18,131,68,16,7,220,17,79,212,166,103,128,33,197,20,125,65,8,125,65,34,16,7,220,17,79,212,162,103,128,139,231,210,85,71,200,85,72,226,17,7,28,17,7,28,17,7,28,21,0,32,127,193,16,14,7,30,4,15,254,32,129,240,224,228,164,91,68,164,91,68,164,127,200,4,137,228,66,73,32,254,249,42,254,173,106,186,79,228,186,173,96,146,32,129,8,1,79,212,34,35,128,40,130,132,73,4,136,168,65,0,68,2,124,9,15,16,79,231,16,87,197,84,85,69,92,177,0,16,68,2,124,8,15,12,71,7,28,87,5,30,87,5,18,145,35,14,66,2,62,4,15,60,66,71,52,82,197,126,82,69,36,146,67,76,68,2,124,8,15,16,69,7,124,89,5,124,81,5,16,159,227,0,68,2,126,8,15,124,68,71,124,85,5,82,85,69,88,153,35,14,68,2,124,9,15,124,66,7,68,87,197,0,85,69,84,153,67,18,68,2,124,9,15,124,65,7,40,87,229,4,87,69,84,151,67,12,32,2,252,32,138,144,178,10,126,34,162,74,41,37,34,76,168,4,33,2,144,183,234,16,167,202,16,47,226,18,81,164,148,137,0,16,33,2,16,39,226,144,181,74,84,165,66,124,81,4,146,73,40,14,33,2,144,178,138,68,168,42,60,34,66,52,82,132,162,129,224,0,32,2,126,168,139,16,161,10,32,39,226,162,82,37,34,75,232,34,32,194,240,177,10,146,165,74,16,47,226,16,81,5,16,133], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+122897);
/* memory initializer */ allocate([32,33,2,136,176,10,254,161,10,16,39,194,16,81,4,144,143,224,0,33,2,8,39,234,144,177,10,36,167,130,16,82,4,68,143,224,66,8,1,8,63,192,4,63,130,8,63,128,68,36,132,160,49,140,6,34,130,170,180,202,216,182,170,74,37,98,16,95,229,16,129,0,16,36,66,40,167,202,144,177,10,124,33,2,16,95,228,144,129,0,16,47,194,32,47,139,40,164,138,254,160,2,124,84,68,196,135,192,68,33,2,168,52,74,146,160,138,124,160,130,16,39,197,68,76,72,124,36,2,46,36,42,210,180,170,82,167,98,82,85,164,194,68,168,68,33,2,30,41,11,124,164,74,124,36,66,124,33,5,254,81,8,16,36,66,72,74,1,24,96,105,80,91,69,88,41,2,168,68,72,130,36,226,202,180,170,238,164,170,234,42,226,170,46,165,18,73,40,38,39,194,196,183,202,68,167,202,16,39,194,0,82,132,144,143,224,0,39,194,212,183,202,84,167,202,0,63,226,80,85,68,200,70,72,66,33,2,110,172,171,114,164,10,110,164,162,106,92,164,196,132,160,82,31,130,136,111,138,32,63,194,168,34,65,72,37,0,160,49,140,6,33,2,126,164,42,188,176,10,60,34,66,60,82,68,188,128,0,126,34,2,16,47,234,130,191,234,128,175,226,170,47,229,170,74,169,6,33,226,146,181,234,18,161,234,212,37,98,84,85,164,192,139,225,0,33,2,110,172,171,106,165,106,0,39,226,82,87,228,210,135,224,66,39,194,196,183,202,68,175,234,170,47,226,0,87,228,164,129,128,230,33,2,254,180,74,40,175,234,130,42,162,198,91,164,170,75,168,134,124,68,94,124,68,20,124,75,20,90,129,68,68,130,160,17,134,6,39,98,18,165,170,182,181,170,18,32,130,62,82,36,190,74,40,62,34,2,254,61,106,186,175,234,186,45,98,16,47,229,16,74,136,198,32,194,240,165,74,254,179,138,84,41,34,124,85,69,124,133,64,124,36,66,40,183,234,160,165,43,172,45,194,170,92,132,144,87,232,0,251,226,16,214,163,156,90,203,90,82,128,68,36,132,160,49,140,6,32,226,240,37,74,254,186,170,254,170,66,238,42,68,236,72,72,204,110,196,164,110,196,164,255,233,18,127,195,184,85,66,72,27,6,12,0,0,0,0,0,0,0,0,0,0,0,0,82,68,146,128,32,0,4,7,252,4,3,248,8,15,254,17,2,248,73,0,16,82,72,146,4,7,124,88,69,116,117,69,84,87,71,4,1,64,8,82,72,146,4,15,254,4,7,252,32,131,248,17,15,254,32,131,248,82,72,146,2,3,252,32,67,252,34,130,36,63,226,32,37,4,80,72,137,4,2,3,252,32,67,252,41,2,80,41,2,94,63,4,16,129,0,16,4,3,252,32,67,252,32,2,254,40,34,186,42,164,186,72,168,132,4,3,252,32,67,252,32,2,120,36,130,252,41,68,252,72,40,126,2,3,252,32,67,252,37,3,222,37,3,220,37,5,222,69,8,80,32,1,0,248,0,128,16,3,128,84,9,0,16,1,0,16,1,0,64,2,124,244,65,68,36,71,124,164,2,64,36,34,66,35,226,0,64,2,124,241,1,16,33,7,126,169,2,40,34,130,68,40,34,0,64,130,8,240,129,40,34,231,40,170,130,40,34,130,40,47,226,0,65,2,16,241,1,124,33,7,16,175,226,16,34,2,68,47,226,66,64,130,8,240,129,62,32,135,8,171,226,34,34,34,34,35,226,34,65,66,18,241,1,126,34,7,60,163,66,84,37,66,72,41,67,34,66,2,32,243,225,80,33,7,30,169,2,16,33,226,16,33,2,16,66,2,32,243,225,66,33,71,16,169,2,84,41,34,18,37,2,32,64,98,120,244,129,72,39,231,72,172,130,74,36,162,118,36,162,8,64,2,124,240,65,116,32,71,116,173,66,84,39,66,4,33,66,8,65,2,30,241,1,124,36,71,84,173,66,84,37,66,40,36,66,132,66,130,40,242,161,172,38,135,40,166,194,170,34,130,74,40,163,6,66,66,36,247,225,36,35,199,36,171,194,36,39,226,0,34,66,66,68,66,40,247,193,84,39,199,84,175,194,16,47,226,16,33,2,16,68,2,254,244,161,234,37,38,234,181,66,16,47,226,40,36,66,130,68,66,40,247,225,16,33,7,124,169,2,16,47,226,0,42,163,42,65,2,254,241,1,254,36,67,124,98,138,254,32,2,124,36,66,124,65,2,254,245,65,124,34,135,124,162,130,254,34,130,106,43,66,34,0,7,254,4,0,96,5,0,72,0,1,68,82,165,10,143,128,0,4,0,64,7,192,64,4,7,254,4,5,36,82,41,10,15,128,0,0,71,132,11,226,132,17,66,132,65,64,72,82,41,10,15,128,0,16,7,222,16,163,138,16,167,210,18,97,0,4,69,34,80,168,248,4,3,248,4,15,254,4,3,248,4,15,254,4,5,36,144,160,248,0,15,254,4,7,252,74,68,164,74,192,0,68,69,34,144,160,248,17,129,224,34,7,254,162,2,32,47,194,0,4,5,36,80,168,250,17,0,160,127,192,64,63,128,64,127,192,0,4,69,42,144,160,248,68,2,124,8,65,40,34,14,80,40,194,64,2,69,34,80,168,248,4,7,252,4,3,248,0,7,252,64,65,240,17,70,76,17,37,242,32,4,76,146,2,158,100,74,4,37,66,136,4,5,36,80,168,250,121,4,144,121,229,36,125,69,8,85,70,226,4,5,36,80,168,250,63,194,144,63,194,64,63,194,200,55,130,0,63,193,68,82,168,250,12,135,30,17,47,222,17,39,222,69,39,222,4,5,36,80,168,250,17,15,222,75,71,148,17,71,200,17,69,98,34,1,4,80,168,250,46,130,40,245,226,232,109,203,74,44,128,0,84,69,42,143,128,0,132,133,254,4,137,254,68,129,254,84,169,182,16,36,68,82,169,250,34,15,190,86,79,152,86,103,60,34,79,180,33,128,100,82,169,250,4,0,64,63,128,72,255,224,72,63,128,64,4,0,64,4,0,64,4,3,248,4,143,254,4,131,248,4,7,252,4,15,254,4,0,64,4,71,104,21,2,72,84,104,128,63,130,8,63,130,8,63,130,8,36,65,40,127,196,4,4,7,100,22,130,80,68,136,70,20,0,128,4,71,104,21,2,72,212,96,144,17,13,122,91,69,84,145,35,48,0,7,184,18,129,40,34,131,168,106,138,168,42,163,202,36,160,134,0,7,190,16,129,8,32,131,190,104,138,136,40,131,136,40,128,8,0,15,124,32,130,16,66,7,126,210,165,42,85,39,146,66,160,68,4,7,252,4,3,248,4,15,254,4,7,252,16,3,248,208,129,248,1,15,144,39,194,32,69,7,126,209,5,254,81,7,16,65,0,16,1,15,144,39,226,16,69,71,84,213,69,124,81,7,18,65,32,14,0,15,126,32,130,40,68,135,126,209,133,40,84,135,136,66,128,16,0,79,184,34,2,32,67,231,36,210,69,36,84,71,68,72,64,4,0,207,112,32,2,32,65,7,124,208,133,16,82,7,96,73,224,0,0,15,124,36,66,68,70,199,84,213,69,108,84,71,68,72,97,2,1,15,144,39,194,16,65,7,254,209,5,32,82,135,68,79,224,66,2,143,168,39,226,40,66,135,0,212,69,40,81,7,40,68,64,130,0,15,126,36,2,126,69,7,80,213,229,82,85,39,82,74,161,68,9,0,136,255,193,80,38,68,188,16,15,254,16,3,248,80,129,248,2,15,160,35,226,80,73,7,30,209,5,16,81,231,16,81,0,16,1,15,144,34,130,68,72,39,0,215,197,16,81,7,16,79,224,0,0,111,120,36,130,72,68,135,126,212,133,74,84,167,102,69,32,8,1,15,136,32,2,126,64,7,68,212,69,40,82,135,16,79,224,0,1,15,136,39,226,66,66,7,36,210,133,48,82,39,34,81,224,0,2,143,40,47,226,42,79,231,168,223,229,42,82,167,46,84,128,136,0,47,250,37,34,82,69,39,82,223,165,82,85,39,82,69,160,148,2,79,164,39,226,36,65,7,8,215,229,32,82,7,32,83,192,0,1,15,144,39,194,16,69,71,56,209,5,254,81,7,40,68,64,130,2,15,190,46,2,20,65,167,102,208,5,254,82,135,42,84,160,134,17,5,212,81,133,210,240,224,0,127,224,128,31,194,132,79,192,132,0,15,126,36,34,122,68,39,122,214,165,106,87,167,66,84,160,68,0,143,144,39,226,66,68,167,106,213,37,82,86,167,66,87,224,66,2,15,188,36,66,168,65,7,40,220,101,0,87,199,68,68,64,124,1,143,106,34,130,40,79,231,40,211,165,236,82,135,58,82,96,98,1,15,124,33,2,124,65,7,254,208,5,124,85,71,84,66,128,198,2,143,164,36,2,126,76,135,126,212,133,126,84,135,72,87,224,64,2,15,144,39,194,0,68,71,40,223,229,0,87,199,68,84,64,124,1,15,136,39,226,66,64,7,126,209,5,16,85,199,80,69,0,190,1,15,164,39,226,16,71,231,36,213,37,168,81,71,40,65,0,32,1,15,124,33,2,254,64,7,124,213,69,254,85,71,126,64,64,24,7,207,68,39,194,68,71,199,32,215,229,146,86,167,66,71,160,6,1,15,126,36,66,40,79,231,146,215,197,84,85,71,92,81,0,16,1,15,126,36,34,60,64,7,60,210,69,60,82,71,60,80,0,126,1,15,136,39,226,66,71,231,64,215,229,82,87,231,82,69,32,134,4,79,110,42,67,84,69,231,132,209,69,254,83,135,84,73,32,16,1,15,126,34,66,66,65,7,36,215,229,16,82,167,100,75,64,34,7,207,164,33,130,36,78,231,170,212,69,170,81,7,254,69,64,146,17,199,212,18,103,220,85,71,200,129,71,252,16,3,248,80,129,248,9,239,80,41,226,82,65,231,80,217,229,16,95,231,84,73,32,16,4,79,244,42,130,238,65,167,234,210,165,74,94,69,68,116,160,210,14,175,172,38,162,68,75,199,2,215,197,68,87,197,68,114,128,254,15,239,84,39,194,84,71,199,0,223,229,84,87,199,84,79,224,0,2,143,124,34,130,110,74,167,68,219,165,0,95,231,84,73,32,48,2,143,126,34,130,254,72,39,124,210,5,84,91,135,84,89,32,48,2,79,126,34,66,138,71,231,42,219,229,42,84,69,190,114,64,12,4,1,176,238,224,0,63,130,8,63,128,144,255,225,80,38,69,188,10,2,168,27,15,254,36,129,80,127,196,68,78,69,84,68,68,76,81,13,84,89,47,208,39,234,160,115,207,164,171,79,200,169,73,162,80,173,72,91,239,200,35,234,170,115,239,170,171,239,170,170,169,166,0,7,124,81,5,16,113,5,254,81,7,16,81,5,16,117,0,32,0,7,126,81,5,16,117,197,84,117,69,124,80,71,4,2,128,16,0,7,126,84,5,98,117,69,84,84,135,84,86,37,64,119,224,0,1,7,16,95,229,16,117,69,84,85,71,124,81,5,18,113,32,14,1,14,16,161,10,84,229,42,146,161,14,18,160,202,16,230,1,128,1,14,16,161,10,254,233,42,16,162,142,40,162,138,74,228,160,134,36,3,252,68,3,248,4,15,254,0,3,248,32,131,248,32,131,248,35,195,164,74,203,34,33,239,248,32,131,248,32,131,248,32,131,248,0,143,16,146,9,68,247,233,2,144,15,124,148,73,68,247,192,68,1,15,16,151,201,16,241,9,254,145,15,16,151,201,16,241,0,254,2,142,40,162,138,170,235,202,168,170,142,168,171,171,234,224,96,0,2,15,56,148,137,176,242,137,78,153,47,52,148,137,16,246,1,128,1,14,32,164,74,254,225,42,80,167,206,144,191,234,16,225,0,16,1,14,16,175,234,16,229,74,56,175,238,16,163,138,84,233,32,16,2,14,32,165,10,136,247,74,2,170,142,168,170,138,80,239,192,0,4,79,40,151,201,20,247,201,80,151,239,18,147,169,84,249,0,16,1,15,32,148,73,254,244,169,164,151,143,72,154,137,16,242,128,198,0,7,126,84,133,92,116,133,126,84,7,72,85,197,72,123,225,0,2,7,76,84,69,108,116,69,124,82,135,40,82,165,74,116,160,134,2,135,36,87,229,200,116,133,126,84,135,126,84,133,72,119,224,64,0,135,16,87,229,74,119,229,82,87,231,32,84,133,254,112,128,8,8,0,252,8,15,254,164,164,164,49,141,246,17,1,240,17,1,240,5,14,150,169,42,214,233,42,254,161,14,254,164,74,56,230,129,134,0,174,236,162,170,172,228,74,130,167,206,16,175,234,40,228,64,130,125,2,144,19,239,212,52,133,20,182,35,248,32,131,248,32,131,248,1,14,124,161,10,254,226,10,72,175,206,4,175,234,170,234,161,254,15,238,130,167,202,68,231,202,68,167,206,16,175,234,0,228,64,130,15,238,40,175,234,170,239,234,0,167,206,0,175,234,84,233,32,48,1,14,146,165,74,254,232,42,124,164,78,124,161,10,124,225,0,254,0,142,232,162,235,250,234,170,234,170,174,228,171,75,234,227,32,32,9,46,84,175,234,84,233,42,68,166,238,164,187,74,94,232,65,4,32,143,190,32,143,188,138,79,152,82,99,248,224,131,248,32,131,248,0,15,190,168,138,136,168,143,136,168,138,136,248,136,136,2,128,16,63,130,72,63,130,72,63,128,0,255,225,16,17,1,16,33,4,16,1,15,148,169,42,144,175,239,144,169,10,168,250,136,164,4,64,130,1,15,144,169,10,190,170,79,212,169,74,148,168,143,148,138,64,66,0,111,184,170,10,160,170,239,170,170,170,170,250,72,74,5,32,162,1,15,144,170,138,196,169,47,160,168,138,146,170,79,136,137,0,32,4,1,176,110,200,2,127,194,72,76,67,248,36,131,248,36,131,248,1,15,8,167,234,130,164,15,110,170,170,170,182,239,72,136,161,6,0,143,190,169,74,254,170,175,190,170,170,190,168,143,190,136,128,62,0,7,252,74,71,252,0,7,252,4,0,192,53,12,72,4,64,64,0,7,252,74,71,252,0,15,254,4,2,120,36,2,64,255,224,0,0,7,252,74,71,252,4,0,64,255,224,64,63,130,8,32,131,248,127,196,164,127,192,64,255,224,0,63,128,0,63,130,8,63,128,0,127,196,164,127,192,128,255,226,72,127,202,74,63,128,64,4,64,60,127,196,164,127,192,64,63,128,64,255,225,8,63,192,0,82,72,146,127,196,164,127,192,64,255,224,64,127,196,164,95,68,68,95,68,76,127,196,164,127,194,40,183,234,200,183,226,72,39,226,72,39,226,64,127,196,164,127,197,0,251,197,4,250,74,190,248,34,58,248,34,6,127,196,164,127,193,16,127,197,84,78,71,252,32,131,248,32,131,248,4,3,248,4,15,254,8,1,8,63,192,4,63,130,168,42,143,254,36,12,70,157,44,230,149,40,66,236,224,0,127,196,164,74,79,254,151,198,84,247,192,32,83,232,202,3,239,170,171,234,138,253,224,6,32,2,0,120,8,0,112,2,0,248,2,0,32,2,128,48,2,0,32,2,32,122,8,32,114,2,32,114,2,34,42,35,34,33,224,0,32,2,124,120,72,8,112,130,16,113,2,32,44,35,66,35,224,0,34,2,32,122,8,48,114,130,36,114,2,32,42,3,32,34,0,32,32,66,4,122,72,36,114,66,36,114,66,36,42,67,4,33,64,8,32,2,62,120,40,4,112,130,8,112,130,8,40,131,8,34,128,16,33,2,16,121,8,16,119,194,16,113,2,16,41,3,16,47,224,0,32,34,34,122,168,42,114,162,42,114,162,42,42,163,42,36,160,130,32,130,8,121,8,36,112,130,16,114,34,4,40,131,16,34,0,0,36,2,46,120,40,66,116,34,66,116,34,66,44,35,66,36,160,68,64,4,252,116,72,84,116,66,40,114,130,16,42,131,40,36,64,130,33,2,16,121,8,126,113,66,36,114,66,40,41,3,40,36,64,130,32,2,126,120,136,16,113,2,52,117,34,18,41,3,16,33,0,16,33,2,16,121,8,126,113,2,16,114,130,40,42,67,84,40,160,0,32,2,124,124,8,64,119,194,68,116,66,124,44,3,64,39,224,0,32,194,112,116,8,64,119,194,84,117,66,84,44,131,84,41,64,162,33,2,16,122,136,36,117,34,8,32,7,60,32,66,136,49,2,32,66,4,16,119,200,32,114,2,60,114,66,36,42,67,68,37,64,136,34,2,16,119,200,0,115,130,40,114,130,40,42,163,42,36,96,128,64,132,72,114,136,8,116,130,40,32,239,120,32,130,136,48,130,8,33,2,16,113,40,84,117,2,16,249,2,40,42,131,68,36,64,130,32,2,124,117,72,84,117,66,124,116,2,64,44,35,66,35,224,0,32,2,124,121,8,16,113,2,124,113,2,24,41,67,16,39,224,0,32,2,126,112,136,8,114,130,46,114,130,40,42,131,40,47,224,0,33,2,16,121,8,126,113,2,16,119,194,68,44,67,68,39,192,0,32,2,126,120,72,4,119,66,84,117,66,116,40,67,4,33,64,8,32,2,126,116,8,92,117,66,84,117,66,84,37,195,64,39,224,0,33,2,16,119,232,32,116,130,190,114,162,42,42,163,46,32,128,8,33,66,18,121,8,126,113,2,30,114,162,42,42,163,68,36,160,144,32,130,10,120,136,126,116,130,74,116,162,76,36,131,106,37,96,34,32,2,60,122,72,36,115,194,36,114,66,60,42,67,36,35,192,0,64,4,60,114,72,36,115,194,36,114,66,60,40,3,0,39,224,0,32,2,124,125,72,84,117,66,124,117,66,84,45,67,84,39,192,0,32,194,112,116,8,80,117,2,126,113,2,84,53,34,146,5,0,32,66,4,16,119,232,16,119,194,84,117,66,84,37,195,16,33,0,16,33,2,8,119,232,16,114,2,68,119,130,16,42,3,68,47,224,2,33,2,8,119,232,66,112,2,36,114,130,48,42,35,34,33,224,0,34,2,16,121,72,4,114,66,170,122,162,50,42,3,100,41,192,0,32,2,124,116,72,124,116,2,82,117,66,88,45,35,82,40,225,0,64,132,8,119,232,74,116,130,126,117,34,82,45,67,72,41,65,34,39,226,36,121,136,36,117,34,16,119,194,16,47,227,16,33,0,16,33,2,58,121,72,126,113,2,62,117,2,30,40,35,2,33,64,8,33,2,18,119,232,20,113,130,126,115,2,84,41,131,18,32,224,0,32,2,254,116,136,120,116,130,120,116,130,78,47,131,8,32,128,8,65,4,16,119,232,32,119,194,164,115,194,36,43,195,36,34,64,44,65,68,18,111,200,144,233,4,234,234,164,172,78,134,138,73,97,34,33,2,16,119,200,16,117,66,56,113,2,254,33,3,40,36,64,130,33,2,30,119,8,20,113,162,38,112,2,126,42,131,42,36,160,134,64,4,254,98,168,170,234,196,250,230,164,170,82,198,40,74,128,72,33,2,84,115,136,16,119,194,4,112,66,60,40,67,4,39,192,0,35,130,40,114,136,56,113,2,124,117,66,84,37,67,92,33,0,16,32,2,124,116,72,84,119,194,84,117,66,108,36,67,68,39,192,0,33,2,84,117,72,124,112,2,124,112,66,124,44,3,66,35,224,0,65,4,80,119,200,144,113,2,254,113,2,56,37,67,146,33,0,16,64,7,4,77,136,72,116,130,156,36,135,72,45,195,64,43,225,0,32,194,112,113,8,124,113,2,254,113,2,32,42,131,68,47,224,2,34,130,42,116,200,216,118,162,70,113,2,254,33,3,16,33,0,16,65,4,16,114,136,68,123,162,16,113,2,124,41,3,16,47,224,0,33,2,16,114,136,68,120,34,124,112,2,124,44,67,68,39,192,0,36,130,40,113,8,40,116,66,16,119,194,16,37,67,146,37,0,32,34,130,40,114,168,172,118,130,40,118,194,170,34,131,74,36,96,128,34,2,60,116,136,252,113,66,254,113,66,124,41,3,16,37,0,32,34,2,60,116,136,16,119,194,84,117,66,124,44,3,66,35,224,0,33,2,8,119,232,16,114,66,126,114,162,40,42,163,74,36,96,128,80,4,188,96,136,16,23,238,170,66,174,74,65,36,82,106,164,4,34,2,16,119,232,66,113,2,16,119,226,36,42,67,24,34,64,66,68,7,64,68,232,234,122,162,170,122,162,170,36,163,78,42,1,0,66,68,126,114,72,0,119,226,82,33,15,126,41,35,18,34,160,68,33,2,124,113,8,84,115,130,16,119,226,16,43,131,84,41,32,16,64,164,8,119,232,8,228,132,36,224,68,84,76,199,86,67,96,2,34,2,174,122,168,170,122,66,170,113,2,124,41,3,16,47,224,0,32,2,124,116,72,124,112,2,124,113,2,124,41,3,16,47,224,0,32,2,124,117,72,124,117,66,124,113,2,124,41,3,16,47,224,0,32,130,40,115,232,72,112,130,126,112,2,62,42,35,34,35,224,0,33,130,108,114,168,40,119,226,40,115,162,234,34,195,58,42,96,66,33,2,16,53,68,84,245,66,186,113,2,124,33,3,16,47,224,0,32,194,112,122,168,20,112,66,126,248,66,36,41,67,4,33,64,8,33,2,8,119,232,16,114,66,126,112,34,84,37,67,84,41,65,22,72,4,94,104,40,254,10,174,170,79,238,170,74,164,170,108,164,134,72,4,94,232,32,130,235,164,170,235,164,170,91,166,130,72,160,132,34,2,16,119,200,68,119,194,68,119,194,82,36,195,84,38,32,64,67,196,4,123,200,4,115,194,0,119,226,66,35,195,36,33,128,102,32,2,124,116,72,124,116,2,126,116,34,122,54,162,186,8,161,4,64,6,238,138,32,162,236,228,170,234,164,174,76,38,130,72,160,132,33,2,124,113,8,124,113,2,254,116,66,124,36,67,124,36,64,76,34,66,36,119,232,36,113,2,126,114,2,64,43,195,36,34,64,60,33,2,16,119,232,40,117,66,186,113,2,40,47,227,40,34,128,72,39,194,68,119,200,68,119,194,0,119,194,8,47,227,72,34,128,16,32,2,124,117,72,124,117,66,124,113,2,254,35,131,84,41,32,16,32,2,124,116,72,124,116,66,124,112,2,72,38,163,76,38,160,70,64,6,254,136,32,146,235,164,146,235,164,170,75,166,130,79,224,0,34,2,62,117,104,42,117,34,38,113,2,74,42,35,36,33,192,0,66,4,16,119,200,0,116,66,40,47,239,0,39,194,68,52,66,124,41,34,84,119,232,16,119,226,40,116,66,190,34,67,44,34,32,30,33,2,82,117,72,168,114,66,66,113,2,82,37,67,40,36,64,130,66,164,84,122,136,84,114,162,0,39,231,82,39,226,82,55,226,66,68,4,224,117,232,234,116,162,234,117,98,16,47,227,40,36,64,130,36,130,106,116,200,106,117,98,32,247,194,68,39,195,68,39,192,0,64,4,124,117,72,124,117,66,124,114,2,20,42,35,164,41,192,0,78,228,170,126,232,0,119,194,0,47,239,32,35,194,132,49,66,8,64,196,112,113,8,254,1,14,86,73,46,146,77,100,146,111,228,130,65,4,86,105,40,214,9,46,254,65,15,126,66,69,24,98,68,194,65,196,224,117,72,254,225,4,254,226,4,60,85,70,72,73,65,34,33,2,254,112,8,124,116,66,124,113,2,42,38,195,164,35,32,32,73,36,84,111,232,56,117,66,146,112,130,126,33,67,36,33,128,102,66,68,46,115,40,172,118,130,52,250,226,116,42,194,36,50,64,44,66,132,254,114,168,126,10,142,254,68,175,124,69,69,84,98,132,198,32,2,126,116,168,126,116,2,94,245,34,94,37,35,94,37,32,158,34,130,124,114,136,124,116,66,124,244,66,124,41,3,126,34,128,68,47,226,0,119,200,68,119,194,0,127,226,170,41,35,186,41,32,150,66,132,126,116,136,254,116,130,126,116,2,252,36,131,94,36,32,140,33,2,40,119,200,130,119,194,68,119,194,16,47,227,16,37,0,32,33,2,110,116,168,106,117,98,0,119,226,82,39,227,82,39,224,0,68,68,40,112,8,254,114,130,68,120,34,124,37,67,84,47,224,0,65,4,254,104,40,124,114,2,80,114,162,92,34,195,74,42,160,16,65,4,126,116,40,8,115,2,32,115,194,40,39,227,0,34,64,66,79,228,40,111,232,170,239,228,0,231,196,0,79,230,84,73,32,48,65,4,146,117,72,254,120,34,124,116,66,124,33,3,124,33,0,254,71,196,68,119,200,68,15,238,170,79,238,0,71,196,36,97,132,230,71,196,84,119,200,84,119,194,40,119,2,16,39,195,84,41,32,48,65,4,254,105,8,188,233,68,254,233,68,252,77,69,124,101,64,76,72,132,72,97,233,208,10,142,142,79,78,164,74,230,164,82,162,114,73,6,80,159,224,160,233,228,234,234,132,174,74,134,168,91,98,64,65,6,254,130,128,254,233,36,186,233,36,186,90,166,186,72,160,132,79,230,40,143,224,170,239,228,68,231,196,68,87,198,16,79,224,16,95,231,8,154,129,78,255,37,64,245,69,244,84,71,74,88,162,16,74,164,108,111,232,68,2,142,254,65,14,124,65,4,254,98,132,68,66,4,124,104,136,124,117,66,124,117,66,254,36,67,124,36,64,124,68,69,244,106,136,238,225,164,234,226,164,74,78,166,68,84,160,144,75,230,18,139,160,146,239,228,214,235,164,254,73,166,182,77,32,150,36,66,254,114,136,170,118,194,254,240,2,124,44,67,124,36,64,124,65,6,254,136,32,68,233,36,124,245,68,254,89,38,254,65,0,16,91,230,162,139,225,136,243,229,42,90,174,190,72,132,138,107,229,130,93,6,84,148,128,138,239,69,2,239,132,136,79,134,136,69,1,252,66,68,254,115,72,72,119,226,200,119,226,72,39,227,36,35,128,198,79,230,170,143,224,64,239,229,34,239,164,170,79,166,34,79,160,14,33,2,124,114,136,254,116,66,124,116,66,124,34,3,18,42,160,184,65,4,254,104,40,110,234,165,68,235,165,0,79,230,84,73,32,48,65,6,254,138,128,254,234,164,254,234,164,188,74,166,182,80,2,170,64,196,240,97,8,254,229,68,124,229,68,124,81,6,124,65,0,254,71,68,20,113,74,116,36,66,68,247,66,20,33,69,20,85,72,36,65,4,16,117,74,84,43,162,16,249,2,124,33,5,16,79,232,0,66,132,64,119,234,200,39,226,72,247,226,72,36,133,126,84,8,64,20,142,72,36,130,106,252,194,72,116,138,202,37,162,106,36,98,0,17,46,28,39,2,80,245,2,126,113,42,178,37,162,148,33,2,16,25,14,16,47,226,16,241,2,124,113,10,184,37,66,146,33,2,16,17,6,20,33,34,16,247,226,16,115,134,84,165,66,146,33,2,16,24,14,60,34,66,36,251,194,0,119,234,194,36,34,66,39,226,0,50,142,36,47,226,40,242,162,74,120,106,16,41,34,146,47,226,0,48,206,240,37,66,40,247,194,8,113,10,254,33,2,16,37,2,32,18,14,16,39,194,68,247,194,68,119,202,210,37,66,72,38,66,66,23,206,84,39,194,84,247,194,16,127,234,56,37,66,146,33,2,16,49,14,40,36,66,146,240,130,124,112,74,40,33,2,162,42,162,24,49,14,254,33,2,124,244,66,124,116,74,124,36,66,254,34,130,68,55,206,84,39,207,84,39,199,40,100,74,162,167,194,164,33,130,102,49,14,254,37,66,254,240,2,254,120,42,186,42,162,186,40,34,254,56,129,8,254,133,78,146,130,136,69,233,18,85,35,146,85,227,0,59,238,64,35,207,164,115,202,164,35,199,16,83,199,100,81,135,102,49,14,254,37,66,124,242,130,252,114,138,254,34,130,106,42,66,50,16,194,112,116,5,64,87,199,84,85,69,84,84,135,148,9,65,34,18,2,16,119,197,0,82,133,68,112,5,40,81,7,40,4,64,130,17,2,80,119,197,144,81,5,254,112,5,124,84,69,68,119,192,68,16,79,216,57,5,94,145,65,84,10,67,248,32,131,248,32,131,248,33,196,240,229,74,254,163,138,84,233,42,124,165,74,124,229,64,124,12,15,8,170,138,190,172,138,190,168,138,148,170,42,64,186,0,158,32,15,134,87,136,208,117,128,84,253,66,84,117,65,82,85,194,132,63,128,16,14,0,32,63,130,72,63,130,72,63,130,72,36,130,24,66,4,120,68,143,104,84,133,80,87,197,4,87,69,132,145,64,8,4,128,126,250,1,18,63,162,150,37,3,252,0,71,228,1,64,8,65,5,120,100,132,104,84,131,80,39,207,132,39,66,4,33,66,8,32,130,60,34,79,180,170,66,40,83,229,2,87,165,130,144,160,4,32,130,60,34,79,180,34,66,40,115,229,2,87,165,2,112,160,4,33,2,60,250,68,52,162,79,168,35,231,2,171,162,2,160,164,4,17,1,60,30,65,52,122,68,168,123,228,2,71,164,2,64,168,4,64,135,188,138,64,180,234,74,168,171,238,130,11,160,130,40,161,4,9,7,60,82,69,52,122,69,40,83,229,66,77,166,66,80,160,132,32,132,146,113,194,8,255,224,128,63,130,72,35,3,254,0,35,246,1,15,188,34,68,52,250,74,168,171,234,130,171,168,130,136,169,132,34,15,120,34,131,106,229,98,130,127,130,72,35,3,252,0,71,236,17,6,120,36,130,104,252,130,80,119,197,4,87,69,4,113,64,8,40,130,158,73,45,218,73,36,148,93,230,162,75,164,130,72,164,132,4,7,252,10,2,168,74,65,0,63,130,136,37,3,252,0,71,236,33,15,60,34,79,180,138,71,40,19,226,2,247,162,2,160,164,4,0,79,238,0,174,238,170,170,168,238,234,162,171,234,162,170,170,164,17,5,60,122,73,52,18,79,232,3,199,132,75,68,132,121,64,8,1,5,60,138,66,52,82,72,168,3,231,2,87,165,2,112,160,4,128,69,238,2,169,46,254,169,40,186,237,98,147,233,34,138,168,68,137,5,60,250,66,180,250,74,40,251,230,130,171,163,130,32,162,4,8,70,174,8,175,238,8,162,136,168,235,130,169,235,162,230,160,36,81,15,188,82,64,52,250,74,168,171,239,130,171,170,130,248,160,4,16,143,220,41,68,92,145,71,208,85,231,194,85,231,194,20,161,132,65,15,188,170,79,180,170,79,168,67,234,2,251,162,2,32,162,4,33,15,188,82,71,52,2,71,40,19,194,4,247,66,4,161,68,8,78,68,174,234,164,238,74,174,168,174,234,162,171,238,162,18,162,100,238,74,174,238,160,14,124,160,8,254,226,2,61,160,66,40,161,4,132,68,142,0,175,238,68,168,136,238,228,66,170,238,226,34,160,4,124,133,92,125,68,28,93,69,80,93,229,66,93,229,66,156,160,4,122,1,62,253,67,72,81,75,66,31,129,72,17,1,252,0,71,236,25,14,60,170,69,52,122,74,40,35,239,130,35,170,130,248,160,4,68,66,142,254,162,142,254,162,168,255,226,162,254,230,194,170,162,132,238,74,174,170,164,78,170,162,8,254,228,130,73,227,2,40,164,68,16,135,222,65,37,90,85,39,244,85,229,194,65,229,66,84,168,4,236,131,92,173,71,92,165,67,16,73,234,66,83,162,130,80,162,4,16,143,222,17,42,186,125,106,176,57,226,130,59,229,66,146,163,4,40,132,28,253,68,156,125,68,144,125,228,130,125,228,2,106,169,84,17,71,208,43,227,144,18,165,70,146,3,248,36,131,254,0,39,230,124,128,158,253,35,90,81,41,20,255,234,162,199,235,162,170,171,164,66,142,254,162,142,126,172,137,126,228,130,126,228,66,40,161,4,108,114,5,60,118,66,24,182,106,60,250,65,248,20,129,252,0,71,236,81,15,188,82,79,180,170,79,168,83,237,2,123,165,2,124,164,4,4,0,32,63,234,0,96,2,0,96,10,0,32,4,0,64,8,0,2,0,16,31,229,0,48,1,126,48,133,8,16,130,8,34,132,16,4,0,32,63,234,0,96,2,252,100,74,68,37,68,72,68,8,64,4,0,32,63,234,0,111,194,32,98,10,60,36,68,68,73,73,8,2,0,16,63,234,0,97,2,16,105,42,146,41,36,146,79,232,2,2,3,254,160,6,254,41,6,144,175,226,146,73,37,34,146,162,68,4,0,32,63,234,40,98,67,254,98,10,80,37,4,146,73,41,14,2,3,254,32,10,68,100,66,254,100,74,68,39,196,68,68,72,124,4,0,32,63,234,0,111,226,8,110,138,168,42,132,232,64,136,24,4,0,32,63,234,0,111,130,136,111,138,136,47,132,0,95,200,0,4,0,32,63,234,64,100,2,252,106,11,60,34,4,60,66,8,32,2,3,254,164,6,64,47,198,132,183,66,84,39,68,72,68,40,62,2,0,16,63,234,32,97,2,254,97,10,16,39,196,16,65,8,254,2,3,254,34,10,16,111,194,32,100,74,248,33,4,36,79,232,2,2,3,254,168,6,128,62,230,170,170,162,170,82,165,46,170,4,64,2,3,254,32,10,254,98,130,40,106,170,108,34,132,40,79,232,0,2,3,254,34,10,248,98,130,248,106,10,252,34,68,92,72,137,4,2,3,254,34,10,32,127,194,32,111,138,32,33,68,66,84,169,56,2,3,254,164,134,252,36,134,254,178,34,252,34,68,36,69,72,136,2,3,254,160,6,252,34,6,248,164,131,254,32,4,252,72,72,252,2,3,254,160,6,16,37,70,84,171,162,16,39,196,16,65,8,254,2,3,254,168,6,94,32,38,146,175,226,146,43,164,214,73,40,150,2,3,254,49,10,144,101,67,82,105,42,16,41,69,8,67,9,192,2,3,254,32,10,252,98,2,80,110,170,76,43,165,42,68,136,152,2,0,16,63,234,40,98,130,238,98,138,238,34,132,238,66,136,40,2,3,254,160,6,254,41,38,254,169,34,186,74,164,186,136,32,254,2,3,254,160,70,120,33,6,254,165,66,146,63,228,72,67,8,206,2,3,254,161,6,214,41,38,214,169,34,254,33,4,40,68,73,130,2,3,254,168,134,72,62,134,148,174,34,168,74,69,40,154,66,64,2,3,252,168,134,80,47,130,168,111,138,168,47,132,32,95,200,32,2,3,254,34,10,250,98,34,250,106,170,250,39,36,170,82,168,36,2,3,254,34,11,252,106,130,112,127,234,136,50,68,248,66,9,252,2,3,254,164,6,184,56,130,254,106,10,190,44,132,190,73,72,162,2,3,254,36,138,252,98,2,248,98,11,254,36,4,252,81,8,254,1,3,254,165,70,56,47,226,84,105,42,32,47,228,68,67,136,198,2,3,254,32,10,238,106,34,238,104,10,238,40,164,228,72,168,146,2,3,254,160,7,252,42,134,112,170,195,250,42,132,248,66,73,254,2,3,254,164,6,254,36,166,234,165,34,230,36,5,20,84,170,56,2,3,254,164,135,254,36,134,252,168,66,252,74,69,254,133,1,140,2,3,254,164,6,238,42,162,242,106,11,238,42,164,234,74,73,106,2,3,254,178,70,168,53,70,136,176,66,248,72,132,248,136,128,152,2,3,254,164,134,252,36,135,254,170,66,252,42,68,252,68,136,132,2,3,254,32,10,254,98,130,254,106,170,254,32,4,254,69,72,178,2,3,254,170,134,248,42,134,248,164,130,240,34,69,252,74,137,100,2,3,254,160,6,238,42,166,170,164,66,170,63,228,72,67,9,204,2,3,254,168,6,238,42,167,68,175,162,128,55,196,16,69,72,178,2,7,254,65,13,220,87,69,72,219,101,92,84,133,156,80,137,62,2,3,254,160,134,238,43,66,206,106,42,174,42,68,210,74,168,142,2,3,254,160,6,238,42,162,102,106,170,48,36,133,134,65,136,224,2,7,254,64,15,174,80,69,252,213,71,222,85,69,36,157,67,14,2,3,254,40,139,236,105,67,238,106,171,234,40,165,196,106,168,146,2,3,254,161,6,252,36,135,254,168,66,252,68,5,36,148,162,56,2,3,254,160,6,238,42,166,234,169,2,174,82,165,250,165,64,138,2,3,254,160,70,238,42,6,234,168,66,238,90,70,174,78,72,4,2,3,254,164,6,238,36,70,238,170,162,234,74,165,244,74,73,26,2,3,254,170,166,238,42,166,238,164,130,254,52,132,126,68,136,126,64,2,238,2,47,170,6,105,34,86,101,170,34,35,162,202,160,68,65,2,254,1,15,124,5,73,84,87,197,16,35,131,84,201,32,16,4,7,252,64,65,16,36,132,132,31,130,136,69,0,96,24,6,0,4,7,252,64,65,16,47,132,20,15,1,0,31,192,4,1,64,8,4,7,252,81,66,8,4,7,252,4,2,72,36,131,250,4,32,62,4,7,252,81,66,8,71,67,192,2,3,248,3,0,192,48,4,254,4,7,252,81,66,136,17,2,124,121,65,20,41,71,164,11,64,72,4,7,252,81,66,168,74,66,168,27,2,168,74,65,34,33,228,0,4,7,252,81,66,72,31,0,64,127,194,164,22,7,252,5,3,140,4,7,252,81,67,248,85,65,240,21,1,240,4,7,252,21,6,76,4,15,254,164,164,164,49,141,230,0,135,168,74,135,168,72,133,152,4,7,252,81,66,72,127,193,16,10,15,254,32,131,248,32,131,248,4,15,254,145,34,72,21,7,252,21,2,72,255,225,16,14,7,28,4,7,254,160,164,132,115,133,40,90,197,106,82,165,40,92,233,2,64,2,0,240,1,0,32,6,128,176,2,128,32,2,0,32,2,0,64,2,252,244,65,100,37,66,196,114,138,168,33,2,40,36,66,130,65,2,16,241,1,124,37,66,212,117,74,236,36,66,68,37,66,72,64,2,12,247,1,16,33,2,144,119,234,144,33,2,16,39,194,0,65,2,16,242,129,70,33,2,136,112,10,188,32,66,8,32,130,16,65,2,16,241,1,124,33,66,148,119,234,144,34,130,40,36,66,130,65,2,146,245,65,16,39,194,144,113,10,254,33,2,16,33,2,16,65,2,146,245,65,16,39,194,132,112,74,188,32,66,4,39,194,0,65,2,16,242,129,68,40,38,124,168,3,124,44,66,68,39,194,68,66,2,60,244,65,168,33,2,168,116,74,130,39,194,68,36,66,124,64,2,124,244,65,124,36,66,252,117,10,210,36,194,72,38,66,66,72,130,72,243,225,8,45,67,94,116,74,222,36,66,68,43,226,0,64,2,124,244,65,68,39,194,128,119,202,144,39,194,16,47,226,0,129,4,40,228,66,130,71,197,0,225,69,84,66,68,40,79,228,0,136,4,94,224,34,186,74,165,186,234,165,170,75,164,130,72,164,132,129,4,254,225,2,124,81,6,254,210,132,106,74,69,36,67,36,32,65,2,18,247,161,20,41,131,126,106,10,124,42,66,60,34,66,60,135,196,68,231,194,68,71,205,32,103,229,170,68,164,146,66,164,4,64,130,126,244,161,126,45,35,126,106,10,72,47,226,8,32,130,8,71,226,66,247,225,72,44,135,126,172,130,72,43,226,162,50,34,62,128,4,238,226,34,170,68,69,170,224,5,238,66,164,170,68,68,170,132,68,254,228,66,16,66,133,68,235,165,0,71,196,68,68,68,124,66,130,234,242,193,106,42,99,124,108,74,124,36,66,124,36,66,76,66,2,92,253,65,84,37,194,200,119,234,200,37,194,106,36,130,72,73,34,84,15,239,56,21,66,146,114,10,254,34,66,24,34,66,194,129,4,254,8,46,254,40,5,254,234,165,170,79,228,170,74,165,6,130,132,168,234,226,180,74,37,32,239,229,170,74,164,170,95,228,0,129,196,232,8,238,136,43,229,170,235,197,170,74,228,220,73,69,38,128,4,238,226,34,170,86,102,170,209,4,126,68,36,126,68,36,126,128,5,220,5,78,220,40,133,190,238,165,126,68,132,74,87,228,130,71,194,16,15,239,146,21,66,128,119,234,144,47,226,170,42,162,134,136,133,222,10,142,220,42,133,254,233,133,100,66,5,252,66,4,96,0,3,252,4,64,72,36,2,64,39,194,64,84,4,192,131,224,0,127,192,68,39,130,64,95,233,8,31,129,8,31,129,8,18,129,16,0,143,136,143,226,74,244,132,126,165,47,84,36,131,212,229,66,162,32,132,8,247,225,74,100,137,124,69,71,84,212,130,84,85,72,162,120,128,136,49,65,34,252,129,64,51,197,4,144,129,8,81,2,0,4,0,64,127,192,64,63,128,64,255,224,224,21,2,72,68,96,64,32,2,62,248,34,4,112,130,62,248,130,8,112,138,136,34,130,16,32,143,136,34,167,42,34,175,168,36,167,4,168,130,48,44,2,0,32,2,60,250,66,36,115,194,32,251,226,34,114,42,190,34,2,0,33,2,16,250,130,36,116,34,60,248,2,60,114,74,164,35,194,0,34,79,126,34,71,0,39,239,66,33,7,124,169,66,36,37,66,136,33,2,84,251,130,16,119,226,66,255,162,106,119,170,194,36,162,68,39,207,212,39,199,84,39,207,16,47,231,146,169,34,186,40,34,134,33,2,84,241,2,124,115,130,84,241,2,126,114,74,168,33,130,100,34,143,124,34,135,124,33,15,254,37,71,124,165,66,254,36,66,76,39,226,64,253,194,64,119,226,90,245,66,90,116,74,254,37,66,140,33,15,126,36,135,126,37,207,106,36,135,126,169,2,190,53,34,30,4,67,248,5,15,254,12,131,82,199,224,136,31,192,36,2,3,254,0,15,190,80,135,8,80,135,8,80,133,200,240,129,8,18,129,16,1,15,144,87,199,84,87,199,84,85,69,254,116,77,68,21,65,72,1,15,208,82,135,68,89,39,0,87,197,132,240,129,40,17,1,8,1,15,136,87,229,66,112,5,126,112,133,8,88,143,8,18,129,16,0,15,136,83,5,16,113,5,124,113,5,56,90,143,40,19,129,40,0,143,190,82,165,62,112,133,62,112,5,62,90,175,42,17,65,34,34,7,62,37,79,148,64,135,54,191,193,16,31,1,30,127,0,16,255,224,160,127,196,164,127,194,8,63,130,8,63,128,64,255,224,64,0,15,124,33,2,124,36,79,212,37,66,84,37,66,40,36,66,130,24,6,126,65,4,124,124,69,84,85,69,84,85,69,40,82,137,68,64,2,126,249,0,124,116,69,84,85,69,84,81,5,168,84,72,130,32,2,124,249,2,32,39,199,68,5,71,84,85,69,16,114,128,68,32,5,124,137,0,32,119,192,68,5,71,84,85,69,16,114,128,68,83,230,8,73,3,190,18,33,106,218,165,170,84,137,84,81,66,34,64,2,124,241,4,124,84,73,84,229,68,84,149,66,40,98,137,68,39,197,16,138,2,124,4,79,84,21,66,84,117,69,40,82,135,68,251,234,136,249,0,62,114,32,42,250,164,42,122,160,148,41,65,34,32,10,190,168,143,190,2,47,170,34,175,170,170,170,148,137,73,162,251,229,8,113,5,62,114,37,170,242,161,42,250,170,148,81,74,162,80,15,190,80,143,190,34,47,170,170,170,170,218,168,136,169,73,34,120,4,190,48,132,190,250,42,170,82,170,170,34,175,136,113,74,162,119,197,16,114,5,124,116,66,84,253,69,84,117,66,16,170,134,68,248,2,62,248,138,190,82,32,42,250,162,42,250,170,136,169,73,162,93,229,8,255,229,34,156,130,148,255,162,72,63,129,32,127,224,32,4,0,124,4,3,252,36,66,64,39,131,192,36,4,68,67,200,0,7,128,64,63,194,68,39,3,196,39,194,32,63,196,144,71,11,142,17,1,16,17,7,208,85,5,80,125,1,16,29,39,82,0,224,0,32,2,56,34,143,168,170,138,168,250,130,40,42,163,170,228,96,128,255,224,128,15,193,4,36,196,64,63,130,72,63,128,68,255,224,2,1,15,144,87,197,84,85,69,124,81,5,20,87,197,2,79,232,0,33,2,16,35,239,192,171,234,132,168,143,144,34,34,162,249,224,128,33,2,8,32,15,190,169,10,144,169,15,144,33,3,144,233,224,0,33,2,16,39,207,144,169,10,254,249,2,16,42,131,168,196,64,130,34,130,40,34,143,170,171,202,168,170,143,170,34,162,170,251,96,128,32,130,8,32,143,190,170,170,170,170,175,182,34,34,162,250,160,164,32,2,62,34,47,170,170,170,170,170,175,170,32,131,154,234,160,70,32,194,112,33,15,156,175,10,144,169,239,240,33,2,146,253,32,78,33,2,16,34,143,164,172,42,164,250,66,36,42,67,164,234,64,68,32,130,40,34,79,164,172,42,144,169,15,144,34,2,164,255,224,130,32,66,36,33,79,132,170,74,148,248,98,60,40,67,132,232,64,4,35,162,10,32,175,186,170,42,162,171,175,138,32,162,138,250,160,146,4,4,68,127,192,64,255,224,64,63,130,72,63,128,68,7,231,194,34,66,36,34,79,254,170,74,164,251,194,36,42,67,164,235,192,0,32,130,8,32,143,190,168,138,136,171,239,162,34,34,162,251,224,128,32,2,126,32,79,132,171,202,172,250,194,60,40,67,196,229,64,8,32,2,62,34,15,190,170,138,174,170,175,170,34,163,178,229,160,164,32,130,8,32,143,190,170,170,170,251,226,42,42,163,170,235,224,0,33,2,16,39,207,84,165,74,124,165,79,84,47,226,68,245,65,72,34,2,32,35,239,208,169,10,158,249,2,16,41,227,208,229,0,16,32,2,6,35,143,160,170,10,190,250,130,40,42,131,168,239,224,0,32,130,8,33,79,162,168,138,132,171,239,130,34,66,152], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+133137);
/* memory initializer */ allocate([248,128,132,32,2,62,34,47,148,168,138,148,170,175,136,35,226,136,248,128,190,34,130,40,34,143,94,164,170,122,162,175,74,39,162,146,250,160,196,247,130,72,38,131,90,232,161,70,63,130,72,63,128,68,127,224,2,33,2,16,39,207,144,173,74,184,249,2,126,41,3,168,234,128,68,33,2,30,39,79,136,169,170,166,248,2,126,42,131,170,234,160,70,32,2,126,33,15,164,171,234,138,248,130,62,40,131,136,235,224,0,40,2,190,40,143,136,171,234,170,170,175,170,42,162,174,248,129,8,34,130,40,34,143,254,170,170,170,175,239,170,42,162,170,255,225,0,32,66,216,36,143,72,169,202,136,164,143,72,45,194,64,251,225,0,32,98,56,32,143,136,171,234,136,248,130,62,42,35,162,235,224,34,33,2,8,39,239,168,169,10,168,172,111,168,34,131,168,228,128,136,34,2,16,39,239,128,170,74,194,170,143,168,33,3,168,236,64,130,34,34,20,32,15,190,168,138,190,248,130,8,43,227,136,232,128,8,32,130,16,34,79,190,168,170,168,171,239,200,39,226,136,248,128,136,63,194,0,63,130,164,41,130,200,34,98,248,42,132,248,66,73,254,16,199,176,18,1,190,114,65,68,63,130,72,63,128,68,127,224,2,32,130,42,33,207,136,171,234,162,251,226,34,43,227,162,234,160,36,32,2,60,34,79,188,168,10,252,249,2,126,41,3,168,228,64,130,32,162,114,33,47,146,171,170,146,251,162,86,41,35,146,233,160,20,32,130,8,33,79,162,169,202,136,251,226,8,42,195,170,236,160,24,32,98,120,34,175,148,171,234,132,248,130,62,40,131,136,234,128,16,36,66,40,39,207,144,171,138,144,255,226,16,42,163,170,228,96,128,33,2,126,33,15,188,169,10,254,250,66,60,42,67,188,234,64,44,34,66,36,39,239,164,171,202,164,251,194,36,39,227,128,234,64,66,36,34,92,37,15,240,165,234,244,245,66,84,37,67,84,230,64,68,33,66,16,47,239,16,175,74,180,255,130,24,47,47,42,20,96,130,10,7,188,10,3,188,10,7,188,14,3,248,36,131,248,4,71,252,35,226,42,251,234,170,171,234,136,251,226,8,41,195,170,232,128,8,32,2,62,34,47,190,170,170,190,250,162,46,42,163,190,234,32,62,39,194,68,39,207,68,167,202,32,247,226,170,34,163,82,234,160,4,33,2,62,34,175,190,170,170,190,249,2,40,47,227,136,232,128,8,47,226,146,43,175,146,175,234,130,251,162,170,59,172,130,8,161,4,37,66,16,39,207,144,175,234,164,255,162,40,43,131,162,201,224,0,33,2,254,40,47,64,166,234,170,246,162,46,36,131,74,200,161,6,36,2,14,46,175,170,174,202,170,254,162,202,42,195,216,232,128,8,35,194,4,32,143,190,168,138,168,249,2,124,37,67,212,229,64,254,32,130,62,32,143,188,169,10,254,250,66,126,34,67,188,234,64,60,34,130,254,34,143,128,175,234,210,249,2,124,43,131,84,233,32,16,33,2,254,33,15,254,170,170,146,251,162,146,47,227,146,201,32,134,35,226,0,35,239,162,171,234,128,251,226,42,43,227,170,235,224,0,33,2,252,34,143,212,171,170,144,255,194,16,43,131,144,231,192,0,33,66,108,34,79,172,175,74,164,250,226,116,42,195,164,202,64,36,39,226,64,43,207,164,171,202,164,251,194,32,39,195,164,233,128,102,33,2,86,41,47,214,169,42,254,249,2,126,36,67,168,233,0,110,33,2,40,36,79,186,160,10,234,250,162,234,42,163,226,234,160,164,40,130,72,254,234,144,168,234,226,250,66,174,58,76,164,18,66,108,37,66,16,47,239,184,173,74,146,249,2,126,42,67,164,225,128,102,34,34,20,35,239,136,171,234,170,251,98,34,43,227,162,235,224,34,32,130,62,34,47,190,170,10,190,250,162,106,39,227,106,234,161,38,125,2,144,19,239,212,52,133,20,180,35,248,36,131,248,4,71,254,33,2,124,33,15,184,169,10,254,250,66,122,57,14,254,5,64,146,17,7,222,19,79,212,32,131,148,78,35,248,36,131,248,4,71,252,33,66,20,35,239,148,171,234,136,251,226,42,42,163,182,234,32,38,34,66,126,34,79,144,169,74,254,250,130,68,42,163,252,234,128,72,33,66,62,33,79,190,170,42,190,250,34,62,40,131,190,233,64,34,32,2,126,36,143,92,165,74,92,245,66,92,36,131,220,234,161,24,33,2,60,34,79,188,170,74,188,250,66,60,33,3,212,234,160,184,33,2,254,34,143,146,170,170,254,241,2,254,42,175,186,8,160,134,33,2,254,41,15,188,169,74,254,249,66,188,57,14,252,20,66,124,33,2,126,34,79,254,173,42,136,251,226,16,41,195,164,229,64,136,17,7,222,18,79,212,108,138,148,78,35,248,36,131,248,4,71,254,33,66,62,249,74,190,168,138,190,250,162,62,42,163,190,233,64,34,34,130,254,242,138,254,170,170,254,250,162,254,36,67,124,228,64,124,47,226,40,47,239,170,175,234,128,251,194,0,47,227,84,233,32,48,37,66,56,47,239,130,171,138,168,251,130,16,39,195,144,239,224,0,32,226,240,37,79,184,175,234,152,251,66,82,34,3,148,234,161,56,34,2,124,40,143,124,165,74,124,242,2,82,43,207,90,10,128,88,31,130,144,6,3,152,196,98,40,251,234,170,251,226,8,251,224,130,32,130,62,33,79,254,170,42,190,250,34,62,40,131,190,232,128,8,33,2,254,37,15,162,171,202,212,251,162,16,47,227,144,233,0,16,31,128,80,2,15,254,18,38,96,32,143,190,170,175,190,32,143,190,34,34,250,34,79,112,160,10,114,245,66,112,40,35,210,234,64,120,33,2,254,33,15,124,165,74,124,165,79,254,34,3,84,236,161,58,32,194,112,37,79,56,175,234,84,169,47,124,37,66,124,245,65,124,34,130,254,33,15,124,161,10,254,165,79,254,32,2,124,244,65,124,34,130,254,34,143,126,172,138,126,164,143,254,36,67,168,225,0,238,34,66,126,34,79,254,172,42,188,249,2,42,37,195,172,232,160,24,34,2,124,40,143,126,165,74,98,244,130,126,36,3,190,234,33,62,33,2,254,42,79,254,170,138,254,170,175,254,42,130,236,242,160,40,36,66,254,36,79,254,170,170,254,161,79,254,41,66,136,245,98,2,9,15,254,12,3,116,10,131,38,38,143,190,170,175,190,32,143,190,4,15,254,4,15,254,144,35,248,96,139,254,170,175,190,32,143,190,46,226,170,46,239,170,174,234,72,175,239,72,39,226,36,249,128,230,16,1,0,63,132,64,4,7,252,4,0,64,36,130,72,63,128,8,251,232,162,170,170,170,81,74,162,63,132,64,255,224,64,68,71,252,17,199,214,18,7,222,85,39,204,65,40,64,127,224,64,68,71,252,65,196,16,119,234,82,39,207,66,39,194,234,189,206,126,8,129,24,16,102,120,36,130,72,252,130,126,116,133,72,84,165,74,118,96,66,32,130,8,125,229,20,138,32,0,63,128,0,0,0,0,127,192,0,65,7,158,162,129,4,0,3,248,4,15,254,4,0,64,20,0,128,65,7,158,162,128,0,126,1,32,19,130,136,37,4,32,141,131,6,65,7,158,162,129,68,63,0,16,17,1,252,0,79,228,1,64,8,33,3,222,82,136,132,63,192,144,9,15,254,9,0,144,17,2,16,65,7,158,82,136,132,63,130,8,36,130,72,36,128,162,18,38,30,65,7,158,162,129,4,3,131,208,37,2,72,36,130,68,68,40,64,65,7,158,162,129,68,7,131,192,36,3,252,12,65,84,36,132,64,65,7,158,162,128,132,8,1,252,37,68,148,10,65,36,37,64,136,65,7,222,146,128,0,121,225,18,17,65,18,29,175,20,65,0,16,65,7,158,162,128,0,127,196,0,95,5,16,95,4,0,127,192,0,65,7,158,162,128,0,63,130,8,63,130,8,63,128,0,255,224,0,65,7,158,162,129,4,4,2,64,63,132,64,63,128,64,4,15,254,65,7,158,162,129,0,31,194,128,79,128,128,15,192,128,8,0,128,65,7,158,162,129,0,31,194,4,94,65,36,18,65,228,1,64,8,65,7,158,162,128,0,8,0,64,63,128,0,17,0,160,4,7,252,65,7,158,162,129,4,127,192,4,127,64,4,62,66,36,62,64,12,65,7,158,162,129,4,127,129,8,18,130,16,127,138,8,32,131,248,65,7,158,146,128,132,16,7,220,21,65,84,21,66,84,53,196,128,65,7,158,162,128,0,34,0,252,98,66,36,37,66,136,80,8,254,65,7,158,162,128,4,17,2,8,127,192,4,63,130,8,32,131,248,65,7,158,162,129,4,16,7,188,18,65,164,114,65,60,82,66,0,33,3,222,82,136,132,34,131,176,34,67,156,4,15,254,4,0,64,65,7,158,146,128,128,36,3,248,68,15,254,10,0,164,18,70,28,65,7,158,162,128,12,247,1,16,37,195,80,149,5,124,32,5,254,65,7,158,162,129,4,4,0,160,49,141,246,4,3,248,4,7,252,65,7,158,146,131,240,34,5,248,4,143,254,4,131,248,4,0,192,65,7,158,162,129,4,34,2,60,116,66,36,33,67,164,229,64,8,65,7,158,162,129,4,0,7,252,4,2,72,36,133,84,4,15,254,65,7,158,162,143,254,4,3,248,36,131,248,164,135,248,24,14,126,65,7,158,162,129,4,32,2,124,245,66,84,55,206,64,36,38,62,65,7,158,146,66,72,21,3,248,32,131,248,32,131,248,32,130,24,65,7,158,162,129,68,33,2,144,107,202,232,42,130,144,34,130,198,65,7,158,162,128,64,127,192,64,255,226,8,63,130,8,34,130,16,65,7,158,162,128,64,63,128,64,255,224,0,63,130,72,10,7,28,65,7,158,162,129,4,127,228,32,95,196,168,127,196,80,72,135,254,65,7,190,164,129,248,5,7,252,4,1,248,48,133,248,16,129,248,65,7,158,162,129,16,127,193,16,8,15,254,16,3,248,208,129,248,66,7,190,164,129,36,18,71,254,18,65,164,115,193,36,82,66,60,65,7,158,146,130,0,47,207,68,35,131,84,235,162,16,175,228,16,65,7,222,162,67,250,36,131,248,36,131,248,0,15,254,17,2,16,65,7,190,164,128,160,63,130,72,63,130,72,63,128,64,255,224,64,65,7,158,162,128,132,4,7,252,81,66,8,95,64,64,4,7,252,65,7,222,162,128,64,127,229,2,163,195,164,75,74,168,50,44,30,65,7,158,162,128,64,127,128,72,255,224,72,127,130,232,53,132,72,65,7,158,162,129,36,127,228,32,126,68,20,93,133,74,93,104,34,65,7,158,162,128,64,63,130,72,255,224,0,63,130,72,10,7,28,66,7,190,164,129,240,17,1,240,17,7,252,4,3,248,4,15,254,66,7,188,165,1,120,32,134,254,164,2,124,41,2,254,34,130,198,66,7,190,164,129,16,127,193,16,255,226,72,63,130,72,255,226,8,66,7,190,164,135,252,74,7,188,74,7,184,74,7,188,74,7,252,65,7,222,146,135,252,10,3,248,42,131,248,4,15,254,21,6,76,65,7,222,146,135,252,81,68,228,81,71,252,34,67,168,35,35,158,65,7,158,162,131,252,34,2,254,42,162,244,41,197,56,82,170,70,65,7,158,146,135,208,17,231,226,84,135,200,56,133,84,146,65,66,65,7,222,146,135,252,74,71,252,5,7,252,68,134,48,82,168,70,65,7,158,162,128,64,46,196,164,110,196,164,110,193,16,17,38,14,66,7,190,148,131,252,42,3,248,42,131,248,50,69,184,82,41,158,65,7,158,162,133,70,213,139,144,253,235,148,213,73,20,253,64,36,33,3,222,82,67,248,36,131,248,34,67,152,0,67,248,42,143,254,121,234,40,127,192,160,63,130,168,63,129,16,31,0,64,127,192,64,65,7,158,162,131,188,145,15,190,49,133,170,144,227,248,36,131,248,66,7,190,164,135,164,9,133,106,32,69,250,16,129,248,9,7,254,65,7,158,162,69,8,255,229,74,116,133,124,253,64,84,84,136,182,65,7,158,162,79,144,33,207,164,168,143,190,34,167,42,169,66,34,65,7,158,146,130,78,37,175,106,33,67,126,229,34,126,165,36,126,20,2,92,68,68,68,117,196,68,68,71,252,4,0,160,49,140,6,16,6,60,64,71,188,64,71,252,17,1,16,255,225,16,33,4,16,4,7,252,8,3,248,16,15,254,32,133,60,160,163,184,32,131,248,16,6,56,64,135,56,64,135,248,32,7,252,128,69,84,85,64,8,8,3,248,32,131,248,32,131,248,32,131,248,4,15,254,21,6,76,8,1,60,33,71,212,85,69,124,85,69,84,95,78,20,7,224,0,32,7,128,75,230,136,88,143,136,72,134,136,88,132,136,107,233,0,33,7,16,81,7,84,85,79,84,85,71,84,85,69,84,87,203,4,34,7,16,85,71,68,84,79,40,82,135,16,81,5,40,84,75,130,32,135,72,84,135,74,86,207,72,84,135,72,84,165,106,84,107,0,33,7,16,81,7,124,85,79,84,85,71,124,81,5,16,81,11,16,32,103,120,84,7,64,87,207,84,85,71,84,84,133,84,89,75,34,34,7,16,87,231,32,82,15,60,82,71,36,82,69,68,85,75,136,32,7,126,80,71,4,87,79,84,85,71,84,87,69,4,81,75,8,33,7,30,81,7,124,84,79,68,87,199,64,84,5,64,88,11,0,33,7,16,81,7,124,85,79,84,87,199,84,85,69,84,87,203,0,34,7,32,83,231,80,89,15,30,81,7,16,81,229,16,81,11,16,32,7,126,82,135,40,87,239,106,86,167,110,84,37,66,87,235,0,33,7,84,83,135,16,87,207,68,87,199,68,87,197,68,85,75,72,39,199,68,87,199,64,84,111,120,84,231,120,84,229,120,84,171,134,32,7,124,80,135,16,87,207,16,83,7,124,85,69,84,95,235,0,36,71,40,95,231,16,87,207,68,87,199,68,87,197,68,87,203,0,34,135,126,82,135,254,90,175,254,90,167,254,84,69,124,84,75,124,33,7,124,82,135,254,85,79,124,85,71,124,81,5,124,81,11,126,34,135,124,82,135,126,88,47,124,82,7,84,91,133,84,89,43,48,4,1,176,100,203,242,1,0,160,255,224,196,26,134,144,140,192,128,8,3,240,41,2,80,63,192,4,4,143,254,10,3,148,200,128,198,32,15,188,42,68,164,171,193,64,255,224,64,26,70,152,138,128,198,4,135,252,36,1,104,37,4,72,8,15,254,18,67,24,84,129,134,65,2,84,137,36,0,32,228,112,2,15,254,10,3,20,212,129,134,120,132,190,121,68,62,184,130,156,58,143,254,9,1,138,106,64,194,136,69,14,7,143,200,36,135,126,36,143,202,36,164,102,69,40,8,136,5,124,0,143,144,34,135,68,40,47,124,33,4,16,79,232,0,136,133,16,2,79,126,34,71,66,34,15,188,34,66,88,65,72,98,139,197,36,3,207,164,35,199,64,39,239,146,37,36,106,71,168,6,137,5,84,5,79,124,34,7,126,34,143,42,37,196,72,73,73,34,17,7,252,4,15,254,9,7,20,17,15,254,84,203,168,9,97,162,33,10,144,113,2,84,253,66,84,117,74,212,37,66,124,32,66,0,33,2,16,170,7,62,36,79,164,34,71,40,169,2,40,36,66,130,32,10,252,117,66,84,253,66,84,119,202,192,36,34,66,35,226,0,32,10,190,114,2,32,251,226,40,114,234,170,34,162,74,41,34,38,4,2,72,63,132,68,127,192,0,36,129,80,127,193,80,36,132,68,32,10,254,114,130,40,255,226,170,122,170,174,44,34,130,47,226,130,68,2,126,9,34,40,76,66,72,21,15,254,21,2,72,68,64,64,59,194,4,121,68,136,179,66,74,85,15,254,14,3,88,196,96,64,84,161,10,254,165,148,149,69,40,101,75,244,68,165,74,158,160,64,33,10,136,119,226,66,251,194,0,119,234,144,37,66,146,37,2,32,33,10,164,119,194,16,255,226,36,117,42,160,33,2,100,33,130,96,34,10,188,116,66,254,245,2,92,118,138,200,39,226,72,37,66,98,32,74,164,115,98,84,251,66,46,116,10,188,34,66,60,34,66,60,34,42,148,119,226,36,250,66,72,118,234,36,36,130,238,34,34,0,32,10,190,113,34,92,245,2,190,114,74,188,34,66,60,34,66,44,35,234,148,112,130,126,250,162,72,113,138,254,35,130,84,41,34,16,33,10,252,116,66,124,244,66,124,116,74,124,33,34,254,34,130,70,38,10,190,114,34,254,248,130,190,122,170,254,34,130,42,43,226,66,0,3,240,33,3,240,33,3,240,36,2,68,34,130,144,48,130,4,123,196,136,122,132,190,120,133,26,106,99,248,32,131,248,32,143,254,123,192,132,41,65,140,41,68,164,17,1,16,255,225,16,33,4,16,35,98,18,85,40,186,65,98,18,243,97,90,161,36,18,37,160,36,4,0,160,63,140,6,63,130,8,63,128,0,123,196,164,41,68,164,8,131,240,10,15,254,25,3,240,209,1,240,121,194,164,25,70,172,10,7,188,10,3,184,10,7,188,10,7,156,41,65,140,107,65,140,17,7,252,0,3,168,42,131,168,40,135,188,74,66,148,74,65,140,32,1,54,121,36,210,123,164,22,125,37,118,253,165,82,85,36,246,251,96,18,113,37,90,115,96,18,251,109,218,169,47,146,173,170,164,253,202,20,186,109,28,253,73,8,169,111,188,74,66,148,74,65,140,4,0,128,17,3,224,4,0,144,63,128,64,36,132,68,20,0,128,34,15,120,34,143,106,37,166,134,18,35,224,8,135,252,37,4,200,17,7,252,17,1,240,17,15,254,40,133,20,191,161,80,36,128,192,17,7,158,75,71,136,75,73,34,60,0,136,63,194,80,68,128,192,8,207,48,168,132,18,123,202,8,33,47,190,32,138,172,252,160,24,4,15,254,4,7,252,41,3,164,41,143,208,19,197,136,149,195,42,16,135,200,17,195,136,16,135,200,35,227,136,104,137,20,41,68,34,34,15,190,36,42,146,117,98,58,215,226,146,115,173,86,33,45,6,16,65,4,125,65,20,255,65,20,81,197,212,80,69,4,191,224,0,16,1,28,125,65,28,17,79,220,17,69,212,83,229,0,191,224,0,32,34,242,116,162,106,42,175,106,34,171,74,164,42,134,224,9,254,16,135,200,18,225,18,252,129,40,20,133,212,81,37,32,191,224,0,36,130,254,244,130,254,36,143,90,47,227,84,165,74,40,127,224,0,16,1,62,122,33,42,254,66,160,106,234,234,42,162,164,74,169,178,17,1,18,123,225,20,255,226,136,109,234,178,45,226,146,73,233,128,0,7,128,3,231,136,72,135,136,0,132,136,48,129,200,227,224,0,1,15,16,15,239,16,145,15,124,2,73,40,97,3,168,228,64,130,0,15,190,32,143,136,168,138,136,216,136,136,248,136,136,250,128,16,0,15,190,32,143,136,168,138,190,216,136,136,248,136,136,248,128,8,0,71,196,16,71,222,84,69,68,109,68,76,124,68,68,125,64,8,0,143,136,34,175,174,171,170,234,218,168,174,250,136,170,250,32,30,0,143,136,32,143,190,168,138,136,219,232,162,250,40,162,251,224,34,2,15,160,35,239,208,169,10,158,217,8,144,249,232,144,249,0,16,1,15,136,35,239,162,169,10,148,217,136,144,249,40,146,248,224,0,1,15,80,39,207,208,169,10,254,218,136,168,250,136,170,250,96,64,1,15,144,33,207,164,173,138,144,219,200,212,249,72,148,249,192,0,2,79,168,35,15,162,169,234,128,219,232,162,251,232,162,251,224,0,0,15,190,33,79,182,169,74,190,218,8,160,250,8,160,250,0,64,0,15,190,32,15,190,170,170,170,219,168,174,250,168,170,250,160,34,249,194,20,249,74,156,168,10,190,216,136,156,248,136,136,251,224,0,0,143,148,34,47,128,169,202,136,219,232,136,250,200,202,250,128,16,0,207,176,32,175,164,169,74,190,216,72,164,249,72,132,249,64,8,0,15,188,34,79,188,170,74,188,218,168,188,250,136,170,251,96,0,1,15,136,35,207,164,169,138,190,216,8,188,250,72,164,251,192,0,2,15,174,39,175,170,170,234,250,221,168,222,255,168,138,249,32,38,3,207,164,35,207,164,171,202,128,219,232,136,250,232,168,253,224,0,7,239,138,34,143,174,170,138,222,218,72,188,250,72,188,250,64,44,0,143,190,33,15,188,173,74,156,216,8,190,250,168,170,250,160,126,0,143,190,34,143,190,170,170,190,218,168,190,250,136,190,253,32,158,7,111,146,37,175,182,173,170,146,217,136,164,252,168,176,248,64,56,10,175,108,39,239,168,175,234,144,223,200,144,255,232,144,250,128,68,1,79,144,34,239,228,171,234,164,219,232,164,251,232,128,254,160,170,0,143,190,33,15,188,168,74,170,218,168,202,248,8,190,250,160,126,0,239,136,35,239,170,170,202,190,218,136,182,250,200,182,250,64,76,2,143,254,42,175,254,170,170,254,216,8,252,252,72,252,250,128,254,0,111,184,32,143,190,170,170,190,218,168,190,248,136,190,248,0,170,0,7,252,8,3,64,202,65,40,103,0,168,50,140,36,10,32,64,34,34,20,59,226,8,249,200,136,219,234,144,219,232,200,248,128,62,255,193,0,31,130,8,33,5,248,16,129,248,4,2,120,36,5,254,247,130,72,52,172,106,9,99,252,32,67,252,4,2,124,36,5,254,19,199,160,19,231,164,20,67,248,32,131,248,4,2,124,36,5,254,1,71,254,73,71,232,92,170,182,8,35,248,32,131,248,68,11,254,17,9,80,81,239,228,149,75,200,213,67,250,32,131,248,68,11,254,121,4,144,73,231,162,20,33,18,92,165,10,80,37,194,240,160,4,0,7,124,84,69,72,117,194,68,182,74,84,184,140,148,18,34,64,0,7,124,82,133,40,114,130,254,34,139,168,162,139,72,196,128,136,113,5,16,87,199,16,33,2,126,185,10,16,162,139,168,228,64,130,1,7,40,84,69,130,115,194,36,162,75,180,162,139,162,226,32,30,120,4,190,72,135,136,17,1,30,91,37,82,81,37,210,241,224,0,114,69,36,84,71,222,36,66,84,180,202,68,164,75,68,229,64,72,112,5,124,85,71,84,37,66,254,181,74,84,165,75,84,229,64,140,112,197,112,84,7,80,37,2,126,185,10,16,165,75,146,229,0,32,1,7,8,87,229,66,114,2,36,34,139,48,162,43,162,225,224,0,8,14,128,168,11,238,234,164,170,106,164,170,106,173,46,42,4,64,112,133,8,87,229,74,116,130,126,181,42,82,165,75,200,233,65,34,1,7,16,82,5,36,119,226,2,160,11,188,162,75,164,194,64,60,1,7,16,87,197,16,127,226,16,177,10,124,161,11,16,239,224,0,2,7,62,94,5,40,113,34,110,176,10,126,162,139,42,228,160,134,4,135,74,86,197,72,118,162,70,177,10,254,161,11,144,225,0,16,1,7,16,85,5,124,121,2,16,175,235,40,162,139,42,228,160,134,8,71,88,80,133,8,115,226,200,180,138,72,164,139,64,235,225,0,1,7,8,87,229,36,114,130,24,182,74,170,162,139,40,228,128,136,2,7,16,87,229,0,114,66,66,178,138,40,162,139,16,226,128,68,2,7,16,87,197,68,119,194,68,183,202,80,165,75,72,230,64,66,119,197,4,87,199,64,36,66,60,177,10,8,186,44,170,17,128,0,1,7,30,81,5,124,116,66,124,36,75,124,161,11,126,193,0,16,0,7,124,85,69,124,117,66,124,49,10,254,163,139,84,201,32,16,4,7,64,87,5,174,114,162,42,175,171,42,162,171,94,233,1,8,112,101,120,84,135,126,36,130,126,182,42,106,182,172,136,9,65,34,0,135,126,84,5,72,116,130,78,36,139,72,165,235,82,201,33,30,1,7,8,87,229,36,113,130,126,176,10,60,162,75,164,195,192,36,10,7,78,80,165,234,116,194,74,180,170,234,164,203,168,202,129,24,0,135,30,92,165,126,116,162,158,180,138,126,180,140,190,20,130,62,1,71,84,95,229,84,117,194,64,183,234,16,175,235,56,197,64,146,1,7,82,87,229,0,127,226,16,47,235,170,170,171,162,200,160,132,0,199,112,81,5,254,113,2,124,37,75,124,165,75,124,193,0,254,112,197,112,81,7,124,37,66,124,177,10,254,169,43,186,200,160,134,1,7,8,87,229,84,119,226,84,37,203,64,167,203,84,200,129,54,116,69,40,87,199,16,39,131,32,175,202,64,175,203,16,207,224,0,1,7,8,87,229,66,119,226,64,39,235,106,167,235,106,202,161,38,119,229,20,80,135,126,34,162,88,177,10,254,179,140,84,9,32,16,119,229,36,83,199,36,35,195,166,167,202,4,175,235,90,226,64,218,114,133,254,82,135,0,47,227,40,47,234,170,170,171,214,200,32,134,0,103,248,85,69,36,119,130,36,183,202,16,175,235,16,226,128,68,239,234,132,175,78,142,72,68,244,106,196,228,104,77,164,37,68,232,119,229,100,85,71,126,37,162,84,183,202,84,181,76,164,10,161,82,114,133,170,86,199,254,34,130,124,177,10,124,177,12,254,2,128,68,112,197,112,85,71,56,47,226,84,185,42,124,165,75,124,197,64,124,116,133,232,80,167,232,43,226,232,180,138,232,165,171,74,213,160,166,119,197,84,87,199,32,39,226,162,63,170,170,175,171,34,239,160,14,114,133,254,82,135,94,42,162,254,186,170,190,186,172,190,10,32,166,113,5,126,85,71,124,37,66,124,53,10,126,165,75,122,233,1,124,114,165,84,82,167,126,38,162,82,182,170,126,165,75,124,229,64,90,114,133,126,90,135,254,38,194,182,176,10,124,165,75,84,226,128,198,114,69,116,80,103,124,37,66,116,176,170,252,180,140,48,4,129,134,6,1,128,101,129,32,12,7,32,5,1,144,99,0,208,49,0,48,16,2,124,218,69,36,98,73,76,40,13,188,42,76,164,43,193,36,16,2,126,216,133,16,99,201,36,42,77,188,42,76,164,43,193,36,34,134,168,148,134,94,76,138,72,85,203,106,84,137,72,84,130,72,18,130,126,218,133,124,36,77,124,52,77,124,49,13,254,82,130,68,17,2,124,222,197,84,38,205,124,48,13,74,54,205,72,86,162,70,32,67,148,72,201,4,125,69,76,124,101,92,124,69,68,84,72,196,65,7,16,151,207,148,169,79,148,175,239,144,169,10,168,138,65,194,66,7,62,148,15,188,168,143,144,171,239,170,172,170,146,138,161,132,64,71,56,146,143,168,170,207,170,170,175,170,170,170,168,140,225,130,18,133,176,82,79,156,32,3,240,66,3,248,36,131,248,36,132,24,65,7,16,149,66,56,249,10,254,250,138,168,250,170,170,138,161,198,64,135,190,144,143,190,170,175,170,171,239,136,169,202,170,136,129,136,66,39,20,147,226,42,251,234,170,251,234,136,251,234,136,168,129,136,17,69,216,81,47,206,4,15,254,0,7,252,0,3,248,32,131,248,17,207,212,18,103,220,85,71,200,65,72,64,255,226,8,63,128,0,32,15,252,36,71,84,37,79,212,85,71,84,81,7,42,82,165,70,63,128,64,127,197,84,0,1,248,0,7,252,8,1,248,0,128,48,63,128,64,127,197,84,0,3,252,36,3,248,36,132,136,74,137,16,63,128,64,127,196,68,53,128,0,4,7,252,16,128,144,6,7,158,63,128,64,127,197,84,0,7,124,17,2,124,145,5,124,32,5,254,63,128,64,127,197,84,0,0,64,127,193,16,14,15,30,17,2,16,63,128,64,127,197,84,0,8,32,95,200,32,95,193,36,82,200,32,63,128,64,127,197,84,10,7,188,10,3,184,10,7,188,10,0,160,63,128,64,127,197,84,8,3,248,17,0,160,127,193,16,14,7,28,63,128,64,127,197,84,4,4,12,47,4,84,34,128,254,33,4,124,63,128,64,127,197,84,143,132,168,15,205,36,74,68,212,111,68,12,127,192,64,255,233,106,41,7,208,41,239,228,69,71,200,69,68,226,127,192,64,255,233,82,32,5,190,210,163,62,90,162,190,232,129,62,17,5,16,93,5,18,253,64,24,87,5,80,109,36,82,124,224,64,32,10,60,186,74,36,251,194,36,170,74,188,218,72,164,255,224,128,34,10,32,187,234,66,251,160,42,171,170,166,218,8,162,249,224,128,16,5,62,93,37,18,253,96,32,85,229,82,109,36,82,125,224,64,34,138,40,186,170,44,251,130,40,170,138,168,218,168,170,255,96,128,32,10,60,186,74,60,250,66,60,170,138,170,218,72,180,250,32,128,32,10,124,185,10,124,250,66,126,168,10,188,218,72,164,251,192,128,32,10,60,186,74,36,251,194,8,170,234,168,218,136,184,252,224,128,35,234,34,187,234,32,250,224,36,170,170,174,218,72,174,252,64,158,63,130,8,63,128,64,127,196,68,127,196,68,127,192,66,4,32,62,63,0,0,255,193,18,32,231,248,36,131,248,36,131,250,4,32,62,123,196,164,123,195,248,36,143,254,36,131,248,36,131,250,4,32,62,20,1,32,32,7,254,162,3,252,34,3,252,34,2,32,63,226,0,18,1,16,63,198,32,191,194,32,63,194,64,255,224,64,4,0,64,18,3,252,98,11,252,34,3,252,32,7,248,17,1,60,32,68,24,2,135,36,84,5,126,124,133,126,116,133,126,84,135,200,199,224,64,34,130,36,116,13,254,84,130,126,84,136,254,116,133,72,87,231,64,59,130,168,59,130,168,59,130,32,127,202,32,47,130,32,63,194,0,36,131,12,77,15,254,85,71,222,85,71,222,87,71,222,65,4,16,119,130,74,54,174,86,10,1,16,110,200,66,127,194,72,21,7,252,4,7,252,17,5,20,149,32,160,49,140,230,4,3,248,21,7,252,79,138,32,95,192,80,72,136,96,9,3,248,196,99,248,21,7,254,35,207,160,83,231,168,18,135,72,26,1,240,100,203,250,21,7,252,121,1,30,255,67,72,85,73,162,49,141,246,4,3,248,21,7,252,34,15,188,38,143,144,70,135,228,73,9,232,100,107,248,21,7,252,65,2,254,132,4,254,37,68,84,27,102,232,132,99,248,21,7,252,120,132,190,121,68,62,120,138,220,58,129,248,100,75,250,21,7,252,4,1,176,96,203,250,21,7,252,32,133,20,138,39,28,170,175,190,66,135,36,146,15,254,170,15,168,170,143,168,2,161,170,228,96,128,65,7,8,151,239,144,169,15,156,169,79,148,2,67,164,197,64,136,66,135,36,146,2,126,250,10,190,250,170,170,250,160,36,52,172,146,64,7,124,145,2,84,251,138,144,255,234,144,249,0,16,25,14,16,65,7,16,145,226,16,249,10,188,250,74,164,250,64,36,27,206,0,64,135,8,144,226,8,251,234,162,251,234,160,250,0,32,52,12,128,64,103,56,144,130,8,251,234,136,249,202,170,248,128,8,24,142,8,65,71,20,146,66,110,250,74,164,251,74,172,250,64,36,27,78,40,40,129,80,127,201,4,63,4,32,63,130,72,63,130,72,255,224,0,64,135,8,145,2,36,251,234,130,251,202,164,250,64,36,27,206,0,64,135,136,139,225,8,251,234,136,248,138,190,248,128,8,27,238,0,65,7,16,151,194,16,249,10,184,248,10,184,250,128,40,27,142,40,64,135,8,151,226,16,251,234,210,249,234,146,249,224,18,25,174,20,64,7,62,144,130,16,251,234,170,250,170,170,250,160,34,58,172,36,66,7,16,151,194,40,249,10,168,252,106,168,250,128,40,58,140,72,66,7,16,151,194,0,250,74,194,250,138,168,249,0,40,52,76,130,21,7,252,8,15,254,40,133,244,162,39,248,36,131,248,36,135,252,67,231,2,145,226,2,251,234,132,251,234,132,250,64,20,56,76,12,64,7,62,144,130,62,250,170,190,250,170,190,252,128,48,58,236,64,64,7,126,144,2,62,250,170,174,251,170,170,250,160,42,58,172,38,68,71,36,145,226,104,251,74,190,250,74,174,250,64,36,53,236,128,65,7,94,149,162,84,249,170,144,248,138,190,248,128,8,27,238,0,64,71,4,151,66,94,245,74,116,245,202,84,247,64,4,57,76,8,65,7,30,147,34,12,251,42,136,251,234,136,249,192,42,24,142,24,64,103,56,144,130,18,251,202,136,249,74,190,248,128,44,52,172,24,65,2,84,137,36,56,92,8,240,50,7,248,36,131,248,36,143,254,65,7,8,151,226,66,251,202,128,255,234,168,250,128,42,52,172,134,64,7,224,154,226,234,250,170,234,248,170,202,250,224,216,40,140,8,65,7,124,145,2,60,249,10,254,250,74,188,250,64,60,26,78,44,65,7,124,145,2,126,250,74,210,251,202,212,249,64,8,57,76,34,95,6,160,171,228,234,250,170,170,254,170,170,255,64,36,50,172,50,65,71,20,147,98,20,249,74,182,249,74,148,251,96,20,57,76,20,67,199,36,147,194,36,251,202,128,250,170,172,251,128,42,59,108,32,64,7,60,146,66,60,250,74,188,248,10,254,252,32,126,52,44,126,79,231,130,153,34,146,255,234,146,251,170,170,251,160,130,47,236,130,66,7,76,148,66,108,252,74,252,250,138,168,250,160,42,52,108,128,64,135,148,138,33,8,251,202,132,248,138,144,248,160,98,58,76,28,67,231,170,147,226,42,251,234,162,251,234,182,251,224,34,58,172,68,64,7,124,145,66,100,250,74,252,250,202,252,250,64,44,55,172,8,66,167,170,149,66,42,250,170,128,251,234,170,251,224,42,59,236,0,64,135,62,144,130,20,251,234,148,251,234,162,250,160,42,57,76,34,65,71,84,159,226,84,253,202,192,255,234,136,251,224,28,58,172,8,71,199,84,151,194,0,251,202,128,255,234,144,251,192,4,57,76,8,65,71,100,146,66,44,255,106,164,255,74,172,250,64,42,59,44,32,71,231,64,155,194,36,251,202,164,251,202,144,251,192,84,24,142,54,64,135,190,146,34,62,250,42,190,248,10,190,248,128,28,24,142,62,64,135,190,146,34,62,250,10,190,250,170,190,250,160,42,26,46,70,71,199,84,146,130,16,250,202,210,255,202,212,255,192,18,55,236,2,34,15,188,38,143,144,66,135,244,146,3,248,36,131,248,36,143,254,65,7,122,145,66,126,251,74,218,248,234,188,250,64,60,58,76,60,67,199,36,147,194,36,251,202,128,251,106,218,251,96,90,49,44,54,64,7,124,149,66,124,249,10,180,253,42,144,251,64,82,57,12,16,64,103,120,146,162,20,250,10,190,252,138,190,248,128,42,58,172,62,74,71,244,170,68,254,244,170,250,245,170,250,244,160,234,53,172,100,71,231,40,159,226,170,255,234,128,251,202,128,255,224,16,53,76,178,71,231,16,151,226,82,250,202,128,251,202,132,251,192,4,59,204,4,65,199,148,145,194,20,251,234,170,251,234,128,251,224,18,56,204,50,64,143,232,85,239,234,84,71,202,9,35,248,36,131,248,36,143,254,65,7,254,152,130,190,248,170,254,250,170,190,250,160,190,210,162,38,64,6,254,168,64,212,250,106,250,250,10,164,255,64,164,210,162,80,66,135,124,145,2,124,249,10,254,249,74,254,248,0,124,52,76,124,65,71,62,144,130,62,250,170,182,250,42,190,248,64,62,57,76,12,66,134,254,170,160,254,250,170,254,248,10,252,252,64,124,50,140,254,80,15,188,82,71,36,35,207,164,170,79,188,32,15,128,39,226,0,81,15,144,87,199,84,37,79,212,175,239,144,33,15,168,34,130,68,80,143,136,84,135,62,44,143,72,165,79,84,38,47,64,43,226,0,80,79,184,81,7,126,33,143,164,172,47,164,34,79,164,36,66,132,82,15,188,82,71,72,35,239,170,170,175,190,33,143,170,34,162,70,81,79,190,81,71,8,39,239,144,170,239,226,34,79,174,34,66,44,82,15,190,85,39,58,32,47,186,168,47,186,34,175,186,32,162,4,83,207,132,80,135,126,33,175,168,169,143,254,35,143,84,41,34,16,82,143,252,82,135,254,33,15,124,165,79,124,37,79,254,36,66,76,81,79,190,81,71,126,33,15,190,174,175,190,34,175,190,34,162,38,113,5,16,82,143,196,136,39,40,82,135,40,82,135,40,82,133,72,121,196,148,73,79,214,134,7,156,73,71,148,73,71,136,73,69,162,112,133,8,80,143,190,136,135,8,83,231,34,82,39,34,83,229,0,113,5,60,82,79,180,138,199,32,83,231,2,87,167,2,80,165,4,112,69,120,85,15,208,141,7,126,85,7,72,84,167,102,85,37,8,112,69,56,82,15,160,139,231,32,82,7,62,85,39,82,89,229,18,113,5,16,83,239,162,141,71,24,82,71,66,83,199,36,82,69,60,119,197,84,87,207,212,143,199,16,95,231,56,85,71,146,81,5,16,113,5,62,82,175,190,138,167,62,81,7,40,87,231,8,80,133,8,117,69,16,87,239,144,139,71,82,82,7,254,82,71,24,82,69,66,113,5,126,84,47,160,139,199,36,85,135,36,84,39,60,82,69,60,113,5,126,84,47,168,143,231,40,87,199,68,85,71,16,82,165,78,113,5,126,84,47,136,139,7,32,83,199,40,87,231,0,82,69,66,119,197,84,87,207,160,135,231,146,87,231,86,87,231,18,87,229,6,33,15,144,171,143,144,175,207,144,35,130,84,105,5,82,80,40,254,34,143,164,175,239,160,171,207,180,37,69,72,89,69,34,79,232,0,127,228,72,127,228,144,84,135,254,82,133,248,84,133,248,74,43,30,32,4,126,250,138,168,255,234,170,250,162,86,40,37,70,80,8,254,34,164,28,248,138,190,250,42,190,250,34,62,42,37,38,80,8,254,47,228,170,255,234,146,255,234,162,251,162,130,88,101,0,80,40,254,32,132,62,249,74,170,251,234,136,251,226,42,43,229,98,82,104,254,65,4,40,150,74,146,199,132,72,151,143,72,39,164,84,132,128,100,63,226,40,63,194,80,42,131,252,40,130,248,40,132,250,73,72,206,249,2,40,117,69,34,180,130,176,84,194,250,10,128,250,9,64,206,113,197,16,255,226,82,117,193,84,46,97,24,126,105,40,25,1,8,4,15,254,36,132,254,116,130,126,78,3,24,222,97,40,25,1,8,60,66,8,57,2,32,56,66,8,253,33,2,36,71,200,5,0,32,56,130,16,58,2,8,249,2,36,120,128,16,255,225,32,34,36,30,40,131,16,250,66,8,121,0,56,60,0,120,124,0,122,124,32,62,40,131,16,250,66,72,117,3,248,36,131,248,36,143,254,32,130,24,40,131,20,250,130,20,124,128,80,63,193,4,32,197,248,16,129,248,40,67,56,32,79,184,32,35,92,4,15,254,4,7,252,32,131,248,36,130,144,50,79,200,35,71,136,19,5,20,93,133,18,93,46,14,40,131,48,32,207,176,32,199,176,17,2,254,99,138,84,41,34,16,40,131,16,250,66,8,125,1,72,255,193,16,126,201,34,20,128,248,40,131,16,34,79,136,33,7,168,16,167,172,18,131,148,85,65,34,41,3,40,249,66,40,121,0,64,127,197,4,31,1,64,255,226,16,40,131,52,248,162,20,120,128,0,63,130,168,255,227,72,211,1,140,40,131,16,250,66,8,121,2,72,73,7,252,36,131,106,36,99,98,2,3,254,36,131,254,45,131,108,36,162,32,37,4,160,68,136,252,2,3,254,36,131,254,45,195,106,37,130,224,35,197,224,66,40,30,2,3,254,36,131,254,45,195,74,34,130,64,47,196,168,82,72,96,2,3,252,42,3,248,42,131,248,41,66,216,32,196,240,73,73,12,2,3,254,37,3,252,37,67,252,32,2,248,34,7,254,74,137,36,2,3,254,37,3,252,37,67,252,34,3,252,34,4,248,66,11,254,2,3,252,37,3,252,37,67,252,32,2,168,39,5,252,74,137,36,17,71,212,83,231,212,85,199,212,81,197,148,83,229,128,81,72,34,2,3,252,37,3,252,37,67,252,37,2,136,63,196,168,71,11,254,2,7,252,74,7,252,74,71,252,84,69,222,84,71,212,148,66,204,18,160,156,127,229,28,126,165,84,125,229,36,89,229,36,148,64,4,18,66,62,110,10,26,32,103,252,85,71,252,4,15,254,82,72,146,248,138,136,250,170,170,250,162,62,248,130,42,58,174,42,3,234,128,250,138,168,250,138,222,254,162,42,244,162,106,56,174,18,1,170,164,249,10,144,255,234,144,249,2,124,248,2,60,58,78,36,3,202,128,249,10,156,250,74,200,251,2,40,252,226,18,58,206,8,9,10,96,249,10,164,255,234,128,250,66,82,251,194,68,58,142,16,18,138,198,248,138,190,248,138,254,250,34,24,250,130,24,55,238,8,1,74,162,113,2,30,250,167,18,170,103,252,85,71,252,4,15,254,42,68,82,248,138,190,248,10,190,250,34,34,251,226,8,58,206,74,2,170,144,249,10,164,251,202,144,255,226,36,252,162,48,56,142,48,8,106,184,249,10,254,248,10,164,249,130,126,248,2,60,58,78,60,2,74,188,88,136,168,218,72,194,248,0,60,169,74,148,250,74,164,229,74,136,64,137,136,136,141,190,138,175,170,3,234,170,170,175,170,171,234,64,64,9,188,137,13,188,137,79,254,0,10,188,170,79,164,171,202,64,91,200,164,219,200,164,255,224,66,169,10,254,250,74,164,165,139,38,88,104,248,218,168,144,251,192,8,169,42,190,248,138,190,165,75,34,34,7,32,87,143,168,170,143,168,170,143,168,2,175,170,84,105,130,16,3,156,40,135,200,84,135,254,84,135,200,0,143,232,40,132,136,33,7,16,87,239,180,173,47,188,170,79,188,2,79,188,80,9,126,33,2,146,15,234,80,165,2,254,89,4,254,201,4,254,73,4,255,65,4,16,31,242,72,164,74,131,56,132,72,195,4,16,66,132,76,1,15,20,146,41,79,151,25,0,151,233,66,244,41,66,132,32,126,33,7,191,74,23,129,75,223,229,150,95,253,148,31,225,72,24,134,64,4,124,4,74,124,160,2,254,73,44,146,79,228,128,72,20,127,65,7,159,162,143,190,8,39,190,66,7,190,40,161,134,40,167,28,32,130,127,48,2,254,172,42,126,160,2,126,32,66,127,32,130,48,34,242,57,66,150,41,191,82,37,42,98,178,50,82,37,42,146,81,35,255,226,34,74,168,170,74,162,250,18,33,34,210,162,50,2,32,32,132,255,168,20,255,200,4,128,79,244,213,85,85,127,85,85,83,79,247,16,66,72,66,255,244,74,240,132,255,64,133,8,96,132,255,85,231,250,145,175,250,42,200,138,63,146,9,36,162,104,9,131,8,7,242,20,39,255,213,171,234,162,251,226,34,35,226,136,63,254,136,125,198,162,80,207,241,72,111,255,10,79,255,10,71,252,42,140,167,252,129,62,34,175,254,170,138,191,186,42,190,170,43,190,170,175,241,127,132,72,127,143,254,170,175,254,64,15,254,4,3,252,132,47,255,16,241,184,32,132,8,103,252,8,64,132,63,66,20,33,67,244,33,14,15,10,150,149,80,240,146,136,255,5,79,254,146,9,76,152,111,64,5,255,2,67,72,169,251,241,43,84,149,73,84,140,72,165,17,244,145,73,20,159,127,128,136,127,244,33,66,18,65,24,146,70,66,249,114,98,34,36,34,119,125,34,82,37,34,82,39,34,82,36,34,9,15,255,9,1,199,235,170,170,170,170,105,166,154,171,170,171,109,33,2,126,249,10,254,169,10,255,170,79,202,163,211,8,47,239,136,32,175,136,171,255,168,170,191,170,50,195,185,50,85,243,80,40,254,71,244,6,250,132,127,161,154,42,250,130,16,39,247,152,162,194,74,39,242,6,34,130,255,49,154,42,58,130,16,47,245,24,74,196,202,0,127,248,32,130,8,56,132,255,72,140,136,48,129,20,34,36,65,65,2,255,0,200,74,137,243,250,36,244,170,223,244,74,68,244,136,32,1,31,16,79,232,131,242,21,255,84,85,73,83,4,44,164,113,64,130,127,249,66,33,45,247,0,183,242,144,35,226,18,32,34,14,67,196,68,79,231,66,135,238,137,78,239,146,79,228,41,100,180,135,105,225,18,105,41,35,252,7,191,202,23,146,72,199,138,73,53,97,4,2,126,40,69,8,79,236,146,73,36,254,66,132,73,72,149,7,0,128,4,248,74,255,170,15,160,170,10,160,170,15,160,138,8,62,35,228,34,122,40,34,251,226,34,250,34,62,32,2,128,48,2,127,66,228,93,73,79,255,85,73,220,149,78,221,37,85,218,133,96,249,255,241,16,127,229,18,255,240,64,24,15,254,0,195,240,192,3,255,0,64,127,248,10,128,171,255,165,170,90,191,170,95,165,139,248,33,253,240,82,125,64,84,253,129,20,255,33,18,81,17,26,17,70,16,240,129,255,240,8,127,132,31,127,144,129,74,20,145,136,162,132,16,4,15,255,4,7,254,68,36,66,68,36,66,68,164,68,4,0,64,0,2,16,33,0,0,97,2,16,33,2,16,35,1,216,0,0,0,124,68,136,107,255,210,139,23,162,74,39,148,73,71,136,72,134,182,123,244,132,72,135,136,17,5,63,93,21,17,81,21,209,97,248,17,1,0,62,251,37,42,82,165,38,250,5,63,80], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+143377);
/* memory initializer */ allocate([25,121,144,89,2,254,129,30,17,33,26,85,37,84,85,251,161,145,209,1,28,30,6,147,198,16,209,5,60,177,13,126,50,3,248,40,131,255,0,31,246,0,0,0,0,0,0,102,102,102,0,0,0,0,0,0,0,0,0,14,3,24,68,68,164,145,43,186,138,36,164,78,67,24,14,0,0,14,3,24,78,68,164,138,43,186,145,36,164,68,67,24,14,0,0,14,3,24,68,68,196,151,170,10,151,164,196,68,67,24,14,0,0,14,3,24,68,68,100,189,42,10,189,36,100,68,67,24,14,0,0,14,3,24,68,68,164,145,42,10,174,165,20,64,67,24,14,0,0,14,3,24,64,69,20,174,170,10,145,36,164,68,67,24,14,0,0,0,16,3,0,96,12,1,128,48,199,14,224,124,3,192,24,0,128,41,244,82,133,65,24,41,68,82,129,23,209,69,215,210,69,4,16,33,239,210,33,39,146,2,63,224,181,242,18,248,163,4,106,202,19,255,240,32,23,229,210,87,229,209,246,241,66,39,220,196,19,130,238,35,255,162,34,79,232,34,66,34,250,18,33,34,211,162,226,8,32,32,143,255,9,1,16,34,7,63,173,18,145,49,18,17,33,18,31,35,242,34,254,34,36,170,138,164,170,47,161,34,18,45,34,35,32,4,143,126,148,137,136,144,143,255,144,137,8,241,72,36,2,32,65,63,2,16,33,4,30,128,3,248,33,1,16,10,0,64,11,3,14,0,130,255,32,130,20,242,50,255,32,34,122,36,163,122,100,168,6,17,15,255,90,181,221,180,148,191,164,147,221,106,185,9,40,156,11,32,130,15,64,135,190,130,47,34,35,239,34,34,2,64,56,2,128,34,36,34,114,40,250,242,34,119,38,175,170,42,162,34,34,35,47,32,130,255,64,135,255,128,15,127,36,31,127,34,34,255,36,17,127,68,71,31,137,95,85,33,66,95,249,18,154,41,162,148,58,162,201,39,244,73,118,184,93,247,242,8,247,242,8,39,242,0,42,163,85,32,132,127,120,136,127,248,130,127,250,2,63,35,18,74,48,66,59,48,4,128,72,3,0,72,4,128,48,0,0,0,0,0,0,0,0,144,10,128,168,10,128,168,10,128,144,0,0,0,0,0,0,0,0,48,0,128,8,11,0,8,0,128,48,0,0,0,0,0,0,0,0,24,2,0,32,11,128,36,2,64,24,0,0,0,0,0,0,0,0,48,4,128,72,3,128,136,0,128,48,0,0,0,0,0,0,0,0,72,5,64,212,5,64,84,4,128,0,0,0,0,0,0,0,0,0,72,5,64,84,12,128,84,5,64,72,0,0,0,0,0,0,0,0,106,2,160,170,6,224,66,4,32,98,0,0,0,0,0,0,0,0,4,1,80,14,1,80,4,0,0,32,138,170,113,202,170,32,128,0,136,5,127,96,137,190,18,163,62,82,169,62,18,129,16,166,132,135,123,244,164,146,79,191,171,95,181,171,90,181,251,80,86,24,78,4,248,201,18,146,57,65,251,225,0,48,5,63,82,25,33,83,242,0,67,247,130,138,73,24,248,138,191,248,154,136,248,128,8,56,140,48,249,5,62,83,37,42,82,175,166,82,5,63,80,21,121,144,17,6,71,199,4,66,72,36,242,68,36,67,255,1,79,212,1,64,22,6,96,2,0,32,7,0,0,15,128,0,15,0,16,15,0,128,15,0,136,5,255,34,6,32,146,65,62,52,69,68,23,193,68,160,68,255,73,7,255,137,73,32,255,250,136,254,138,138,254,64,165,58,188,241,33,2,95,253,146,85,117,38,214,173,154,16,32,130,63,32,130,127,69,119,144,139,137,80,245,122,186,249,42,186,249,32,146,59,172,132,40,143,232,40,143,239,16,135,200,84,135,223,85,23,209,41,20,95,35,231,162,75,41,42,250,170,255,250,42,162,250,32,34,250,160,68,32,135,136,75,249,8,248,138,255,249,74,154,250,144,94,56,140,127,175,196,32,175,195,32,98,11,254,68,1,248,20,129,254,0,47,236,37,18,127,250,138,252,170,143,190,162,131,127,45,83,255,237,80,93,17,15,255,21,0,127,127,196,2,127,228,2,127,224,32,255,240,32,48,5,0,144,15,128,16,0,0,254,3,0,80,9,0,248,1,0,7,239,74,36,162,74,39,239,64,36,2,64,36,3,65,196,16,63,15,224,16,241,9,146,149,41,84,145,9,255,145,9,16,241,9,16,15,79,136,142,248,141,190,154,138,190,138,143,174,26,191,170,27,34,98,9,80,133,14,80,149,9,80,149,6,32,0,0,0,0,0,0,96,2,0,32,7,0,0,15,192,0,9,0,168,10,128,168,9,0,0,0,0,0,0,0,0,9,0,168,8,128,144,10,0,184,0,0,72,10,64,36,4,128,36,2,64,164,4,128,0,0,0,0,0,0,208,6,128,72,4,128,72,14,192,0,0,0,0,0,0,0,0,0,96,9,0,144,9,0,144,6,0,0,0,0,0,0,0,0,0,0,12,0,64,4,0,224,0,15,255,0,9,68,170,170,170,170,169,68,32,5,0,136,0,0,112,8,128,136,15,0,128,9,128,112,0,0,16,3,0,16,3,128,0,15,192,16,3,0,80,9,0,248,1,0,0,9,0,96,0,0,112,8,128,128,8,0,128,8,128,112,0,0,92,5,0,80,13,192,68,5,64,72,0,0,0,0,0,0,0,0,112,0,128,48,0,128,112,0,0,252,3,0,80,9,0,248,1,0,68,151,201,143,249,16,251,250,194,254,42,148,248,128,16,58,12,64,24,142,0,35,239,170,170,170,162,170,74,191,168,26,189,176,18,6,254,36,10,124,172,138,48,174,134,127,133,8,127,224,2,255,32,4,243,225,34,147,233,34,147,233,0,255,240,136,106,232,168,45,129,15,225,2,16,167,234,18,161,47,18,31,241,16,82,137,40,20,98,3,32,135,255,84,154,127,252,154,255,252,170,236,253,128,108,60,188,89,32,135,255,84,26,18,249,10,255,250,74,200,250,128,16,57,140,102,32,74,149,112,234,149,32,64,0,2,0,168,7,0,168,2,0,0,0,0,0,0,0,0,0,0,128,24,0,128,8,0,128,8,1,192,2,71,175,79,151,221,69,148,122,122,134,175,111,26,161,170,219,163,0,66,232,197,244,81,69,84,85,239,52,80,69,244,65,71,212,67,66,39,34,130,40,250,242,36,119,70,175,170,74,36,34,82,38,47,122,100,184,146,31,161,171,255,128,171,250,161,251,240,33,26,30,63,1,0,255,244,36,36,79,244,145,225,4,126,69,36,82,101,104,16,250,117,125,80,87,125,84,231,126,80,85,125,121,93,127,81,65,100,17,15,255,17,15,190,138,42,172,81,40,161,255,242,24,30,3,28,17,15,255,17,0,128,255,233,82,255,232,210,20,143,255,10,7,30,66,6,255,130,8,254,226,5,255,68,14,124,68,68,168,65,6,110,65,71,255,73,89,127,253,74,255,249,90,149,170,95,166,4,79,132,17,15,255,17,3,252,0,143,255,2,0,160,4,7,254,73,47,255,121,4,191,146,31,129,169,223,149,169,90,157,249,16,1,28,46,6,47,242,82,66,199,255,137,31,255,34,15,190,38,66,216,32,131,246,65,7,191,162,128,40,255,240,32,122,36,146,121,64,8,57,92,99,4,15,255,128,18,10,72,72,66,127,209,16,74,64,64,255,240,64,255,250,145,169,159,149,173,90,177,253,18,21,33,146,17,37,18,34,64,22,255,65,136,54,229,20,144,65,14,16,79,228,130,72,38,254,114,133,40,83,231,40,84,133,127,113,69,20,82,89,37,148,82,131,124,68,127,85,143,230,130,39,228,69,71,200,68,135,212,70,52,194,17,14,82,149,37,126,96,9,255,49,4,255,154,146,169,88,82,130,127,228,2,127,228,0,79,228,130,79,228,16,95,249,17,145,89,18,248,136,255,136,136,208,251,210,42,37,91,156,160,138,127,176,140,8,64,7,128,75,249,4,248,74,132,248,74,132,248,64,4,28,78,63,80,134,255,68,152,74,244,133,94,70,46,98,69,69,72,89,134,167,64,79,8,215,251,65,148,27,20,129,79,148,10,78,164,10,35,193,1,2,63,250,144,41,138,56,224,75,245,1,27,222,1,0,80,2,33,36,147,85,41,20,239,242,40,66,136,40,242,128,41,228,152,71,147,229,34,35,229,34,147,227,0,31,245,8,148,242,200,107,128,15,145,5,126,37,37,126,149,35,126,49,37,12,144,129,53,36,86,131,0,0,0,0,0,0,112,8,128,136,1,0,32,4,0,128,15,128,124,4,0,120,0,64,56,0,0,254,11,128,132,11,128,160,11,192,98,41,85,133,94,85,149,89,85,98,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,5,0,32,5,0,216,0,0,24,0,128,8,1,192,0,7,248,0,7,112,17,2,112,36,2,112,14,3,24,64,69,20,145,41,242,145,37,20,64,67,24,14,0,0,88,10,0,0,0,0,120,8,128,136,8,128,136,7,128,0,0,0,34,162,127,36,143,254,36,134,126,116,138,255,161,34,19,34,18,198,251,246,224,132,225,17,224,128,40,78,114,8,86,228,172,209,53,0,32,10,128,112,10,128,32,0,0,0,0,0,0,0,0,0,0,0,0,3,0,72,8,64,0,0,0,0,0,0,0,0,0,0,0,0,240,9,127,144,15,0,159,249,8,240,137,42,148,153,73,152,138,24,35,255,160,170,74,175,170,90,165,250,82,41,50,146,177,61,28,162,32,130,127,240,2,66,115,54,20,175,250,0,39,242,65,36,18,127,0,0,0,0,7,0,144,8,0,240,8,128,136,8,128,112,0,0,18,74,127,66,74,127,16,131,127,84,153,127,20,145,127,18,38,65,64,135,8,64,248,8,227,244,33,242,20,63,66,4,64,68,6,128,34,15,191,34,79,212,112,138,148,255,250,72,149,8,224,141,139,70,152,202,82,165,42,68,164,138,80,153,224,0,0,0,0,0,0,0,226,8,96,202,2,160,47,10,32,67,0,0,0,0,0,0,0,0,34,6,80,161,10,32,244,2,64,119,0,0,0,0,0,0,0,0,99,9,64,148,7,112,21,5,80,102,0,0,0,0,0,0,0,0,228,8,64,196,2,64,36,10,64,68,0,0,0,0,0,0,0,0,56,4,64,68,4,64,60,0,64,36,3,128,0,0,0,0,0,0,68,10,160,42,4,160,42,2,160,170,4,64,0,0,0,0,0,0,68,44,198,68,164,82,69,244,66,238,112,0,0,0,0,0,0,0,98,10,80,133,14,80,149,9,80,149,6,32,0,0,0,0,0,0,0,0,0,0,0,0,16,3,0,80,5,0,144,15,128,16,3,128,76,109,41,82,149,41,82,149,41,236,96,0,0,0,0,0,0,0,34,6,80,165,10,80,245,2,80,114,0,0,0,0,0,0,0,0,0,1,128,48,0,0,252,8,128,24,3,0,96,12,64,252,0,0,0,0,0,0,0,0,48,4,128,8,1,0,8,0,128,72,3,0,188,10,0,184,8,64,164,9,128,0,0,0,0,0,0,0,0,0,72,5,64,68,12,128,80,5,0,92,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,0,32,15,128,32,2,0,32,0,0,152,10,64,164,9,128,164,10,64,152,0,0,0,0,0,0,0,0,66,10,96,42,4,160,143,8,32,231,0,0,0,0,0,0,0,0,98,9,80,149,9,80,117,1,80,85,6,32,0,0,0,0,0,0,34,6,80,165,10,32,165,15,80,37,3,32,0,0,0,0,0,0,103,9,80,145,1,32,34,4,32,130,15,32,0,0,0,0,0,0,152,202,82,165,42,76,165,42,82,152,192,0,0,0,0,0,0,0,247,8,80,129,14,32,18,9,32,98,0,0,0,0,0,0,0,0,32,130,127,64,135,127,128,15,127,36,18,127,242,34,255,36,19,127,31,254,40,162,155,41,170,170,40,255,250,2,21,17,84,20,98,60,17,15,255,17,15,252,68,72,132,19,134,144,4,74,34,160,161,248,47,244,213,123,120,185,255,242,16,255,242,16,47,242,0,42,163,85,32,82,4,255,250,164,171,95,165,47,83,166,43,35,102,234,160,105,34,164,127,121,200,106,240,146,74,39,255,146,34,162,111,36,33,130,247,249,1,147,249,1,151,255,4,159,248,4,130,64,20,0,64,8,68,70,166,139,57,69,239,228,2,94,255,41,74,84,163,82,86,107,9,15,162,39,242,17,249,6,127,98,75,66,169,18,228,40,146,50,120,4,152,146,127,165,170,90,165,250,90,165,250,112,54,26,78,4,65,7,223,161,73,34,2,7,255,34,65,40,255,240,80,8,129,6,8,143,255,8,132,16,41,18,86,31,254,48,37,66,18,80,8,255,64,135,191,136,137,8,251,250,169,250,154,189,249,160,41,26,158,72,224,74,239,170,158,173,170,218,171,234,136,175,202,30,205,168,24,134,162,74,36,255,250,40,34,163,42,100,202,72,37,146,105,36,146,135,8,143,255,8,143,255,36,15,255,37,95,218,37,87,127,108,74,148,72,132,159,73,159,213,73,52,144,73,255,193,83,148,129,132,16,6,1,0,16,241,9,31,145,9,16,151,239,66,148,32,66,4,32,126,23,241,42,1,72,8,67,101,201,16,129,127,36,158,127,32,146,127,89,8,191,218,24,209,248,170,140,235,59,255,234,27,161,230,26,127,132,40,66,255,224,64,10,1,16,32,205,2,19,145,192,16,64,248,120,72,134,144,95,255,168,79,244,173,95,246,5,64,5,246,176,17,2,39,4,87,247,9,87,245,72,119,245,25,81,149,43,148,139,8,64,9,190,136,141,136,138,175,170,168,171,140,235,251,136,232,138,200,66,7,126,152,66,8,255,234,146,249,42,254,242,128,40,52,156,143,65,7,167,146,95,165,171,223,165,170,90,165,251,112,36,248,64,4,117,69,255,81,7,255,90,87,126,93,37,126,85,37,126,144,10,127,152,10,64,132,8,128,144,10,0,188,0,0,0,0,0,0,0,0,99,8,64,132,14,112,149,9,80,102,0,0,0,0,0,0,0,0,198,2,160,40,4,224,41,2,144,198,0,0,0,0,0,0,0,0,18,1,80,17,13,32,17,1,80,18,0,0,0,0,0,0,0,0,34,6,80,165,10,80,245,2,80,34,0,0,0,0,0,0,0,0,68,10,64,164,2,64,68,4,64,132,14,64,0,0,0,0,0,0,98,10,80,133,14,80,149,9,80,98,0,0,0,0,0,0,0,0,68,74,170,42,36,164,42,42,170,68,64,0,0,0,0,0,0,0,80,197,20,81,69,36,83,229,4,80,224,0,0,0,0,0,0,0,0,3,0,72,8,64,180,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,8,64,72,3,0,0,0,0,243,233,34,146,175,127,34,42,50,180,170,74,167,251,2,192,160,4,123,244,161,146,31,175,170,191,171,170,186,175,250,16,33,30,30,63,66,23,249,138,25,37,255,218,173,250,218,253,170,95,241,10,159,42,18,15,254,18,15,248,8,143,254,8,143,248,32,7,248,160,131,248,0,14,56,65,2,32,20,0,128,127,0,128,127,0,128,8,1,192,0,0,0,27,131,108,102,102,102,54,193,248,6,0,96,6,0,0,56,4,64,146,9,32,146,9,32,146,4,64,56,0,0,0,0,0,56,4,64,186,8,160,186,10,32,186,4,64,56,0,0,0,0,0,56,4,64,186,8,160,186,8,160,186,4,64,56,0,0,0,0,0,0,0,0,222,7,240,99,6,48,99,6,48,99,6,48,94,0,0,0,15,192,0,4,64,68,4,64,40,2,128,40,1,0,0,0,0,0,15,192,0,2,0,32,2,0,32,2,0,32,3,192,0,0,0,0,15,224,0,3,128,68,4,0,64,4,0,68,4,64,56,0,0,0,15,224,0,7,128,68,4,64,68,4,64,68,7,128,0,0,0,0,15,192,0,8,128,136,13,128,216,10,128,168,10,128,168,0,0,0,15,192,0,13,128,80,7,0,32,7,0,80,13,128,0,0,0,16,2,0,0,3,0,8,6,128,152,8,128,136,9,128,108,0,0,2,0,16,0,128,0,4,0,64,8,0,128,16,1,0,39,199,128,0,1,252,0,0,0,9,0,144,9,0,144,9,1,17,33,20,14,0,64,8,1,0,0,9,0,144,9,0,144,9,1,17,33,20,14,2,32,20,0,128,0,9,0,144,9,0,144,9,1,17,33,20,14,1,0,8,0,64,0,9,0,144,9,0,144,9,1,17,33,20,14,0,3,248,0,0,0,4,2,72,36,130,72,63,128,64,4,7,252,0,128,16,2,0,0,4,2,72,36,130,72,63,128,64,4,7,252,2,32,20,0,128,0,4,2,72,36,130,72,63,128,64,4,7,252,2,0,16,0,128,0,4,2,72,36,130,72,63,128,64,4,7,252,63,128,0,2,0,64,9,3,32,4,0,192,52,0,64,4,0,64,0,64,8,1,0,64,9,3,32,4,0,192,52,0,64,4,0,64,2,32,20,0,128,64,8,3,32,4,0,192,52,0,64,4,0,64,2,0,16,0,128,64,8,3,32,4,0,192,52,0,64,4,0,64,31,128,0,0,1,248,0,128,16,30,1,0,16,1,0,32,4,0,3,0,64,0,3,240,1,0,32,60,2,0,32,2,0,64,8,0,4,128,48,0,1,248,0,128,16,30,1,0,16,1,0,32,4,0,4,0,32,0,1,248,0,128,16,30,1,0,16,1,0,32,4,0,1,0,8,0,64,112,57,2,16,41,2,80,37,2,16,39,3,144,126,0,0,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,0,32,4,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,2,64,24,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,1,0,8,0,0,240,113,1,16,17,1,144,22,1,0,16,1,0,0,3,248,0,0,64,255,192,128,31,128,8,1,0,16,2,0,64,0,128,16,0,0,64,255,192,128,31,128,8,1,0,16,2,0,64,4,64,40,1,0,64,255,192,128,31,128,8,1,0,16,2,0,64,4,0,32,1,0,64,255,192,128,31,128,8,1,0,16,2,0,64,0,0,252,0,0,0,4,0,64,8,0,128,16,1,16,39,135,132,0,64,8,1,0,0,4,0,64,8,0,128,16,1,16,39,135,132,4,0,32,1,0,0,4,0,64,8,0,128,16,1,16,39,135,132,0,0,0,3,129,200,16,129,72,18,129,40,16,129,56,28,128,0,2,3,255,36,131,255,36,130,120,82,165,252,82,73,252,130,27,255,94,192,37,202,245,4,139,242,138,5,210,32,152,188,20,12,161,0,165,201,244,36,176,65,144,68,168,63,120,160,112,244,0,58,164,4,141,64,2,188,144,80,104,32,33,120,192,42,89,28,1,56,192,16,0,0,0,0,0,0,0,0,0,14,0,224,6,0,192,24,0,0,4,0,64,4,1,240,4,0,64,4,1,240,4,0,64,4,0,0,4,0,64,4,0,64,4,3,248,4,0,64,4,0,64,4,0,64,0,7,128,48,3,0,50,3,192,112,3,0,48,195,12,127,128,0,0,3,184,110,68,198,199,232,64,132,8,64,196,38,236,59,128,0,96,9,0,96,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,7,0,216,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,13,128,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,1,128,48,0,0,0,7,0,136,8,128,136,8,128,120,0,0,0,13,128,112,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,7,128,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,96,3,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,3,248,0,0,0,255,192,160,10,0,160,18,2,34,66,40,30,0,9,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,48,4,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,4,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,48,4,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,96,9,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,32,1,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,0,0,0,120,8,64,128,8,0,128,8,64,120,0,0,16,2,0,0,3,0,72,4,128,48,0,0,0,0,0,0,0,0,0,0,0,0,3,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,252,17,143,233,144,134,9,32,204,3,192,0,0,0,0,0,0,112,8,128,136,15,0,128,8,128,112,0,0,48,6,0,0,1,128,24,0,128,48,0,0,0,0,0,0,0,0,0,0,0,248,64,132,8,64,132,8,79,252,136,8,128,136,8,128,143,192,0,16,2,0,64,0,0,248,8,0,128,15,128,128,8,0,248,0,0,32,130,126,32,143,190,168,138,254,168,10,190,250,34,170,57,76,162,16,2,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,6,0,48,0,0,112,8,128,136,8,128,136,7,128,0,0,0,48,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,64,2,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,7,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,16,2,0,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,7,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,24,3,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,64,2,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,16,2,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,120,0,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,16,2,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,72,3,0,0,7,0,136,8,128,136,8,128,136,8,128,0,0,0,12,7,0,160,2,0,32,2,0,32,2,0,32,2,0,32,0,0,135,232,64,132,8,64,132,15,254,4,32,66,4,32,66,252,32,0,48,4,128,48,0,124,4,0,64,4,0,124,4,0,64,4,0,64,0,2,224,59,3,16,33,2,16,1,0,16,1,3,48,30,0,0,0,1,224,33,18,6,32,137,176,206,97,20,97,10,16,30,0,0,0,0,0,0,8,1,192,54,6,48,193,152,31,128,240,6,0,0,0,1,248,32,68,2,64,36,2,64,36,2,48,192,144,121,224,0,0,0,0,0,0,128,16,11,0,224,4,0,0,0,0,0,0,0,64,2,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,0,0,0,0,7,128,136,8,128,136,7,128,8,0,128,136,7,0,64,2,0,0,15,0,168,10,128,168,10,128,168,10,128,0,0,0,0,7,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,16,2,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,144,6,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,64,2,0,0,2,0,80,8,128,136,15,128,136,8,128,0,0,0,0,7,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,1,0,32,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,128,48,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,0,32,0,0,112,8,128,136,8,128,136,7,0,0,0,0,240,0,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,32,4,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,144,6,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,4,0,128,16,0,0,255,192,160,10,0,160,18,2,34,66,40,30,34,1,64,8,0,0,255,192,160,10,0,160,18,2,34,66,40,30,32,1,0,8,0,0,255,192,160,10,0,160,18,2,34,66,40,30,0,128,16,226,0,0,0,0,32,2,2,16,33,132,14,128,64,0,0,0,0,255,192,4,0,64,4,255,192,0,0,0,0,0,0,0,16,133,0,87,231,144,81,9,30,25,35,34,210,33,34,20,161,68,65,2,16,135,201,16,17,2,254,34,12,62,64,36,4,66,132,16,76,11,0,0,15,0,136,8,128,136,8,128,136,8,128,0,0,0,80,7,128,212,13,0,80,7,0,88,5,64,212,7,128,80,0,0,4,4,68,68,71,252,17,0,160,4,1,176,96,203,248,32,131,248,64,2,0,0,6,0,144,0,0,248,8,0,248,8,0,128,15,128,16,2,0,64,0,0,248,8,0,128,15,0,128,8,0,248,0,0,64,2,0,16,0,0,248,8,0,128,15,0,128,8,0,248,0,0,8,1,0,0,8,128,216,10,128,168,8,128,136,8,128,136,0,0,32,1,0,0,8,128,216,10,128,168,8,128,136,8,128,136,0,0,8,1,0,32,0,0,136,12,128,168,10,128,152,8,128,136,0,0,136,5,0,32,0,0,136,12,128,168,10,128,152,8,128,136,0,0,128,4,0,32,0,0,136,12,128,168,10,128,152,8,128,136,0,0,0,7,128,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,16,2,0,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,80,2,0,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,64,2,0,0,3,0,72,0,0,112,8,128,240,8,0,136,7,0,136,5,0,32,0,0,248,8,0,128,15,0,128,8,0,248,0,0,64,4,248,65,15,238,106,45,170,202,68,234,67,36,96,95,224,0,18,15,254,84,142,254,4,142,126,4,142,72,15,238,36,161,142,100,32,143,188,32,143,190,170,175,190,49,202,170,37,194,96,73,3,8,32,7,0,168,15,128,168,2,0,112,7,0,32,2,0,32,0,0,32,2,255,240,2,119,117,86,213,173,90,119,37,82,85,37,82,85,48,0,128,56,4,128,48,14,0,64,4,0,64,4,0,64,14,0,0,2,0,32,2,128,48,6,0,160,2,0,32,2,0,32,2,0,0,0,0,24,4,129,80,111,107,91,85,233,180,238,88,230,224,0,0,0,0,16,1,3,57,193,52,28,67,68,236,131,112,0,0,0,0,0,16,2,32,32,51,149,110,151,170,210,254,76,4,1,128,0,0,0,0,0,0,0,32,132,4,255,228,4,32,128,0,0,0,0,72,164,95,245,40,18,237,228,80,69,238,82,69,228,82,106,5,31,32,130,16,249,66,34,119,246,128,168,10,62,34,34,34,35,226,0,32,65,8,255,242,149,255,89,49,149,55,208,85,245,65,93,209,3,9,7,254,66,39,234,66,165,226,82,101,224,83,245,225,147,217,98,17,15,255,17,2,32,18,2,32,18,15,255,2,0,80,8,129,12,73,20,145,15,240,0,174,250,169,46,244,169,206,244,169,83,20,183,95,245,33,100,168,132,151,174,16,65,4,16,255,244,16,65,6,16,64,135,127,132,136,127,228,132,84,69,254,68,71,244,132,104,69,4,16,65,31,255,145,21,255,81,17,255,52,16,125,246,65,153,210,67,32,79,223,133,159,213,133,31,211,17,15,223,76,25,93,254,17,7,64,135,148,137,41,35,252,26,190,250,42,166,250,0,33,58,28,31,8,143,255,16,142,127,32,143,127,35,22,94,186,74,20,32,130,118,15,240,8,240,137,16,145,249,49,147,25,81,249,25,17,129,16,31,14,79,95,151,148,149,33,31,243,37,12,159,48,16,157,54,28,7,16,79,255,133,147,21,77,80,19,253,2,31,32,18,29,32,31,231,241,9,255,148,79,68,148,73,170,241,9,255,145,9,16,241,9,16,247,249,8,159,255,16,162,66,66,186,90,36,162,75,68,196,64,132,241,9,254,146,137,68,248,74,255,32,43,242,169,42,242,176,172,4,32,130,9,35,250,161,170,26,191,170,11,160,226,8,32,132,0,128,34,82,245,34,74,255,173,74,164,175,170,170,175,171,169,232,152,145,17,15,254,17,1,62,92,133,62,254,33,42,86,168,170,17,78,34,33,2,62,251,34,170,42,98,160,255,242,1,83,213,1,136,24,134,124,132,95,125,148,85,125,48,16,253,241,1,93,213,1,176,81,194,32,4,0,123,248,8,248,130,8,248,130,8,32,130,136,48,130,127,33,2,255,73,36,148,243,2,48,67,15,80,5,16,145,49,28,15,255,248,33,255,248,145,169,92,147,255,248,113,138,155,37,128,31,255,39,242,9,248,148,77,82,186,11,162,213,73,136,159,137,10,208,18,39,255,128,35,230,34,115,234,128,175,242,85,36,146,127,36,146,67,207,248,10,4,204,104,79,245,65,71,244,65,71,246,65,68,32,0,2,15,255,16,14,14,143,14,16,159,250,56,197,65,146,40,204,195,66,2,255,34,128,84,143,233,17,37,68,255,196,68,132,72,69,4,64,228,112,65,15,144,73,8,255,145,5,16,33,5,17,137,16,143,19,249,18,157,41,18,255,240,22,164,173,74,141,41,226,228,160,4,19,241,2,159,169,42,146,175,234,3,170,66,164,45,66,156,46,68,241,9,124,164,76,68,164,73,124,148,13,120,164,136,137,144,154,7,171,250,136,169,11,190,226,32,42,250,162,42,250,162,20,58,62,65,47,242,146,33,3,126,162,11,40,36,130,126,80,132,8,143,248,8,4,64,255,5,78,40,164,74,146,161,27,254,161,14,84,169,56,32,0,243,240,42,55,84,65,12,254,73,36,254,73,37,255,72,36,140,252,72,4,188,74,127,164,74,100,165,74,92,189,72,4,253,64,8,79,244,16,79,244,146,245,4,36,95,244,16,79,230,170,202,168,174,119,101,68,191,176,81,154,8,168,254,120,168,152,17,1,254,117,69,47,66,20,42,79,111,34,71,254,102,218,117,170,66,36,34,66,68,240,225,48,81,5,16,81,7,255,9,6,144,137,0,145,41,17,15,171,250,132,251,240,33,250,80,165,122,84,37,74,85,37,96,172,49,64,132,14,64,143,127,85,21,92,87,37,92,93,69,84,154,88,163,22,50,20,47,246,137,79,252,137,79,244,8,79,244,8,64,132,8,47,146,81,101,84,85,207,212,85,69,84,149,73,21,17,65,86,2,129,4,16,103,192,16,207,228,0,65,4,92,69,5,80,107,4,31,2,128,254,226,170,254,170,138,255,162,158,41,164,208,74,8,128,136,1,2,8,32,146,63,34,26,191,170,26,160,186,14,32,132,0,128,34,131,127,36,132,254,68,142,126,68,132,126,65,36,39,66,20,71,1,0,63,2,16,65,251,217,37,146,89,37,243,217,1,0,16,3,64,4,0,120,4,64,68,4,94,121,0,16,1,224,16,1,0,30,65,68,18,127,248,144,151,224,82,39,226,82,39,226,210,53,34,86,32,19,206,36,36,138,158,190,42,82,174,175,20,0,160,49,12,15,0,192,48,12,3,0,64,3,0,76,3,48,12,192,48,0,192,0,48,0,192,3,0,12,0,32,12,3,32,204,51,0,192,48,0,0,0,3,24,66,72,66,136,36,132,48,128,0,0,15,254,0,0,0,0,1,254,32,4,0,64,4,0,64,2,0,31,224,0,0,0,0,0,0,16,0,143,252,0,32,1,0,47,252,0,128,16,0,0,0,181,22,1,128,197,80,138,160,1,226,64,168,116,21,16,224,100,85,0,0,64,4,0,64,4,0,64,4,0,64,127,224,0,0,0,0,0,0,0,15,1,8,16,96,248,12,131,8,79,0,0,0,0,0,0,0,0,0,15,4,81,133,96,88,197,82,117,237,80,84,224,0,0,0,0,0,1,230,33,130,112,57,6,16,163,1,216,0,0,0,7,129,128,32,4,0,64,7,248,64,4,0,32,1,128,7,128,0,0,15,240,0,128,4,0,32,2,0,32,4,0,143,240,0,0,0,0,0,0,0,0,0,123,200,66,132,40,66,123,192,0,0,0,0,0,0,255,8,0,128,8,0,128,8,0,128,72,10,128,24,0,128,15,240,128,8,1,0,16,3,0,16,12,0,32,12,0,32,12,0,48,51,251,108,246,255,239,247,191,127,246,111,108,247,131,112,240,0,64,135,148,146,63,193,171,239,162,170,175,164,2,19,161,193,240,0,8,143,255,8,143,8,39,255,136,47,246,163,173,226,36,45,194,35,0,0,0,0,1,0,255,2,0,126,12,32,126,4,32,126,4,96,0,0,0,0,0,0,32,35,226,82,173,106,86,164,202,82,38,22,0,0,0,0,1,16,10,3,252,32,67,252,0,5,36,80,169,248,0,0,0,0,0,0,32,15,252,137,7,252,76,75,84,74,135,196,49,212,21,46,245,1,162,96,34,111,250,162,70,96,68,43,244,21,217,97,21,239,228,81,131,42,32,157,122,0,4,208,65,159,177,65,144,204,17,12,197,21,107,4,26,165,194,136,193,113,2,198,209,81,93,84,16,43,193,21,195,128,162,103,8,2,121,16,128,43,196,1,13,82,129,148,224,80,224,41,40,64,82,34,93,1,196,196,212,21,150,209,88,254,5,21,50,34,0,215,128,2,77,148,20,251,196,17,70,96,96,48,52,4,169,176,80,146,154,10,4,20,37,24,5,68,0,196,80,48,180,84,218,132,0,113,176,42,85,16,1,172,164,80,119,101,68,191,176,81,154,8,168,254,120,168,152,17,1,254,117,69,90,85,112,248,4,85,201,168,16,94,128,10,54,16,84,239,0,69,0,0,0,0,0,0,0,8,2,192,103,28,63,128,224,0,0,0,0,0,0,31,0,112,15,1,144,49,6,0,192,8,0,0,0,0,63,192,0,0,4,8,32,129,16,10,0,64,4,0,64,4,0,64,2,0,64,8,4,8,32,129,16,10,0,64,4,0,64,4,0,64,1,16,10,0,64,0,32,129,16,10,0,64,4,0,64,4,0,64,2,0,16,0,128,0,32,129,16,10,0,64,4,0,64,4,0,64,63,128,0,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,1,0,32,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,9,0,96,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,24,0,64,0,0,64,127,192,64,28,2,0,32,2,0,16,192,240,0,3,252,0,1,16,17,1,16,31,207,32,18,1,32,16,0,252,1,0,32,4,1,16,17,1,16,31,207,32,18,1,32,16,0,252,17,0,160,4,1,16,17,1,16,31,207,32,18,1,32,16,0,252,16,0,128,4,1,16,17,1,16,31,207,32,18,1,32,16,0,252,0,7,252,0,0,0,4,0,64,4,0,64,4,0,64,4,0,64,0,128,16,2,0,0,4,0,64,4,0,64,4,0,64,4,0,64,2,32,20,0,128,0,4,0,64,4,0,64,4,0,64,4,0,64,4,0,32,1,0,0,4,0,64,4,0,64,4,0,64,4,0,64,31,192,0,0,0,0,63,224,16,1,1,248,16,1,0,8,0,112,1,0,32,4,0,0,63,224,16,1,1,248,16,1,0,8,0,112,8,128,80,2,0,0,63,224,16,1,1,248,16,1,0,8,0,112,8,0,64,2,0,0,63,224,16,1,1,248,16,1,0,8,0,112,31,192,0,0,0,4,16,64,136,4,128,48,3,0,72,8,67,0,1,0,32,4,0,8,32,129,16,9,0,96,6,0,144,16,134,0,17,0,160,4,0,8,32,129,16,9,0,96,6,0,144,16,134,0,16,0,128,4,0,8,32,129,16,9,0,96,6,0,144,16,134,0,0,3,248,0,0,0,0,66,4,32,66,4,32,66,28,62,64,0,0,0,16,2,0,64,0,66,4,32,66,4,32,66,28,62,64,0,34,1,64,8,0,0,0,132,8,64,132,8,64,132,56,124,128,0,0,1,0,8,0,64,0,66,4,32,66,4,32,66,28,62,64,0,2,0,64,8,0,0,3,131,200,32,130,8,32,130,8,32,128,0,32,1,0,8,0,0,3,131,200,32,130,8,32,130,8,32,128,0,0,64,8,1,7,192,4,0,128,31,0,16,1,0,16,10,0,64,4,64,40,1,7,192,4,0,128,31,0,16,1,0,16,10,0,64,4,0,32,1,7,192,4,0,128,31,0,16,1,0,16,10,0,64,63,0,0,0,7,248,72,4,128,72,7,240,8,129,8,33,4,32,0,32,4,0,143,224,144,9,0,144,15,224,17,2,16,65,8,32,2,32,20,0,143,224,144,9,0,144,15,224,17,2,16,65,8,32,2,0,16,0,143,224,144,9,0,144,15,224,17,2,16,65,8,32,0,3,248,0,3,192,4,0,64,4,0,32,2,0,16,1,0,8,0,128,16,0,3,192,4,0,64,4,0,32,2,0,16,1,0,8,2,64,24,0,3,192,4,0,64,4,0,32,2,0,16,1,0,8,2,0,16,0,131,192,4,0,64,4,0,32,2,0,16,1,0,8,63,128,0,4,0,64,8,1,16,33,3,224,4,0,144,16,131,252,0,64,8,1,0,128,16,2,32,66,7,192,8,1,32,33,7,248,2,32,20,0,128,64,8,1,16,33,3,224,4,0,144,16,131,252,2,0,16,0,128,64,8,1,16,33,3,224,4,0,144,16,131,252,31,0,0,0,3,240,0,129,16,10,0,96,5,0,136,16,6,0,0,16,2,0,67,240,0,129,16,10,0,96,5,0,136,16,6,0,2,32,20,0,135,224,1,2,32,20,0,192,10,1,16,32,12,0,0,128,4,14,39,16,1,2,32,20,0,192,10,1,16,32,12,0,126,0,0,0,7,224,66,4,32,68,7,248,1,0,16,2,0,32,0,32,4,0,135,224,66,4,32,68,7,248,1,0,16,2,0,32,2,32,20,0,135,224,66,4,32,68,7,248,1,0,16,2,0,32,2,0,16,0,135,224,66,4,32,68,7,248,1,0,16,2,0,32,0,1,240,0,2,0,32,2,0,32,4,124,120,64,4,0,128,8,0,64,8,1,2,0,32,2,0,32,4,124,120,64,4,0,128,8,8,128,80,2,2,0,32,2,0,32,4,124,120,64,4,0,128,8,4,64,40,1,2,0,32,2,0,32,4,124,120,64,4,0,128,8,63,192,0,0,0,64,4,7,252,10,0,160,18,2,32,66,0,30,2,0,64,8,0,0,4,7,252,10,0,160,18,2,32,66,0,30,2,32,20,0,128,64,4,7,252,10,0,160,18,2,32,66,0,30,2,0,16,0,128,64,4,7,252,10,0,160,18,2,32,66,0,30,63,192,0,0,0,0,4,0,64,8,0,128,16,1,0,39,199,128,0,32,4,0,128,0,4,0,64,8,0,128,16,1,0,39,199,128,2,32,20,0,128,0,4,0,64,8,0,128,16,1,0,39,199,128,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,255,42,167,85,53,85,255,133,83,170,186,168,255,218,170,85,117,84,241,200,186,238,65,4,198,15,243,223,136,162,214,7,140,187,129,84,8,10,236,8,48,64,12,117,212,4,80,2,8,10,169,12,48,1,224,116,168,240,36,4,208,34,82,208,16,2,48,53,171,160,0,0,198,16,64,234,192,1,198,35,144,230,234,10,92,69,5,191,128,1,164,94,85,191,197,81,238,60,169,85,194,2,129,89,16,207,128,21,166,174,56,18,240,81,219,165,50,9,82,136,226,43,100,51,32,64,17,80,110,207,65,69,200,136,219,231,122,130,223,132,168,166,161,16,4,248,168,48,240,64,203,12,244,52,242,8,146,106,47,138,32,0,159,153,8,63,129,121,77,172,220,177,162,26,223,3,101,201,132,9,165,126,66,190,53,68,236,172,171,85,18,2,129,249,3,206,128,20,28,31,217,36,192,80,50,165,69,208,66,40,151,26,162,161,96,21,30,236,164,202,241,5,43,228,202,229,210,32,8,141,148,76,177,0,83,82,166,36,36,22,136,241,100,176,58,137,6,118,99,48,20,22,159,188,161,74,161,4,234,48,192,101,218,40,200,25,145,12,189,1,83,114,167,36,36,20,136,241,71,176,26,136,6,118,98,49,36,5,209,86,38,191,32,17,132,79,236,220,104,136,246,118,226,187,32,20,236,1,26,232,192,80,58,170,37,86,64,40,177,13,2,191,97,20,0,10,170,0,0,0,48,7,85,0,0,0,8,10,170,16,0,0,59,139,171,10,176,1,58,5,125,25,50,2,18,153,170,15,225,1,34,198,65,51,132,17,190,1,104,149,226,8,86,89,132,203,244,69,26,153,172,192,0,1,165,37,84,64,104,2,26,194,169,96,5,1,232,90,2,191,32,69,171,44,163,87,146,42,139,105,18,202,144,4,164,10,170,236,4,64,168,13,181,72,0,160,144,10,74,172,1,64,223,252,170,149,81,85,103,252,213,98,162,170,135,249,106,193,81,85,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,255,250,170,85,85,85,255,245,85,170,170,170,255,250,170,85,85,85,193,25,71,67,117,113,239,52,252,163,122,248,252,234,187,80,53,117,0,7,128,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,1,128,48,0,0,0,7,0,136,8,128,136,8,128,120,0,0,0,13,128,112,0,0,112,8,128,136,8,128,136,7,128,0,0,0,96,3,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,120,0,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,48,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,144,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,192,6,0,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,7,128,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,16,2,0,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,4,128,48,0,0,32,2,0,32,2,0,32,7,0,0,0,0,64,2,0,0,0,0,32,2,0,32,2,0,32,7,0,0,0,0,0,7,128,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,16,2,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,128,48,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,4,0,32,0,0,112,8,128,136,8,128,136,7,0,0,0,0,0,15,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,1,0,32,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,9,0,96,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,8,0,64,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,15,0,0,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,2,0,64,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,9,0,96,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,4,0,32,0,0,144,0,0,144,9,0,144,6,128,0,0,0,0,0,0,0,0,0,144,0,0,144,9,0,144,6,128,0,0,0,48,4,128,0,7,0,136,8,128,240,8,0,136,7,0,0,0,0,0,0,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,16,2,0,0,15,0,168,10,128,168,10,128,168,10,128,0,0,0,16,2,0,0,11,192,196,8,64,132,8,64,132,8,64,0,0,0,72,3,0,0,11,192,196,8,64,132,8,64,132,8,64,0,0,0,0,0,0,112,9,128,128,6,0,128,9,128,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,32,2,0,32,2,0,0,0,0,0,0,0,0,13,0,168,2,128,240,10,0,168,13,0,0,0,0,0,0,0,32,2,0,112,5,0,216,8,128,136,0,0,0,0,0,0,0,0,0,7,128,132,8,64,132,8,64,132,15,128,0,0,0,0,0,0,224,1,0,8,7,128,136,8,128,240,0,0,0,0,0,0,7,0,216,8,128,136,15,128,136,8,128,216,7,0,0,0,0,16,13,0,32,5,0,136,0,128,120,8,128,136,7,0,0,0,0,16,2,128,32,2,0,32,2,0,32,2,0,32,10,0,64,0,0,0,0,0,248,1,0,32,7,0,8,0,128,8,8,128,112,0,0,0,11,0,216,8,128,136,8,128,8,0,128,8,13,128,112,0,0,0,0,0,112,12,128,8,3,0,8,12,128,112,0,0,0,0,0,0,0,0,112,8,128,8,0,128,8,8,128,112,0,0,0,0,0,0,6,128,148,1,0,32,1,0,144,6,0,0,0,0,0,0,0,0,0,0,0,0,0,144,9,0,144,9,0,144,6,128,0,0,0,0,0,0,0,13,128,80,8,128,136,8,128,112,0,0,0,0,0,0,9,128,96,4,0,64,14,0,0,0,0,0,0,0,0,0,0,112,2,0,32,2,0,112,0,0,112,0,128,120,8,128,112,0,0,216,5,0,136,8,128,112,0,0,240], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+153617);
/* memory initializer */ allocate([128,120,8,128,112,0,0,0,0,0,240,8,128,136,8,128,136,8,128,136,0,0,48,3,0,0,0,0,192,10,128,56,6,64,144,9,0,144,9,0,96,0,0,0,6,0,32,2,0,32,2,0,32,2,0,112,0,0,32,0,0,0,0,0,0,0,0,112,2,0,32,2,0,32,2,0,112,0,0,8,1,128,56,7,128,56,1,128,8,0,0,0,0,0,0,0,0,0,0,0,0,0,64,120,9,128,168,12,128,240,0,0,0,0,0,0,0,0,0,0,0,240,10,128,168,10,128,168,10,128,0,2,0,104,9,0,0,0,0,112,8,128,136,8,128,136,7,0,0,0,0,80,0,0,0,0,0,112,8,128,8,0,128,136,7,0,0,0,0,80,10,0,0,7,0,136,0,128,8,0,128,136,7,0,0,0,0,72,11,0,0,7,0,168,2,128,112,10,0,168,5,0,0,0,0,0,5,128,160,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,6,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,8,128,136,8,128,136,7,128,0,0,0,0,0,0,0,7,128,136,8,128,136,7,128,8,0,128,136,7,0,32,2,0,32,2,0,0,0,0,0,0,0,0,0,0,0,0,0,32,2,0,248,2,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,168,10,128,168,0,0,0,0,0,0,0,0,0,0,0,48,4,128,72,7,0,64,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,72,4,128,72,4,128,0,0,0,0,0,0,240,8,0,224,1,0,16,9,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,6,0,32,2,0,32,2,0,112,0,0,0,0,0,0,0,0,48,4,128,8,1,0,32,4,0,120,0,0,0,0,0,0,0,0,48,4,128,8,3,0,8,4,128,48,0,0,0,0,0,0,0,0,16,1,0,48,5,0,144,15,128,16,1,0,0,0,0,0,0,0,240,8,0,224,1,0,16,9,0,96,0,0,0,0,0,0,0,0,112,8,0,128,15,0,136,8,128,112,0,0,0,0,0,0,0,0,240,2,0,32,4,0,64,4,0,64,0,0,0,0,0,0,0,0,112,8,128,136,7,0,136,8,128,112,0,0,0,0,0,0,0,0,112,8,128,136,7,128,8,0,128,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,1,0,144,1,0,16,3,128,0,0,0,0,0,0,0,0,0,112,4,0,96,1,0,96,15,128,0,9,128,160,11,0,168,9,0,184,10,0,176,8,128,176,15,128,0,9,128,160,11,0,168,9,0,96,5,0,112,1,0,96,15,128,0,11,128,160,11,0,136,11,0,112,4,0,96,1,0,96,15,128,0,6,0,80,7,0,16,6,0,16,2,128,8,13,0,32,3,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,6,0,0,0,0,0,0,0,0,0,0,0,2,0,168,7,0,168,2,0,0,2,0,168,7,0,168,2,0,0,0,0,0,0,0,248,15,128,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,2,106,2,0,236,153,2,0,0,64,1,0,34,58,0,0,142,72,2,0,172,38,2,0,39,238,2,0,253,249,2,0,144,0,3,0,168,216,2,0,119,255,2,0,77,112,2,0,34,29,2,0,127,60,1,0,79,251,2,0,72,145,2,0,255,255,255,255,255,255,255,255,88,155,1,0,44,212,1,0,0,0,2,0,121,108,1,0,0,128,1,0,0,192,1,0,54,229,2,0,211,242,2,0,176,220,2,0,246,140,2,0,164,136,2,0,82,132,2,0,0,128,2,0,154,149,2,0,0,0,3,0,185,239,2,0,53,118,2,0,12,171,2,0,251,122,2,0,56,250,1,0,82,175,2,0,152,179,2,0,58,158,2,0,128,162,2,0,198,166,2,0,82,248,0,0,82,184,0,0,82,120,0,0,146,223,2,0,208,1,0,0,0,64,0,0,0,128,0,0,0,192,0,0,255,255,255,255,255,255,255,255,237,46,1,0,49,254,2,0,207,63,1,0,188,231,1,0,75,241,2,0,183,231,2,0,35,234,2,0,0,0,1,0,106,93,2,0,36,48,2,0,52,179,1,0,250,187,2,0,0,64,2,0,143,236,2,0,231,254,2,0,171,63,1,0,182,99,2,0,144,57,2,0,30,87,2,0,150,190,1,0,160,80,2,0,100,226,2,0,16,18,2,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,105,253,2,0,38,191,2,0,35,255,1,0,161,252,2,0,185,245,2,0,145,248,2,0,77,244,2,0,37,247,2,0,255,255,255,255,255,255,255,255,140,212,2,0,222,183,2,0,0,192,2,0,28,196,2,0,56,200,2,0,84,204,2,0,112,208,2,0,82,56,0,0,48,0,1,0,0,0,0,0,24,0,24,0,200,0,16,127,248,33,128,12,70,0,4,132,0,28,8,192,52,11,245,116,158,120,196,144,16,188,113,240,212,194,64,242,177,100,194,80,8,98,88,24,35,126,12,123,122,31,252,240,124,252,248,127,41,248,48,21,240,49,227,186,16,119,191,35,239,159,200,255,159,255,255,199,255,255,144,128,128,73,31,192,38,127,240,49,255,248,51,248,124,31,192,6,31,192,2,31,207,2,31,1,129,31,159,215,31,7,29,19,1,58,19,0,44,21,0,18,17,128,18,23,0,74,9,128,178,15,3,20,11,130,252,11,137,28,23,192,72,97,252,88,193,255,252,32,255,254,17,127,230,23,128,26,42,127,226,53,128,30,84,192,2,85,240,13,90,28,157,88,249,229,73,33,245,84,9,45,84,16,133,84,4,130,52,14,194,84,7,130,100,28,226,85,231,188,149,24,86,215,3,22,182,7,2,23,80,86,35,245,125,103,255,249,12,63,192,51,31,132,52,10,44,40,0,4,96,63,204,80,64,62,224,128,2,161,0,2,250,0,6,244,0,62,180,56,55,220,14,125,236,28,81,252,40,1,220,0,1,236,0,1,188,0,33,156,1,225,212,0,225,204,1,241,98,3,185,58,7,61,14,4,103,7,0,246,3,0,36,1,192,252,100,0,50,232,127,138,179,128,102,236,127,154,183,128,121,172,0,217,232,0,141,82,3,201,119,198,133,72,162,5,88,48,5,40,16,7,40,16,5,20,33,5,20,18,5,100,12,9,162,0,9,42,0,18,35,7,18,18,128,36,146,64,72,77,127,128,212,163,224,146,50,0,14,0,240,48,0,12,68,255,0,71,0,210,40,0,54,24,0,17,19,0,105,55,128,233,112,117,9,113,231,137,82,133,73,112,38,21,80,68,22,80,2,20,40,35,24,232,98,40,120,28,44,168,33,44,168,93,40,44,227,40,92,152,106,171,0,176,52,195,75,202,60,148,38,0,8,40,255,228,35,0,28,42,208,4,16,1,12,49,93,4,72,130,58,80,60,68,72,65,116,32,2,72,16,0,36,9,6,36,13,9,68,8,2,136,8,13,104,28,16,16,28,33,144,26,70,80,45,41,96,104,80,96,164,43,192,18,4,160,9,0,48,4,128,44,152,128,216,179,0,40,68,63,232,48,192,24,65,0,4,67,24,20,74,108,28,90,2,40,32,28,120,40,40,168,36,0,68,20,0,68,16,4,36,8,11,36,6,0,200,6,7,104,13,15,240,13,12,48,12,139,208,28,129,160,100,84,96,146,63,240,9,39,204,36,143,147,11,255,240,27,47,80,16,2,16,52,0,8,44,0,8,45,128,12,40,240,120,104,8,200,136,0,142,136,113,249,168,33,45,168,1,13,144,1,13,80,8,138,48,4,140,8,15,8,8,120,200,16,95,208,22,64,80,5,15,16,5,70,32,102,212,200,230,255,140,197,127,15,253,255,223,15,255,240,127,26,126,30,0,56,56,0,12,56,0,28,56,0,28,56,0,12,118,0,106,81,69,142,113,231,138,112,16,10,56,16,12,48,32,12,16,64,8,16,164,8,8,24,16,8,195,16,21,189,168,21,66,168,22,24,104,53,128,168,82,235,202,72,63,18,15,253,248,15,15,252,31,3,204,30,0,12,30,0,12,28,0,14,28,192,6,60,240,60,40,24,252,24,253,156,56,33,246,56,1,14,24,1,12,8,1,8,24,17,8,8,9,152,8,127,144,8,255,208,28,159,224,58,2,32,58,6,96,121,128,224,120,193,240,124,255,120,127,191,252,124,4,28,120,0,12,120,0,12,120,0,12,113,0,44,115,128,254,112,113,142,48,242,236,112,0,14,48,2,12,48,0,12,48,1,12,16,1,12,16,31,136,16,0,8,8,221,136,8,179,208,12,14,16,10,3,32,25,0,112,48,192,248,112,35,255,224,31,239,254,112,112,244,240,248,255,251,136,255,192,8,255,0,4,255,0,4,255,128,4,255,0,12,254,14,24,102,19,148,70,3,4,92,0,4,56,0,4,32,0,4,18,0,8,14,0,56,30,0,12,30,1,220,27,3,136,61,130,30,124,192,14,252,48,13,116,30,29,50,135,244,127,225,252,127,128,78,63,128,6,127,128,2,255,0,1,255,56,1,255,126,1,254,7,79,254,127,141,255,47,30,222,0,22,94,0,18,74,0,9,38,0,201,50,1,250,58,2,50,29,1,234,25,7,252,25,15,190,57,7,28,124,144,228,78,89,252,115,248,108,92,253,248,31,255,0,58,95,128,44,191,224,39,127,240,20,255,208,21,241,144,23,128,8,118,0,14,118,14,156,122,63,20,122,32,40,116,3,52,40,14,36,44,1,20,22,0,140,18,0,56,7,33,204,15,147,248,21,131,136,20,134,24,18,194,60,40,247,108,68,127,252,197,127,252,25,23,0,15,255,128,14,231,192,28,15,224,57,254,96,58,0,32,50,0,32,55,0,32,54,0,24,52,0,240,60,125,224,60,185,176,76,112,16,100,0,16,84,0,144,60,0,144,36,7,224,16,1,176,4,7,240,6,76,176,7,51,160,25,129,32,25,227,252,56,242,127,148,159,185,145,112,6,169,207,242,209,112,12,146,128,6,148,0,15,37,112,26,66,206,50,95,7,124,166,28,84,170,40,66,45,0,35,21,0,34,40,1,18,42,1,149,70,0,116,133,2,252,5,7,190,14,143,15,14,142,205,26,92,22,49,32,84,104,157,244,135,239,240,32,0,16,32,2,16,108,2,8,112,3,132,192,124,254,224,12,174,112,87,94,104,188,54,217,127,44,255,198,2,219,52,2,187,0,2,251,0,2,123,1,2,61,1,242,93,0,250,46,129,206,55,135,198,57,141,130,103,204,54,239,196,38,239,246,62,191,255,255,255,255,255,8,8,0,8,255,0,15,255,192,29,255,224,61,255,240,61,191,216,61,1,136,61,0,4,61,0,14,61,24,12,29,6,20,19,1,188,23,7,40,19,10,36,22,0,20,14,0,136,14,0,120,14,0,152,23,7,120,20,5,16,18,132,48,85,66,51,138,54,121,8,191,253,246,103,8,121,128,248,183,143,8,121,192,4,39,128,4,31,128,2,15,140,6,159,3,202,254,0,20,143,15,28,151,2,20,154,0,8,144,0,12,72,0,68,32,0,248,24,0,8,8,0,208,6,7,144,5,0,48,9,128,30,25,64,17,101,62,34,141,1,196,61,1,72,3,34,128,2,247,192,3,255,192,7,255,224,6,30,240,12,4,56,8,0,24,24,0,28,27,128,220,40,99,8,43,130,200,41,69,136,40,4,8,16,4,20,8,34,24,4,28,16,4,0,16,4,58,32,2,0,32,1,8,80,2,128,216,15,65,86,53,190,169,74,201,80,146,176,52,166,192,36,73,63,196,145,192,60,168,0,4,130,0,4,22,0,22,86,224,54,85,58,230,84,12,246,84,89,172,148,0,136,36,0,72,134,6,68,204,1,132,60,132,68,126,120,172,94,32,30,15,1,60,39,194,57,197,224,247,8,249,226,28,31,208,251,127,212,32,127,246,147,128,24,204,63,210,49,192,38,198,0,50,24,0,114,166,18,210,107,211,212,35,165,148,161,68,20,208,2,28,208,1,26,80,33,26,16,26,57,176,4,185,184,155,240,120,241,208,125,254,80,121,192,72,220,142,104,204,132,164,34,160,209,25,255,132,4,126,158,15,0,112,56,0,10,100,164,178,84,255,189,151,0,105,152,127,132,3,128,106,28,0,24,32,23,149,38,152,17,47,131,149,32,69,21,178,128,8,16,0,10,80,66,10,40,68,14,40,59,233,40,64,24,57,135,148,196,96,24,15,12,36,241,132,72,6,95,208,250,127,160,8,15,224,32,241,16,34,19,72,76,209,88,80,63,52,167,128,194,72,96,53,81,16,197,81,193,138,48,61,122,16,209,166,168,1,4,136,0,133,68,0,134,36,0,132,52,12,136,56,3,104,44,88,124,36,243,60,230,192,45,102,64,38,74,177,105,0,81,212,144,111,238,95,252,238,175,129,22,175,1,18,173,255,227,168,0,249,250,0,5,246,112,2,214,204,130,150,7,30,180,126,54,180,20,68,148,0,120,180,0,68,180,0,36,180,4,40,104,27,40,104,63,200,212,97,240,164,72,112,162,7,232,137,194,244,130,244,220,64,255,45,49,255,119,159,127,145,33,128,4,92,127,248,82,128,11,149,112,5,189,28,5,186,2,2,170,112,50,148,40,74,140,0,141,144,0,245,176,0,173,144,0,74,240,14,74,80,1,140,208,60,8,208,35,16,200,29,144,200,2,160,96,12,64,84,0,128,17,1,0,2,131,192,5,124,160,176,0,0,120,0,0,120,0,0,124,0,0,248,0,0,241,1,0,228,128,0,248,66,8,249,240,12,247,126,60,242,126,248,226,0,8,242,0,4,242,0,4,241,0,8,115,2,8,99,199,136,87,31,240,123,120,112,119,240,48,127,224,48,239,224,48,252,243,32,222,127,240,70,147,48,79,96,72,92,139,116,83,48,4,45,15,202,40,112,58,43,128,2,74,0,57,82,224,105,92,28,245,92,225,173,93,64,133,92,0,134,42,0,68,42,2,68,50,3,132,43,4,106,50,24,89,50,23,137,43,80,2,103,35,130,75,97,49,67,56,106,101,143,212,224,3,248,224,5,248,224,0,220,226,1,126,230,0,110,236,24,39,232,238,63,241,131,255,253,120,239,255,14,62,236,63,254,228,0,254,196,0,28,196,0,12,68,0,12,70,0,92,74,1,152,140,62,120,140,31,240,142,4,240,23,3,112,37,192,112,36,224,248,178,127,248,71,255,128,159,216,224,175,63,112,124,127,248,89,128,12,125,0,6,127,0,2,125,128,3,124,199,198,127,136,74,249,195,30,242,204,138,242,192,9,250,64,9,249,64,69,252,64,57,239,64,202,255,193,6,237,2,244,244,133,4,244,132,8,250,68,8,253,62,16,236,159,224,68,31,250,41,224,146,54,0,4,24,31,252,19,224,4,26,48,4,24,14,28,40,1,40,40,30,112,40,4,104,32,0,72,16,0,72,24,0,40,24,6,40,48,9,208,104,6,48,210,15,240,82,28,48,73,17,176,164,128,32,146,97,112,145,63,232,72,255,228,38,175,213,70,114,168,89,116,168,34,133,44,155,31,196,204,96,52,168,128,2,177,96,10,68,29,42,40,37,60,212,82,110,84,48,245,196,72,166,140,20,68,158,14,68,252,17,136,156,120,80,156,87,240,120,0,240,92,71,80,33,64,120,184,224,216,38,242,92,1,126,194,1,119,179,71,107,202,112,27,38,83,192,211,148,63,11,72,0,11,208,0,31,103,0,59,35,228,202,96,121,246,49,241,38,178,33,6,176,0,134,176,16,198,80,24,140,56,7,14,60,56,254,127,240,110,187,255,175,94,192,122,87,199,189,183,227,60,187,247,182,53,255,234,64,15,141,8,7,0,20,8,136,24,39,4,16,127,242,17,128,10,18,0,22,18,4,53,22,242,37,28,30,117,28,236,229,38,88,134,42,0,130,44,0,67,100,6,39,86,4,103,75,67,199,71,140,118,79,31,190,87,176,77,151,144,141,167,32,138,7,224,218,9,241,254,19,255,243,44,255,208,51,128,104,84,255,132,39,0,101,72,255,154,151,0,105,250,240,25,170,28,9,154,8,121,180,244,202,180,45,245,180,1,86,116,1,20,116,0,148,84,13,148,84,50,84,168,253,244,40,79,180,40,0,148,44,14,16,46,6,48,153,130,89,40,230,204,68,255,38,133,243,250,11,197,38,75,9,26,146,73,254,22,207,1,119,12,1,183,55,129,181,32,195,21,160,101,20,161,203,78,162,142,141,160,9,5,32,5,23,192,2,55,64,58,107,64,68,184,67,30,50,64,100,192,192,0,32,144,8,28,104,8,4,23,240,0,33,76,2,26,138,28,0,114,53,205,254,35,210,242,78,83,112,95,253,176,223,225,216,248,63,105,124,0,111,255,16,124,113,210,253,179,251,186,241,103,186,240,69,58,209,132,62,112,34,60,120,126,120,89,247,112,251,195,120,185,191,252,191,67,247,126,61,249,255,219,228,223,211,216,119,203,240,176,15,10,108,48,34,155,207,195,130,80,50,227,224,129,60,3,214,40,38,20,185,63,209,167,149,147,19,64,15,32,64,9,32,78,11,160,133,30,81,200,28,184,127,14,177,255,204,123,199,143,121,184,78,217,2,110,61,28,91,55,223,252,231,255,218,77,231,39,9,73,232,72,140,24,65,116,4,146,65,52,21,158,204,105,33,228,43,64,18,86,188,10,178,199,106,69,58,218,181,20,170,58,0,74,74,0,37,58,3,5,10,6,165,52,60,41,94,249,218,143,102,60,94,33,216,151,32,80,7,162,208,7,242,248,32,255,240,208,75,232,48,37,188,139,0,40,208,4,4,232,0,4,228,0,130,215,32,22,244,255,142,241,254,250,210,93,222,202,38,30,134,36,254,148,1,204,212,0,92,84,0,28,100,1,24,108,9,48,168,231,32,217,240,96,254,127,192,124,3,192,126,3,128,110,3,0,231,15,0,227,254,0,161,254,0,15,255,192,31,255,240,31,255,240,62,2,24,120,0,16,120,0,8,120,0,8,121,128,56,122,240,104,44,13,144,68,113,112,92,161,168,72,1,8,32,0,136,24,4,144,8,3,16,24,12,208,36,48,112,36,103,176,50,24,160,72,3,64,167,129,112,17,31,76,8,158,67,63,254,112,115,184,63,96,16,24,96,0,31,112,0,28,96,0,154,96,3,82,231,12,26,168,139,26,163,69,154,165,192,28,96,64,8,16,64,8,48,72,20,24,48,52,20,76,86,8,199,86,8,251,21,4,199,41,10,185,104,27,153,232,202,203,80,69,255,64,66,126,128,19,255,252,39,255,254,159,2,146,159,0,2,127,0,1,63,0,1,62,0,1,94,60,7,94,71,29,30,1,145,164,30,45,40,21,50,236,0,34,20,0,17,144,0,17,18,1,145,46,0,114,170,3,138,203,7,122,73,7,140,9,6,52,20,228,72,58,62,120,217,31,248,20,127,248,27,241,108,47,192,4,87,128,4,39,128,2,47,128,2,79,128,66,79,199,197,143,200,71,159,135,11,155,138,142,21,128,22,27,128,17,21,128,9,218,0,133,4,0,230,4,0,26,7,128,198,6,131,254,2,135,12,2,70,116,5,2,36,10,155,220,20,70,254,82,238,144,65,28,112,41,225,144,38,14,8,25,144,28,147,224,40,162,64,88,76,159,112,65,145,80,125,166,40,89,20,16,36,0,8,38,0,136,18,0,240,40,1,24,44,31,112,91,134,208,155,132,48,149,136,80,74,232,80,73,152,232,68,142,228,162,23,210,161,3,209,105,216,1,159,15,241,140,240,14,72,64,2,36,156,23,147,15,30,73,0,180,36,143,60,154,128,20,102,128,10,18,128,10,170,128,6,156,128,230,101,17,30,51,15,140,111,2,116,166,3,156,166,132,4,75,132,120,139,140,40,158,255,124,73,255,254,36,255,255,146,111,252,65,240,14,64,12,98,66,3,146,196,0,20,4,192,4,5,224,2,4,50,27,132,126,57,137,168,121,144,0,178,32,0,146,32,0,140,48,0,74,32,8,74,16,14,74,16,3,132,144,120,72,144,255,208,121,192,112,185,3,96,135,65,96,65,235,240,49,255,248,12,255,212,240,0,4,224,72,3,192,18,1,0,127,192,7,192,120,28,0,29,23,227,238,87,247,238,112,146,140,48,0,12,48,0,12,144,0,13,56,32,13,152,63,10,152,12,10,120,0,14,120,31,14,188,115,30,190,14,61,191,0,125,63,192,254,125,237,190,124,255,125,253,255,183,16,0,184,56,0,56,52,0,252,84,0,126,116,0,62,107,195,254,100,140,6,84,80,2,100,99,226,104,32,110,104,35,78,104,32,2,120,32,2,112,32,2,122,32,20,119,32,44,248,224,68,255,225,188,255,33,4,254,38,12,254,32,4,237,112,4,125,127,4,196,255,248,149,61,4,210,194,6,168,1,142,197,48,114,161,120,3,154,140,3,82,4,7,98,63,142,83,10,26,67,0,60,146,0,68,54,0,4,158,0,12,46,2,88,206,29,144,156,248,224,36,7,64,70,16,64,138,14,128,137,4,128,18,192,160,128,34,44,101,220,74,26,34,9,24,88,32,33,1,168,38,63,200,150,192,55,138,112,1,128,248,13,145,12,5,153,3,13,74,120,61,74,56,5,34,0,250,50,0,74,90,0,36,46,3,36,86,12,196,156,48,108,76,39,168,46,8,168,191,3,16,223,160,16,47,161,56,199,251,48,67,255,248,7,127,224,64,0,1,65,255,251,134,0,7,152,255,251,163,0,1,142,0,5,212,0,5,173,128,5,168,64,13,168,249,23,168,109,246,144,1,102,80,1,6,144,1,6,16,8,132,40,57,136,104,70,72,168,128,76,84,31,52,204,32,164,4,86,162,130,137,90,48,0,88,15,64,32,15,254,64,24,222,32,16,161,48,48,225,48,55,33,216,62,62,44,104,192,12,113,176,28,125,220,12,127,2,56,63,30,40,62,130,56,62,128,8,62,128,4,112,64,36,248,128,228,255,131,152,247,15,252,231,6,28,231,128,244,199,192,16,197,240,16,103,248,32,182,15,192,79,255,248,47,159,236,47,3,236,110,0,196,111,0,4,127,128,2,119,128,6,55,140,26,63,23,156,39,7,18,43,0,10,43,0,6,17,128,2,1,0,66,9,32,28,23,16,4,33,0,12,40,128,68,48,64,0,74,0,4,194,88,10,33,38,29,144,145,253,8,64,94,75,255,224,55,255,224,223,255,144,95,255,16,95,138,8,94,0,8,94,0,12,94,0,24,47,48,40,46,76,36,116,142,84,76,60,68,74,80,34,51,0,34,43,0,18,19,129,19,15,1,226,3,128,19,3,128,221,15,129,254,9,193,143,13,195,63,9,228,23,20,188,7,111,96,200,155,128,52,144,128,10,168,159,10,149,96,242,85,128,12,74,0,12,74,60,52,44,71,36,40,0,88,60,14,104,40,20,72,36,0,36,20,0,20,16,1,20,24,1,228,30,3,24,26,12,232,41,19,8,41,4,112,84,192,144,90,48,43,88,15,244,181,0,213,99,251,70,52,14,180,153,242,84,210,29,146,178,0,26,149,128,122,151,228,74,140,48,148,148,253,244,149,81,84,148,1,12,148,1,12,84,0,140,84,4,148,68,3,28,36,8,146,58,31,42,58,0,75,119,134,108,172,113,187,71,14,112], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+163857);
/* memory initializer */ allocate([148,192,204,42,63,35,204,0,176,32,127,130,32,191,194,32,127,130,32,191,194,63,127,130,48,191,222,48,0,118,49,128,38,48,64,246,49,241,6,112,35,230,112,0,6,112,0,6,112,0,6,112,2,6,112,2,6,112,18,6,112,127,4,104,247,4,41,159,166,36,129,246,229,129,247,227,3,251,225,255,251,64,1,158,70,8,190,120,22,46,99,200,254,76,0,14,121,248,62,56,16,126,56,56,147,56,72,250,16,0,2,88,0,130,176,0,130,184,0,194,184,0,194,208,7,100,240,31,228,248,56,228,248,127,244,244,1,246,247,3,158,243,195,30,195,241,30,193,255,60,193,255,255,248,1,112,112,10,240,112,0,48,192,1,126,176,1,252,184,16,124,192,1,251,140,224,25,133,0,29,130,120,121,70,4,158,6,48,110,134,0,12,230,0,12,198,0,12,50,0,152,54,3,16,38,5,24,30,31,152,63,1,24,126,128,24,190,64,56,108,32,252,86,31,94,31,71,252,63,1,12,62,0,6,62,0,6,60,224,2,60,248,30,60,14,254,60,254,242,60,86,90,124,6,2,56,6,2,56,12,2,60,31,194,62,15,132,62,63,196,24,124,228,8,127,244,13,4,40,12,131,8,22,64,8,51,64,16,51,179,48,241,207,224,248,127,240,63,247,208,63,192,120,63,224,24,127,255,4,127,128,100,127,128,28,127,158,4,119,1,4,127,13,140,111,3,48,126,0,156,46,0,8,54,0,16,118,0,144,126,0,112,54,0,144,54,0,224,98,3,32,227,0,192,209,128,64,208,128,128,40,249,128,36,127,192,18,62,0,208,0,1,160,16,35,193,127,139,194,128,118,73,56,31,141,62,1,158,1,1,198,29,31,172,6,33,216,0,127,168,0,10,184,0,4,152,4,36,184,1,100,240,0,196,248,0,8,180,30,8,248,9,208,216,3,80,220,1,32,142,0,32,131,0,64,1,240,128,129,255,0,252,2,124,252,6,52,240,0,70,241,0,159,255,0,91,254,0,61,124,159,255,253,48,55,254,92,15,253,131,30,229,135,182,223,128,6,141,0,6,221,0,4,223,128,20,254,128,20,255,128,100,255,131,52,255,134,248,255,128,16,63,128,32,61,192,32,127,112,32,230,31,192,6,0,80,8,0,24,56,64,188,120,17,12,60,132,40,64,0,13,68,10,31,96,127,253,80,223,255,65,135,47,67,140,62,64,0,126,96,128,92,50,128,76,58,128,72,27,128,40,31,129,216,63,128,16,123,1,240,127,0,48,127,128,240,95,192,32,94,96,32,61,63,224,63,255,255,63,255,255,63,191,255,63,131,255,63,144,255,63,254,63,76,112,115,92,124,9,60,87,6,40,27,54,24,0,124,72,0,44,64,0,8,96,0,136,64,0,136,192,12,144,128,7,48,129,255,96,143,15,192,7,31,192,7,9,128,3,249,128,19,255,0,1,254,0,240,255,240,225,255,240,67,251,248,95,128,24,198,0,8,199,0,8,255,0,4,239,0,14,255,148,60,255,191,36,255,97,60,223,12,52,239,0,20,111,0,20,118,0,12,56,64,118,62,1,252,62,0,52,61,1,252,61,3,252,244,134,62,228,204,236,14,108,124,14,63,248,32,126,40,33,128,56,38,0,8,40,127,200,49,128,52,38,0,12,38,56,4,36,4,4,36,58,60,36,20,76,44,0,244,36,0,172,12,0,132,52,4,72,84,6,72,84,29,136,84,33,144,148,30,144,18,1,16,26,14,32,9,2,64,4,128,128,132,101,128,130,62,192,159,255,240,111,255,248,159,255,248,63,225,76,255,192,6,63,0,3,127,128,3,127,56,6,127,15,26,127,1,178,127,14,60,126,5,42,114,0,34,24,0,18,8,0,18,30,0,212,18,0,100,49,0,180,41,3,248,36,143,40,233,64,80,240,48,16,255,78,56,127,55,252,228,131,16,34,76,16,145,48,112,9,129,136,6,14,4,24,16,12,96,96,72,129,193,212,133,198,28,157,201,146,126,227,10,62,192,4,86,128,4,75,0,28,69,0,40,32,128,12,24,0,124,31,0,238,28,128,202,28,128,154,58,96,136,201,17,24,100,140,56,50,67,252,16,1,34,32,1,225,32,255,249,35,0,5,39,0,3,63,0,2,51,28,2,46,7,14,166,0,30,174,30,36,150,8,124,20,0,84,40,0,68,44,0,36,92,0,36,124,1,36,236,3,200,202,12,104,197,11,168,69,0,20,34,131,20,25,192,100,4,176,72,3,127,140,15,3,192,31,14,48,28,24,8,126,96,12,127,192,14,61,128,14,127,184,12,127,188,28,63,115,206,127,112,142,118,195,220,127,224,156,121,224,8,125,96,4,47,224,36,127,224,60,126,192,120,63,193,216,63,3,156,62,34,28,126,56,48,118,24,112,252,15,240,252,7,240,208,18,74,96,52,44,166,50,76,8,9,178,18,3,201,145,0,10,20,192,58,147,240,74,17,83,201,16,5,242,32,8,150,160,8,18,160,8,20,32,64,40,32,44,48,176,144,32,49,192,96,176,188,120,24,8,147,148,97,36,98,3,114,17,5,103,136,249,12,70,81,176,128,125,238,129,130,22,14,2,26,156,2,22,181,242,26,249,255,30,251,3,254,206,124,246,198,6,78,196,63,62,196,10,124,196,0,108,198,0,12,214,0,40,230,3,104,246,1,248,126,0,24,62,15,240,127,0,208,247,129,160,225,192,48,240,224,48,184,127,240,110,103,248,1,255,192,3,255,224,7,255,120,7,225,252,15,192,60,15,224,4,15,128,4,15,206,4,15,153,14,15,143,148,15,5,44,15,0,52,14,0,8,14,0,4,14,0,4,7,0,248,7,7,104,5,15,240,5,152,112,12,209,176,28,224,16,52,120,160,36,63,240,66,31,248,31,223,240,31,252,120,63,224,56,62,0,56,124,0,28,112,0,220,112,1,206,112,3,47,112,199,206,59,246,4,62,112,4,63,64,6,25,0,6,28,0,2,28,9,130,28,15,226,6,7,50,2,14,227,3,30,7,1,159,199,0,155,14,0,248,30,0,248,92,0,255,252,4,8,40,132,255,228,135,166,28,141,127,244,187,128,12,124,127,244,115,128,12,68,0,12,112,0,56,49,232,200,114,57,244,145,241,164,160,65,4,160,1,4,104,0,136,88,8,136,56,7,8,8,56,200,8,47,184,12,40,152,10,39,20,21,2,50,113,99,115,144,191,210,162,222,156,82,49,28,42,192,204,43,15,226,83,48,18,84,192,10,73,184,4,43,14,28,47,3,54,30,28,68,38,8,180,42,0,228,35,0,64,23,0,64,18,128,36,10,1,32,6,0,196,6,0,8,3,3,192,15,0,8,36,129,16,68,32,0,98,24,32,113,23,192,62,3,31,31,3,143,14,191,199,7,255,199,131,192,63,199,128,15,239,64,231,126,7,19,124,24,13,48,127,7,48,94,254,33,131,126,33,134,44,49,0,8,49,0,8,58,0,72,62,0,16,63,1,208,30,0,16,79,7,240,149,1,160,20,131,96,36,64,240,40,49,240,192,0,4,192,0,6,160,0,2,224,0,28,72,0,35,195,128,66,136,54,65,144,77,129,160,140,71,64,131,62,64,141,3,147,0,31,18,0,38,44,0,52,36,0,36,36,0,8,36,3,8,212,0,200,44,6,48,68,3,160,73,1,96,8,128,192,8,97,192,24,91,192,255,255,248,255,224,28,255,240,60,255,255,252,255,254,14,255,224,6,255,143,6,255,187,222,255,7,28,127,2,12,119,0,2,15,0,2,59,0,2,63,0,10,19,0,122,10,0,252,15,3,252,15,3,220,17,134,12,26,132,124,40,192,8,109,112,16,198,156,48,96,15,224,64,139,128,64,203,192,64,161,240,64,128,112,64,0,120,64,7,248,72,63,252,96,120,124,96,192,252,113,129,222,123,253,15,126,208,7,126,64,135,126,0,71,110,0,71,102,1,215,103,0,63,113,3,127,49,135,39,120,198,215,61,224,63,63,248,31,103,143,255,135,193,255,15,175,192,31,255,224,63,255,240,63,207,248,124,0,28,124,0,12,124,0,12,126,0,4,124,0,4,124,0,12,124,24,60,76,127,104,124,0,4,88,0,4,40,0,4,28,0,40,12,1,40,12,0,232,30,7,248,62,31,248,249,128,144,252,64,24,254,60,252,92,31,254,12,127,224,145,255,240,103,255,240,15,255,248,63,228,156,127,128,12,127,0,12,127,0,12,126,16,28,126,60,168,126,3,56,126,14,20,126,20,20,42,0,12,40,0,12,53,0,116,56,0,132,14,0,116,13,1,136,13,0,40,20,128,14,150,48,16,22,12,48,18,7,208,127,19,128,252,0,3,255,0,13,252,0,3,255,192,3,248,51,225,255,140,49,246,99,203,179,243,238,208,49,45,208,0,9,208,0,9,208,48,9,112,96,9,208,112,10,240,112,10,113,254,18,115,199,154,154,255,148,220,0,48,214,56,96,158,1,224,255,131,184,123,255,58,31,127,196,27,128,58,26,0,2,26,127,230,28,128,26,31,128,6,27,0,2,58,0,2,58,13,130,58,22,26,72,0,38,72,0,42,0,1,36,48,2,20,24,1,148,24,0,100,24,31,8,20,56,232,102,4,176,146,7,32,81,6,64,73,142,64,73,222,128,37,255,0,60,162,196,224,128,96,177,65,112,13,32,84,226,95,168,29,96,40,140,128,44,141,0,104,49,0,136,17,201,240,138,1,80,114,49,8,18,16,136,84,0,72,228,3,80,8,0,240,92,54,112,56,125,248,60,240,56,62,195,32,63,209,176,43,251,252,231,255,224,8,255,20,37,255,240,89,255,248,171,243,136,159,0,8,190,0,4,190,0,4,190,0,28,190,30,36,190,0,92,190,14,108,158,20,36,149,0,18,146,128,18,144,128,146,154,0,98,156,1,154,148,129,10,167,2,244,167,132,4,167,192,100,201,32,8,138,144,40,244,162,190,148,41,241,36,20,72,40,8,4,40,55,100,16,128,2,16,127,242,17,128,14,22,0,2,31,0,10,28,193,50,36,48,228,45,252,244,32,161,68,84,33,68,156,1,4,44,16,132,76,8,132,212,29,138,52,63,205,46,112,109,78,111,116,213,102,116,149,226,122,108,255,250,58,255,179,31,113,248,255,192,252,63,255,254,255,224,126,127,144,14,126,60,2,126,127,65,126,67,203,255,12,159,255,58,26,238,18,62,202,0,44,234,1,36,239,130,20,231,3,228,227,0,200,222,56,40,222,119,248,191,144,48,175,161,224,127,129,176,199,128,216,131,197,216,243,255,184,8,5,0,9,255,0,11,255,128,15,255,224,15,44,240,28,0,56,48,0,12,48,0,12,49,192,232,56,35,8,25,197,212,43,39,20,40,4,20,32,2,8,40,2,8,16,12,16,8,51,16,8,64,144,4,158,144,4,161,160,2,128,160,9,0,192,8,227,32,26,28,64,192,31,224,206,127,240,115,255,248,65,255,252,131,255,198,255,0,2,255,0,3,255,128,15,255,128,19,255,0,30,254,15,213,254,56,13,255,7,9,255,10,5,103,0,3,42,0,2,36,0,30,16,0,95,24,0,63,91,0,194,208,128,14,104,51,30,36,15,254,178,3,254,16,208,90,22,0,13,248,63,197,7,192,51,10,0,11,70,0,3,110,48,3,94,120,3,76,12,6,132,115,62,164,24,98,144,0,122,216,0,148,160,0,132,48,0,68,48,4,72,176,3,136,8,120,72,136,189,208,68,0,208,36,30,32,19,0,80,132,193,207,67,62,230,85,28,8,84,162,132,128,42,4,179,166,196,140,127,37,146,28,20,19,0,42,33,193,204,160,99,8,160,2,13,33,199,141,34,165,73,160,4,10,144,0,10,16,2,24,32,50,24,224,28,24,80,2,36,144,60,36,40,0,82,36,0,113,19,24,130,129,147,4,38,125,0,0,64,0,8,144,16,11,82,208,28,0,56,144,255,9,99,0,198,68,0,34,139,0,209,73,215,146,42,98,84,200,16,19,72,16,18,72,16,18,56,34,28,56,157,28,61,193,188,63,247,252,93,193,223,169,62,90,31,62,124,243,136,247,52,156,134,59,222,238,62,255,34,88,199,240,94,56,13,181,103,227,183,120,31,182,193,194,183,128,98,107,8,33,83,7,199,163,2,202,234,0,15,98,0,10,148,0,6,144,0,4,152,0,34,84,0,50,84,0,12,148,0,52,148,128,200,36,64,24,36,96,8,200,220,16,148,39,16,22,92,240,33,85,72,76,209,72,83,255,164,64,0,104,227,255,152,60,0,100,213,128,20,84,224,23,212,50,212,181,227,23,213,69,20,56,5,175,40,2,40,200,34,46,120,28,88,88,0,96,152,126,80,56,102,80,56,194,184,61,186,168,126,18,172,191,47,166,191,190,148,239,252,32,63,237,194,159,196,70,76,62,26,155,192,225,180,63,5,168,0,13,234,192,37,20,60,221,211,132,165,44,100,245,169,248,165,42,160,134,40,0,131,40,0,70,228,24,103,4,60,147,246,195,14,106,70,237,109,160,28,219,123,34,142,90,181,10,66,105,92,0,12,13,32,13,4,160,9,80,3,18,215,240,106,84,15,154,98,0,2,100,0,10,100,192,10,84,124,26,84,8,252,52,225,14,41,145,122,168,1,206,216,1,10,8,0,138,120,8,140,168,7,8,40,112,216,40,223,212,20,128,148,108,14,44,106,4,42,149,0,106,148,140,169,106,237,41,146,255,95,240,64,56,252,64,8,255,192,4,255,128,4,255,2,62,254,15,204,254,16,30,252,32,54,252,79,46,252,219,182,252,198,2,255,76,2,253,0,2,246,0,2,225,128,90,50,160,114,49,32,2,25,208,58,31,112,114,26,112,2,31,224,2,31,140,4,31,131,248,63,128,32,240,0,16,240,0,0,240,255,144,241,135,224,243,1,240,246,4,108,252,7,163,253,0,227,252,0,15,216,0,15,216,64,6,248,1,4,248,1,4,248,0,196,248,31,40,120,13,136,60,14,240,30,3,224,15,128,96,135,128,64,131,232,192,129,252,192,224,127,192,255,247,224,56,8,0,124,1,128,252,129,192,254,192,130,255,197,2,255,226,6,255,254,14,255,252,22,255,191,59,255,247,147,127,253,65,95,128,65,191,128,1,191,192,1,247,192,145,119,192,113,63,240,1,31,248,114,14,249,194,15,248,50,31,240,3,31,240,7,61,94,63,60,103,239,31,255,248,24,24,28,48,0,12,48,0,12,48,0,14,48,0,14,63,131,238,51,231,198,120,0,6,111,231,199,98,33,6,96,0,6,96,0,6,112,64,6,40,196,4,56,56,4,48,134,8,17,255,8,19,255,136,31,192,200,28,124,8,30,0,28,51,0,103,49,255,143,0,9,216,0,127,244,16,128,4,1,0,4,30,62,60,54,96,36,126,0,4,254,14,92,252,26,84,252,0,36,60,0,34,28,0,18,36,0,18,4,0,242,4,1,250,4,7,252,4,7,156,28,0,4,18,0,104,50,0,40,51,6,120,17,135,248,16,231,144,16,63,248,132,100,234,131,153,50,144,250,10,173,4,242,116,248,10,213,0,6,77,0,4,101,97,44,85,63,118,77,2,70,101,60,118,37,0,70,53,0,36,45,6,36,17,11,196,28,158,52,20,147,232,34,84,40,74,64,64,21,64,22,131,248,161,72,191,240,37,63,232,18,95,246,0,191,224,1,64,24,2,128,4,10,0,4,18,0,2,20,15,242,44,48,14,44,192,2,87,128,3,87,0,63,87,30,107,151,10,67,169,0,35,169,0,18,148,129,146,74,128,227,41,192,18,36,195,226,19,128,4,10,128,4,10,80,11,57,44,18,210,147,228,36,79,203,134,0,30,136,0,2,177,255,194,159,128,61,175,6,2,215,1,2,199,25,131,214,6,206,198,3,28,100,0,36,68,0,56,128,1,28,128,2,16,0,1,16,16,0,160,16,14,64,144,3,128,136,1,0,4,1,0,2,6,0,32,6,0,33,9,192,16,241,32,16,65,24,43,255,224,27,255,240,61,128,144,52,0,8,118,0,8,118,0,4,116,0,28,118,120,36,52,78,68,56,0,184,72,60,212,72,80,68,40,0,68,16,0,36,8,3,36,12,1,200,42,6,56,42,13,232,47,10,8,72,129,144,86,80,32,81,56,32,88,159,192,86,79,224,12,127,224,24,196,144,27,7,136,28,0,36,16,63,244,48,192,12,49,0,60,35,120,100,55,156,248,30,184,168,46,80,132,38,0,132,34,0,68,88,0,37,80,2,37,152,1,197,46,0,5,42,1,229,233,2,10,209,1,202,145,192,20,49,224,23,35,156,58,98,195,242,158,127,224,51,128,16,48,120,104,114,112,40,125,255,244,115,128,18,100,0,18,138,0,10,186,0,26,180,250,122,180,6,210,72,56,244,72,40,172,72,0,140,40,0,76,52,6,76,52,11,200,84,24,108,142,63,186,143,48,58,23,48,189,107,152,106,9,218,122,181,255,234,39,3,16,202,176,240,57,71,16,38,184,8,177,64,8,138,128,52,81,128,36,71,129,88,62,62,104,38,32,68,42,14,36,42,20,20,42,0,8,18,0,248,10,0,16,14,1,152,25,3,104,25,6,136,121,12,104,229,140,40,37,132,112,35,36,124,33,31,240,16,135,224,252,3,184,240,0,72,240,31,176,224,224,72,195,31,136,132,224,20,11,0,20,22,31,60,46,17,168,220,7,34,252,26,18,124,0,10,38,0,4,42,0,68,21,0,58,20,0,98,8,128,156,7,129,100,10,128,140,10,64,132,9,32,14,20,144,31,18,79,253,49,32,252,232,206,69,245,255,234,246,10,26,244,0,10,84,0,10,85,255,238,78,0,26,54,0,10,20,241,234,53,2,60,84,245,234,84,85,74,40,2,10,24,1,12,24,17,8,8,46,8,8,0,136,4,113,200,5,206,80,6,128,48,26,4,44,105,128,83,132,245,144,2,79,20,130,255,240,133,0,8,40,255,232,241,0,20,50,0,18,2,96,42,68,244,123,52,28,249,36,225,139,136,81,235,168,1,73,136,1,10,72,0,138,44,8,138,44,63,4,76,255,132,94,177,216,143,159,216,55,128,116,55,142,122,75,128,122,73,136,226,133,204,229,5,255,164,142,5,4,18,154,100,45,231,150,145,248,10,98,0,10,34,0,27,164,0,62,100,48,43,36,254,82,169,0,243,232,60,170,40,8,139,40,0,75,200,0,42,36,3,44,210,0,200,138,0,8,197,1,212,129,6,146,127,0,25,44,128,172,80,64,95,99,48,146,160,207,82,17,255,224,19,255,240,55,223,80,54,69,208,117,0,8,116,0,8,119,128,4,119,0,6,126,12,12,62,31,148,34,32,152,42,15,44,39,10,34,47,0,18,18,0,10,10,1,220,6,1,124,6,1,140,6,2,104,7,3,140,3,130,56,26,67,52,109,47,254,141,23,253,140,64,0,144,127,128,161,255,192,71,255,224,79,129,16,47,0,8,110,0,8,124,30,56,124,48,68,124,0,124,116,6,84,116,12,34,122,0,18,74,0,18,88,0,98,40,0,42,36,0,220,18,1,230,12,1,6,4,3,116,12,66,60,20,51,56,36,15,252,36,3,252,80,192,80,44,195,204,43,20,2,42,27,254,75,52,4,86,72,2,84,150,2,86,163,196,109,160,108,137,161,200,240,162,132,175,64,2,169,64,2,89,96,44,78,80,68,156,128,252,45,129,196,87,67,8,169,64,48,76,224,16,147,17,24,8,205,184,38,51,255,97,141,254,202,5,10,202,255,254,223,0,6,224,0,6,240,127,254,127,128,4,63,0,4,63,131,130,119,4,230,115,0,10,42,1,204,34,2,140,122,0,10,112,0,4,56,0,4,30,0,52,18,0,24,18,0,232,41,1,248,40,2,136,100,0,112,146,0,32,137,17,112,68,143,240,41,206,122,43,0,14,42,63,246,43,192,14,38,61,2,46,70,2,60,56,58,60,80,38,44,0,90,80,0,84,80,0,68,80,0,34,32,6,34,48,0,196,56,30,4,88,48,100,80,71,184,80,8,88,200,1,136,232,0,16,229,0,16,242,195,32,249,111,96,117,63,176,1,16,25,6,159,241,54,224,14,217,16,2,131,42,2,26,81,74,59,12,129,122,31,22,250,10,58,152,0,60,168,0,42,184,0,34,136,0,18,68,1,148,36,0,100,60,3,148,50,6,20,18,13,248,33,14,56,97,8,216,208,136,80,168,138,16,202,55,96,165,47,224,176,99,243,33,156,15,66,96,3,69,128,2,138,0,50,138,31,254,116,96,4,88,6,4,80,139,134,95,128,206,39,7,138,182,5,28,235,0,20,163,0,12,150,128,4,178,0,100,62,0,24,86,0,8,82,0,240,145,1,16,16,128,112,40,64,16,44,48,40,195,15,232,13,255,240,13,255,248,27,2,92,26,0,12,26,0,6,26,8,4,58,60,68,72,196,100,88,48,180,88,105,74,72,1,170,40,1,10,24,1,12,24,0,140,24,8,136,24,13,144,24,115,160,24,190,224,44,33,32,42,6,32,53,66,64,116,230,240,170,63,152,18,239,102,39,255,255,39,226,190,87,192,23,159,128,4,191,224,2,27,192,2,49,142,2,85,1,1,145,14,207,17,1,17,53,0,58,72,0,34,200,0,34,14,0,36,22,1,36,38,14,200,41,120,104,105,3,176,168,128,24,40,131,16,36,81,32,36,48,112,34,24,152,18,31,150,8,64,8,8,112,24,16,254,8,19,1,200,28,254,36,39,1,228,40,0,12,54,0,196,51,3,148,48,134,28,83,65,220,81,162,154,80,32,10,40,32,10,40,0,20,24,72,20,8,48,26,20,0,18,44,124,43,44,0,42,74,48,74,49,0,171,80,195,114,208,60,178,196,192,52,121,63,204,214,192,52,137,0,10,238,0,4,198,112,4,172,28,30,206,0,52,236,120,68,136,40,120,168,0,104,176,0,36,176,1,36,80,1,20,40,0,232,24,0,8,16,3,144,52,0,80,84,1,16,162,0,32,97,0,64,160,128,64,161,112,128,161,191,192,212,254,43,87,57,218,44,0,42,49,255,148,62,0,100,40,0,36,40,0,52,31,135,148,20,72,216,19,167,24,21,74,148,16,0,20,40,0,20,24,32,20,24,28,8,8,120,16,8,254,32,9,199,32,5,186,160,2,68,64,2,16,64,13,185,152,60,211,20,216,127,115,202,127,16,42,128,8,199,15,232,132,112,16,200,128,8,211,0,56,226,120,72,196,6,248,142,56,168,156,80,132,124,0,68,84,0,36,68,0,36,46,0,200,18,1,56,14,3,248,6,3,44,13,2,200,20,128,40,20,64,24,50,50,60,105,143,244,166,99,240,81,146,252,80,255,128,171,251,192,207,244,96,15,192,48,31,0,16,30,0,56,30,0,104,62,24,200,62,46,184,63,2,232,55,140,136,19,136,132,21,0,68,21,0,38,11,2,44,5,129,232,5,6,120,5,15,136,12,128,8,14,129,200,25,96,22,104,144,97,132,79,160,100,49,32,17,255,224,19,255,240,11,255,240,27,193,248,27,128,8,59,0,4,59,128,4,59,228,4,61,195,140,61,192,216,61,131,152,53,133,8,49,128,8,20,0,4,16,0,36,8,0,56,22,0,200,18,1,136,18,0,112,57,0,16,40,128,96,100,96,32,163,24,32,16,199,192,72,222,56,73,180,4,151,80,2,152,7,226,102,88,25,80,128,5,157,166,5,165,39,5,96,72,239,176,71,149,41,73,29,43,64,10,166,64,10,32,128,4,55,128,4,76,128,104,68,64,16,194,64,240,50,65,16,196,128,32,25,240,32,3,142,48,152,67,208,120,35,72,135,255,240,143,3,248,76,0,8,44,0,4,46,0,4,119,28,4,118,35,12,116,1,142,116,14,20,102,20,60,68,0,44,80,0,34,72,0,18,32,0,146,24,0,114,16,0,4,48,1,36,80,2,248,80,0,8,200,0,72,169,0,16,168,192,16,20,48,32,84,79,192,16,255,132,35,0,114,36,255,138,75,0,118,85,192,14,84,112,122,84,249,202,148,83,234,84,2,138,52,2,10,136,1,9,72,27,9,40,4,10,84,115,8,92,255,152,217,227,212,56,129,146,29,29,186,29,13,22,63,8,177,159,218,240,67,255,242,160,255,1,24,119,152,112,0,26,112,0,62,112,0,14,96,255,222,127,128,30,127,0,6,126,24,2,126,14,2,124,1,6,108,14,220,108,0,60,76,0,36,36,0,4,36,0,4,60,0,20,100,1,152,196,0,248,68,14,80,66,29,240,66,48,32,67,17,224,33,161,128,32,240,192,16,127,192,63,192,68,124,64,18,112,39,250,128,120,6,129,135,1,143,1,129,159,0,65,111,7,7,87,2,138,75,1,28,91,0,18,98,0,10,224,0,4,248,0,100,244,0,28,112,0,204,48,3,252,48,5,12,16,128,48,112,64,112,92,32,32,147,28,112,44,143,240,35,67,248,163,34,52,78,224,20,116,143,226,90,96,26,84,128,10,81,48,5,90,124,29,82,6,125,82,120,74,82,20,250,74,0,170,34,0,68,177,0,36,213,2,36,18,1,200,124,0,40,143,14,112,110,28,56,149,59,216,23,116,24,231,131,144,37,193,40,138,107,230,49,223,217,9,223,192,10,160,48,9,0,8,18,0,4,20,0,60,16,33,196,20,206,4,21,16,6,23,32,12,22,103,12,28,224,214,25,99,146,26,69,10,17,128,6,17,128,70,19,192,90,35,128,132,69,129,62,5,195,197,5,192,20,4,192,36,65,104,15,49,127,190,78,159,252,74,124,26,79,129,170,240,58,130,143,136,30,88,3,226,80,124,2,70,192,3,62,143,7,62,209,234,54,128,78,27,7,137,21,0,5,21,0,2,25,128,50,23,128,30,33,192,98,33,192,156,105,192,228,161,192,136,21,192,28,146,224,14,136,216,93,73,79,252,68,9,248,9,75,248,5,139,200,30,156,4,62,224,12,254,128,20,255,0,20,252,15,44,124,48,58,124,70,34,76,12,18,122,0,10,108,0,10,68,0,242,88,0,78,158,0,155,153,3,228,25,130,140,20,196,28,84,192,12,244,104,28,52,60,188,210,63,254,145,7,254,145,5,253,80,128,2,81,255,226,86,0,26,88,0,6,81,255,194,34,0,52,86,0,12,108,124,4,92,198,116,60,28,200,76,100,168,84,0,216,80,0,132,32,4,68,32,11,132,52,0,8,53,14,208,52,248,80,50,7,184,34,8,80,34,3,32,73,32,64,18,117,96,141,255,208,48,31,132,33,224,116,34,31,140,69,224,122,170,0,14,180,0,122,169,240,142,91,9,122,72,113,170,88,161,10,72,1,4,80,0,132,32,4,132,68,3,6,76,28,229,68,48,57,134,79,136,174,16,24,11,3,152,10,132,56,106,64,43,145,48,64,32,143,144,208,64,32,28,0,18,56,0,1,44,0,1,56,0,0,50,0,0,127,252,0,127,51,192,127,60,113,250,4,13,254,62,7,244,23,31,236,0,115,232,0,227,168,0,142,144,0,140,16,0,140,48,12,136,48,39,152,112,58,184,232,7,184,228,6,124,194,28,252,97,3,252,33,131,252,170,131,16,177,68,12,85,68,50,219,191,194,42,67,138,31,128,26,70,0,58,49,120,74,42,134,122,20,28,84,44,40,68,44,0,36,44,0,24,52,0,24,156,1,232,70,2,120,51,7,252,27,135,30,199,12,12,79,8,230,47,153,5,157,88,116,24,191,241,196,111,250,32,1,254,96,224,2,239,0,3,248,0,3,240,15,243,224,78,123,225,240,15,199,64,7,255,76,15,248,131,154,240,138,62,241,0,10,209,0,2,209,0,2,81,0,2,17,0,226,9,0,2,29,7,51,147,13,253,50,128,77,44,128,25,224,192,25,128,112,30,0,220,63,59,0,3,180,0,1,144,31,241,82,224,15,99,128,2,67,128,2,67,2,193,91,0,35,32,1,205,40,0,137,40,0,6,32,0,4,48,0,2,24,0,18,26,0,28,30,0,4,26,0,112,25,0,200,48,128,184,80,65,8,72,34,56,100,27,48,82,15,240,201,2,224,231,255,240,159,255,208,95,254,136,127,192,8,127,128,4,254,0,6,254,0,14,255,0,10,255,15,140,255,12,28,255,177,146,127,135,10,127,138,10,99,128,6,45,128,34,18,0,126,22,0,6,8,0,58,6,64,98,3,128,203,5,64,154,4,160,206,10,145,223,18,79,239,96,7,148,81,196,72,128,52,64,128,11,202,162,7,252,130,24,8,132,14,8,68,244,122,136,76,138,136,0,234,80,1,84,144,1,20,32,24,148,168,16,152,105,5,136,36,251,72,36,113,176,37,61,32,240,0,160,172,13,160,34,10,208,209,186,144,136,254,88,69,251,4,51,255,224,39,255,240,31,255,184,31,242,152,63,192,8,63,128,4,63,128,6,63,0,12,63,136,20,63,222,40,63,129,184,63,199,36,63,130,20,63,128,12,20,128,12,26,128,116,28,64,36,14,0,4,7,0,116,6,129,136,6,128,104,11,24,30,59,6,49,201,3,208,160,112,24,161,128,4,134,0,4,156,127,252,173,128,4,119,0,4,70,0,14,108,113,20,92,143,56,168,56,84,136,80,68,68,0,68,80,0,36,96,0,36,68,1,68,92,0,132,108,0,40,106,7,204,170,0,12,41,1,140,104,128,28,150,64,58,37,48,105,200,143,224,108,144,206,66,72,34,218,0,34,165,0,210,128,127,242,145,128,10,146,0,26,148,248,42,148,14,74,84,0,250,244,124,164,180,8,132,92,0,68,98,0,36,178,0,36,50,0,200,70,7,104,138,15,208,22,20,24,38,0,152,72,192,164,150,100,234,17,59,221,50,55,221,63,15,252,63,0,242,63,0,2,127,128,2,127,0,2,127,0,2,62,24,3,62,63,15,124,99,223,124,26,214,124,0,4,62,0,2,126,0,2,60,0,10,16,1,202,20,0,242,12,7,252,12,15,252,26,28,172,57,28,228,120,185,134,124,249,154,125,63,252,125,31,254,96,97,136,72,158,116,33,0,4,66,0,4,66,0,2,130,1,130,129,0,114,130,11,167,130,0,74,154,7,140,162,26,28,170,0,10,164,0,6,96,0,6,100,16,34,72,8,186,36,8,70,42,0,254,42,1,132,19,1,56,17,128,88,40,84,136,36,61,132,66,139,8,16,0,18,48,0,2,48,127,224,128,128,16,131,0,56,130,16,36,12,120,120,12,206,232,60,26,170,76,8,140,88,0,72,84,0,72,196,0,44,108,3,44,248,1,206,252,7,238,124,14,252,252,31,190,62,28,60,62,25,156,111,121,254,143,253,254,49,255,214,12,255,236,4,0,0,72,0,0,193,249,128,179,143,224,167,192,24,199,240,40,200,185,252,153,97,204,152,0,246,152,0,54,152,0,6,152,2,6,160,27,6,160,0,4,176,154,4,177,251,141,139,1,201,134,8,105,196,0,41,206,0,49,199,0,99,231,205,243,247,255,251,255,255,247,158,159,196,93,96,58,155,128,11,76,0,10,58,120,6,148,15,29,116,2,116,140,56,78,252,8,121,122,0,68,80,0,38,48,4,36,50,3,206,59,1,8,52,30,108,92,127,248,76,104,56,174,7,136,134,64,28,103,65,54,19,235,103,9,255,208,198,127,177,97,159,97,19,255,224,35,248,240,43,128,40,55,0,8,55,0,4,119,32,4,122,28,14,122,7,60,123,31,36,122,18,124,98,0,100,44,0,36,36,0,36,44,0,20,52,1,148,26,0,100,58,3,24,57,7,248,49,6,16,72,132,208,196,76,80,66,60,224,33,30,240,16,135,248,68,62,14,88,0,18,102,0,13,216,127,241,135,128,15,246,112,2,148,156,2,160,7,15,96,120,26,64,92,50,96,8,90,64,0,68,48,0,68,112,0,36,176,1,36,176,6,200,184,12,56,116,31,240,54,52,48,41,1,144,84,160,32,74,114,96,101,54,240,146,159,200,28,32,0,136,63,240,128,96,0,65,135,184,70,80,0,72,159,252,32,224,4,69,128,12,77,142,20,85,1,40,41,30,116,45,4,36,20,0,36,56,0,20,56,0,20,86,0,232,162,0,8,145,3,208,73,5,40,40,128,224,84,64,160,138,48,192,42,63,128,17,58,128,20,44,128,24,74,192,17,138,32,4,63,240,49,192,26,35,0,26,38,0,18,38,192,52,77,244,116,200,12,148,40,112,244,92,0,136,216,0,72,44,0,44,151,2,60,74,1,220,36,0,20,84,3,216,178,12,88,79,3,148,151,193,55,19,243,121,1,255,244,49,127,201,64,60,32,64,192,48,129,7,253,132,184,5,69,0,2,171,79,130,154,64,231,202,131,202,168,133,14,154,128,10,104,128,4,88,128,68,100,64,60,66,64,196,94,65,134,100,64,120,68,128,136,95,128,56,181,128,40,72,64,112,46,57,240,81,199,240,120,15,236,135,53,234,12,255,32,103,82,244,88,255,43,239,0,245,236,0,21,185,193,154,147,163,254,180,36,52,81,197,212,114,166,180,112,4,20,80,0,20,80,0,20,104,2,28,184,22,36,168,0,36,168,30,36,168,35,34,174,0,98,78,28,115,91,0,107,101,0,167,192,201,36,195,63,68,145,73,40,136,255,248,67,0,8,124,255,244,35,0,20,44,0,36,40,192,196,60,61,178,60,241,98,68,73,2,116,1,4,80,0,132,8,0,68,32,4,68,16,3,132,20,3,228,12,30,104,20,16,168,20,147,136,18,128,16,33,208,144,100,121,184,164,31,214,144,135,213,104,68,160,17,255,64,44,0,224,59,255,48,36,0,200,40,0,40,56,0,24,59,1,248,56,230,24,83,199,168,85,9,40,80,8,40,208,4,20,32,36,26,112,24,18,240,103,50,209,219,50,145,167,58,57,125,124,121,1,124,188,60,247,71,155,136,137,255,4,145,252,24,155,58,4,52,255,14,59,192,10,119,63,225,109,192,25,90,120,5,84,140,29,84,2,117,168,56,69,168,84,190,168,0,210,168,0,130,168,0,68,168,2,36,72,1,196,72,0,4,56,15,136,8,24,76,108,3,12,14,0,22,13,0,18,28,128,50,36,96,114,66,31,250,2,27,40,34,196,136,49,132,228,53,59,84,180,196,147,184,3,25,249,0,29,18,96,42,194,240,106,165,140,250,4,56,170,20,80,132,148,0,68,166,0,36,134,0,40,134,3,40,71,0,136,92,28,122,78,31,185,86,16,60,151,51,180,151,3,18,131,51,245,145,31,228,1,99,10,34,193,10,37,92,50,34,99,129,110,64,125,176,64,2,136,152,2,197,14,7,186,3,158,202,29,26,161,14,60,85,0,42,117,0,18,34,0,10,5,0,10,5,0,116,13,0,4,29,0,232,54,130,8,82,128,204,146,192,16,12,176,20,51,72,50,192,191,210,29,192,232,24,130,68,56,1,4,56,11,4,113,38,82,97,15,146,129,0,10,130,48,74,130,248,242,69,13,148,132,121,244,132,33,84,68,0,136,162,0,136,162,4,148,146,3,20,10,24,116,10,103,178,12,200,50,8,3,41,42,226,230,81,119,163,160,191,194,112,95,68,66,240,130,190,64,9,161,63,137,144,192,126,181,0,10,173,12,4,165,31,4,162,35,198,186,15,12,162,2,28,82,0,20,110,0,8,154,0,4,66,0,132,18,0,120,216,3,24,56,7,248,88,14,24,180,16,88,82,32,208,157,96,224,32,248,96,32,47,252,88,63,195,11,133,10,72,125,10,87,131,18,158,120,234,156,6,18,70,129,228,54,128,12,173,24,12,85,60,188,178,3,180,90,14,42,186,20,34,90,2,18,185,4,10,177,0,202,63,0,60,86,1,76,151,3,140,38,7,248,47,133,8,95,8,120,167,204,94,51,252,240,14,15,224,33,255,224,39,255,240,47,194,208,63,128,72,63,0,12,62,0,4,62,0,4,62,48,12,60,12,24,28,2,40,40,60,120,36,0,72,36,0,68,18,0,36,18,1,36,10,0,200,12,1,40,10,7,248,10,14,56,13,15,208,21,8,144,50,140,184,178,125,188,65,63,235,31,0,132,31,33,172,30,19,197,28,0,115,24,0,15,16,67,195,23,1,3,14,64,27,30,240,7,52,12,23,20,124,254,56,41,206,8,1,118,8,0,6,8,1,6,8,1,4,8,15,12,8,7,8,12,114,24,13,255,144,2,7,224,114,12,96,105,0,96,225,128,224,9,0,104,14,1,248,30,0,40,28,60,56,112,195,216,97,240,120,65,252,232,98,28,252,110,96,44,84,0,4,116,0,4,100,0,4,60,0,36,60,3,196,28,3,100,30,15,124,31,28,124,23,16,8,55,1,136,126,0,24,111,0,24,79,192,56,92,227,248,60,61,252,162,57,248,106,89,252,217,25,252,240,49,252,240,62,12,240,192,12,243,0,28,254,60,124,254,6,92,252,30,116,244,8,68,236,0,36,234,0,36,218,0,24,218,0,24,234,0,232,243,0,8,124,0,248,126,3,232,57,0,76,120,128,12,232,96,30,160,24,63,164,7,255,32,0,58,32,0,12,32,0,2,64,0,2,95,252,2,62,3,194,77,160,50,92,56,12,76,12,14,76,247,28,200,40,100,200,0,116,232,0,168,240,4,136,104,8,136,72,4,144,72,3,16,72,24,32,40,6,32,20,0,64,138,24,64,101,1,80,50,195,40,41,61,164,32,3,72,64,0,108,64,2,50,68,2,58,72,0,60,75,225,242,70,0,18,71,225,250,36,179,92,40,0,12,40,0,12,40,0,12,44,2,8,36,18,8,36,14,8,36,1,136,34,219,248,34,7,20,79,128,124,140,64,186,12,51,58,28,12,90,16,128,185,1,255,69,31,255,240,63,252,56,63,192,24,124,0,24,124,0,12,124,0,60,124,0,76,124,0,214,60,248,230,61,188,2,60,226,2,124,2,2,60,0,2,60,4,2,60,5,210,60,1,178,58,7,34,62,15,4,45,0,228,45,128,4,59,64,8,59,32,8,11,156,62,11,135,243,160,62,60,224,1,92,192,0,124,232,0,60,248,31,252,240,224,12,225,142,4,215,3,68,254,14,248,254,7,56,206,0,16,246,0,16,222,0,8,218,0,8,202,0,136,106,0,112,114,1,160,122,3,16,238,7,240,194,4,48,226,8,224,242,136,64,234,200,96,226,63,224,252,0,7,252,0,7,252,0,3,252,0,3,248,96,3,248,56,3,248,28,3,216,118,63,240,84,67,240,0,114,208,0,1,224,0,2,192,6,1,192,4,1,224,3,66,224,28,66,208,63,34,208,16,116,200,3,60,200,0,4,198,0,4,193,128,0,64,96,0,96,95,32,252,3,254,248,3,254,248,1,254,248,127,126,255,16,6,254,248,14,248,54,122,248,22,230,248,0,150,252,0,142,248,0,78,240,0,76,240,6,72,240,3,136,224,0,8,224,0,8,192,7,8,200,24,152,196,31,240,206,39,112,229,66,176,160,75,160,184,107,160,78,3,64,190,224,28,255,196,60,255,114,42,207,207,178,255,129,226,199,254,60,223,121,252,248,254,126,248,198,78,200,16,110,248,0,12,120,0,4,248,0,12,248,0,12,248,7,204,248,1,140,124,0,24,126,8,88,250,0,24,254,1,176,255,128,48,244,224,120,116,120,248,248,31,126,224,2,252,232,2,254,252,0,126,240,13,254,224,7,255,234,227,231,241,224,15,241,255,127,243,199,254,227,154,118,227,136,31,249,128,3,253,128,2,123,128,6,127,128,22,127,128,118,127,128,38,63,135,30,127,134,6,127,128,238,127,192,14,23,240,14,7,252,30,142,63,254,159,255,248,175,134,152,127,0,136,158,0,4,124,0,4,156,0,6,126,60,28,62,7,36,62,24,92,76,48,116,68,0,34,40,0,18,40,0,18,16,3,148,16,0,100,60,3,40,84,15,248,84,28,24,75,1,208,36,160,16,210,80,16,41,56,32,4,135,240,144,96,174,23,255,232,111,126,231,94,48,113,60,0,58,60,0,62,188,0,57,56,0,28,91,128,218,72,71,18,89,36,154,72,243,18,72,20,18,40,18,20,24,0,24,8,0,16,8,102,16,8,25,16,4,36,32,6,126,96,6,195,96,11,189,208,59,152,220,234,211,87,165,126,165,18,127,224,19,255,240,119,240,104,23,0,4,103,128,4,79,192,4,95,128,4,159,142,28,31,17,132,159,0,36,115,7,60,25,26,42,21,0,18,22,0,18,10,0,210,5,0,36,5,3,220,5,7,156,4,134,100,12,130,8,20,66,104,114,25,27,202,7,16,73,3,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,1,152,0,2,100,0,4,2,0,4,146,0,4,2,0,4,226,0,4,226,0,2,4,0,1,248,96,0,135,144,0,132,144,0,72,224,0,48,128,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,1,204,0,3,7,128,2,32,192,2,128,32,2,0,32,2,0,32,6,0,0,12,0,0,8,64,96,8,32,32,12,2,0,6,33,128,1,144,192,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,192,3,223,224,7,159,248,7,153,96,6,132,52,15,131,28,21,128,252,17,128,116,13,192,4,11,240,4,19,140,4,17,150,4,29,31,24,29,0,120,44,0,112,108,0,32,44,0,160,36,4,160,28,3,64,30,28,64,59,6,128,115,129,0,120,193,0,228,34,0,63,176,28,127,96,12,127,240,6,127,120,6,127,255,255,127,0,6,255,240,28,255,24,252,191,238,196,254,94,52,60,2,4,252,0,4,124,6,72,92,6,8,28,15,136,44,126,8,60,252,248,62,252,216,110,239,152,238,192,28,239,226,24,239,192,56,207,255,240,229,255,224,49,4,240,33,5,240,97,255,248,114,2,120,108,130,56,115,254,88,108,9,28,119,136,220,112,200,78,99,12,46,240,10,31,224,9,15,240,4,151,232,44,95,200,60,61,25,231,158,125,144,62,109,70,190,156,60,188,30,24,254,31,28,223,61,175,139,60,255,19,112,126,2,28,0,58,62,0,14,126,0,6,127,255,195,127,0,113,124,0,25,248,0,27,219,227,236,255,247,236,122,144,140,176,16,6,48,16,6,48,34,5,48,228,12,243,24,142,113,0,13,16,34,10,40,126,14,60,0,14,62,8,30,59,0,47,59,128,79,120,193,143,120,127,15,127,191,254,121,103,126,243,227,31,255,196,143,247,100,137,246,99,13,228,128,13,237,0,61,233,252,69,234,14,125,202,120,21,234,0,4,74,0,4,74,0,5,202,0,36,234,3,198,170,0,6,162,3,238,186,14,76,155,0,141,215,128,29,148,192,25,132,96,59,220,31,255,255,1,4,252,129,128,243,0,0,207,62,240,255,224,12,255,252,28,254,62,116,254,118,108,126,0,4,126,0,4,124,0,4,116,0,4,124,4,4,118,3,132,126,0,8,126,3,136,126,12,72,119,1,152,119,128,60,119,192,124,54,116,156,54,24,12,54,16,4,119,144,10,31,255,254,63,223,254,63,1,254,60,0,6,28,0,2,120,0,2,120,224,2,96,248,2,32,136,50,160,100,126,192,16,140,64,0,228,64,0,4,64,0,8,195,224,8,67,155,16,193,204,152,225,121,158,240,7,62,236,184,82,230,0,146,215,129,2,67,194,130,233,252,2,14,0,0,147,255,0,239,197,128,255,128,64,255,0,32,254,0,16,254,0,24,255,0,56,255,0,40,255,30,40,255,34,4,255,14,4,255,0,2,255,0,10,255,0,58,237,128,2,252,0,12,214,0,44,204,0,68,199,128,10,195,64,2,135,16,2,143,8,12,159,7,255,239,195,222,223,0,54,254,0,74,191,227,202,127,128,202,247,24,63,255,44,6,238,50,22,222,31,36,254,7,188,214,0,120,205,0,56,249,128,16,120,144,16,248,134,80,248,191,176,253,252,32,223,255,224,223,217,224,239,207,224,31,239,224,7,255,224,3,255,192,152,255,192,59,255,190,123,255,190,123,255,222,251,247,238,251,255,244,247,251,248,231,128,120,95,128,56,31,0,24,62,0,8,56,0,12,32,0,12,88,0,204,40,64,24,32,0,16,28,0,24,4,2,16,4,2,56,6,4,56,4,2,48,4,4,88,6,0,180,2,1,76,4,10,28,120,15,252,116,7,252,120,6,254,116,101,62,121,157,38,117,1,50,122,126,253,121,225,231,35,248,31,79,128,38,14,28,62,12,4,84,30,0,4,28,0,6,126,0,6,127,0,6,63,1,198,63,0,14,127,134,220,123,0,156,83,0,60,83,96,92,249,16,88,120,15,184,204,1,228,216,1,228,248,18,252,224,159,254,242,247,254,255,249,190,126,192,14,124,4,14,120,3,12,112,5,4,96,0,6,35,128,0,17,0,0,16,0,2,16,0,2,8,0,2,0,0,2,8,0,6,4,0,6,4,0,2,2,0,3,0,64,3,0,224,3,1,208,3,79,255,252,95,255,254,127,192,254,127,128,254,127,128,92,125,128,30,124,0,22,121,0,22,60,224,244,57,49,12,59,226,236,112,0,136,56,0,8,56,0,8,16,0,8,16,0,24,56,2,24,40,0,16,60,35,48,60,14,96,60,0,96,124,0,240,124,1,240,124,7,240,210,5,0,0,4,0,1], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+174097);
/* memory initializer */ allocate([0,0,0,0,0,16,0,16,0,46,0,255,255,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,128,1,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,50,50,22,22,84,84,100,100,32,32,0,0,0,0,32,32,50,50,22,22,84,84,100,100,32,32,0,0,255,255,130,25,190,5,170,13,170,117,187,189,171,37,168,37,175,229,168,37,175,229,128,1,254,63,130,33,130,33,254,63,255,255,189,85,203,255,137,65,153,127,165,85,219,65,153,253,255,133,170,253,150,133,170,181,190,1,170,85,254,127,254,127,0,128,17,192,57,72,42,252,78,116,148,170,141,102,148,202,141,101,148,195,139,101,87,203,125,165,56,62,0,28,0,0,0,0,0,0,0,0,0,48,12,72,18,132,33,18,76,209,145,36,34,18,4,136,25,36,2,19,0,72,0,0,0,0,0,0,0,0,0,0,0,192,3,32,4,16,9,8,18,68,36,2,196,9,9,36,48,34,2,16,1,144,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,64,2,32,5,80,26,168,1,64,2,32,4,144,9,152,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,26,216,36,100,68,34,200,51,17,25,35,28,1,0,0,0,0,0,0,0,0,0,0,0,4,1,14,2,17,132,32,120,193,32,28,144,35,85,75,170,140,102,8,30,17,7,33,4,193,8,2,144,2,32,192,0,32,0,16,0,8,0,6,0,161,0,144,192,72,32,38,24,33,134,224,65,16,32,8,30,36,0,34,0,81,128,2,192,1,131,7,4,12,10,16,20,224,36,25,72,98,17,8,6,34,8,12,16,120,32,32,192,7,64,0,64,0,1,144,96,41,24,38,4,1,3,8,128,52,104,194,22,1,8,0,128,0,64,0,32,144,16,34,16,65,8,129,7,0,128,0,0,0,0,0,2,0,5,0,8,0,16,0,97,1,130,2,4,12,68,16,137,97,16,12,81,0,166,3,68,0,64,3,0,4,128,8,96,16,16,164,136,69,70,41,32,156,40,67,6,48,128,12,0,2,0,81,128,64,0,32,0,16,0,96,96,187,187,87,87,170,170,0,20,12,0,0,24,1,128,0,0,96,6,0,96,1,1,170,170,85,85,175,175,248,248,96,6,112,106,40,6,81,139,104,5,208,11,160,197,80,11,102,22,112,10,32,6,80,203,96,5,208,11,163,5,80,11,7,199,125,125,106,170,117,85,80,0,198,24,160,0,80,6,99,0,112,0,32,24,80,0,96,192,208,0,160,0,80,12,48,48,221,222,171,170,85,87,0,13,0,11,49,149,0,11,0,22,0,10,48,198,0,11,0,5,12,11,0,197,0,11,12,12,123,187,85,213,234,170,176,0,208,0,169,140,208,0,104,0,80,192,96,12,208,0,160,1,208,103,160,7,211,20,32,11,224,101,230,11,128,5,0,11,48,6,3,10,0,22,0,11,48,21,0,203,0,13,85,87,171,170,221,222,48,48,0,0,3,0,96,0,0,102,0,0,0,0,12,24,0,0,0,0,48,48,3,6,0,0,96,0,0,24,17,0,0,0,80,4,160,7,208,103,96,1,80,0,33,140,112,0,96,0,80,0,161,128,192,24,80,0,117,85,106,170,125,125,7,199,48,48,221,222,171,170,85,87,0,13,0,11,49,149,0,11,0,22,3,10,48,6,0,11,128,5,230,11,224,5,40,203,12,12,119,119,42,234,85,85,104,5,211,11,160,5,80,11,96,214,112,10,44,6,80,11,96,197,208,11,163,5,80,11,80,11,160,197,208,11,102,5,80,107,32,6,112,10,99,22,80,11,160,101,211,11,104,5,85,85,42,234,119,119,12,12,7,199,253,125,234,170,245,85,32,0,6,24,0,0,0,0,99,0,0,12,128,192,0,0,128,1,224,55,227,7,96,6,96,6,224,199,224,7,140,1,0,0,192,200,0,0,48,0,0,6,0,192,0,24,48,0,245,85,234,170,253,125,7,199,80,68,163,0,208,0,96,12,80,0,32,192,112,0,96,6,80,0,160,0,198,24,80,0,117,85,106,170,125,125,7,199,0,11,0,101,6,11,0,5,0,11,48,198,0,10,0,22,0,11,49,149,0,11,0,13,85,87,171,170,221,222,48,48,96,96,187,187,87,87,170,170,0,20,0,0,97,128,0,0,0,24,6,0,0,6,48,0,0,0,1,140,0,0,12,1,0,0,0,0,0,96,12,0,0,6,0,0,49,128,0,12,0,0,48,96,0,0,1,1,170,170,85,85,175,175,248,248,99,32,112,0,40,6,80,192,104,0,208,0,161,128,80,6,96,0,112,0,32,96,86,12,96,0,208,0,160,98,80,8,134,22,0,106,0,6,1,139,0,5,96,11,0,5,0,11,6,22,0,10,96,198,0,11,12,5,0,11,0,197,48,11,32,193,224,0,224,0,140,12,0,0,0,192,0,0,48,6,0,0,0,0,6,12,0,0,96,0,0,0,6,6,0,0,0,193,96,0,0,0,12,12,0,0,0,192,0,0,48,6,0,0,0,0,6,12,0,0,96,1,0,7,6,7,0,6,96,193,224,0,224,0,140,12,0,0,0,192,0,0,48,6,0,0,0,0,6,12,0,0,96,1,0,7,6,7,0,6,0,6,3,7,0,7,48,49,0,0,3,0,0,0,96,12,0,0,0,0,48,96,0,0,128,6,230,0,224,96,96,0,0,4,3,7,0,7,48,49,0,0,3,0,0,0,96,12,0,0,0,0,48,96,0,0,0,6,0,0,96,96,0,0,0,0,3,6,0,0,48,48,0,0,3,0,0,0,96,12,0,0,0,0,48,96,0,0,128,6,236,0,224,96,96,0,3,192,13,48,16,136,33,4,64,2,64,10,160,39,152,95,159,239,169,171,40,169,136,149,81,155,145,238,103,214,59,212,0,193,96,0,0,0,12,12,0,0,0,192,0,0,48,6,0,0,0,0,6,12,0,0,192,1,224,7,230,7,32,6,32,6,230,7,224,7,192,1,0,0,6,12,0,0,0,0,48,6,0,0,0,192,0,0,12,12,0,0,96,198,0,0,113,240,159,95,106,171,149,84,66,2,128,192,192,24,161,128,64,0,224,6,192,96,161,1,74,170,181,85,207,175,184,248,15,142,250,249,213,86,42,169,64,66,3,1,24,3,1,133,0,2,96,7,6,3,128,133,85,82,170,173,245,243,31,29,0,0,0,0,0,0,0,0,0,0,0,0,82,56,0,0,49,0,1,0,0,0,0,0,24,0,24,0,200,0,15,0,112,56,0,10,100,164,178,84,255,189,151,0,105,152,127,132,3,128,106,28,0,24,32,23,149,38,152,17,47,131,149,32,69,21,178,128,8,16,0,10,80,66,10,40,68,14,40,59,233,40,64,24,57,135,148,196,96,24,15,12,36,241,132,72,6,95,208,250,127,160,144,128,128,73,31,192,38,127,240,49,255,248,51,248,124,31,192,6,31,192,2,31,207,2,31,1,129,31,159,215,31,7,29,19,1,58,19,0,44,21,0,18,17,128,18,23,0,74,9,128,178,15,3,20,11,130,252,11,137,28,23,192,72,97,252,88,193,255,252,32,255,254,127,225,252,127,128,78,63,128,6,127,128,2,255,0,1,255,56,1,255,126,1,254,7,79,254,127,141,255,47,30,222,0,22,94,0,18,74,0,9,38,0,201,50,1,250,58,2,50,29,1,234,25,7,252,25,15,190,57,7,28,124,144,228,78,89,252,115,248,108,92,253,248,17,127,230,23,128,26,42,127,226,53,128,30,84,192,2,85,240,13,90,28,157,88,249,229,73,33,245,84,9,45,84,16,133,84,4,130,52,14,194,84,7,130,100,28,226,85,231,188,149,24,86,215,3,22,182,7,2,23,80,86,35,245,125,103,255,249,12,63,192,51,31,132,52,10,44,40,0,4,96,63,204,80,64,62,224,128,2,161,0,2,250,0,6,244,0,62,180,56,55,220,14,125,236,28,81,252,40,1,220,0,1,236,0,1,188,0,33,156,1,225,212,0,225,204,1,241,98,3,185,58,7,61,14,4,103,7,0,246,3,0,36,1,192,252,79,255,248,47,159,236,47,3,236,110,0,196,111,0,4,127,128,2,119,128,6,55,140,26,63,23,156,39,7,18,43,0,10,43,0,6,17,128,2,1,0,66,9,32,28,23,16,4,33,0,12,40,128,68,48,64,0,74,0,4,194,88,10,33,38,29,144,145,253,8,64,94,254,112,112,244,240,248,255,251,136,255,192,8,255,0,4,255,0,4,255,128,4,255,0,12,254,14,24,102,19,148,70,3,4,92,0,4,56,0,4,32,0,4,18,0,8,14,0,56,30,0,12,30,1,220,27,3,136,61,130,30,124,192,14,252,48,13,116,30,29,50,135,244,12,255,32,103,82,244,88,255,43,239,0,245,236,0,21,185,193,154,147,163,254,180,36,52,81,197,212,114,166,180,112,4,20,80,0,20,80,0,20,104,2,28,184,22,36,168,0,36,168,30,36,168,35,34,174,0,98,78,28,115,91,0,107,101,0,167,192,201,36,195,63,68,3,34,128,2,247,192,3,255,192,7,255,224,6,30,240,12,4,56,8,0,24,24,0,28,27,128,220,40,99,8,43,130,200,41,69,136,40,4,8,16,4,20,8,34,24,4,28,16,4,0,16,4,58,32,2,0,32,1,8,80,2,128,216,15,65,86,53,190,169,74,201,80,127,128,32,251,128,0,255,128,8,255,0,8,255,128,4,255,15,4,254,0,156,254,3,20,158,2,52,142,0,8,132,0,20,132,0,20,80,0,12,64,0,76,36,0,52,124,0,8,100,1,24,66,2,248,2,0,8,5,0,16,128,192,16,0,48,32,0,14,32,0,7,224,32,0,16,32,2,16,108,2,8,112,3,132,192,124,254,224,12,174,112,87,94,104,188,54,217,127,44,255,198,2,219,52,2,187,0,2,251,0,2,123,1,2,61,1,242,93,0,250,46,129,206,55,135,198,57,141,130,103,204,54,239,196,38,239,246,62,191,255,255,255,255,255,14,0,240,48,0,12,68,255,0,71,0,210,40,0,54,24,0,17,19,0,105,55,128,233,112,117,9,113,231,137,82,133,73,112,38,21,80,68,22,80,2,20,40,35,24,232,98,40,120,28,44,168,33,44,168,93,40,44,227,40,92,152,106,171,0,176,52,195,75,202,60,148,31,255,0,58,95,128,44,191,224,39,127,240,20,255,208,21,241,144,23,128,8,118,0,14,118,14,156,122,63,20,122,32,40,116,3,52,40,14,36,44,1,20,22,0,140,18,0,56,7,33,204,15,147,248,21,131,136,20,134,24,18,194,60,40,247,108,68,127,252,197,127,252,232,206,69,245,255,234,246,10,26,244,0,10,84,0,10,85,255,238,78,0,26,54,0,10,20,241,234,53,2,60,84,245,234,84,85,74,40,2,10,24,1,12,24,17,8,8,46,8,8,0,136,4,113,200,5,206,80,6,128,48,26,4,44,105,128,83,132,245,144,2,79,20,8,8,0,8,255,0,15,255,192,29,255,224,61,255,240,61,191,216,61,1,136,61,0,4,61,0,14,61,24,12,29,6,20,19,1,188,23,7,40,19,10,36,22,0,20,14,0,136,14,0,120,14,0,152,23,7,120,20,5,16,18,132,48,85,66,51,138,54,121,8,191,253,152,128,216,179,0,40,68,63,232,48,192,24,65,0,4,67,24,20,74,108,28,90,2,40,32,28,120,40,40,168,36,0,68,20,0,68,16,4,36,8,11,36,6,0,200,6,7,104,13,15,240,13,12,48,12,139,208,28,129,160,100,84,96,146,63,240,9,39,204,36,143,147,95,252,238,175,129,22,175,1,18,173,255,227,168,0,249,250,0,5,246,112,2,214,204,130,150,7,30,180,126,54,180,20,68,148,0,120,180,0,68,180,0,36,180,4,40,104,27,40,104,63,200,212,97,240,164,72,112,162,7,232,137,194,244,130,244,220,64,255,45,49,255,119,8,15,224,32,241,16,34,19,72,76,209,88,80,63,52,167,128,194,72,96,53,81,16,197,81,193,138,48,61,122,16,209,166,168,1,4,136,0,133,68,0,134,36,0,132,52,12,136,56,3,104,44,88,124,36,243,60,230,192,45,102,64,38,74,177,105,0,81,212,144,111,238,224,3,248,224,5,248,224,0,220,226,1,126,230,0,110,236,24,39,232,238,63,241,131,255,253,120,239,255,14,62,236,63,254,228,0,254,196,0,28,196,0,12,68,0,12,70,0,92,74,1,152,140,62,120,140,31,240,142,4,240,23,3,112,37,192,112,36,224,248,178,127,248,70,114,168,89,116,168,34,133,44,155,31,196,204,96,52,168,128,2,177,96,10,68,29,42,40,37,60,212,82,110,84,48,245,196,72,166,140,20,68,158,14,68,252,17,136,156,120,80,156,87,240,120,0,240,92,71,80,33,64,120,184,224,216,38,242,92,1,126,194,1,119,179,71,107,202,112,27,38,83,192,211,148,63,11,72,0,11,208,0,31,103,0,59,35,228,202,96,121,246,49,241,38,178,33,6,176,0,134,176,16,198,80,24,140,56,7,14,60,56,254,127,240,110,187,255,175,94,192,122,87,199,189,183,227,60,187,247,182,53,255,234,64,15,141,8,7,0,20,8,136,24,39,4,16,127,242,17,128,10,18,0,22,18,4,53,22,242,37,28,30,117,28,236,229,38,88,134,42,0,130,44,0,67,100,6,39,86,4,103,75,67,199,71,140,118,79,31,190,87,176,77,151,144,141,167,32,138,7,224,218,9,241,254,19,255,243,44,255,208,51,128,104,84,255,132,39,0,101,72,255,154,151,0,105,250,240,25,170,28,9,154,8,121,180,244,202,180,45,245,180,1,86,116,1,20,116,0,148,84,13,148,84,50,84,168,253,244,40,79,180,40,0,148,44,14,16,46,6,48,153,130,89,40,230,204,68,255,38,133,243,250,11,197,38,75,9,26,146,73,254,22,207,1,119,12,1,183,55,129,181,32,195,21,160,101,20,161,203,78,162,142,141,160,9,5,32,5,23,192,2,55,64,58,107,64,68,184,67,30,50,64,100,192,192,0,32,144,8,28,104,8,4,23,240,0,33,76,2,26,138,28,0,114,53,205,254,35,210,242,78,83,112,95,253,176,223,225,216,248,63,105,124,0,111,255,16,124,113,210,253,179,251,186,241,103,186,240,69,58,209,132,62,112,34,60,120,126,120,89,247,112,251,195,120,185,191,252,191,67,247,126,61,249,255,219,228,223,211,216,119,203,240,190,128,0,255,0,0,254,0,0,252,63,254,61,240,3,191,190,3,191,183,15,255,1,145,127,14,15,63,4,5,62,0,1,126,0,1,126,0,1,126,0,3,126,0,211,124,0,2,124,0,2,102,3,242,253,0,6,223,128,196,248,192,4,252,96,12,124,28,30,254,15,254,11,255,240,27,47,80,16,2,16,52,0,8,44,0,8,45,128,12,40,240,120,104,8,200,136,0,142,136,113,249,168,33,45,168,1,13,144,1,13,80,8,138,48,4,140,8,15,8,8,120,200,16,95,208,22,64,80,5,15,16,5,70,32,102,212,200,230,255,140,197,127,15,159,255,248,175,134,152,127,0,136,158,0,4,124,0,4,156,0,6,126,60,28,62,7,36,62,24,92,76,48,116,68,0,34,40,0,18,40,0,18,16,3,148,16,0,100,60,3,40,84,15,248,84,28,24,75,1,208,36,160,16,210,80,16,41,56,32,4,135,240,144,96,174,96,7,148,81,196,72,128,52,64,128,11,202,162,7,252,130,24,8,132,14,8,68,244,122,136,76,138,136,0,234,80,1,84,144,1,20,32,24,148,168,16,152,105,5,136,36,251,72,36,113,176,37,61,32,240,0,160,172,13,160,34,10,208,209,186,144,136,254,88,69,251,4,74,124,26,79,129,170,240,58,130,143,136,30,88,3,226,80,124,2,70,192,3,62,143,7,62,209,234,54,128,78,27,7,137,21,0,5,21,0,2,25,128,50,23,128,30,33,192,98,33,192,156,105,192,228,161,192,136,21,192,28,146,224,14,136,216,93,73,79,252,68,9,248,68,31,250,41,224,146,54,0,4,24,31,252,19,224,4,26,48,4,24,14,28,40,1,40,40,30,112,40,4,104,32,0,72,16,0,72,24,0,40,24,6,40,48,9,208,104,6,48,210,15,240,82,28,48,73,17,176,164,128,32,146,97,112,145,63,232,72,255,228,38,175,213,36,20,72,40,8,4,40,55,100,16,128,2,16,127,242,17,128,14,22,0,2,31,0,10,28,193,50,36,48,228,45,252,244,32,161,68,84,33,68,156,1,4,44,16,132,76,8,132,212,29,138,52,63,205,46,112,109,78,111,116,213,102,116,149,226,122,108,255,250,58,255,179,31,113,248,255,192,252,63,255,254,255,224,126,127,144,14,126,60,2,126,127,65,126,67,203,255,12,159,255,58,26,238,18,62,202,0,44,234,1,36,239,130,20,231,3,228,227,0,200,222,56,40,222,119,248,191,144,48,175,161,224,127,129,176,199,128,216,131,197,216,243,255,184,31,255,240,63,252,56,63,192,24,124,0,24,124,0,12,124,0,60,124,0,76,124,0,214,60,248,230,61,188,2,60,226,2,124,2,2,60,0,2,60,4,2,60,5,210,60,1,178,58,7,34,62,15,4,45,0,228,45,128,4,59,64,8,59,32,8,11,156,62,11,135,243,240,255,240,225,255,240,67,251,248,95,128,24,198,0,8,199,0,8,255,0,4,239,0,14,255,148,60,255,191,36,255,97,60,223,12,52,239,0,20,111,0,20,118,0,12,56,64,118,62,1,252,62,0,52,61,1,252,61,3,252,244,134,62,228,204,236,14,108,124,14,63,248,32,126,40,33,128,56,38,0,8,40,127,200,49,128,52,38,0,12,38,56,4,36,4,4,36,58,60,36,20,76,44,0,244,36,0,172,12,0,132,52,4,72,84,6,72,84,29,136,84,33,144,148,30,144,18,1,16,26,14,32,9,2,64,4,128,128,132,101,128,130,62,192,159,255,240,111,255,248,159,255,248,63,225,76,255,192,6,63,0,3,127,128,3,127,56,6,127,15,26,127,1,178,127,14,60,126,5,42,114,0,34,24,0,18,8,0,18,30,0,212,18,0,100,49,0,180,41,3,248,36,143,40,233,64,80,240,48,16,255,78,56,127,55,252,228,131,16,34,76,16,145,48,112,9,129,136,6,14,4,24,16,12,96,96,72,129,193,212,133,198,28,157,201,146,126,227,10,62,192,4,86,128,4,75,0,28,69,0,40,32,128,12,24,0,124,31,0,238,28,128,202,28,128,154,58,96,136,201,17,24,100,140,56,50,67,252,16,1,34,32,1,225,32,255,249,35,0,5,39,0,3,63,0,2,51,28,2,46,7,14,166,0,30,174,30,36,150,8,124,20,0,84,40,0,68,44,0,36,92,0,36,124,1,36,236,3,200,202,12,104,197,11,168,69,0,20,34,131,20,25,192,100,4,176,72,3,127,140,15,3,192,31,14,48,28,24,8,126,96,12,127,192,14,61,128,14,127,184,12,127,188,28,63,115,206,127,112,142,118,195,220,127,224,156,121,224,8,125,96,4,47,224,36,127,224,60,126,192,120,63,193,216,63,3,156,62,34,28,126,56,48,118,24,112,252,15,240,252,7,240,176,15,10,108,48,34,155,207,195,130,80,50,227,224,129,60,3,214,40,38,20,185,63,209,167,149,147,19,64,15,32,64,9,32,78,11,160,133,30,81,200,28,184,127,14,177,255,204,123,199,143,121,184,78,217,2,110,61,28,91,55,223,252,231,255,218,77,231,39,9,73,232,72,140,24,65,116,4,146,65,52,21,158,204,105,33,228,43,64,18,86,188,10,178,199,106,69,58,218,181,20,170,58,0,74,74,0,37,58,3,5,10,6,165,52,60,41,94,249,218,143,102,60,94,33,216,151,32,80,7,162,208,7,242,248,32,255,240,208,75,232,48,37,188,2,27,40,34,196,136,49,132,228,53,59,84,180,196,147,184,3,25,249,0,29,18,96,42,194,240,106,165,140,250,4,56,170,20,80,132,148,0,68,166,0,36,134,0,40,134,3,40,71,0,136,92,28,122,78,31,185,86,16,60,151,51,180,151,3,18,131,51,245,145,31,228,139,0,40,208,4,4,232,0,4,228,0,130,215,32,22,244,255,142,241,254,250,210,93,222,202,38,30,134,36,254,148,1,204,212,0,92,84,0,28,100,1,24,108,9,48,168,231,32,217,240,96,254,127,192,124,3,192,126,3,128,110,3,0,231,15,0,227,254,0,161,254,0,190,224,28,255,196,60,255,114,42,207,207,178,255,129,226,199,254,60,223,121,252,248,254,126,248,198,78,200,16,110,248,0,12,120,0,4,248,0,12,248,0,12,248,7,204,248,1,140,124,0,24,126,8,88,250,0,24,254,1,176,255,128,48,244,224,120,116,120,248,248,31,126,224,2,252,232,2,254,252,0,126,240,13,254,224,7,255,234,227,231,241,224,15,241,255,127,243,199,254,227,154,118,227,136,31,249,128,3,253,128,2,123,128,6,127,128,22,127,128,118,127,128,38,63,135,30,127,134,6,127,128,238,127,192,14,23,240,14,7,252,30,142,63,254,252,0,10,240,8,10,248,16,30,248,16,6,244,225,252,233,2,4,247,4,28,254,4,116,252,8,56,252,8,24,255,48,48,250,192,8,250,192,4,58,224,4,250,192,2,185,192,10,253,128,8,253,192,56,255,96,88,249,112,144,249,184,48,255,248,32,255,223,192,246,253,192,20,44,128,24,74,192,17,138,32,4,63,240,49,192,26,35,0,26,38,0,18,38,192,52,77,244,116,200,12,148,40,112,244,92,0,136,216,0,72,44,0,44,151,2,60,74,1,220,36,0,20,84,3,216,178,12,88,79,3,148,151,193,55,19,243,121,1,255,244,49,127,201,160,112,24,161,128,4,134,0,4,156,127,252,173,128,4,119,0,4,70,0,14,108,113,20,92,143,56,168,56,84,136,80,68,68,0,68,80,0,36,96,0,36,68,1,68,92,0,132,108,0,40,106,7,204,170,0,12,41,1,140,104,128,28,150,64,58,37,48,105,200,143,224,108,144,206,66,72,34,218,0,34,165,0,210,128,127,242,145,128,10,146,0,26,148,248,42,148,14,74,84,0,250,244,124,164,180,8,132,92,0,68,98,0,36,178,0,36,50,0,200,70,7,104,138,15,208,22,20,24,38,0,152,72,192,164,150,100,234,17,59,221,50,55,221,28,2,120,28,0,60,60,0,60,56,0,30,56,0,30,120,0,30,112,1,254,112,11,14,112,60,26,119,227,62,116,103,42,104,64,2,92,64,18,76,64,18,110,33,10,108,32,242,108,32,2,47,35,180,44,103,248,46,96,126,110,96,15,207,48,15,159,30,63,155,3,255,51,255,224,39,255,240,31,255,184,31,242,152,63,192,8,63,128,4,63,128,6,63,0,12,63,136,20,63,222,40,63,129,184,63,199,36,63,130,20,63,128,12,20,128,12,26,128,116,28,64,36,14,0,4,7,0,116,6,129,136,6,128,104,11,24,30,59,6,49,201,3,208,15,255,192,31,255,240,31,255,240,62,2,24,120,0,16,120,0,8,120,0,8,121,128,56,122,240,104,44,13,144,68,113,112,92,161,168,72,1,8,32,0,136,24,4,144,8,3,16,24,12,208,36,48,112,36,103,176,50,24,160,72,3,64,167,129,112,17,31,76,8,158,67,63,254,112,115,184,63,96,16,24,96,0,31,112,0,28,96,0,154,96,3,82,231,12,26,168,139,26,163,69,154,165,192,28,96,64,8,16,64,8,48,72,20,24,48,52,20,76,86,8,199,86,8,251,21,4,199,41,10,185,104,27,153,232,202,203,80,69,255,64,66,126,128,19,255,252,39,255,254,159,2,146,159,0,2,127,0,1,63,0,1,62,0,1,94,60,7,94,71,29,30,1,145,164,30,45,40,21,50,236,0,34,20,0,17,144,0,17,18,1,145,46,0,114,170,3,138,203,7,122,73,7,140,9,6,52,20,228,72,58,62,120,217,31,248,20,127,248,27,241,108,47,192,4,87,128,4,39,128,2,47,128,2,79,128,66,79,199,197,143,200,71,159,135,11,155,138,142,21,128,22,27,128,17,21,128,9,218,0,133,4,0,230,4,0,26,7,128,198,6,131,254,2,135,12,2,70,116,5,2,36,10,155,220,20,70,254,82,238,144,65,28,112,41,225,144,38,14,8,25,144,28,147,224,40,162,64,88,76,159,112,65,145,80,125,166,40,89,20,16,36,0,8,38,0,136,18,0,240,40,1,24,44,31,112,91,134,208,155,132,48,149,136,80,74,232,80,73,152,232,68,142,228,162,23,210,161,3,209,28,32,0,136,63,240,128,96,0,65,135,184,70,80,0,72,159,252,32,224,4,69,128,12,77,142,20,85,1,40,41,30,116,45,4,36,20,0,36,56,0,20,56,0,20,86,0,232,162,0,8,145,3,208,73,5,40,40,128,224,84,64,160,138,48,192,42,63,128,17,58,128,32,0,58,32,0,12,32,0,2,64,0,2,95,252,2,62,3,194,77,160,50,92,56,12,76,12,14,76,247,28,200,40,100,200,0,116,232,0,168,240,4,136,104,8,136,72,4,144,72,3,16,72,24,32,40,6,32,20,0,64,138,24,64,101,1,80,50,195,40,41,61,164,64,139,128,64,203,192,64,161,240,64,128,112,64,0,120,64,7,248,72,63,252,96,120,124,96,192,252,113,129,222,123,253,15,126,208,7,126,64,135,126,0,71,110,0,71,102,1,215,103,0,63,113,3,127,49,135,39,120,198,215,61,224,63,63,248,31,103,143,255,135,193,255,112,0,26,112,0,62,112,0,14,96,255,222,127,128,30,127,0,6,126,24,2,126,14,2,124,1,6,108,14,220,108,0,60,76,0,36,36,0,4,36,0,4,60,0,20,100,1,152,196,0,248,68,14,80,66,29,240,66,48,32,67,17,224,33,161,128,32,240,192,16,127,192,7,255,112,15,207,248,15,129,252,31,0,124,62,0,6,62,0,6,62,0,6,62,56,6,92,14,4,124,63,52,120,20,76,56,0,120,56,0,40,24,0,72,40,4,72,56,62,72,60,127,144,126,207,112,173,193,224,191,199,96,95,195,96,47,231,224,23,255,224,15,255,192,1,254,192,3,255,192,7,255,240,15,199,248,31,193,248,31,192,124,31,192,62,31,192,6,31,134,6,31,31,6,55,1,148,54,3,124,36,0,36,20,0,40,16,1,8,24,0,152,28,0,120,28,0,8,20,1,208,102,0,240,99,0,32,225,128,32,144,248,64,144,127,128,255,255,248,255,224,28,255,240,60,255,255,252,255,254,14,255,224,6,255,143,6,255,187,222,255,7,28,127,2,12,119,0,2,15,0,2,59,0,2,63,0,10,19,0,122,10,0,252,15,3,252,15,3,220,17,134,12,26,132,124,40,192,8,109,112,16,198,156,48,96,15,224,105,216,1,159,15,241,140,240,14,72,64,2,36,156,23,147,15,30,73,0,180,36,143,60,154,128,20,102,128,10,18,128,10,170,128,6,156,128,230,101,17,30,51,15,140,111,2,116,166,3,156,166,132,4,75,132,120,139,140,40,158,255,124,73,255,254,36,255,255,146,111,252,65,240,14,64,12,98,66,3,146,196,0,20,4,192,4,5,224,2,4,50,27,132,126,57,137,168,121,144,0,178,32,0,146,32,0,140,48,0,74,32,8,74,16,14,74,16,3,132,144,120,72,144,255,208,121,192,112,185,3,96,135,65,96,65,235,240,49,255,248,12,255,212,240,0,4,224,72,3,192,18,1,0,127,192,7,192,120,28,0,29,23,227,238,87,247,238,112,146,140,48,0,12,48,0,12,144,0,13,56,32,13,152,63,10,152,12,10,120,0,14,120,31,14,188,115,30,190,14,61,191,0,125,63,192,254,125,237,190,124,255,125,253,255,183,16,0,184,56,0,56,52,0,252,84,0,126,116,0,62,107,195,254,100,140,6,84,80,2,100,99,226,104,32,110,104,35,78,104,32,2,120,32,2,112,32,2,122,32,20,119,32,44,248,224,68,255,225,188,255,33,4,254,38,12,254,32,4,237,112,4,125,127,4,196,255,248,31,223,240,31,252,120,63,224,56,62,0,56,124,0,28,112,0,220,112,1,206,112,3,47,112,199,206,59,246,4,62,112,4,63,64,6,25,0,6,28,0,2,28,9,130,28,15,226,6,7,50,2,14,227,3,30,7,1,159,199,0,155,14,0,248,30,0,248,92,0,255,252,4,8,40,132,255,228,135,166,28,141,127,244,187,128,12,124,127,244,115,128,12,68,0,12,112,0,56,49,232,200,114,57,244,145,241,164,160,65,4,160,1,4,104,0,136,88,8,136,56,7,8,8,56,200,8,47,184,12,40,152,10,39,20,21,2,50,113,99,115,144,191,210,208,18,74,96,52,44,166,50,76,8,9,178,18,3,201,145,0,10,20,192,58,147,240,74,17,83,201,16,5,242,32,8,150,160,8,18,160,8,20,32,64,40,32,44,48,176,144,32,49,192,96,176,188,120,24,8,147,148,97,36,98,3,114,17,5,103,136,249,12,70,81,176,149,61,4,210,194,6,168,1,142,197,48,114,161,120,3,154,140,3,82,4,7,98,63,142,83,10,26,67,0,60,146,0,68,54,0,4,158,0,12,46,2,88,206,29,144,156,248,224,36,7,64,70,16,64,138,14,128,137,4,128,18,192,160,128,34,44,101,220,74,26,34,9,64,0,1,65,255,251,134,0,7,152,255,251,163,0,1,142,0,5,212,0,5,173,128,5,168,64,13,168,249,23,168,109,246,144,1,102,80,1,6,144,1,6,16,8,132,40,57,136,104,70,72,168,128,76,84,31,52,204,32,164,4,86,162,130,137,90,48,0,88,15,64,32,24,88,32,33,1,168,38,63,200,150,192,55,138,112,1,128,248,13,145,12,5,153,3,13,74,120,61,74,56,5,34,0,250,50,0,74,90,0,36,46,3,36,86,12,196,156,48,108,76,39,168,46,8,168,191,3,16,223,160,16,47,161,56,199,251,48,67,255,248,7,127,224,16,255,132,35,0,114,36,255,138,75,0,118,85,192,14,84,112,122,84,249,202,148,83,234,84,2,138,52,2,10,136,1,9,72,27,9,40,4,10,84,115,8,92,255,152,217,227,212,56,129,146,29,29,186,29,13,22,63,8,177,159,218,240,67,255,242,160,255,1,24,119,152,158,159,196,93,96,58,155,128,11,76,0,10,58,120,6,148,15,29,116,2,116,140,56,78,252,8,121,122,0,68,80,0,38,48,4,36,50,3,206,59,1,8,52,30,108,92,127,248,76,104,56,174,7,136,134,64,28,103,65,54,19,235,103,9,255,208,198,127,177,97,159,97,16,0,240,48,0,120,32,0,24,112,0,28,112,0,28,112,28,30,112,246,62,113,187,254,115,70,62,98,62,124,70,16,212,98,0,140,102,0,8,102,0,8,70,0,144,86,3,176,98,56,48,118,63,224,95,4,224,95,134,192,187,193,128,184,255,128,188,255,192,74,255,192,130,255,240,133,0,8,40,255,232,241,0,20,50,0,18,2,96,42,68,244,123,52,28,249,36,225,139,136,81,235,168,1,73,136,1,10,72,0,138,44,8,138,44,63,4,76,255,132,94,177,216,143,159,216,55,128,116,55,142,122,75,128,122,73,136,226,133,204,229,5,255,164,132,0,41,182,63,223,177,192,33,14,0,125,216,0,201,211,129,13,80,99,238,209,246,202,16,196,14,208,4,8,104,2,28,168,2,20,56,54,20,36,8,24,36,1,24,52,30,44,42,0,43,42,28,40,75,0,100,146,128,160,34,97,96,195,255,68,103,242,130,149,18,159,96,97,136,72,158,116,33,0,4,66,0,4,66,0,2,130,1,130,129,0,114,130,11,167,130,0,74,154,7,140,162,26,28,170,0,10,164,0,6,96,0,6,100,16,34,72,8,186,36,8,70,42,0,254,42,1,132,19,1,56,17,128,88,40,84,136,36,61,132,66,139,8,63,15,252,63,0,242,63,0,2,127,128,2,127,0,2,127,0,2,62,24,3,62,63,15,124,99,223,124,26,214,124,0,4,62,0,2,126,0,2,60,0,10,16,1,202,20,0,242,12,7,252,12,15,252,26,28,172,57,28,228,120,185,134,124,249,154,125,63,252,125,31,254,140,64,0,144,127,128,161,255,192,71,255,224,79,129,16,47,0,8,110,0,8,124,30,56,124,48,68,124,0,124,116,6,84,116,12,34,122,0,18,74,0,18,88,0,98,40,0,42,36,0,220,18,1,230,12,1,6,4,3,116,12,66,60,20,51,56,36,15,252,36,3,252,15,253,248,15,15,252,31,3,204,30,0,12,30,0,12,28,0,14,28,192,6,60,240,60,40,24,252,24,253,156,56,33,246,56,1,14,24,1,12,8,1,8,24,17,8,8,9,152,8,127,144,8,255,208,28,159,224,58,2,32,58,6,96,121,128,224,120,193,240,124,255,120,37,255,240,89,255,248,171,243,136,159,0,8,190,0,4,190,0,4,190,0,28,190,30,36,190,0,92,190,14,108,158,20,36,149,0,18,146,128,18,144,128,146,154,0,98,156,1,154,148,129,10,167,2,244,167,132,4,167,192,100,201,32,8,138,144,40,244,162,190,148,41,241,32,56,112,96,64,16,240,128,8,241,64,24,251,0,104,238,3,140,252,28,28,254,96,60,254,220,60,253,255,20,255,236,4,254,88,4,255,0,18,255,0,2,91,0,114,61,128,10,52,0,252,54,129,142,121,131,246,246,131,246,247,192,36,247,192,4,247,248,8,231,255,248,135,255,240,143,3,248,76,0,8,44,0,4,46,0,4,119,28,4,118,35,12,116,1,142,116,14,20,102,20,60,68,0,44,80,0,34,72,0,18,32,0,146,24,0,114,16,0,4,48,1,36,80,2,248,80,0,8,200,0,72,169,0,16,168,192,16,20,48,32,84,79,192,32,127,246,147,128,24,204,63,210,49,192,38,198,0,50,24,0,114,166,18,210,107,211,212,35,165,148,161,68,20,208,2,28,208,1,26,80,33,26,16,26,57,176,4,185,184,155,240,120,241,208,125,254,80,121,192,72,220,142,104,204,132,164,34,160,209,25,255,132,4,126,158,29,192,232,24,130,68,56,1,4,56,11,4,113,38,82,97,15,146,129,0,10,130,48,74,130,248,242,69,13,148,132,121,244,132,33,84,68,0,136,162,0,136,162,4,148,146,3,20,10,24,116,10,103,178,12,200,50,8,3,41,42,226,230,81,119,163,160,191,194,112,95,68,0,1,240,0,31,248,0,255,224,3,195,230,15,13,238,28,11,241,24,5,181,179,8,22,252,0,20,251,140,27,228,6,27,96,1,15,96,7,6,32,31,198,48,13,228,88,17,180,24,51,199,28,63,199,22,46,207,54,32,207,30,0,143,5,128,31,1,224,63,3,252,226,208,16,3,144,16,3,144,16,3,144,116,2,147,163,129,150,124,112,188,0,26,223,128,248,62,99,108,155,245,200,144,128,140,136,0,8,136,16,8,136,32,28,72,32,29,72,60,25,68,16,26,68,0,22,68,98,30,70,24,110,69,0,126,69,0,190,196,193,62,254,122,63,159,127,145,33,128,4,92,127,248,82,128,11,149,112,5,189,28,5,186,2,2,170,112,50,148,40,74,140,0,141,144,0,245,176,0,173,144,0,74,240,14,74,80,1,140,208,60,8,208,35,16,200,29,144,200,2,160,96,12,64,84,0,128,17,1,0,2,131,192,5,124,160,176,0,0,120,0,0,120,0,0,124,0,0,248,0,0,241,1,0,228,128,0,248,66,8,249,240,12,247,126,60,242,126,248,226,0,8,242,0,4,242,0,4,241,0,8,115,2,8,99,199,136,87,31,240,123,120,112,119,240,48,127,224,48,239,224,48,252,243,32,222,127,240,31,127,196,27,128,58,26,0,2,26,127,230,28,128,26,31,128,6,27,0,2,58,0,2,58,13,130,58,22,26,72,0,38,72,0,42,0,1,36,48,2,20,24,1,148,24,0,100,24,31,8,20,56,232,102,4,176,146,7,32,81,6,64,73,142,64,73,222,128,37,255,0,252,3,254,248,3,254,248,1,254,248,127,126,255,16,6,254,248,14,248,54,122,248,22,230,248,0,150,252,0,142,248,0,78,240,0,76,240,6,72,240,3,136,224,0,8,224,0,8,192,7,8,200,24,152,196,31,240,206,39,112,229,66,176,160,75,160,184,107,160,78,3,64,11,133,10,72,125,10,87,131,18,158,120,234,156,6,18,70,129,228,54,128,12,173,24,12,85,60,188,178,3,180,90,14,42,186,20,34,90,2,18,185,4,10,177,0,202,63,0,60,86,1,76,151,3,140,38,7,248,47,133,8,95,8,120,167,204,94,51,252,240,14,15,224,212,254,43,87,57,218,44,0,42,49,255,148,62,0,100,40,0,36,40,0,52,31,135,148,20,72,216,19,167,24,21,74,148,16,0,20,40,0,20,24,32,20,24,28,8,8,120,16,8,254,32,9,199,32,5,186,160,2,68,64,2,16,64,13,185,152,60,211,20,216,127,115,31,255,248,24,24,28,48,0,12,48,0,12,48,0,14,48,0,14,63,131,238,51,231,198,120,0,6,111,231,199,98,33,6,96,0,6,96,0,6,112,64,6,40,196,4,56,56,4,48,134,8,17,255,8,19,255,136,31,192,200,28,124,8,30,0,28,51,0,103,49,255,143,0,9,216,0,127,244,16,128,4,1,0,4,30,62,60,54,96,36,126,0,4,254,14,92,252,26,84,252,0,36,60,0,34,28,0,18,36,0,18,4,0,242,4,1,250,4,7,252,4,7,156,28,0,4,18,0,104,50,0,40,51,6,120,17,135,248,16,231,144,16,63,248,111,96,200,155,128,52,144,128,10,168,159,10,149,96,242,85,128,12,74,0,12,74,60,52,44,71,36,40,0,88,60,14,104,40,20,72,36,0,36,20,0,20,16,1,20,24,1,228,30,3,24,26,12,232,41,19,8,41,4,112,84,192,144,90,48,43,88,15,244,181,0,213,99,251,70,52,14,180,153,242,84,210,29,146,178,0,26,149,128,122,151,228,74,140,48,148,148,253,244,149,81,84,148,1,12,148,1,12,84,0,140,84,4,148,68,3,28,36,8,146,58,31,42,58,0,75,119,134,108,172,113,187,71,14,112,148,192,204,42,63,35,204,0,176,70,0,1,96,0,0,65,255,224,131,192,24,140,0,4,50,24,5,78,40,2,86,12,2,84,126,7,68,43,26,192,0,60,192,0,84,184,0,68,72,0,40,72,0,40,136,7,40,152,0,208,20,8,48,36,7,48,98,0,80,162,6,208,81,1,160,136,131,160,132,127,144,32,127,130,32,191,194,32,127,130,32,191,194,63,127,130,48,191,222,48,0,118,49,128,38,48,64,246,49,241,6,112,35,230,112,0,6,112,0,6,112,0,6,112,2,6,112,2,6,112,18,6,112,127,4,104,247,4,41,159,166,36,129,246,229,129,247,227,3,251,225,255,251,64,1,158,70,8,190,120,22,46,99,200,254,76,0,14,121,248,62,56,16,126,56,56,147,56,72,250,16,0,2,88,0,130,176,0,130,184,0,194,184,0,194,208,7,100,240,31,228,248,56,228,248,127,244,244,1,246,247,3,158,243,195,30,195,241,30,193,255,60,193,255,255,248,1,112,112,10,240,112,0,48,192,1,126,176,1,252,184,16,124,192,1,251,140,224,25,133,0,29,130,120,121,70,4,158,6,48,110,134,0,12,230,0,12,198,0,12,50,0,152,54,3,16,38,5,24,30,31,152,63,1,24,126,128,24,190,64,56,108,32,252,86,31,94,31,71,252,63,1,12,62,0,6,62,0,6,60,224,2,60,248,30,60,14,254,60,254,242,60,86,90,124,6,2,56,6,2,56,12,2,60,31,194,62,15,132,62,63,196,24,124,228,8,127,244,13,4,40,12,131,8,22,64,8,51,64,16,51,179,48,241,207,224,248,127,240,63,247,208,63,192,120,63,224,24,127,255,4,127,128,100,127,128,28,127,158,4,119,1,4,127,13,140,111,3,48,126,0,156,46,0,8,54,0,16,118,0,144,126,0,112,54,0,144,54,0,224,98,3,32,227,0,192,209,128,64,208,128,128,40,249,128,36,127,192,18,62,0,208,0,1,160,16,35,193,127,139,194,128,118,73,56,31,141,62,1,158,1,1,198,29,31,172,6,33,216,0,127,168,0,10,184,0,4,152,4,36,184,1,100,240,0,196,248,0,8,180,30,8,248,9,208,216,3,80,220,1,32,142,0,32,131,0,64,1,240,128,129,255,0,252,2,124,252,6,52,240,0,70,241,0,159,255,0,91,254,0,61,124,159,255,253,48,55,254,92,15,253,131,30,229,135,182,223,128,6,141,0,6,221,0,4,223,128,20,254,128,20,255,128,100,255,131,52,255,134,248,255,128,16,63,128,32,61,192,32,127,112,32,230,31,192,6,0,80,8,0,24,56,64,188,120,17,12,60,132,40,64,0,13,68,10,31,96,127,253,80,223,255,65,135,47,67,140,62,64,0,126,96,128,92,50,128,76,58,128,72,27,128,40,31,129,216,63,128,16,123,1,240,127,0,48,127,128,240,95,192,32,94,96,32,61,63,224,63,255,255,63,255,255,63,191,255,63,131,255,63,144,255,63,254,63,76,112,115,92,124,9,60,87,6,40,27,54,24,0,124,72,0,44,64,0,8,96,0,136,64,0,136,192,12,144,128,7,48,129,255,96,143,15,192,7,31,192,7,9,128,3,249,128,19,255,0,1,254,0,8,5,0,9,255,0,11,255,128,15,255,224,15,44,240,28,0,56,48,0,12,48,0,12,49,192,232,56,35,8,25,197,212,43,39,20,40,4,20,32,2,8,40,2,8,16,12,16,8,51,16,8,64,144,4,158,144,4,161,160,2,128,160,9,0,192,8,227,32,26,28,64,192,31,224,206,127,240,115,255,248,65,255,252,131,255,198,255,0,2,255,0,3,255,128,15,255,128,19,255,0,30,254,15,213,254,56,13,255,7,9,255,10,5,103,0,3,42,0,2,36,0,30,16,0,95,24,0,63,91,0,194,208,128,14,104,51,30,36,15,254,178,3,254,127,255,252,127,255,252,127,254,252,127,0,254,124,1,30,120,111,206,103,225,226,111,60,28,118,30,52,62,42,76,46,0,248,36,0,104,32,0,8,32,0,8,24,2,88,24,7,144,56,63,208,232,56,224,166,193,224,162,14,96,243,198,192,209,230,128,200,255,128,200,255,128,231,255,240,159,255,208,95,254,136,127,192,8,127,128,4,254,0,6,254,0,14,255,0,10,255,15,140,255,12,28,255,177,146,127,135,10,127,138,10,99,128,6,45,128,34,18,0,126,22,0,6,8,0,58,6,64,98,3,128,203,5,64,154,4,160,206,10,145,223,18,79,239,16,208,90,22,0,13,248,63,197,7,192,51,10,0,11,70,0,3,110,48,3,94,120,3,76,12,6,132,115,62,164,24,98,144,0,122,216,0,148,160,0,132,48,0,68,48,4,72,176,3,136,8,120,72,136,189,208,68,0,208,36,30,32,19,0,80,132,193,207,67,62,230,71,251,192,47,252,96,63,134,16,62,0,16,126,0,8,126,0,8,120,0,60,124,96,120,62,248,136,78,13,104,92,49,216,68,105,8,40,0,136,16,0,136,16,4,136,28,3,16,34,0,144,34,7,144,88,8,32,88,3,160,164,0,64,26,64,160,20,49,160,2,14,144,33,255,224,39,255,240,47,194,208,63,128,72,63,0,12,62,0,4,62,0,4,62,48,12,60,12,24,28,2,40,40,60,120,36,0,72,36,0,68,18,0,36,18,1,36,10,0,200,12,1,40,10,7,248,10,14,56,13,15,208,21,8,144,50,140,184,178,125,188,65,63,235,16,0,108,50,25,78,100,8,206,120,12,14,120,0,14,114,127,254,113,192,6,239,248,14,255,198,122,214,124,102,82,20,46,104,0,4,105,0,4,121,0,4,121,0,36,55,1,204,55,0,4,105,59,168,89,63,248,31,32,24,143,224,8,14,96,56,20,49,56,92,31,252,32,180,15,99,2,15,102,3,15,102,63,15,76,240,255,76,192,59,201,159,7,91,129,159,63,15,155,127,4,23,127,0,2,253,0,2,255,128,2,117,128,18,113,128,228,52,128,4,56,193,184,61,128,232,127,128,8,127,192,80,253,176,16,253,140,96,255,131,192,247,128,64,85,28,8,84,162,132,128,42,4,179,166,196,140,127,37,146,28,20,19,0,42,33,193,204,160,99,8,160,2,13,33,199,141,34,165,73,160,4,10,144,0,10,16,2,24,32,50,24,224,28,24,80,2,36,144,60,36,40,0,82,36,0,113,19,24,130,129,147,4,38,125,0,0,64,0,8,144,16,11,82,208,28,0,56,144,255,9,99,0,198,68,0,34,139,0,209,73,215,146,42,98,84,200,16,19,72,16,18,72,16,18,56,34,28,56,157,28,61,193,188,63,247,252,93,193,223,169,62,90,31,62,124,243,136,247,52,156,134,59,222,238,62,255,34,88,199,240,94,56,13,181,103,227,183,120,31,182,193,194], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+184337);
/* memory initializer */ allocate([183,128,98,107,8,33,83,7,199,163,2,202,234,0,15,98,0,10,148,0,6,144,0,4,152,0,34,84,0,50,84,0,12,148,0,52,148,128,200,36,64,24,36,96,8,200,220,16,148,39,16,22,92,240,33,85,72,72,222,56,73,180,4,151,80,2,152,7,226,102,88,25,80,128,5,157,166,5,165,39,5,96,72,239,176,71,149,41,73,29,43,64,10,166,64,10,32,128,4,55,128,4,76,128,104,68,64,16,194,64,240,50,65,16,196,128,32,25,240,32,3,142,48,152,67,208,120,35,72,162,57,248,106,89,252,217,25,252,240,49,252,240,62,12,240,192,12,243,0,28,254,60,124,254,6,92,252,30,116,244,8,68,236,0,36,234,0,36,218,0,24,218,0,24,234,0,232,243,0,8,124,0,248,126,3,232,57,0,76,120,128,12,232,96,30,160,24,63,164,7,255,76,209,72,83,255,164,64,0,104,227,255,152,60,0,100,213,128,20,84,224,23,212,50,212,181,227,23,213,69,20,56,5,175,40,2,40,200,34,46,120,28,88,88,0,96,152,126,80,56,102,80,56,194,184,61,186,168,126,18,172,191,47,166,191,190,148,239,252,32,63,237,194,159,196,70,76,62,26,155,192,225,180,63,5,168,0,13,234,192,37,20,60,221,211,132,165,44,100,245,169,248,165,42,160,134,40,0,131,40,0,70,228,24,103,4,60,147,246,195,14,106,70,237,109,160,28,219,123,34,142,90,181,10,66,105,92,0,12,13,32,13,4,160,9,170,131,16,177,68,12,85,68,50,219,191,194,42,67,138,31,128,26,70,0,58,49,120,74,42,134,122,20,28,84,44,40,68,44,0,36,44,0,24,52,0,24,156,1,232,70,2,120,51,7,252,27,135,30,199,12,12,79,8,230,47,153,5,157,88,116,24,191,241,196,111,250,255,0,28,254,0,28,254,62,30,255,201,30,255,133,30,254,7,58,126,24,254,253,120,102,255,254,30,248,227,54,248,141,46,249,128,36,248,128,4,120,128,0,120,128,20,124,128,244,56,128,36,56,192,236,72,129,56,15,128,88,3,192,60,3,48,52,7,12,240,5,131,216,163,34,52,78,224,20,116,143,226,90,96,26,84,128,10,81,48,5,90,124,29,82,6,125,82,120,74,82,20,250,74,0,170,34,0,68,177,0,36,213,2,36,18,1,200,124,0,40,143,14,112,110,28,56,149,59,216,23,116,24,231,131,144,37,193,40,138,107,230,49,223,217,208,87,54,208,9,248,160,2,2,168,20,158,224,1,34,224,63,163,192,126,227,200,150,47,128,137,23,192,142,143,131,0,3,129,0,31,193,0,51,129,0,7,194,0,2,162,2,70,50,121,196,62,33,132,126,22,200,114,1,200,203,199,240,143,196,240,134,232,160,128,249,128,32,1,254,96,224,2,239,0,3,248,0,3,240,15,243,224,78,123,225,240,15,199,64,7,255,76,15,248,131,154,240,138,62,241,0,10,209,0,2,209,0,2,81,0,2,17,0,226,9,0,2,29,7,51,147,13,253,50,128,77,44,128,25,224,192,25,128,112,30,0,220,63,28,0,18,56,0,1,44,0,1,56,0,0,50,0,0,127,252,0,127,51,192,127,60,113,250,4,13,254,62,7,244,23,31,236,0,115,232,0,227,168,0,142,144,0,140,16,0,140,48,12,136,48,39,152,112,58,184,232,7,184,228,6,124,194,28,252,97,3,252,33,131,252,48,31,132,33,224,116,34,31,140,69,224,122,170,0,14,180,0,122,169,240,142,91,9,122,72,113,170,88,161,10,72,1,4,80,0,132,32,4,132,68,3,6,76,28,229,68,48,57,134,79,136,174,16,24,11,3,152,10,132,56,106,64,43,145,48,64,32,143,144,208,64,32,80,128,2,81,255,226,86,0,26,88,0,6,81,255,194,34,0,52,86,0,12,108,124,4,92,198,116,60,28,200,76,100,168,84,0,216,80,0,132,32,4,68,32,11,132,52,0,8,53,14,208,52,248,80,50,7,184,34,8,80,34,3,32,73,32,64,18,117,96,141,255,208,9,75,248,5,139,200,30,156,4,62,224,12,254,128,20,255,0,20,252,15,44,124,48,58,124,70,34,76,12,18,122,0,10,108,0,10,68,0,242,88,0,78,158,0,155,153,3,228,25,130,140,20,196,28,84,192,12,244,104,28,52,60,188,210,63,254,145,7,254,145,5,253,132,100,234,131,153,50,144,250,10,173,4,242,116,248,10,213,0,6,77,0,4,101,97,44,85,63,118,77,2,70,101,60,118,37,0,70,53,0,36,45,6,36,17,11,196,28,158,52,20,147,232,34,84,40,74,64,64,21,64,22,131,248,161,72,191,240,37,63,232,18,95,246,0,191,224,1,64,24,2,128,4,10,0,4,18,0,2,20,15,242,44,48,14,44,192,2,87,128,3,87,0,63,87,30,107,151,10,67,169,0,35,169,0,18,148,129,146,74,128,227,41,192,18,36,195,226,19,128,4,10,128,4,10,80,11,57,44,18,210,147,228,36,79,203,134,0,30,136,0,2,177,255,194,159,128,61,175,6,2,215,1,2,199,25,131,214,6,206,198,3,28,100,0,36,68,0,56,128,1,28,128,2,16,0,1,16,16,0,160,16,14,64,144,3,128,136,1,0,4,1,0,2,6,0,32,6,0,33,9,192,16,241,32,16,65,24,43,255,224,27,255,240,61,128,144,52,0,8,118,0,8,118,0,4,116,0,28,118,120,36,52,78,68,56,0,184,72,60,212,72,80,68,40,0,68,16,0,36,8,3,36,12,1,200,42,6,56,42,13,232,47,10,8,72,129,144,86,80,32,81,56,32,88,159,192,86,79,224,128,125,238,129,130,22,14,2,26,156,2,22,181,242,26,249,255,30,251,3,254,206,124,246,198,6,78,196,63,62,196,10,124,196,0,108,198,0,12,214,0,40,230,3,104,246,1,248,126,0,24,62,15,240,127,0,208,247,129,160,225,192,48,240,224,48,184,127,240,110,103,248,17,255,224,19,255,240,55,223,80,54,69,208,117,0,8,116,0,8,119,128,4,119,0,6,126,12,12,62,31,148,34,32,152,42,15,44,39,10,34,47,0,18,18,0,10,10,1,220,6,1,124,6,1,140,6,2,104,7,3,140,3,130,56,26,67,52,109,47,254,141,23,253,196,192,52,121,63,204,214,192,52,137,0,10,238,0,4,198,112,4,172,28,30,206,0,52,236,120,68,136,40,120,168,0,104,176,0,36,176,1,36,80,1,20,40,0,232,24,0,8,16,3,144,52,0,80,84,1,16,162,0,32,97,0,64,160,128,64,161,112,128,161,191,192,39,3,16,202,176,240,57,71,16,38,184,8,177,64,8,138,128,52,81,128,36,71,129,88,62,62,104,38,32,68,42,14,36,42,20,20,42,0,8,18,0,248,10,0,16,14,1,152,25,3,104,25,6,136,121,12,104,229,140,40,37,132,112,35,36,124,33,31,240,16,135,224,13,255,240,13,255,248,27,2,92,26,0,12,26,0,6,26,8,4,58,60,68,72,196,100,88,48,180,88,105,74,72,1,170,40,1,10,24,1,12,24,0,140,24,8,136,24,13,144,24,115,160,24,190,224,44,33,32,42,6,32,53,66,64,116,230,240,170,63,152,18,239,102,31,193,244,31,192,254,31,192,62,63,192,2,63,192,2,63,224,2,62,120,2,126,76,2,156,118,0,116,63,62,108,3,118,112,0,92,72,0,8,64,6,8,224,14,8,240,6,8,208,25,16,240,127,144,248,252,208,248,137,224,230,140,192,247,132,64,243,192,224,225,253,192,60,162,196,224,128,96,177,65,112,13,32,84,226,95,168,29,96,40,140,128,44,141,0,104,49,0,136,17,201,240,138,1,80,114,49,8,18,16,136,84,0,72,228,3,80,8,0,240,92,54,112,56,125,248,60,240,56,62,195,32,63,209,176,43,251,252,231,255,224,8,255,20,9,223,192,10,160,48,9,0,8,18,0,4,20,0,60,16,33,196,20,206,4,21,16,6,23,32,12,22,103,12,28,224,214,25,99,146,26,69,10,17,128,6,17,128,70,19,192,90,35,128,132,69,129,62,5,195,197,5,192,20,4,192,36,65,104,15,49,127,190,78,159,252,49,192,236,39,128,96,47,0,24,47,0,88,39,243,40,54,0,232,52,0,28,63,131,248,16,36,10,51,131,140,48,0,12,48,0,12,32,116,4,96,0,2,32,253,2,33,194,130,35,231,68,19,126,68,51,60,68,23,0,216,15,24,224,7,219,224,7,255,224,7,255,160,60,24,240,127,128,48,122,0,56,126,0,124,248,31,132,240,241,252,243,184,60,230,38,12,230,51,124,230,4,72,204,0,88,236,0,8,228,0,16,228,2,80,196,113,208,198,60,16,198,27,224,230,13,240,239,7,96,255,128,96,177,192,192,241,225,192,252,127,128,252,63,128,104,68,160,17,255,64,44,0,224,59,255,48,36,0,200,40,0,40,56,0,24,59,1,248,56,230,24,83,199,168,85,9,40,80,8,40,208,4,20,32,36,26,112,24,18,240,103,50,209,219,50,145,167,58,57,125,124,121,1,124,188,60,247,71,155,136,137,255,4,145,252,24,158,127,224,51,128,16,48,120,104,114,112,40,125,255,244,115,128,18,100,0,18,138,0,10,186,0,26,180,250,122,180,6,210,72,56,244,72,40,172,72,0,140,40,0,76,52,6,76,52,11,200,84,24,108,142,63,186,143,48,58,23,48,189,107,152,106,9,218,122,181,255,234,224,255,242,195,0,14,134,0,2,150,56,1,86,78,7,116,3,159,116,14,34,84,16,62,132,0,34,164,0,17,84,0,9,80,0,201,32,0,50,24,1,10,16,7,250,16,1,14,16,0,244,16,0,4,48,1,164,48,128,232,40,96,8,116,56,232,186,15,240,41,81,240,41,206,122,43,0,14,42,63,246,43,192,14,38,61,2,46,70,2,60,56,58,60,80,38,44,0,90,80,0,84,80,0,68,80,0,34,32,6,34,48,0,196,56,30,4,88,48,100,80,71,184,80,8,88,200,1,136,232,0,16,229,0,16,242,195,32,249,111,96,117,63,176,202,5,10,202,255,254,223,0,6,224,0,6,240,127,254,127,128,4,63,0,4,63,131,130,119,4,230,115,0,10,42,1,204,34,2,140,122,0,10,112,0,4,56,0,4,30,0,52,18,0,24,18,0,232,41,1,248,40,2,136,100,0,112,146,0,32,137,17,112,68,143,240,32,3,72,64,0,108,64,2,50,68,2,58,72,0,60,75,225,242,70,0,18,71,225,250,36,179,92,40,0,12,40,0,12,40,0,12,44,2,8,36,18,8,36,14,8,36,1,136,34,219,248,34,7,20,79,128,124,140,64,186,12,51,58,28,12,90,16,128,185,1,255,69,127,209,223,126,48,63,124,58,31,63,255,158,63,0,254,60,0,62,56,0,14,55,195,110,20,102,60,55,129,196,48,0,6,48,0,6,48,32,14,48,96,14,24,24,12,27,0,8,9,243,200,8,126,8,12,28,16,4,0,16,14,8,48,15,0,120,30,193,172,62,255,44,160,62,60,224,1,92,192,0,124,232,0,60,248,31,252,240,224,12,225,142,4,215,3,68,254,14,248,254,7,56,206,0,16,246,0,16,222,0,8,218,0,8,202,0,136,106,0,112,114,1,160,122,3,16,238,7,240,194,4,48,226,8,224,242,136,64,234,200,96,226,63,224,8,1,0,24,1,128,48,1,224,56,4,240,108,3,152,96,30,252,96,62,14,104,195,14,104,151,134,105,2,30,105,0,60,121,0,4,105,0,8,105,0,4,121,0,228,121,2,104,121,28,56,49,27,248,49,1,240,51,130,16,231,128,112,254,192,16,252,112,16,244,31,254,17,255,224,19,255,240,11,255,240,27,193,248,27,128,8,59,0,4,59,128,4,59,228,4,61,195,140,61,192,216,61,131,152,53,133,8,49,128,8,20,0,4,16,0,36,8,0,56,22,0,200,18,1,136,18,0,112,57,0,16,40,128,96,100,96,32,163,24,32,16,199,192,1,16,25,6,159,241,54,224,14,217,16,2,131,42,2,26,81,74,59,12,129,122,31,22,250,10,58,152,0,60,168,0,42,184,0,34,136,0,18,68,1,148,36,0,100,60,3,148,50,6,20,18,13,248,33,14,56,97,8,216,208,136,80,168,138,16,202,55,96,165,47,224,176,99,243,33,156,15,66,96,3,69,128,2,138,0,50,138,31,254,116,96,4,88,6,4,80,139,134,95,128,206,39,7,138,182,5,28,235,0,20,163,0,12,150,128,4,178,0,100,62,0,24,86,0,8,82,0,240,145,1,16,16,128,112,40,64,16,44,48,40,195,15,232,31,254,96,31,251,48,159,193,8,223,0,8,176,0,12,208,0,28,216,0,20,208,0,36,220,124,60,216,198,116,232,28,66,232,48,34,140,0,18,148,0,18,74,0,226,36,0,4,28,0,52,42,1,196,42,0,20,41,0,36,52,64,10,50,48,25,42,14,40,73,5,234,1,99,10,34,193,10,37,92,50,34,99,129,110,64,125,176,64,2,136,152,2,197,14,7,186,3,158,202,29,26,161,14,60,85,0,42,117,0,18,34,0,10,5,0,10,5,0,116,13,0,4,29,0,232,54,130,8,82,128,204,146,192,16,12,176,20,51,72,50,192,191,210,8,64,8,8,112,24,16,254,8,19,1,200,28,254,36,39,1,228,40,0,12,54,0,196,51,3,148,48,134,28,83,65,220,81,162,154,80,32,10,40,32,10,40,0,20,24,72,20,8,48,26,20,0,18,44,124,43,44,0,42,74,48,74,49,0,171,80,195,114,208,60,178,16,0,18,48,0,2,48,127,224,128,128,16,131,0,56,130,16,36,12,120,120,12,206,232,60,26,170,76,8,140,88,0,72,84,0,72,196,0,44,108,3,44,248,1,206,252,7,238,124,14,252,252,31,190,62,28,60,62,25,156,111,121,254,143,253,254,49,255,214,12,255,236,4,0,0,72,0,0,193,249,128,179,143,224,167,192,24,199,240,40,200,185,252,153,97,204,152,0,246,152,0,54,152,0,6,152,2,6,160,27,6,160,0,4,176,154,4,177,251,141,139,1,201,134,8,105,196,0,41,206,0,49,199,0,99,231,205,243,247,255,251,255,255,247,31,255,192,63,251,96,63,128,48,126,0,16,254,0,16,254,0,16,254,0,8,255,0,24,255,24,56,231,7,112,231,2,80,235,0,72,111,0,8,247,0,8,247,0,24,127,193,144,63,135,224,63,14,16,57,14,240,57,140,16,24,216,24,46,124,60,99,127,252,241,159,254,23,255,232,111,126,231,94,48,113,60,0,58,60,0,62,188,0,57,56,0,28,91,128,218,72,71,18,89,36,154,72,243,18,72,20,18,40,18,20,24,0,24,8,0,16,8,102,16,8,25,16,4,36,32,6,126,96,6,195,96,11,189,208,59,152,220,234,211,87,165,126,165,18,127,224,19,255,240,119,240,104,23,0,4,103,128,4,79,192,4,95,128,4,159,142,28,31,17,132,159,0,36,115,7,60,25,26,42,21,0,18,22,0,18,10,0,210,5,0,36,5,3,220,5,7,156,4,134,100,12,130,8,20,66,104,114,25,27,202,7,16,73,3,240,39,255,255,39,226,190,87,192,23,159,128,4,191,224,2,27,192,2,49,142,2,85,1,1,145,14,207,17,1,17,53,0,58,72,0,34,200,0,34,14,0,36,22,1,36,38,14,200,41,120,104,105,3,176,168,128,24,40,131,16,36,81,32,36,48,112,34,24,152,18,31,150,63,192,68,124,64,18,112,39,250,128,120,6,129,135,1,143,1,129,159,0,65,111,7,7,87,2,138,75,1,28,91,0,18,98,0,10,224,0,4,248,0,100,244,0,28,112,0,204,48,3,252,48,5,12,16,128,48,112,64,112,92,32,32,147,28,112,44,143,240,35,67,248,19,255,224,15,255,240,15,195,248,15,128,136,31,0,8,63,0,4,63,128,4,63,128,12,63,14,20,54,3,40,50,14,120,52,4,84,116,0,68,116,0,36,248,1,36,254,0,200,254,0,8,255,1,200,255,2,16,255,128,144,188,64,56,186,32,126,189,24,254,186,135,191,31,0,132,31,33,172,30,19,197,28,0,115,24,0,15,16,67,195,23,1,3,14,64,27,30,240,7,52,12,23,20,124,254,56,41,206,8,1,118,8,0,6,8,1,6,8,1,4,8,15,12,8,7,8,12,114,24,13,255,144,2,7,224,114,12,96,105,0,96,225,128,224,202,127,16,42,128,8,199,15,232,132,112,16,200,128,8,211,0,56,226,120,72,196,6,248,142,56,168,156,80,132,124,0,68,84,0,36,68,0,36,46,0,200,18,1,56,14,3,248,6,3,44,13,2,200,20,128,40,20,64,24,50,50,60,105,143,244,166,99,240,81,146,252,252,0,7,252,0,7,252,0,3,252,0,3,248,96,3,248,56,3,248,28,3,216,118,63,240,84,67,240,0,114,208,0,1,224,0,2,192,6,1,192,4,1,224,3,66,224,28,66,208,63,34,208,16,116,200,3,60,200,0,4,198,0,4,193,128,0,64,96,0,96,95,32,80,255,128,171,251,192,207,244,96,15,192,48,31,0,16,30,0,56,30,0,104,62,24,200,62,46,184,63,2,232,55,140,136,19,136,132,21,0,68,21,0,38,11,2,44,5,129,232,5,6,120,5,15,136,12,128,8,14,129,200,25,96,22,104,144,97,132,79,160,100,49,32,19,255,224,35,248,240,43,128,40,55,0,8,55,0,4,119,32,4,122,28,14,122,7,60,123,31,36,122,18,124,98,0,100,44,0,36,36,0,36,44,0,20,52,1,148,26,0,100,58,3,24,57,7,248,49,6,16,72,132,208,196,76,80,66,60,224,33,30,240,16,135,248,9,0,104,14,1,248,30,0,40,28,60,56,112,195,216,97,240,120,65,252,232,98,28,252,110,96,44,84,0,4,116,0,4,100,0,4,60,0,36,60,3,196,28,3,100,30,15,124,31,28,124,23,16,8,55,1,136,126,0,24,111,0,24,79,192,56,92,227,248,60,61,252,1,255,192,3,255,224,7,255,120,7,225,252,15,192,60,15,224,4,15,128,4,15,206,4,15,153,14,15,143,148,15,5,44,15,0,52,14,0,8,14,0,4,14,0,4,7,0,248,7,7,104,5,15,240,5,152,112,12,209,176,28,224,16,52,120,160,36,63,240,66,31,248,223,128,46,255,192,30,255,192,30,255,192,6,255,192,4,255,124,6,247,247,142,247,240,238,247,108,28,247,62,14,250,0,238,254,0,92,254,0,8,252,0,24,248,0,24,240,13,152,144,67,240,152,40,176,8,53,96,12,12,224,14,9,240,17,2,160,16,134,32,4,126,16,48,1,14,32,1,70,0,0,147,64,3,197,67,192,58,78,63,254,93,192,124,12,240,238,9,27,28,9,42,84,24,0,20,24,0,20,56,0,20,20,1,20,52,1,18,36,6,18,36,0,18,100,27,19,70,0,33,198,0,97,141,0,224,28,193,240,44,127,185,108,63,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,1,152,0,2,100,0,4,2,0,4,146,0,4,2,0,4,226,0,4,226,0,2,4,0,1,248,96,0,135,144,0,132,144,0,72,224,0,48,128,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,1,204,0,3,7,128,2,32,192,2,128,32,2,0,32,2,0,32,6,0,0,12,0,0,8,64,96,8,32,32,12,2,0,6,33,128,1,144,192,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,58,62,0,14,126,0,6,127,255,195,127,0,113,124,0,25,248,0,27,219,227,236,255,247,236,122,144,140,176,16,6,48,16,6,48,34,5,48,228,12,243,24,142,113,0,13,16,34,10,40,126,14,60,0,14,62,8,30,59,0,47,59,128,79,120,193,143,120,127,15,247,0,3,241,0,2,243,0,15,253,192,246,255,249,23,249,128,127,251,241,213,248,125,245,217,244,35,248,128,6,248,0,6,232,0,7,248,0,135,248,0,132,252,7,4,252,0,52,252,127,212,126,24,73,191,31,218,223,140,158,255,194,60,127,224,48,224,248,64,136,31,128,127,191,254,121,103,126,243,227,31,255,196,143,247,100,137,246,99,13,228,128,13,237,0,61,233,252,69,234,14,125,202,120,21,234,0,4,74,0,4,74,0,5,202,0,36,234,3,198,170,0,6,162,3,238,186,14,76,155,0,141,215,128,29,148,192,25,132,96,59,220,31,255,255,1,4,252,129,128,243,0,0,207,62,240,255,224,12,255,252,28,254,62,116,254,118,108,126,0,4,126,0,4,124,0,4,116,0,4,124,4,4,118,3,132,126,0,8,126,3,136,126,12,72,119,1,152,119,128,60,119,192,124,54,116,156,54,24,12,54,16,4,119,144,10,31,255,254,63,223,254,63,1,254,60,0,6,28,0,2,120,0,2,120,224,2,96,248,2,32,136,50,160,100,126,192,16,140,64,0,228,64,0,4,64,0,8,195,224,8,67,155,16,193,204,152,225,121,158,240,7,62,236,184,82,230,0,146,215,129,2,67,194,130,233,252,2,14,0,0,147,255,0,239,197,128,255,128,64,255,0,32,254,0,16,254,0,24,255,0,56,255,0,40,255,30,40,255,34,4,255,14,4,255,0,2,255,0,10,255,0,58,237,128,2,252,0,12,214,0,44,204,0,68,199,128,10,195,64,2,135,16,2,143,8,12,159,7,255,239,195,222,223,0,54,254,0,74,191,227,202,127,128,202,247,24,63,255,44,6,238,50,22,222,31,36,254,7,188,214,0,120,205,0,56,249,128,16,120,144,16,248,134,80,248,191,176,253,252,32,223,255,224,223,217,224,239,207,224,31,239,224,7,255,224,3,255,192,152,255,192,126,94,120,127,255,248,127,253,252,126,2,124,120,2,92,32,143,196,35,32,100,54,60,12,62,22,56,46,0,248,62,0,80,8,0,0,0,0,16,24,0,16,24,7,144,48,31,160,80,63,192,192,65,192,64,14,64,81,132,128,72,192,0,72,197,0,0,127,128,20,127,224,8,0,16,16,0,24,16,0,8,16,0,8,32,0,8,32,0,24,32,0,24,96,0,8,80,60,8,80,6,60,80,12,248,0,8,176,0,0,144,0,0,144,36,0,144,36,0,160,36,3,32,24,0,64,4,31,192,2,8,192,1,7,64,17,0,96,128,128,112,0,23,248,255,183,247,255,152,15,255,200,127,255,255,143,253,128,31,255,224,63,250,56,239,248,160,79,248,0,7,240,0,7,248,0,7,152,0,7,156,7,135,216,2,15,248,5,143,248,12,143,248,31,143,252,17,143,252,23,31,231,136,63,242,0,63,241,128,117,241,224,35,253,63,3,7,30,248,30,7,248,62,252,60,127,224,12,127,192,12,127,228,12,127,240,24,127,248,20,127,255,56,127,230,0,127,240,0,127,128,0,127,128,0,127,0,128,127,1,194,127,0,70,255,1,203,254,2,122,255,6,251,254,134,3,254,70,3,255,38,3,255,26,3,127,7,143,35,255,0,39,255,192,79,240,224,63,255,240,61,255,16,63,128,8,63,128,8,63,128,12,57,128,12,63,128,48,63,31,56,63,4,4,63,0,0,61,0,0,63,0,0,127,128,0,126,0,112,28,0,140,3,129,244,1,192,52,0,192,4,0,160,8,0,152,14,0,135,255,193,163,137,128,2,99,9,254,52,23,0,216,188,0,248,248,42,60,241,128,220,112,34,252,113,193,56,209,5,144,128,36,19,144,34,21,144,2,17,240,18,17,80,12,21,248,0,55,232,128,55,89,255,60,24,0,32,120,0,48,240,0,255,240,1,253,248,2,189,124,15,119,59,255,190,123,255,190,123,255,222,251,247,238,251,255,244,247,251,248,231,128,120,95,128,56,31,0,24,62,0,8,56,0,12,32,0,12,88,0,204,40,64,24,32,0,16,28,0,24,4,2,16,4,2,56,6,4,56,4,2,48,4,4,88,6,0,180,2,1,76,4,10,28,120,15,252,116,7,252,120,6,254,116,101,62,121,157,38,117,1,50,122,126,253,121,225,231,35,248,31,79,128,38,14,28,62,12,4,84,30,0,4,28,0,6,126,0,6,127,0,6,63,1,198,63,0,14,127,134,220,123,0,156,83,0,60,83,96,92,249,16,88,120,15,184,204,1,228,216,1,228,248,18,252,224,159,254,242,247,254,255,249,190,126,192,14,124,4,14,120,3,12,112,5,4,96,0,6,35,128,0,17,0,0,16,0,2,16,0,2,8,0,2,0,0,2,8,0,6,4,0,6,4,0,2,2,0,3,0,64,3,0,224,3,1,208,3,79,255,252,95,255,254,127,192,254,127,128,254,127,128,92,125,128,30,124,0,22,121,0,22,60,224,244,57,49,12,59,226,236,112,0,136,56,0,8,56,0,8,16,0,8,16,0,24,56,2,24,40,0,16,60,35,48,60,14,96,60,0,96,124,0,240,124,1,240,124,7,240,146,7,0,0,46,0,1,0,0,0,0,0,159,0,96,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,224,184,4,185,36,146,80,220,1,77,166,114,59,8,41,36,157,32,29,6,228,56,254,218,73,28,110,24,120,201,42,64,24,117,216,146,91,127,28,38,243,15,1,52,146,24,97,135,192,192,142,159,225,134,24,73,44,128,240,206,224,249,0,245,36,8,56,120,128,128,81,33,30,28,112,36,175,0,159,6,245,0,0,250,72,0,11,129,0,132,2,28,129,211,64,18,95,0,0,174,234,170,170,250,147,85,73,255,32,8,83,254,255,146,74,201,95,85,85,94,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,239,255,255,255,255,255,255,255,255,255,255,255,255,247,255,255,254,224,6,231,128,0,0,0,0,0,0,0,0,0,0,0,0,1,231,96,6,224,66,24,192,31,255,255,255,255,255,255,255,255,255,255,248,3,24,66,6,226,48,12,8,79,255,255,255,255,255,255,255,255,255,255,242,16,48,12,70,232,124,19,23,112,0,0,0,0,0,0,0,0,0,0,14,232,200,62,22,248,236,78,35,64,0,0,0,0,0,0,0,0,0,0,2,196,114,55,30,255,128,222,100,64,0,0,0,0,0,3,224,0,0,0,2,38,123,1,254,241,129,176,31,128,0,0,0,30,0,1,128,0,0,0,1,248,13,129,142,224,67,176,82,0,15,192,0,123,0,0,254,0,14,0,0,74,13,194,6,208,25,240,50,0,15,192,0,225,128,39,227,128,6,0,0,76,15,152,10,241,57,24,84,0,7,128,2,17,128,46,167,128,102,0,0,42,24,156,142,230,121,7,136,0,6,0,2,56,128,55,156,0,55,192,0,17,224,158,102,192,113,0,0,0,8,0,3,120,192,100,240,0,62,192,0,0,0,142,2,224,97,0,0,0,19,128,6,216,192,71,120,1,119,192,0,0,0,134,6,224,98,0,0,0,31,192,6,191,192,11,104,1,247,128,0,0,0,70,6,224,50,0,0,0,31,128,4,127,192,7,72,1,183,0,0,0,0,76,6,225,146,0,0,0,4,0,4,124,192,31,232,1,188,0,0,0,0,73,134,195,26,0,0,0,24,0,4,52,192,13,248,0,53,248,0,0,0,88,194,194,58,0,0,0,33,248,5,124,192,55,104,0,127,248,0,0,0,92,66,227,122,0,0,0,127,252,6,248,192,47,120,7,248,60,0,0,0,94,198,209,244,0,0,1,248,4,3,65,192,23,200,7,192,0,0,0,0,47,138,224,200,0,0,1,224,0,1,255,128,28,232,7,0,0,0,0,0,19,6,224,48,0,0,0,0,0,0,15,0,116,152,0,0,0,0,0,0,12,210,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,70,224,64,0,1,255,255,255,255,255,255,255,255,255,255,255,254,0,0,6,2,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,224,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,224,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,192,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,1,255,255,255,255,255,255,255,255,255,255,255,254,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,1,255,255,255,255,255,255,255,255,255,255,255,254,0,0,2,2,224,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,6,192,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,224,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,6,194,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,66,235,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,214,192,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,6,225,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,138,195,122,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,94,198,226,58,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,66,195,26,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,194,225,146,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,73,134,224,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,6,224,98,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,6,224,97,0,1,255,255,255,255,255,255,255,255,255,255,255,254,0,0,134,6,192,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,2,230,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,158,102,241,57,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,156,142,208,25,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,152,10,224,67,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,194,6,241,129,176,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,129,142,255,128,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,254,248,236,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,55,30,232,124,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,62,22,226,48,12,128,0,0,0,0,0,0,0,0,0,0,0,0,0,4,12,70,224,66,24,128,0,0,0,0,0,0,0,0,0,0,0,0,0,8,66,6,224,6,231,128,0,0,0,0,0,0,0,0,0,0,0,0,0,11,224,6,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,234,170,170,250,147,85,73,255,32,8,83,254,255,146,74,201,95,85,85,86,213,0,0,250,72,0,11,129,0,132,2,28,129,211,64,18,95,0,0,170,224,249,0,245,36,8,56,120,128,128,81,33,30,28,112,36,175,0,159,6,211,15,1,52,146,24,97,135,192,192,142,159,225,134,24,73,44,128,240,202,228,56,254,218,73,28,110,24,120,201,42,64,24,117,216,146,91,127,28,38,192,184,4,185,36,146,80,220,1,77,166,114,59,8,41,36,157,32,29,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,56,0,0,50,0,1,0,0,0,0,0,24,0,24,0,200,0,127,128,32,251,128,0,255,128,8,255,0,8,255,128,4,255,15,4,254,0,156,254,3,20,158,2,52,142,0,8,132,0,20,132,0,20,80,0,12,64,0,76,36,0,52,124,0,8,100,1,24,66,2,248,2,0,8,5,0,16,128,192,16,0,48,32,0,14,32,0,7,224,31,255,240,63,7,48,63,0,16,62,0,16,126,0,8,126,0,28,126,240,56,124,252,232,124,14,200,92,120,168,124,0,0,124,0,8,124,0,72,60,4,72,12,7,232,20,14,248,12,63,240,30,126,120,30,96,28,63,225,188,61,128,24,126,192,60,254,112,255,255,63,255,30,0,243,31,128,83,31,255,211,14,1,251,60,0,25,28,0,15,27,192,7,56,240,119,57,251,254,48,163,158,16,3,246,16,0,199,16,0,15,16,2,15,16,19,14,16,12,12,48,224,12,112,126,88,232,15,16,204,17,160,206,4,192,134,3,192,199,55,224,199,255,240,31,255,248,62,0,120,56,0,56,48,0,28,112,0,28,112,0,14,118,0,78,127,131,238,104,198,46,111,231,238,101,130,205,160,32,15,224,0,15,160,64,13,224,68,13,160,60,14,112,242,14,49,225,8,49,255,152,59,152,144,62,60,176,31,0,240,31,211,240,15,255,224,144,128,128,73,31,192,38,127,240,49,255,248,51,248,124,31,192,6,31,192,2,31,207,2,31,1,129,31,159,215,31,7,29,19,1,58,19,0,44,21,0,18,17,128,18,23,0,74,9,128,178,15,3,20,11,130,252,11,137,28,23,192,72,97,252,88,193,255,252,32,255,254,127,225,252,127,128,78,63,128,6,127,128,2,255,0,1,255,56,1,255,126,1,254,7,79,254,127,141,255,47,30,222,0,22,94,0,18,74,0,9,38,0,201,50,1,250,58,2,50,29,1,234,25,7,252,25,15,190,57,7,28,124,144,228,78,89,252,115,248,108,92,253,248,75,255,224,55,255,224,223,255,144,95,255,16,95,138,8,94,0,8,94,0,12,94,0,24,47,48,40,46,76,36,116,142,84,76,60,68,74,80,34,51,0,34,43,0,18,19,129,19,15,1,226,3,128,19,3,128,221,15,129,254,9,193,143,13,195,63,9,228,23,20,188,7,14,0,240,48,0,12,68,255,0,71,0,210,40,0,54,24,0,17,19,0,105,55,128,233,112,117,9,113,231,137,82,133,73,112,38,21,80,68,22,80,2,20,40,35,24,232,98,40,120,28,44,168,33,44,168,93,40,44,227,40,92,152,106,171,0,176,52,195,75,202,60,148,8,8,0,8,255,0,15,255,192,29,255,224,61,255,240,61,191,216,61,1,136,61,0,4,61,0,14,61,24,12,29,6,20,19,1,188,23,7,40,19,10,36,22,0,20,14,0,136,14,0,120,14,0,152,23,7,120,20,5,16,18,132,48,85,66,51,138,54,121,8,191,253,232,206,69,245,255,234,246,10,26,244,0,10,84,0,10,85,255,238,78,0,26,54,0,10,20,241,234,53,2,60,84,245,234,84,85,74,40,2,10,24,1,12,24,17,8,8,46,8,8,0,136,4,113,200,5,206,80,6,128,48,26,4,44,105,128,83,132,245,144,2,79,20,31,255,248,24,24,28,48,0,12,48,0,12,48,0,14,48,0,14,63,131,238,51,231,198,120,0,6,111,231,199,98,33,6,96,0,6,96,0,6,112,64,6,40,196,4,56,56,4,48,134,8,17,255,8,19,255,136,31,192,200,28,124,8,30,0,28,51,0,103,49,255,143,252,3,254,248,3,254,248,1,254,248,127,126,255,16,6,254,248,14,248,54,122,248,22,230,248,0,150,252,0,142,248,0,78,240,0,76,240,6,72,240,3,136,224,0,8,224,0,8,192,7,8,200,24,152,196,31,240,206,39,112,229,66,176,160,75,160,184,107,160,78,3,64,11,133,10,72,125,10,87,131,18,158,120,234,156,6,18,70,129,228,54,128,12,173,24,12,85,60,188,178,3,180,90,14,42,186,20,34,90,2,18,185,4,10,177,0,202,63,0,60,86,1,76,151,3,140,38,7,248,47,133,8,95,8,120,167,204,94,51,252,240,14,15,224,32,0,24,36,0,12,68,0,108,136,0,153,208,125,9,16,131,11,33,28,255,98,7,6,66,1,62,194,6,46,2,0,28,4,0,12,4,0,8,2,0,8,130,1,200,130,3,136,66,62,112,129,49,176,67,129,176,191,193,48,19,224,32,49,249,224,80,63,192,142,31,192,212,254,43,87,57,218,44,0,42,49,255,148,62,0,100,40,0,36,40,0,52,31,135,148,20,72,216,19,167,24,21,74,148,16,0,20,40,0,20,24,32,20,24,28,8,8,120,16,8,254,32,9,199,32,5,186,160,2,68,64,2,16,64,13,185,152,60,211,20,216,127,115,240,0,31,208,0,41,224,0,61,224,6,124,224,255,46,193,249,255,194,108,15,198,95,63,132,55,115,140,0,127,136,0,70,136,0,70,140,0,38,140,0,38,140,1,198,156,0,22,252,1,236,186,8,76,242,3,136,241,0,16,48,192,56,112,96,56,208,63,252,136,15,252,255,254,48,255,128,48,252,0,24,248,0,24,252,0,56,254,96,72,254,254,124,252,206,84,252,4,4,252,32,2,252,0,2,252,0,18,222,1,18,222,0,226,222,0,4,124,0,4,62,1,244,0,3,28,3,2,228,7,128,12,14,128,50,6,192,3,3,56,7,3,15,31,250,63,156,242,99,254,71,0,62,94,124,2,254,222,2,56,15,14,248,47,62,120,12,126,184,0,46,88,0,2,120,4,2,184,81,18,152,227,250,217,255,122,176,127,236,152,56,12,16,0,4,16,0,124,130,0,8,134,67,40,195,195,240,65,255,240,48,255,232,24,127,252,24,2,142,16,2,142,16,2,143,8,0,255,137,248,255,70,6,239,38,3,159,21,248,63,140,28,255,164,111,255,148,33,222,0,0,6,76,0,6,232,0,70,244,0,68,116,131,134,102,252,6,190,31,239,62,16,95,247,39,217,71,226,89,129,242,208,1,255,224,0,127,192,255,192,6,255,128,2,255,192,2,255,128,2,255,6,2,222,3,130,254,5,198,222,30,206,78,5,26,102,0,30,52,0,18,48,0,2,56,0,18,48,1,146,48,0,100,48,8,4,224,6,200,224,7,88,192,1,144,64,0,96,65,0,64,128,192,64,160,255,128,208,62,0,63,192,68,124,64,18,112,39,250,128,120,6,129,135,1,143,1,129,159,0,65,111,7,7,87,2,138,75,1,28,91,0,18,98,0,10,224,0,4,248,0,100,244,0,28,112,0,204,48,3,252,48,5,12,16,128,48,112,64,112,92,32,32,147,28,112,44,143,240,35,67,248,70,114,168,89,116,168,34,133,44,155,31,196,204,96,52,168,128,2,177,96,10,68,29,42,40,37,60,212,82,110,84,48,245,196,72,166,140,20,68,158,14,68,252,17,136,156,120,80,156,87,240,120,0,240,92,71,80,33,64,120,184,224,216,38,242,92,1,126,194,1,119,179,71,107,202,112,27,38,83,192,211,148,63,11,72,0,11,208,0,31,103,0,59,35,228,202,96,121,246,49,241,38,178,33,6,176,0,134,176,16,198,80,24,140,56,7,14,60,56,254,127,240,110,187,255,175,94,192,122,87,199,189,183,227,60,187,247,182,53,255,234,64,15,141,2,69,20,33,189,82,38,0,226,102,30,26,154,225,230,163,0,6,157,0,28,78,156,52,162,179,100,158,128,88,166,158,116,90,132,68,70,128,36,68,128,36,89,0,20,174,0,228,202,0,8,42,1,232,18,2,8,147,0,144,100,128,32,138,64,32,17,184,64,140,55,176,62,0,11,222,48,45,188,192,45,153,183,217,163,79,241,190,128,9,165,0,9,85,56,25,74,103,42,66,2,122,122,28,86,90,40,68,74,0,36,37,0,20,33,1,20,50,0,232,78,0,8,42,0,104,85,1,144,212,128,56,20,64,84,169,32,52,84,152,106,2,103,165,158,240,132,191,23,18,62,64,14,56,63,250,99,192,2,110,0,2,92,56,7,88,79,30,108,1,146,196,14,46,212,4,52,212,0,34,178,1,34,162,2,20,71,1,148,92,4,102,95,14,25,94,13,236,143,26,30,39,176,93,99,240,28,0,254,89,6,31,246,1,47,241,152,128,216,179,0,40,68,63,232,48,192,24,65,0,4,67,24,20,74,108,28,90,2,40,32,28,120,40,40,168,36,0,68,20,0,68,16,4,36,8,11,36,6,0,200,6,7,104,13,15,240,13,12,48,12,139,208,28,129,160,100,84,96,146,63,240,9,39,204,36,143,147,8,7,0,20,8,136,24,39,4,16,127,242,17,128,10,18,0,22,18,4,53,22,242,37,28,30,117,28,236,229,38,88,134,42,0,130,44,0,67,100,6,39,86,4,103,75,67,199,71,140,118,79,31,190,87,176,77,151,144,141,167,32,138,7,224,218,9,241,254,19,255,243,59,0,3,180,0,1,144,31,241,82,224,15,99,128,2,67,128,2,67,2,193,91,0,35,32,1,205,40,0,137,40,0,6,32,0,4,48,0,2,24,0,18,26,0,28,30,0,4,26,0,112,25,0,200,48,128,184,80,65,8,72,34,56,100,27,48,82,15,240,201,2,224,44,255,208,51,128,104,84,255,132,39,0,101,72,255,154,151,0,105,250,240,25,170,28,9,154,8,121,180,244,202,180,45,245,180,1,86,116,1,20,116,0,148,84,13,148,84,50,84,168,253,244,40,79,180,40,0,148,44,14,16,46,6,48,153,130,89,40,230,204,68,255,38,133,243,250,11,197,38,75,9,26,146,73,254,22,207,1,119,12,1,183,55,129,181,32,195,21,160,101,20,161,203,78,162,142,141,160,9,5,32,5,23,192,2,55,64,58,107,64,68,184,67,30,50,64,100,192,192,0,32,144,8,28,104,8,4,23,240,0,33,76,2,26,138,28,0,114,53,205,254,35,210,242,78,83,112,95,253,176,223,225,216,248,63,105,124,0,111,255,16,124,113,210,253,179,251,186,241,103,186,240,69,58,209,132,62,112,34,60,120,126,120,89,247,112,251,195,120,185,191,252,191,67,247,126,61,249,255,219,228,223,211,216,119,203,240,253,0,1,252,0,0,252,8,1,252,252,17,249,251,239,251,240,3,243,124,3,243,127,15,251,225,185,251,63,157,251,8,139,249,128,1,116,128,1,248,192,131,248,128,147,252,128,99,249,128,71,253,145,198,255,142,36,255,129,204,242,192,8,240,240,16,200,124,32,0,63,192,158,127,224,51,128,16,48,120,104,114,112,40,125,255,244,115,128,18,100,0,18,138,0,10,186,0,26,180,250,122,180,6,210,72,56,244,72,40,172,72,0,140,40,0,76,52,6,76,52,11,200,84,24,108,142,63,186,143,48,58,23,48,189,107,152,106,9,218,122,181,255,234,191,251,144,188,2,16,184,0,8,112,0,8,112,0,4,112,0,28,112,0,38,123,192,69,112,56,245,112,241,165,81,65,5,112,0,130,140,0,130,152,0,66,174,6,67,158,1,135,156,4,117,140,15,149,14,28,92,55,57,143,41,216,212,102,252,84,229,252,244,82,127,248,34,0,20,44,0,4,72,255,244,81,0,8,102,0,24,110,64,60,92,240,44,71,142,72,92,0,184,96,112,232,104,192,68,108,0,68,164,0,36,144,4,36,146,3,196,174,3,110,66,62,31,122,248,110,170,47,236,62,32,62,95,34,63], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+194577);
/* memory initializer */ allocate([223,48,186,79,249,244,67,255,240,37,227,248,43,251,252,50,100,92,23,144,4,39,224,2,39,224,2,23,199,2,23,128,134,15,128,74,23,135,158,20,194,26,36,192,18,75,64,2,138,192,10,82,64,58,38,192,4,70,64,252,134,96,4,141,48,104,28,204,8,42,35,144,217,24,96,40,132,64,20,99,64,96,7,148,81,196,72,128,52,64,128,11,202,162,7,252,130,24,8,132,14,8,68,244,122,136,76,138,136,0,234,80,1,84,144,1,20,32,24,148,168,16,152,105,5,136,36,251,72,36,113,176,37,61,32,240,0,160,172,13,160,34,10,208,209,186,144,136,254,88,69,251,4,74,124,26,79,129,170,240,58,130,143,136,30,88,3,226,80,124,2,70,192,3,62,143,7,62,209,234,54,128,78,27,7,137,21,0,5,21,0,2,25,128,50,23,128,30,33,192,98,33,192,156,105,192,228,161,192,136,21,192,28,146,224,14,136,216,93,73,79,252,68,9,248,68,31,250,41,224,146,54,0,4,24,31,252,19,224,4,26,48,4,24,14,28,40,1,40,40,30,112,40,4,104,32,0,72,16,0,72,24,0,40,24,6,40,48,9,208,104,6,48,210,15,240,82,28,48,73,17,176,164,128,32,146,97,112,145,63,232,72,255,228,38,175,213,17,255,224,19,255,240,55,223,80,54,69,208,117,0,8,116,0,8,119,128,4,119,0,6,126,12,12,62,31,148,34,32,152,42,15,44,39,10,34,47,0,18,18,0,10,10,1,220,6,1,124,6,1,140,6,2,104,7,3,140,3,130,56,26,67,52,109,47,254,141,23,253,39,3,16,202,176,240,57,71,16,38,184,8,177,64,8,138,128,52,81,128,36,71,129,88,62,62,104,38,32,68,42,14,36,42,20,20,42,0,8,18,0,248,10,0,16,14,1,152,25,3,104,25,6,136,121,12,104,229,140,40,37,132,112,35,36,124,33,31,240,16,135,224,252,3,184,240,0,72,240,31,176,224,224,72,195,31,136,132,224,20,11,0,20,22,31,60,46,17,168,220,7,34,252,26,18,124,0,10,38,0,4,42,0,68,21,0,58,20,0,98,8,128,156,7,129,100,10,128,140,10,64,132,9,32,14,20,144,31,18,79,253,49,32,252,13,255,240,13,255,248,27,2,92,26,0,12,26,0,6,26,8,4,58,60,68,72,196,100,88,48,180,88,105,74,72,1,170,40,1,10,24,1,12,24,0,140,24,8,136,24,13,144,24,115,160,24,190,224,44,33,32,42,6,32,53,66,64,116,230,240,170,63,152,18,239,102,31,193,244,31,192,254,31,192,62,63,192,2,63,192,2,63,224,2,62,120,2,126,76,2,156,118,0,116,63,62,108,3,118,112,0,92,72,0,8,64,6,8,224,14,8,240,6,8,208,25,16,240,127,144,248,252,208,248,137,224,230,140,192,247,132,64,243,192,224,225,253,192,9,223,192,10,160,48,9,0,8,18,0,4,20,0,60,16,33,196,20,206,4,21,16,6,23,32,12,22,103,12,28,224,214,25,99,146,26,69,10,17,128,6,17,128,70,19,192,90,35,128,132,69,129,62,5,195,197,5,192,20,4,192,36,65,104,15,49,127,190,78,159,252,49,192,236,39,128,96,47,0,24,47,0,88,39,243,40,54,0,232,52,0,28,63,131,248,16,36,10,51,131,140,48,0,12,48,0,12,32,116,4,96,0,2,32,253,2,33,194,130,35,231,68,19,126,68,51,60,68,23,0,216,15,24,224,7,219,224,7,255,224,7,255,160,104,68,160,17,255,64,44,0,224,59,255,48,36,0,200,40,0,40,56,0,24,59,1,248,56,230,24,83,199,168,85,9,40,80,8,40,208,4,20,32,36,26,112,24,18,240,103,50,209,219,50,145,167,58,57,125,124,121,1,124,188,60,247,71,155,136,137,255,4,145,252,24,252,0,10,240,8,10,248,16,30,248,16,6,244,225,252,233,2,4,247,4,28,254,4,116,252,8,56,252,8,24,255,48,48,250,192,8,250,192,4,58,224,4,250,192,2,185,192,10,253,128,8,253,192,56,255,96,88,249,112,144,249,184,48,255,248,32,255,223,192,246,253,192,64,15,224,64,112,224,128,128,112,160,0,56,160,0,24,224,112,92,225,254,252,195,231,254,198,249,60,204,28,252,204,109,248,220,1,184,208,0,120,136,0,48,136,1,48,136,1,96,220,3,224,220,123,224,254,255,224,255,131,192,255,133,128,255,199,128,255,255,128,243,255,192,2,27,40,34,196,136,49,132,228,53,59,84,180,196,147,184,3,25,249,0,29,18,96,42,194,240,106,165,140,250,4,56,170,20,80,132,148,0,68,166,0,36,134,0,40,134,3,40,71,0,136,92,28,122,78,31,185,86,16,60,151,51,180,151,3,18,131,51,245,145,31,228,190,224,28,255,196,60,255,114,42,207,207,178,255,129,226,199,254,60,223,121,252,248,254,126,248,198,78,200,16,110,248,0,12,120,0,4,248,0,12,248,0,12,248,7,204,248,1,140,124,0,24,126,8,88,250,0,24,254,1,176,255,128,48,244,224,120,116,120,248,248,31,126,224,2,252,232,2,254,252,0,126,240,13,254,224,7,255,234,227,231,241,224,15,241,255,127,243,199,254,227,154,118,227,136,31,249,128,3,253,128,2,123,128,6,127,128,22,127,128,118,127,128,38,63,135,30,127,134,6,127,128,238,127,192,14,23,240,14,7,252,30,142,63,254,20,44,128,24,74,192,17,138,32,4,63,240,49,192,26,35,0,26,38,0,18,38,192,52,77,244,116,200,12,148,40,112,244,92,0,136,216,0,72,44,0,44,151,2,60,74,1,220,36,0,20,84,3,216,178,12,88,79,3,148,151,193,55,19,243,121,1,255,244,49,127,201,28,2,120,28,0,60,60,0,60,56,0,30,56,0,30,120,0,30,112,1,254,112,11,14,112,60,26,119,227,62,116,103,42,104,64,2,92,64,18,76,64,18,110,33,10,108,32,242,108,32,2,47,35,180,44,103,248,46,96,126,110,96,15,207,48,15,159,30,63,155,3,255,32,0,58,32,0,12,32,0,2,64,0,2,95,252,2,62,3,194,77,160,50,92,56,12,76,12,14,76,247,28,200,40,100,200,0,116,232,0,168,240,4,136,104,8,136,72,4,144,72,3,16,72,24,32,40,6,32,20,0,64,138,24,64,101,1,80,50,195,40,41,61,164,112,0,26,112,0,62,112,0,14,96,255,222,127,128,30,127,0,6,126,24,2,126,14,2,124,1,6,108,14,220,108,0,60,76,0,36,36,0,4,36,0,4,60,0,20,100,1,152,196,0,248,68,14,80,66,29,240,66,48,32,67,17,224,33,161,128,32,240,192,16,127,192,7,255,112,15,207,248,15,129,252,31,0,124,62,0,6,62,0,6,62,0,6,62,56,6,92,14,4,124,63,52,120,20,76,56,0,120,56,0,40,24,0,72,40,4,72,56,62,72,60,127,144,126,207,112,173,193,224,191,199,96,95,195,96,47,231,224,23,255,224,15,255,192,32,126,40,33,128,56,38,0,8,40,127,200,49,128,52,38,0,12,38,56,4,36,4,4,36,58,60,36,20,76,44,0,244,36,0,172,12,0,132,52,4,72,84,6,72,84,29,136,84,33,144,148,30,144,18,1,16,26,14,32,9,2,64,4,128,128,132,101,128,130,62,192,15,3,192,31,14,48,28,24,8,126,96,12,127,192,14,61,128,14,127,184,12,127,188,28,63,115,206,127,112,142,118,195,220,127,224,156,121,224,8,125,96,4,47,224,36,127,224,60,126,192,120,63,193,216,63,3,156,62,34,28,126,56,48,118,24,112,252,15,240,252,7,240,32,127,246,147,128,24,204,63,210,49,192,38,198,0,50,24,0,114,166,18,210,107,211,212,35,165,148,161,68,20,208,2,28,208,1,26,80,33,26,16,26,57,176,4,185,184,155,240,120,241,208,125,254,80,121,192,72,220,142,104,204,132,164,34,160,209,25,255,132,4,126,158,29,192,232,24,130,68,56,1,4,56,11,4,113,38,82,97,15,146,129,0,10,130,48,74,130,248,242,69,13,148,132,121,244,132,33,84,68,0,136,162,0,136,162,4,148,146,3,20,10,24,116,10,103,178,12,200,50,8,3,41,42,226,230,81,119,163,160,191,194,112,95,68,208,16,3,144,16,3,144,16,3,144,116,2,147,163,129,150,124,112,188,0,26,223,128,248,62,99,108,155,245,200,144,128,140,136,0,8,136,16,8,136,32,28,72,32,29,72,60,25,68,16,26,68,0,22,68,98,30,70,24,110,69,0,126,69,0,190,196,193,62,254,122,63,159,127,145,33,128,4,92,127,248,82,128,11,149,112,5,189,28,5,186,2,2,170,112,50,148,40,74,140,0,141,144,0,245,176,0,173,144,0,74,240,14,74,80,1,140,208,60,8,208,35,16,200,29,144,200,2,160,96,12,64,84,0,128,17,1,0,2,131,192,5,124,160,176,0,0,120,0,0,120,0,0,124,0,0,248,0,0,241,1,0,228,128,0,248,66,8,249,240,12,247,126,60,242,126,248,226,0,8,242,0,4,242,0,4,241,0,8,115,2,8,99,199,136,87,31,240,123,120,112,119,240,48,127,224,48,239,224,48,252,243,32,222,127,240,145,73,40,136,255,248,67,0,8,124,255,244,35,0,20,44,0,36,40,192,196,60,61,178,60,241,98,68,73,2,116,1,4,80,0,132,8,0,68,32,4,68,16,3,132,20,3,228,12,30,104,20,16,168,20,147,136,18,128,16,33,208,144,100,121,184,164,31,214,144,135,213,34,63,250,36,64,5,36,191,249,91,192,6,154,176,6,164,248,12,165,12,156,165,3,36,153,28,60,90,40,42,74,0,34,42,0,18,90,1,18,90,1,149,131,0,229,131,1,181,43,7,29,37,7,253,77,142,12,77,136,206,138,232,78,21,248,95,44,252,253,83,63,244,12,255,32,103,82,244,88,255,43,239,0,245,236,0,21,185,193,154,147,163,254,180,36,52,81,197,212,114,166,180,112,4,20,80,0,20,80,0,20,104,2,28,184,22,36,168,0,36,168,30,36,168,35,34,174,0,98,78,28,115,91,0,107,101,0,167,192,201,36,195,63,68,135,255,240,143,3,248,76,0,8,44,0,4,46,0,4,119,28,4,118,35,12,116,1,142,116,14,20,102,20,60,68,0,44,80,0,34,72,0,18,32,0,146,24,0,114,16,0,4,48,1,36,80,2,248,80,0,8,200,0,72,169,0,16,168,192,16,20,48,32,84,79,192,16,208,90,22,0,13,248,63,197,7,192,51,10,0,11,70,0,3,110,48,3,94,120,3,76,12,6,132,115,62,164,24,98,144,0,122,216,0,148,160,0,132,48,0,68,48,4,72,176,3,136,8,120,72,136,189,208,68,0,208,36,30,32,19,0,80,132,193,207,67,62,230,192,31,224,206,127,240,115,255,248,65,255,252,131,255,198,255,0,2,255,0,3,255,128,15,255,128,19,255,0,30,254,15,213,254,56,13,255,7,9,255,10,5,103,0,3,42,0,2,36,0,30,16,0,95,24,0,63,91,0,194,208,128,14,104,51,30,36,15,254,178,3,254,127,255,252,127,255,252,127,254,252,127,0,254,124,1,30,120,111,206,103,225,226,111,60,28,118,30,52,62,42,76,46,0,248,36,0,104,32,0,8,32,0,8,24,2,88,24,7,144,56,63,208,232,56,224,166,193,224,162,14,96,243,198,192,209,230,128,200,255,128,200,255,128,162,222,156,82,49,28,42,192,204,43,15,226,83,48,18,84,192,10,73,184,4,43,14,28,47,3,54,30,28,68,38,8,180,42,0,228,35,0,64,23,0,64,18,128,36,10,1,32,6,0,196,6,0,8,3,3,192,15,0,8,36,129,16,68,32,0,98,24,32,113,23,192,33,255,224,39,255,240,47,194,208,63,128,72,63,0,12,62,0,4,62,0,4,62,48,12,60,12,24,28,2,40,40,60,120,36,0,72,36,0,68,18,0,36,18,1,36,10,0,200,12,1,40,10,7,248,10,14,56,13,15,208,21,8,144,50,140,184,178,125,188,65,63,235,16,0,108,50,25,78,100,8,206,120,12,14,120,0,14,114,127,254,113,192,6,239,248,14,255,198,122,214,124,102,82,20,46,104,0,4,105,0,4,121,0,4,121,0,36,55,1,204,55,0,4,105,59,168,89,63,248,31,32,24,143,224,8,14,96,56,20,49,56,92,31,252,32,180,15,99,2,15,102,3,15,102,63,15,76,240,255,76,192,59,201,159,7,91,129,159,63,15,155,127,4,23,127,0,2,253,0,2,255,128,2,117,128,18,113,128,228,52,128,4,56,193,184,61,128,232,127,128,8,127,192,80,253,176,16,253,140,96,255,131,192,247,128,64,85,28,8,84,162,132,128,42,4,179,166,196,140,127,37,146,28,20,19,0,42,33,193,204,160,99,8,160,2,13,33,199,141,34,165,73,160,4,10,144,0,10,16,2,24,32,50,24,224,28,24,80,2,36,144,60,36,40,0,82,36,0,113,19,24,130,129,147,4,38,125,0,72,222,56,73,180,4,151,80,2,152,7,226,102,88,25,80,128,5,157,166,5,165,39,5,96,72,239,176,71,149,41,73,29,43,64,10,166,64,10,32,128,4,55,128,4,76,128,104,68,64,16,194,64,240,50,65,16,196,128,32,25,240,32,3,142,48,152,67,208,120,35,72,162,57,248,106,89,252,217,25,252,240,49,252,240,62,12,240,192,12,243,0,28,254,60,124,254,6,92,252,30,116,244,8,68,236,0,36,234,0,36,218,0,24,218,0,24,234,0,232,243,0,8,124,0,248,126,3,232,57,0,76,120,128,12,232,96,30,160,24,63,164,7,255,36,20,72,40,8,4,40,55,100,16,128,2,16,127,242,17,128,14,22,0,2,31,0,10,28,193,50,36,48,228,45,252,244,32,161,68,84,33,68,156,1,4,44,16,132,76,8,132,212,29,138,52,63,205,46,112,109,78,111,116,213,102,116,149,226,122,108,255,250,58,255,179,31,113,248,255,192,252,63,255,254,255,224,126,127,144,14,126,60,2,126,127,65,126,67,203,255,12,159,255,58,26,238,18,62,202,0,44,234,1,36,239,130,20,231,3,228,227,0,200,222,56,40,222,119,248,191,144,48,175,161,224,127,129,176,199,128,216,131,197,216,243,255,184,1,99,10,34,193,10,37,92,50,34,99,129,110,64,125,176,64,2,136,152,2,197,14,7,186,3,158,202,29,26,161,14,60,85,0,42,117,0,18,34,0,10,5,0,10,5,0,116,13,0,4,29,0,232,54,130,8,82,128,204,146,192,16,12,176,20,51,72,50,192,191,210,8,64,8,8,112,24,16,254,8,19,1,200,28,254,36,39,1,228,40,0,12,54,0,196,51,3,148,48,134,28,83,65,220,81,162,154,80,32,10,40,32,10,40,0,20,24,72,20,8,48,26,20,0,18,44,124,43,44,0,42,74,48,74,49,0,171,80,195,114,208,60,178,28,0,3,108,128,27,255,240,26,254,128,51,254,0,63,255,252,61,252,3,223,119,12,63,127,158,31,106,2,31,96,0,31,96,0,31,96,0,63,32,0,30,32,144,60,48,96,60,48,0,62,51,192,54,112,0,123,248,0,151,204,1,21,250,2,3,241,128,0,227,240,0,4,0,0,72,0,0,193,249,128,179,143,224,167,192,24,199,240,40,200,185,252,153,97,204,152,0,246,152,0,54,152,0,6,152,2,6,160,27,6,160,0,4,176,154,4,177,251,141,139,1,201,134,8,105,196,0,41,206,0,49,199,0,99,231,205,243,247,255,251,255,255,247,16,0,18,48,0,2,48,127,224,128,128,16,131,0,56,130,16,36,12,120,120,12,206,232,60,26,170,76,8,140,88,0,72,84,0,72,196,0,44,108,3,44,248,1,206,252,7,238,124,14,252,252,31,190,62,28,60,62,25,156,111,121,254,143,253,254,49,255,214,12,255,236,31,255,240,63,252,56,63,192,24,124,0,24,124,0,12,124,0,60,124,0,76,124,0,214,60,248,230,61,188,2,60,226,2,124,2,2,60,0,2,60,4,2,60,5,210,60,1,178,58,7,34,62,15,4,45,0,228,45,128,4,59,64,8,59,32,8,11,156,62,11,135,243,159,255,240,111,255,248,159,255,248,63,225,76,255,192,6,63,0,3,127,128,3,127,56,6,127,15,26,127,1,178,127,14,60,126,5,42,114,0,34,24,0,18,8,0,18,30,0,212,18,0,100,49,0,180,41,3,248,36,143,40,233,64,80,240,48,16,255,78,56,127,55,252,228,131,16,34,76,16,145,48,112,9,129,136,6,14,4,24,16,12,96,96,72,129,193,212,133,198,28,157,201,146,126,227,10,62,192,4,86,128,4,75,0,28,69,0,40,32,128,12,24,0,124,31,0,238,28,128,202,28,128,154,58,96,136,201,17,24,100,140,56,50,67,252,16,1,34,32,1,225,32,255,249,35,0,5,39,0,3,63,0,2,51,28,2,46,7,14,166,0,30,174,30,36,150,8,124,20,0,84,40,0,68,44,0,36,92,0,36,124,1,36,236,3,200,202,12,104,197,11,168,69,0,20,34,131,20,25,192,100,4,176,72,3,127,140,68,62,14,88,0,18,102,0,13,216,127,241,135,128,15,246,112,2,148,156,2,160,7,15,96,120,26,64,92,50,96,8,90,64,0,68,48,0,68,112,0,36,176,1,36,176,6,200,184,12,56,116,31,240,54,52,48,41,1,144,84,160,32,74,114,96,101,54,240,146,159,200,71,251,192,47,252,96,63,134,16,62,0,16,126,0,8,126,0,8,120,0,60,124,96,120,62,248,136,78,13,104,92,49,216,68,105,8,40,0,136,16,0,136,16,4,136,28,3,16,34,0,144,34,7,144,88,8,32,88,3,160,164,0,64,26,64,160,20,49,160,2,14,144,208,18,74,96,52,44,166,50,76,8,9,178,18,3,201,145,0,10,20,192,58,147,240,74,17,83,201,16,5,242,32,8,150,160,8,18,160,8,20,32,64,40,32,44,48,176,144,32,49,192,96,176,188,120,24,8,147,148,97,36,98,3,114,17,5,103,136,249,12,70,81,176,88,199,240,94,56,13,181,103,227,183,120,31,182,193,194,183,128,98,107,8,33,83,7,199,163,2,202,234,0,15,98,0,10,148,0,6,144,0,4,152,0,34,84,0,50,84,0,12,148,0,52,148,128,200,36,64,24,36,96,8,200,220,16,148,39,16,22,92,240,33,85,72,64,0,1,65,255,251,134,0,7,152,255,251,163,0,1,142,0,5,212,0,5,173,128,5,168,64,13,168,249,23,168,109,246,144,1,102,80,1,6,144,1,6,16,8,132,40,57,136,104,70,72,168,128,76,84,31,52,204,32,164,4,86,162,130,137,90,48,0,88,15,64,32,149,61,4,210,194,6,168,1,142,197,48,114,161,120,3,154,140,3,82,4,7,98,63,142,83,10,26,67,0,60,146,0,68,54,0,4,158,0,12,46,2,88,206,29,144,156,248,224,36,7,64,70,16,64,138,14,128,137,4,128,18,192,160,128,34,44,101,220,74,26,34,9,24,88,32,33,1,168,38,63,200,150,192,55,138,112,1,128,248,13,145,12,5,153,3,13,74,120,61,74,56,5,34,0,250,50,0,74,90,0,36,46,3,36,86,12,196,156,48,108,76,39,168,46,8,168,191,3,16,223,160,16,47,161,56,199,251,48,67,255,248,7,127,224,16,255,132,35,0,114,36,255,138,75,0,118,85,192,14,84,112,122,84,249,202,148,83,234,84,2,138,52,2,10,136,1,9,72,27,9,40,4,10,84,115,8,92,255,152,217,227,212,56,129,146,29,29,186,29,13,22,63,8,177,159,218,240,67,255,242,160,255,1,24,119,152,158,159,196,93,96,58,155,128,11,76,0,10,58,120,6,148,15,29,116,2,116,140,56,78,252,8,121,122,0,68,80,0,38,48,4,36,50,3,206,59,1,8,52,30,108,92,127,248,76,104,56,174,7,136,134,64,28,103,65,54,19,235,103,9,255,208,198,127,177,97,159,97,9,0,104,14,1,248,30,0,40,28,60,56,112,195,216,97,240,120,65,252,232,98,28,252,110,96,44,84,0,4,116,0,4,100,0,4,60,0,36,60,3,196,28,3,100,30,15,124,31,28,124,23,16,8,55,1,136,126,0,24,111,0,24,79,192,56,92,227,248,60,61,252,16,1,199,112,0,131,96,0,3,200,0,3,224,128,31,225,224,31,50,240,63,228,12,111,76,248,127,200,0,7,200,0,7,232,0,131,72,0,3,192,0,3,168,6,199,168,3,134,248,0,6,152,1,70,240,31,206,240,0,14,54,3,31,49,128,63,112,64,127,240,48,255,130,255,240,133,0,8,40,255,232,241,0,20,50,0,18,2,96,42,68,244,123,52,28,249,36,225,139,136,81,235,168,1,73,136,1,10,72,0,138,44,8,138,44,63,4,76,255,132,94,177,216,143,159,216,55,128,116,55,142,122,75,128,122,73,136,226,133,204,229,5,255,164,192,30,240,192,39,44,128,6,16,192,2,18,208,10,18,208,31,50,240,96,202,224,152,58,192,166,76,209,15,124,241,20,84,240,128,4,240,128,36,249,0,4,249,0,4,116,128,228,126,128,4,62,65,100,63,228,8,63,224,200,63,240,24,71,240,16,129,248,120,4,231,248,12,127,224,24,196,144,27,7,136,28,0,36,16,63,244,48,192,12,49,0,60,35,120,100,55,156,248,30,184,168,46,80,132,38,0,132,34,0,68,88,0,37,80,2,37,152,1,197,46,0,5,42,1,229,233,2,10,209,1,202,145,192,20,49,224,23,35,156,58,98,195,242,132,0,41,182,63,223,177,192,33,14,0,125,216,0,201,211,129,13,80,99,238,209,246,202,16,196,14,208,4,8,104,2,28,168,2,20,56,54,20,36,8,24,36,1,24,52,30,44,42,0,43,42,28,40,75,0,100,146,128,160,34,97,96,195,255,68,103,242,130,149,18,159,96,97,136,72,158,116,33,0,4,66,0,4,66,0,2,130,1,130,129,0,114,130,11,167,130,0,74,154,7,140,162,26,28,170,0,10,164,0,6,96,0,6,100,16,34,72,8,186,36,8,70,42,0,254,42,1,132,19,1,56,17,128,88,40,84,136,36,61,132,66,139,8,63,15,252,63,0,242,63,0,2,127,128,2,127,0,2,127,0,2,62,24,3,62,63,15,124,99,223,124,26,214,124,0,4,62,0,2,126,0,2,60,0,10,16,1,202,20,0,242,12,7,252,12,15,252,26,28,172,57,28,228,120,185,134,124,249,154,125,63,252,125,31,254,16,0,240,48,0,120,32,0,24,112,0,28,112,0,28,112,28,30,112,246,62,113,187,254,115,70,62,98,62,124,70,16,212,98,0,140,102,0,8,102,0,8,70,0,144,86,3,176,98,56,48,118,63,224,95,4,224,95,134,192,187,193,128,184,255,128,188,255,192,74,255,192,46,189,116,41,255,148,78,0,106,81,255,154,110,0,106,112,0,30,166,0,117,161,145,197,160,115,5,163,132,229,160,197,69,160,4,5,160,0,5,176,34,13,176,54,13,176,127,13,176,99,141,115,255,205,123,194,254,125,128,186,109,0,10,74,128,228,137,137,231,57,255,200,140,64,0,144,127,128,161,255,192,71,255,224,79,129,16,47,0,8,110,0,8,124,30,56,124,48,68,124,0,124,116,6,84,116,12,34,122,0,18,74,0,18,88,0,98,40,0,42,36,0,220,18,1,230,12,1,6,4,3,116,12,66,60,20,51,56,36,15,252,36,3,252,31,0,132,31,33,172,30,19,197,28,0,115,24,0,15,16,67,195,23,1,3,14,64,27,30,240,7,52,12,23,20,124,254,56,41,206,8,1,118,8,0,6,8,1,6,8,1,4,8,15,12,8,7,8,12,114,24,13,255,144,2,7,224,114,12,96,105,0,96,225,128,224,202,127,16,42,128,8,199,15,232,132,112,16,200,128,8,211,0,56,226,120,72,196,6,248,142,56,168,156,80,132,124,0,68,84,0,36,68,0,36,46,0,200,18,1,56,14,3,248,6,3,44,13,2,200,20,128,40,20,64,24,50,50,60,105,143,244,166,99,240,81,146,252,252,0,7,252,0,7,252,0,3,252,0,3,248,96,3,248,56,3,248,28,3,216,118,63,240,84,67,240,0,114,208,0,1,224,0,2,192,6,1,192,4,1,224,3,66,224,28,66,208,63,34,208,16,116,200,3,60,200,0,4,198,0,4,193,128,0,64,96,0,96,95,32,80,255,128,171,251,192,207,244,96,15,192,48,31,0,16,30,0,56,30,0,104,62,24,200,62,46,184,63,2,232,55,140,136,19,136,132,21,0,68,21,0,38,11,2,44,5,129,232,5,6,120,5,15,136,12,128,8,14,129,200,25,96,22,104,144,97,132,79,160,100,49,32,19,255,224,35,248,240,43,128,40,55,0,8,55,0,4,119,32,4,122,28,14,122,7,60,123,31,36,122,18,124,98,0,100,44,0,36,36,0,36,44,0,20,52,1,148,26,0,100,58,3,24,57,7,248,49,6,16,72,132,208,196,76,80,66,60,224,33,30,240,16,135,248,127,251,126,251,224,27,115,224,15,91,224,7,247,128,3,95,0,3,246,8,3,220,4,3,108,122,3,168,60,3,168,4,26,168,0,34,136,0,124,200,0,8,248,0,8,216,4,8,232,6,16,216,0,16,196,28,32,196,3,32,194,0,64,129,0,128,0,195,0,240,60,0,228,0,2,209,0,2,230,0,2,228,63,130,248,56,98,86,119,122,145,200,254,221,195,204,165,135,156,167,129,24,131,128,0,171,128,0,15,128,8,195,128,120,161,128,48,161,135,240,171,131,248,215,192,48,255,192,96,251,224,32,49,248,32,240,254,48,120,127,224,120,119,128,252,3,252,248,1,255,232,5,255,252,7,255,254,127,255,247,128,2,254,60,12,254,254,62,222,4,18,252,60,54,252,0,2,60,0,2,124,0,2,60,0,34,36,1,66,52,0,228,60,3,36,60,6,52,62,31,248,63,8,8,63,128,216,57,192,216,116,112,248,224,127,248,110,0,4,94,0,68,92,192,68,223,240,68,63,192,4,60,240,12,121,252,12,251,51,4,114,57,148,116,12,252,124,58,12,120,14,124,120,0,156,248,0,252,248,1,56,240,1,16,240,9,48,112,229,160,241,247,96,216,30,64,200,15,192,236,59,0,6,7,0,15,15,0,64,60,32,64,192,48,129,7,253,132,184,5,69,0,2,171,79,130,154,64,231,202,131,202,168,133,14,154,128,10,104,128,4,88,128,68,100,64,60,66,64,196,94,65,134,100,64,120,68,128,136,95,128,56,181,128,40,72,64,112,46,57,240,81,199,240,120,15,236,135,53,234,15,255,248,31,255,248,31,223,252,63,7,252,63,1,254,126,0,6,126,0,6,125,192,6,249,240,4,248,24,4,240,236,116,240,17,184,224,0,232,32,0,40,96,0,16,96,0,16,96,24,32,227,252,32,241,252,64,248,31,64,232,97,128,252,49,0,247,35,0,251,255,0,80,192,80,44,195,204,43,20,2,42,27,254,75,52,4,86,72,2,84,150,2,86,163,196,109,160,108,137,161,200,240,162,132,175,64,2,169,64,2,89,96,44,78,80,68,156,128,252,45,129,196,87,67,8,169,64,48,76,224,16,147,17,24,8,205,184,38,51,255,97,141,254,142,5,4,18,154,100,45,231,150,145,248,10,98,0,10,34,0,27,164,0,62,100,48,43,36,254,82,169,0,243,232,60,170,40,8,139,40,0,75,200,0,42,36,3,44,210,0,200,138,0,8,197,1,212,129,6,146,127,0,25,44,128,172,80,64,95,99,48,146,160,207,82,111,96,200,155,128,52,144,128,10,168,159,10,149,96,242,85,128,12,74,0,12,74,60,52,44,71,36,40,0,88,60,14,104,40,20,72,36,0,36,20,0,20,16,1,20,24,1,228,30,3,24,26,12,232,41,19,8,41,4,112,84,192,144,90,48,43,88,15,244,181,0,213,99,251,70,52,14,180,153,242,84,210,29,146,178,0,26,149,128,122,151,228,74,140,48,148,148,253,244,149,81,84,148,1,12,148,1,12,84,0,140,84,4,148,68,3,28,36,8,146,58,31,42,58,0,75,119,134,108,172,113,187,71,14,112,148,192,204,42,63,35,204,0,176,70,0,1,96,0,0,65,255,224,131,192,24,140,0,4,50,24,5,78,40,2,86,12,2,84,126,7,68,43,26,192,0,60,192,0,84,184,0,68,72,0,40,72,0,40,136,7,40,152,0,208,20,8,48,36,7,48,98,0,80,162,6,208,81,1,160,136,131,160,132,127,144,32,127,130,32,191,194,32,127,130,32,191,194,63,127,130,48,191,222,48,0,118,49,128,38,48,64,246,49,241,6,112,35,230,112,0,6,112,0,6,112,0,6,112,2,6,112,2,6,112,18,6,112,127,4,104,247,4,41,159,166,36,129,246,229,129,247,227,3,251,225,255,251,64,1,158,70,8,190,120,22,46,99,200,254,76,0,14,121,248,62,56,16,126,56,56,147,56,72,250,16,0,2,88,0,130,176,0,130,184,0,194,184,0,194,208,7,100,240,31,228,248,56,228,248,127,244,244,1,246,247,3,158,243,195,30,195,241,30,193,255,60,193,255,255,248,1,112,112,10,240,112,0,48,192,1,126,176,1,252,184,16,124,192,1,251,140,224,25,133,0,29,130,120,121,70,4,158,6,48,110,134,0,12,230,0,12,198,0,12,50,0,152,54,3,16,38,5,24,30,31,152,63,1,24,126,128,24,190,64,56,108,32,252,86,31,94,31,71,252,63,1,12,62,0,6,62,0,6,60,224,2,60,248,30,60,14,254,60,254,242,60,86,90,124,6,2,56,6,2,56,12,2,60,31,194,62,15,132,62,63,196,24,124,228,8,127,244,13,4,40,12,131,8,22,64,8,51,64,16,51,179,48,241,207,224,248,127,240,63,247,208,63,192,120,63,224,24,127,255,4,127,128,100,127,128,28,127,158,4,119,1,4,127,13,140,111,3,48,126,0,156,46,0,8,54,0,16,118,0,144,126,0,112,54,0,144,54,0,224,98,3,32,227,0,192,209,128,64,208,128,128,40,249,128,36,127,192,18,62,0,208,0,1,160,16,35,193,127,139,194,128,118,73,56,31,141,62,1,158,1,1,198,29,31,172,6,33,216,0,127,168,0,10,184,0,4,152,4,36,184,1,100,240,0,196,248,0,8,180,30,8,248,9,208,216,3,80,220,1,32,142,0,32,131,0,64,1,240,128,129,255,0,252,2,124,252,6,52,240,0,70,241,0,159,255,0,91,254,0,61,124,159,255,253,48,55,254,92,15,253,131,30,229,135,182,223,128,6,141,0,6,221,0,4,223,128,20,254,128,20,255,128,100,255,131,52,255,134,248,255,128,16,63,128,32,61,192,32,127,112,32,230,31,192,6,0,80,8,0,24,56,64,188,120,17,12,60,132,40,64,0,13,68,10,31,96,127,253,80,223,255,65,135,47,67,140,62,64,0,126,96,128,92,50,128,76,58,128,72,27,128,40,31,129,216,63,128,16,123,1,240,127,0,48,127,128,240,95,192,32,94,96,32,61,63,224,63,255,255,63,255,255,63,191,255,63,131,255,63,144,255,63,254,63,76,112,115,92,124,9,60,87,6,40,27,54,24,0,124,72,0,44,64,0,8,96,0,136,64,0,136,192,12,144,128,7,48,129,255,96,143,15,192,7,31,192,7,9,128,3,249,128,19,255,0,1,254,0,132,100,234,131,153,50,144,250,10,173,4,242,116,248,10,213,0,6,77,0,4,101,97,44,85,63,118,77,2,70,101,60,118,37,0,70,53,0,36,45,6,36,17,11,196,28,158,52,20,147,232,34,84,40,74,64,64,21,64,22,131,248,161,72,191,240,37,63,232,18,95,246,0,191,224,1,64,24,2,128,4,10,0,4,18,0,2,20,15,242,44,48,14,44,192,2,87,128,3,87,0,63,87,30,107,151,10,67,169,0,35,169,0,18,148,129,146,74,128,227,41,192,18,36,195,226,19,128,4,10,128,4,10,80,11,57,44,18,210,147,228,36,79,203,134,0,30,136,0,2,177,255,194,159,128,61,175,6,2,215,1,2,199,25,131,214,6,206,198,3,28,100,0,36,68,0,56,128,1,28,128,2,16,0,1,16,16,0,160,16,14,64,144,3,128,136,1,0,4,1,0,2,6,0,32,6,0,33,9,192,16,241,32,16,65,24,43,255,224,27,255,240,61,128,144,52,0,8,118,0,8,118,0,4,116,0,28,118,120,36,52,78,68,56,0,184,72,60,212,72,80,68,40,0,68,16,0,36,8,3,36,12,1,200,42,6,56,42,13,232,47,10,8,72,129,144,86,80,32,81,56,32,88,159,192,86,79,224,76,209,72,83,255,164,64,0,104,227,255,152,60,0,100,213,128,20,84,224,23,212,50,212,181,227,23,213,69,20,56,5,175,40,2,40,200,34,46,120,28,88,88,0,96,152,126,80,56,102,80,56,194,184,61,186,168,126,18,172,191,47,166,191,190,148,239,252,32,63,237,194,159,196,70,76,62,26,155,192,225,180,63,5,168,0,13,234,192,37,20,60,221,211,132,165,44,100,245,169,248,165,42,160,134,40,0,131,40,0,70,228,24,103,4,60,147,246,195,14,106,70,237,109,160,28,219,123,34,142,90,181,10,66,105,92,0,12,13,32,13,4,160,9,170,131,16,177,68,12,85,68,50,219,191,194,42,67,138,31,128,26,70,0,58,49,120,74,42,134,122,20,28,84,44,40,68,44,0,36,44,0,24,52,0,24,156,1,232,70,2,120,51,7,252,27,135,30,199,12,12,79,8,230,47,153,5,157,88,116,24,191,241,196,111,250,255,0,28,254,0,28,254,62,30,255,201,30,255,133,30,254,7,58,126,24,254,253,120,102,255,254,30,248,227,54,248,141,46,249,128,36,248,128,4,120,128,0,120,128,20,124,128,244,56,128,36,56,192,236,72,129,56,15,128,88,3,192,60,3,48,52,7,12,240,5,131,216,163,34,52,78,224,20,116,143,226,90,96,26,84,128,10,81,48,5,90,124,29,82,6,125,82,120,74,82,20,250,74,0,170,34,0,68,177,0,36,213,2,36,18,1,200,124,0,40,143,14,112,110,28,56,149,59,216,23,116,24,231,131,144,37,193,40,138,107,230,49,223,217,208,87,54,208,9,248,160,2,2,168,20,158,224,1,34,224,63,163,192,126,227,200,150,47,128,137,23,192,142,143,131,0,3,129,0,31,193,0,51,129,0,7,194,0,2,162,2,70,50,121,196,62,33,132,126,22,200,114,1,200,203,199,240,143,196,240,134,232,160,128,249,128,32,3,72,64,0,108,64,2,50,68,2,58,72,0,60,75,225,242,70,0,18,71,225,250,36,179,92,40,0,12,40,0,12,40,0,12,44,2,8,36,18,8,36,14,8,36,1,136,34,219,248,34,7,20,79,128,124,140,64,186,12,51,58,28,12,90,16,128,185,1,255,69,32,1,254,96,224,2,239,0,3,248,0,3,240,15,243,224,78,123,225,240,15,199,64,7,255,76,15,248,131,154,240,138,62,241,0,10,209,0,2,209,0,2,81,0,2,17,0,226,9,0,2,29,7,51,147,13,253,50,128,77,44,128,25,224,192,25,128,112,30,0,220,63,31,253,112,255,254,136,127,7,252,126,0,12,126,0,14,126,0,6,126,0,6,126,240,6,252,44,14,204,54,62,220,20,116,184,0,38,128,0,2,192,0,2,224,5,4,240,3,196,240,15,4,208,62,104,148,0,56,114,0,136,113,0,8,16,128,16,48,112,32,48,31,192,28,0,18,56,0,1,44,0,1,56,0,0,50,0,0,127,252,0,127,51,192,127,60,113,250,4,13,254,62,7,244,23,31,236,0,115,232,0,227,168,0,142,144,0,140,16,0,140,48,12,136,48,39,152,112,58,184,232,7,184,228,6,124,194,28,252,97,3,252,33,131,252,48,31,132,33,224,116,34,31,140,69,224,122,170,0,14,180,0,122,169,240,142,91,9,122,72,113,170,88,161,10,72,1,4,80,0,132,32,4,132,68,3,6,76,28,229,68,48,57,134,79,136,174,16,24,11,3,152,10,132,56,106,64,43,145,48,64,32,143,144,208,64,32,80,128,2,81,255,226,86,0,26,88,0,6,81,255,194,34,0,52,86,0,12,108,124,4,92,198,116,60,28,200,76,100,168,84,0,216,80,0,132,32,4,68,32,11,132,52,0,8,53,14,208,52,248,80,50,7,184,34,8,80,34,3,32,73,32,64,18,117,96,141,255,208,9,75,248,5,139,200,30,156,4,62,224,12,254,128,20,255,0,20,252,15,44,124,48,58,124,70,34,76,12,18,122,0,10,108,0,10,68,0,242,88,0,78,158,0,155,153,3,228,25,130,140,20,196,28,84,192,12,244,104,28,52,60,188,210,63,254,145,7,254,145,5,253,224,255,242,195,0,14,134,0,2,150,56,1,86,78,7,116,3,159,116,14,34,84,16,62,132,0,34,164,0,17,84,0,9,80,0,201,32,0,50,24,1,10,16,7,250,16,1,14,16,0,244,16,0,4,48,1,164,48,128,232,40,96,8,116,56,232,186,15,240,41,81,240,41,206,122,43,0,14,42,63,246,43,192,14,38,61,2,46,70,2,60,56,58,60,80,38,44,0,90,80,0,84,80,0,68,80,0,34,32,6,34,48,0,196,56,30,4,88,48,100,80,71,184,80,8,88,200,1,136,232,0,16,229,0,16,242,195,32,249,111,96,117,63,176,202,5,10,202,255,254,223,0,6,224,0,6,240,127,254,127,128,4,63,0,4,63,131,130,119,4,230,115,0,10,42,1,204,34,2,140,122,0,10,112,0,4,56,0,4,30,0,52,18,0,24,18,0,232,41,1,248,40,2,136,100,0,112,146,0,32,137,17,112,68,143,240,127,209,223,126,48,63,124,58,31,63,255,158,63,0,254,60,0,62,56,0,14,55,195,110,20,102,60,55,129,196,48,0,6,48,0,6,48,32,14,48,96,14,24,24,12,27,0,8,9,243,200,8,126,8,12,28,16,4,0,16,14,8,48,15,0,120,30,193,172,62,255,44,160,62,60,224,1,92,192,0,124,232,0,60,248,31,252,240,224,12,225,142,4,215,3,68,254,14,248,254,7,56,206,0,16,246,0,16,222,0,8,218,0,8,202,0,136,106,0,112,114,1,160,122,3,16,238,7,240,194,4,48,226,8,224,242,136,64,234,200,96,226,63,224,8,1,0,24,1,128,48,1,224,56,4,240,108,3,152,96,30,252,96,62,14,104,195,14,104,151,134,105,2,30,105,0,60,121,0,4,105,0,8,105,0,4,121,0,228,121,2,104,121,28,56,49,27,248,49,1,240,51,130,16,231,128,112,254,192,16,252,112,16,244,31,254,0,9,216,0,127,244,16,128,4,1,0,4,30,62,60,54,96,36,126,0,4,254,14,92,252,26,84,252,0,36,60,0,34,28,0,18,36,0,18,4,0,242,4,1,250,4,7,252,4,7,156,28,0,4,18,0,104,50,0,40,51,6,120,17,135,248,16,231,144,16,63,248,218,207,197,53,0,5,150,255,243,109,0,11,150,0,11,186,192,26,173,248,53,180,14,69,180,114,189,180,168,213,168,0,133,168,0,70,168,0,68,168,4,68,200,7,132,184,28,244,152,112,40,92,15,236,60,12,12,158,1,146,55,64,149,23,193,152,37,243,240,74,63,227,17,255,224,19,255,240,11,255,240,27,193,248,27,128,8,59,0,4,59,128,4,59,228,4,61,195,140,61,192,216,61,131,152,53,133,8,49,128,8,20,0,4,16,0,36,8,0,56,22,0,200,18,1,136,18,0,112,57,0,16,40,128,96,100,96,32,163,24,32,16,199,192,1,16,25,6,159,241,54,224,14,217,16,2,131,42,2,26,81,74,59,12,129,122,31,22,250,10,58,152,0,60,168,0,42,184,0,34,136,0,18,68,1,148,36,0,100,60,3,148,50,6,20,18,13,248,33,14,56,97,8,216,208,136,80,168,138,16,202,55,96,165,47,224,176,99,243,33,156,15,66,96,3,69,128,2,138,0,50,138,31,254,116,96,4,88,6,4,80,139,134,95,128,206,39,7,138,182,5,28,235,0,20,163,0,12,150,128,4,178,0,100,62,0,24,86,0,8,82,0,240,145,1,16,16,128,112,40,64,16,44,48,40,195,15,232,31,254,96,31,251,48,159,193,8,223,0,8,176,0,12,208,0,28,216,0,20,208,0,36,220,124,60,216,198,116,232,28,66,232,48,34,140,0,18,148,0,18,74,0,226,36,0,4,28,0,52,42,1,196,42,0,20,41,0,36,52,64,10,50,48,25,42,14,40,73,5,234,18,0,12,169,4,4,217,0,132,200,129,130,166,112,22,109,255,156,179,253,242,166,249,30,132,126,30,164,46,254,168,0,254,168,0,220,168,0,56,200,1,24,232,1,24,200,205,48,19,246,32,247,131,96,124,103,192,252,23,192,254,29,128,206,27,0,207,63,0,71,255,0,39,255,255,39,226,190,87,192,23,159,128,4,191,224,2,27,192,2,49,142,2,85,1,1,145,14,207,17,1,17,53,0,58,72,0,34,200,0,34,14,0,36,22,1,36,38,14,200,41,120,104,105,3,176,168,128,24,40,131,16,36,81,32,36,48,112,34,24,152,18,31,150,255,123,252,255,127,254,127,255,252,127,255,252,126,0,60,125,224,92,121,240,252,121,17,156,121,243,252,88,2,168,120,2,8,88,2,8,24,1,8,24,10,8,16,15,8,16,59,144,8,119,224,8,243,224,8,134,96,26,0,96,57,192,192,57,236,192,56,255,192,120,63,224,0,220,0,7,182,0,3,193,0,5,96,128,11,144,64,30,1,32,9,194,160,12,62,176,26,114,240,5,169,208,18,133,176,5,0,16,22,128,16,5,0,176,113,3,28,140,142,154,3,0,59,19,0,56,163,128,56,3,224,120,3,248,240,7,255,224,2,255,16,0,122,0,16,0,4,33,255,132,38,0,68,40,0,38,72,0,50,72,0,26,196,0,125,159,1,157,169,230,1,198,247,69,178,32,13,176,32,13,176,32,11,208,96,11,160,32,6,144,28,14,144,0,12,152,0,28,152,60,28,152,0,60,158,0,56,155,0,240,185,129,112,184,94,100,164,4,58,139,248,10,148,4,30,109,255,230,86,0,26,84,0,10,84,0,12,105,224,4,74,24,52,80,240,204,113,137,250,80,1,154,88,1,10,44,1,12,26,0,140,24,9,8,40,6,16,72,25,144,72,55,208,84,1,32,84,14,32,147,140,192,197,127,80,144,222,64,56,56,7,108,198,231,65,2,31,64,0,3,67,255,7,112,0,62,172,0,206,163,3,39,173,143,133,161,1,5,128,0,5,64,0,5,96,64,10,97,80,10,112,224,14,112,0,10,112,0,26,120,248,58,124,0,90,60,0,153,62,1,9,61,6,11,60,248,12,56,0,4,113,3,200,22,192,0,8,63,224,81,192,28,98,0,12,196,96,187,36,158,193,104,4,129,88,124,250,8,4,130,168,8,68,152,0,68,88,0,36,88,4,36,48,2,200,112,0,12,72,30,236,168,48,44,136,47,234,108,40,42,214,35,89,83,144,82,145,242,245,48,255,235,252,128,60,254,0,2,248,0,194,240,3,50,240,2,19,241,242,18,59,140,27,123,130,63,119,241,198,124,24,15,60,124,254,28,9,142,44,1,92,60,0,140,20,8,136,20,0,144,20,7,32,52,64,64,108,31,192,218,16,128,146,15,128,145,0,128,144,128,128,204,255,192,1,254,192,3,255,192,7,255,240,15,199,248,31,193,248,31,192,124,31,192,62,31,192,6,31,134,6,31,31,6,55,1,148,54,3,124,36,0,36,20,0,40,16,1,8,24,0,152,28,0,120,28,0,8,20,1,208,102,0,240,99,0,32,225,128,32,144,248,64,144,127,128,255,128,172,239,0,4,239,0,6,238,48,6,238,124,6,236,134,62,252,71,118,252,244,78,124,1,86,220,0,4,124,0,2,56,0,34,120,0,34,152,3,194,28,0,4,52,1,228,60,2,36,60,1,196,60,0,4,118,0,8,183,0,8,59,128,16,57,192,96,125,255,192,24,56,48,24,28,112,16,31,200,48,30,4,62,56,2,39,224,62,48,195,220,60,136,4,79,16,6,66,39,206,56,32,108,48,32,164,72,48,2,59,16,2,64,8,2,123,8,14,165,176,4,133,64,124,5,72,12,9,72,4,18,72,12,34,76,4,196,15,31,132,143,255,255,199,254,255,192,254,255,192,46,255,192,6,255,128,6,255,56,6,254,60,6,254,7,6,222,31,62,254,10,102,222,0,124,206,0,92,248,0,72,120,8,8,48,3,200,48,0,24,112,0,16,240,15,144,242,0,96,243,6,32,233,128,64,236,192,128,244,49,0,246,31,0,115,255,128,12,2,0,17,255,128,23,255,192,23,202,224,23,0,16,14,0,8,46,0,8,46,96,28,46,188,56,44,6,104,92,56,240,76,12,168,86,0,136,52,0,72,44,2,72,16,5,200,28,28,112,26,51,152,26,76,80,57,3,144,116,129,40,169,116,236,68,191,214,237,192,35,247,193,169,211], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+204817);
/* memory initializer */ allocate([255,241,195,147,197,178,129,115,178,191,191,176,115,231,183,92,252,188,82,127,242,157,7,175,9,142,131,0,62,233,0,35,103,0,14,118,0,8,252,0,12,252,3,208,252,16,24,252,7,48,252,0,64,254,0,128,255,129,0,253,98,0,188,60,0,127,255,232,63,240,12,127,0,4,126,0,4,126,0,2,124,0,2,124,0,2,62,14,7,79,25,142,102,0,202,87,1,28,75,6,18,50,0,10,40,0,10,32,0,4,120,0,100,100,0,24,84,0,88,146,3,184,138,7,248,169,6,16,101,0,216,114,84,118,73,45,241,4,7,248,0,0,8,0,0,4,0,0,4,0,0,28,0,0,14,16,12,126,63,192,12,31,135,4,63,131,158,63,135,36,59,0,60,63,128,20,63,0,4,57,0,20,61,0,248,63,128,40,93,131,240,103,128,16,121,192,224,76,96,32,103,112,32,127,252,64,127,255,192,32,1,204,66,0,246,70,1,118,76,1,60,76,0,252,79,255,244,78,14,48,7,192,120,6,113,252,13,67,76,12,2,12,12,2,12,12,2,12,12,2,28,14,18,20,4,12,20,46,66,20,38,255,244,58,7,180,91,0,52,206,128,250,142,99,186,28,62,127,28,14,216,204,134,26,210,137,1,210,144,129,204,129,65,64,175,33,63,88,17,3,23,17,28,26,17,32,24,10,47,0,14,185,192,2,163,160,3,85,2,210,80,5,243,104,24,178,232,1,155,20,18,15,12,28,207,134,49,142,67,18,159,51,208,126,15,248,254,17,255,253,32,127,251,128,55,254,16,63,2,32,227,250,89,60,6,90,192,14,93,48,26,218,28,52,100,7,124,20,58,84,200,92,68,52,0,66,196,0,34,194,0,34,49,3,36,65,0,206,50,3,56,236,78,52,44,63,206,78,12,78,156,7,154,62,0,82,111,65,154,7,241,252,1,255,244,63,255,208,63,192,120,63,224,24,127,255,12,127,128,228,127,128,28,127,158,4,127,3,4,127,13,132,111,7,60,126,0,144,46,0,128,62,0,72,118,0,72,126,0,112,118,1,240,54,3,16,102,7,32,227,1,160,211,128,32,209,128,64,104,248,64,164,127,128,83,63,128,18,127,224,19,255,240,119,240,104,23,0,4,103,128,4,79,192,4,95,128,4,159,142,28,31,17,132,159,0,36,115,7,60,25,26,42,21,0,18,22,0,18,10,0,210,5,0,36,5,3,220,5,7,156,4,134,100,12,130,8,20,66,104,114,25,27,202,7,16,73,3,240,23,255,232,111,126,231,94,48,113,60,0,58,60,0,62,188,0,57,56,0,28,91,128,218,72,71,18,89,36,154,72,243,18,72,20,18,40,18,20,24,0,24,8,0,16,8,102,16,8,25,16,4,36,32,6,126,96,6,195,96,11,189,208,59,152,220,234,211,87,165,126,165,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,1,152,0,2,100,0,4,2,0,4,146,0,4,2,0,4,226,0,4,226,0,2,4,0,1,248,96,0,135,144,0,132,144,0,72,224,0,48,128,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,1,204,0,3,7,128,2,32,192,2,128,32,2,0,32,2,0,32,6,0,0,12,0,0,8,64,96,8,32,32,12,2,0,6,33,128,1,144,192,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,252,254,31,252,62,127,248,31,127,248,15,255,248,15,255,240,15,255,241,47,127,252,207,127,227,7,123,240,7,115,192,63,127,133,55,115,134,7,97,140,4,112,128,12,112,128,24,120,0,24,126,0,248,230,129,200,247,67,41,247,32,120,247,144,60,231,143,125,231,135,251,9,0,0,2,0,32,4,0,16,8,1,152,8,14,28,16,16,14,16,32,5,16,112,123,16,128,5,19,48,15,28,6,22,16,3,54,16,0,2,32,128,2,33,128,2,65,192,2,96,128,103,192,134,61,0,199,28,0,192,26,0,192,75,140,224,25,252,224,95,192,125,255,255,255,192,255,255,224,255,255,240,255,240,56,255,192,24,255,128,8,255,0,24,254,0,104,254,252,152,253,198,240,252,252,0,124,64,0,124,0,0,94,0,0,94,0,224,30,0,0,15,0,48,23,0,192,9,129,96,7,224,3,3,240,7,1,254,3,0,247,251,0,159,247,236,63,254,176,7,254,176,15,254,32,48,62,102,229,118,73,230,251,215,225,121,215,240,9,239,12,121,239,52,109,222,0,13,222,0,12,222,0,12,156,0,4,156,0,5,212,0,133,220,0,4,212,0,196,132,0,78,198,3,142,194,0,16,250,0,16,226,0,52,226,15,252,0,223,192,3,223,224,7,159,248,7,153,96,6,132,52,15,131,28,21,128,252,17,128,116,13,192,4,11,240,4,19,140,4,17,150,4,29,31,24,29,0,120,44,0,112,108,0,32,44,0,160,36,4,160,28,3,64,30,28,64,59,6,128,115,129,0,120,193,0,228,34,0,63,176,28,127,96,12,127,240,6,127,120,6,127,255,255,127,0,6,255,240,28,255,24,252,191,238,196,254,94,52,60,2,4,252,0,4,124,6,72,92,6,8,28,15,136,44,126,8,60,252,248,62,252,216,110,239,152,238,192,28,239,226,24,239,192,56,207,255,240,229,255,224,49,4,240,33,5,240,97,255,248,114,2,120,108,130,56,115,254,88,108,9,28,119,136,220,112,200,78,99,12,46,240,10,31,224,9,15,240,4,151,232,44,95,200,60,61,25,231,158,125,144,62,109,70,190,156,60,188,30,24,254,31,28,223,61,175,139,60,255,19,112,126,2,59,255,190,123,255,190,123,255,222,251,247,238,251,255,244,247,251,248,231,128,120,95,128,56,31,0,24,62,0,8,56,0,12,32,0,12,88,0,204,40,64,24,32,0,16,28,0,24,4,2,16,4,2,56,6,4,56,4,2,48,4,4,88,6,0,180,2,1,76,4,10,28,120,15,252,116,7,252,120,6,254,116,101,62,121,157,38,117,1,50,122,126,253,121,225,231,35,248,31,79,128,38,14,28,62,12,4,84,30,0,4,28,0,6,126,0,6,127,0,6,63,1,198,63,0,14,127,134,220,123,0,156,83,0,60,83,96,92,249,16,88,120,15,184,204,1,228,216,1,228,248,18,252,224,159,254,242,247,254,255,249,190,126,192,14,124,4,14,120,3,12,112,5,4,96,0,6,35,128,0,17,0,0,16,0,2,16,0,2,8,0,2,0,0,2,8,0,6,4,0,6,4,0,2,2,0,3,0,64,3,0,224,3,1,208,3,79,255,252,95,255,254,127,192,254,127,128,254,127,128,92,125,128,30,124,0,22,121,0,22,60,224,244,57,49,12,59,226,236,112,0,136,56,0,8,56,0,8,16,0,8,16,0,24,56,2,24,40,0,16,60,35,48,60,14,96,60,0,96,124,0,240,124,1,240,124,7,240,146,7,0,0,45,0,1,0,0,0,0,0,160,0,96,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,1,255,255,255,255,255,254,15,255,255,255,224,0,0,0,0,0,0,0,0,1,255,255,255,252,255,255,159,255,255,255,224,0,0,0,0,0,0,0,0,1,255,227,255,240,63,255,128,255,255,255,224,0,0,0,0,0,0,0,0,1,255,129,255,227,159,246,14,127,241,255,224,0,0,0,0,0,0,0,0,1,255,195,255,221,159,245,8,63,249,255,224,0,0,0,0,0,0,0,0,1,255,223,255,216,223,242,135,255,200,255,224,0,0,0,0,0,0,0,0,1,255,191,255,208,207,230,55,255,193,63,224,0,0,0,0,0,0,0,0,1,255,67,255,140,79,236,3,254,200,63,224,0,0,0,0,0,0,0,0,1,255,3,255,168,143,252,11,254,8,127,224,0,0,0,0,0,0,0,0,1,255,143,255,176,143,248,91,254,64,255,224,0,0,0,0,0,0,0,0,1,255,191,255,185,79,252,3,254,67,255,224,0,0,0,0,0,0,0,0,1,255,120,63,184,79,240,75,255,232,15,224,0,0,0,0,0,0,0,0,1,255,128,63,136,207,240,75,254,0,7,224,0,0,0,0,0,0,0,0,1,252,31,191,215,207,250,19,252,31,255,224,0,0,0,0,0,0,0,0,1,248,255,255,192,31,248,139,254,255,255,224,0,0,0,0,0,0,0,0,1,255,255,255,254,31,242,179,255,255,255,224,0,0,0,0,0,0,0,0,1,255,255,255,255,255,254,187,255,255,255,224,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,63,255,255,255,255,255,255,255,255,252,127,255,255,255,255,255,255,255,255,252,64,10,189,255,209,0,0,127,255,254,64,0,14,16,0,0,0,127,255,254,64,9,199,143,18,0,0,127,255,254,64,0,8,16,0,0,31,127,255,254,64,5,156,1,202,0,0,127,255,254,64,0,8,28,0,0,33,254,255,190,64,6,49,8,102,0,0,64,28,2,64,0,12,3,0,0,32,112,31,222,64,5,64,144,30,0,0,119,127,222,64,0,48,1,128,0,224,126,252,6,64,6,159,7,238,0,0,96,62,2,64,0,96,0,159,3,0,254,255,246,64,7,176,152,126,0,0,125,255,222,64,3,224,0,161,198,0,96,15,238,64,7,111,255,190,0,0,64,28,2,64,4,56,3,32,68,0,125,191,222,64,7,255,191,255,0,0,109,191,118,64,4,12,6,224,68,0,117,159,190,64,15,112,152,151,0,0,96,63,118,64,4,0,3,0,195,0,109,175,126,64,7,69,132,7,192,0,109,188,2,64,7,130,6,0,61,128,251,190,254,64,62,6,142,7,224,0,64,31,118,64,0,193,228,0,24,0,119,189,126,64,254,7,241,7,240,0,125,254,246,64,1,134,12,0,31,1,110,63,128,71,253,143,255,143,255,240,64,29,246,64,1,6,15,0,112,158,127,255,254,75,252,191,175,231,255,206,127,255,254,64,1,131,29,128,192,193,255,255,254,81,252,63,255,193,255,209,255,255,254,64,7,255,240,0,0,193,255,255,254,99,252,30,7,199,255,176,127,255,254,64,15,64,56,1,7,131,127,255,254,69,252,28,115,197,255,112,124,29,254,64,29,64,24,30,12,31,255,254,254,69,191,92,219,209,255,160,125,253,130,64,28,192,54,65,134,48,99,190,238,73,252,208,216,211,255,224,96,56,58,64,28,192,7,193,130,32,106,14,42,75,126,126,83,103,255,224,111,189,186,64,29,62,4,3,7,176,99,94,234,73,255,153,252,79,254,144,96,61,186,64,14,129,252,31,253,62,110,14,192,67,223,156,104,223,255,232,111,184,214,64,14,128,254,60,14,129,99,184,46,86,63,221,255,191,255,168,96,57,86,64,7,67,254,36,14,128,74,11,170,79,255,255,255,255,239,108,125,253,238,64,7,62,247,184,7,67,227,187,170,69,255,255,255,255,248,36,64,29,214,64,3,142,244,80,7,62,125,251,170,67,115,255,255,255,253,227,125,253,186,64,3,179,33,128,3,142,224,56,38,68,31,255,255,255,251,131,125,252,126,64,3,204,220,88,3,179,125,251,148,73,223,255,255,255,227,9,127,255,254,64,11,179,18,172,3,204,192,31,248,71,35,255,231,255,208,37,127,255,254,64,31,204,239,64,11,179,127,255,254,66,56,127,247,191,0,137,127,255,254,64,51,179,17,20,31,204,127,255,254,63,255,255,255,255,255,255,255,255,252,127,255,255,255,255,255,255,255,255,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,255,255,255,255,255,255,255,255,252,127,255,255,255,255,255,255,255,255,252,127,0,15,240,0,0,0,127,255,254,64,128,0,0,64,0,0,127,255,254,127,24,31,192,16,0,96,127,255,254,64,128,128,0,68,0,0,127,255,254,79,153,191,0,95,1,192,127,255,254,64,0,128,0,88,64,0,127,255,254,67,189,252,7,240,3,0,122,253,2,64,0,0,112,8,7,192,127,254,14,65,255,240,0,94,0,0,64,29,122,64,0,0,136,32,25,240,96,30,238,64,255,128,3,242,0,0,106,176,2,64,0,1,120,0,96,224,127,254,14,64,0,0,2,94,0,1,96,61,110,64,10,17,204,152,128,193,127,250,234,64,0,0,3,242,0,15,106,189,42,64,10,16,101,35,193,130,127,250,10,64,1,0,2,94,0,112,96,60,42,64,8,0,61,45,239,16,112,59,250,64,1,240,3,252,3,192,112,113,2,112,0,0,63,113,248,0,127,248,66,64,0,30,1,228,6,0,119,125,110,64,1,92,63,193,240,0,127,255,94,64,0,1,1,28,12,0,112,125,42,72,13,225,76,1,224,0,127,248,66,64,62,1,129,228,0,1,247,124,170,68,15,34,198,1,224,0,127,251,90,67,3,0,1,28,0,31,240,113,130,64,79,82,134,1,192,0,64,11,90,68,225,192,1,228,1,255,255,255,254,64,222,13,7,1,192,0,127,255,254,91,248,24,0,1,255,191,255,255,254,64,5,138,3,1,192,0,127,255,254,99,252,127,255,255,254,255,255,255,254,64,46,4,3,1,128,0,127,255,254,127,255,63,241,255,63,15,110,62,254,64,13,24,3,131,128,0,64,15,126,126,15,249,255,125,254,30,110,188,70,64,241,144,3,135,0,0,95,239,190,64,3,249,254,60,254,60,70,62,246,127,16,32,3,14,0,0,80,40,2,64,0,0,0,0,0,120,104,142,246,127,46,96,3,60,0,63,221,239,254,64,0,12,0,6,0,240,106,168,6,127,146,192,67,120,4,127,208,45,246,92,0,62,0,30,1,224,224,142,222,127,223,128,67,224,15,242,93,237,246,103,224,51,240,51,241,193,207,122,218,127,173,0,199,224,15,255,221,110,238,125,144,94,200,62,203,130,232,10,26,127,179,0,135,248,63,255,221,174,238,71,16,163,136,83,139,1,238,122,194,123,246,1,143,92,56,4,64,14,222,70,241,67,120,163,127,3,237,88,254,107,252,39,31,198,56,126,223,239,222,95,179,143,217,207,223,5,195,107,2,115,255,252,114,3,255,40,64,8,2,121,21,28,138,156,142,11,127,255,254,103,127,255,226,55,185,221,127,255,254,115,37,57,146,185,158,22,127,255,254,100,127,255,226,31,255,127,255,255,254,127,202,63,229,63,252,14,127,255,254,95,224,255,255,251,240,48,127,255,254,127,255,255,255,255,255,255,255,255,252,127,255,255,255,255,255,255,255,255,252,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,56,0,0,51,0,1,0,0,0,0,0,24,0,24,0,200,0,191,251,144,188,2,16,184,0,8,112,0,8,112,0,4,112,0,28,112,0,38,123,192,69,112,56,245,112,241,165,81,65,5,112,0,130,140,0,130,152,0,66,174,6,67,158,1,135,156,4,117,140,15,149,14,28,92,55,57,143,41,216,212,102,252,84,229,252,244,82,127,248,71,255,248,143,255,200,95,255,136,111,0,4,220,0,4,232,0,6,232,0,28,236,0,36,252,15,28,252,48,42,244,7,34,228,10,17,82,0,9,72,0,9,44,0,114,16,0,130,10,128,2,5,64,58,5,0,196,12,128,20,20,64,36,20,48,4,108,140,26,162,99,235,75,255,224,55,255,224,223,255,144,95,255,16,95,138,8,94,0,8,94,0,12,94,0,24,47,48,40,46,76,36,116,142,84,76,60,68,74,80,34,51,0,34,43,0,18,19,129,19,15,1,226,3,128,19,3,128,221,15,129,254,9,193,143,13,195,63,9,228,23,20,188,7,112,128,8,232,64,4,216,0,3,252,0,3,255,131,3,248,192,193,223,3,225,255,222,209,247,222,145,241,2,24,224,64,24,224,64,25,241,0,24,240,248,88,254,233,250,255,135,249,253,251,209,245,128,211,126,193,179,126,132,186,255,113,252,111,51,246,255,247,247,207,255,247,31,255,248,24,24,28,48,0,12,48,0,12,48,0,14,48,0,14,63,131,238,51,231,198,120,0,6,111,231,199,98,33,6,96,0,6,96,0,6,112,64,6,40,196,4,56,56,4,48,134,8,17,255,8,19,255,136,31,192,200,28,124,8,30,0,28,51,0,103,49,255,143,63,192,68,124,64,18,112,39,250,128,120,6,129,135,1,143,1,129,159,0,65,111,7,7,87,2,138,75,1,28,91,0,18,98,0,10,224,0,4,248,0,100,244,0,28,112,0,204,48,3,252,48,5,12,16,128,48,112,64,112,92,32,32,147,28,112,44,143,240,35,67,248,32,0,24,36,0,12,68,0,108,136,0,153,208,125,9,16,131,11,33,28,255,98,7,6,66,1,62,194,6,46,2,0,28,4,0,12,4,0,8,2,0,8,130,1,200,130,3,136,66,62,112,129,49,176,67,129,176,191,193,48,19,224,32,49,249,224,80,63,192,142,31,192,2,69,20,33,189,82,38,0,226,102,30,26,154,225,230,163,0,6,157,0,28,78,156,52,162,179,100,158,128,88,166,158,116,90,132,68,70,128,36,68,128,36,89,0,20,174,0,228,202,0,8,42,1,232,18,2,8,147,0,144,100,128,32,138,64,32,17,184,64,140,55,176,62,0,11,222,48,45,188,192,45,153,183,217,163,79,241,190,128,9,165,0,9,85,56,25,74,103,42,66,2,122,122,28,86,90,40,68,74,0,36,37,0,20,33,1,20,50,0,232,78,0,8,42,0,104,85,1,144,212,128,56,20,64,84,169,32,52,84,152,106,2,103,165,158,240,132,191,23,18,62,64,14,56,63,250,99,192,2,110,0,2,92,56,7,88,79,30,108,1,146,196,14,46,212,4,52,212,0,34,178,1,34,162,2,20,71,1,148,92,4,102,95,14,25,94,13,236,143,26,30,39,176,93,99,240,28,0,254,89,6,31,246,1,47,241,63,252,96,62,40,112,124,0,48,112,0,24,120,0,60,112,0,90,119,129,153,112,211,212,241,244,148,91,68,22,72,0,21,64,0,25,160,2,17,168,18,18,152,12,21,232,65,56,24,62,32,12,28,64,10,0,64,11,0,224,8,195,80,20,60,14,36,0,145,212,1,32,34,0,20,44,0,4,72,255,244,81,0,8,102,0,24,110,64,60,92,240,44,71,142,72,92,0,184,96,112,232,104,192,68,108,0,68,164,0,36,144,4,36,146,3,196,174,3,110,66,62,31,122,248,110,170,47,236,62,32,62,95,34,63,223,48,186,79,249,244,67,255,240,37,227,248,43,251,252,50,100,92,23,144,4,39,224,2,39,224,2,23,199,2,23,128,134,15,128,74,23,135,158,20,194,26,36,192,18,75,64,2,138,192,10,82,64,58,38,192,4,70,64,252,134,96,4,141,48,104,28,204,8,42,35,144,217,24,96,40,132,64,20,99,64,32,127,130,32,191,194,32,127,130,32,191,194,63,127,130,48,191,222,48,0,118,49,128,38,48,64,246,49,241,6,112,35,230,112,0,6,112,0,6,112,0,6,112,2,6,112,2,6,112,18,6,112,127,4,104,247,4,41,159,166,36,129,246,229,129,247,227,3,251,225,255,251,8,7,0,20,8,136,24,39,4,16,127,242,17,128,10,18,0,22,18,4,53,22,242,37,28,30,117,28,236,229,38,88,134,42,0,130,44,0,67,100,6,39,86,4,103,75,67,199,71,140,118,79,31,190,87,176,77,151,144,141,167,32,138,7,224,218,9,241,254,19,255,243,59,0,3,180,0,1,144,31,241,82,224,15,99,128,2,67,128,2,67,2,193,91,0,35,32,1,205,40,0,137,40,0,6,32,0,4,48,0,2,24,0,18,26,0,28,30,0,4,26,0,112,25,0,200,48,128,184,80,65,8,72,34,56,100,27,48,82,15,240,201,2,224,44,255,208,51,128,104,84,255,132,39,0,101,72,255,154,151,0,105,250,240,25,170,28,9,154,8,121,180,244,202,180,45,245,180,1,86,116,1,20,116,0,148,84,13,148,84,50,84,168,253,244,40,79,180,40,0,148,44,14,16,46,6,48,153,130,89,40,230,204,68,255,38,133,243,250,11,197,38,75,9,26,146,73,254,22,207,1,119,12,1,183,55,129,181,32,195,21,160,101,20,161,203,78,162,142,141,160,9,5,32,5,23,192,2,55,64,58,107,64,68,184,67,30,50,64,100,192,192,0,32,144,8,28,104,8,4,23,240,0,33,76,2,26,138,28,0,114,53,205,254,35,210,242,78,83,112,95,253,176,223,225,216,248,63,105,124,0,111,255,16,124,113,210,253,179,251,186,241,103,186,240,69,58,209,132,62,112,34,60,120,126,120,89,247,112,251,195,120,185,191,252,191,67,247,126,61,249,255,219,228,223,211,216,119,203,240,253,0,1,252,0,0,252,8,1,252,252,17,249,251,239,251,240,3,243,124,3,243,127,15,251,225,185,251,63,157,251,8,139,249,128,1,116,128,1,248,192,131,248,128,147,252,128,99,249,128,71,253,145,198,255,142,36,255,129,204,242,192,8,240,240,16,200,124,32,0,63,192,158,127,224,51,128,16,48,120,104,114,112,40,125,255,244,115,128,18,100,0,18,138,0,10,186,0,26,180,250,122,180,6,210,72,56,244,72,40,172,72,0,140,40,0,76,52,6,76,52,11,200,84,24,108,142,63,186,143,48,58,23,48,189,107,152,106,9,218,122,181,255,234,96,7,148,81,196,72,128,52,64,128,11,202,162,7,252,130,24,8,132,14,8,68,244,122,136,76,138,136,0,234,80,1,84,144,1,20,32,24,148,168,16,152,105,5,136,36,251,72,36,113,176,37,61,32,240,0,160,172,13,160,34,10,208,209,186,144,136,254,88,69,251,4,68,31,250,41,224,146,54,0,4,24,31,252,19,224,4,26,48,4,24,14,28,40,1,40,40,30,112,40,4,104,32,0,72,16,0,72,24,0,40,24,6,40,48,9,208,104,6,48,210,15,240,82,28,48,73,17,176,164,128,32,146,97,112,145,63,232,72,255,228,38,175,213,17,255,224,19,255,240,55,223,80,54,69,208,117,0,8,116,0,8,119,128,4,119,0,6,126,12,12,62,31,148,34,32,152,42,15,44,39,10,34,47,0,18,18,0,10,10,1,220,6,1,124,6,1,140,6,2,104,7,3,140,3,130,56,26,67,52,109,47,254,141,23,253,39,3,16,202,176,240,57,71,16,38,184,8,177,64,8,138,128,52,81,128,36,71,129,88,62,62,104,38,32,68,42,14,36,42,20,20,42,0,8,18,0,248,10,0,16,14,1,152,25,3,104,25,6,136,121,12,104,229,140,40,37,132,112,35,36,124,33,31,240,16,135,224,252,3,184,240,0,72,240,31,176,224,224,72,195,31,136,132,224,20,11,0,20,22,31,60,46,17,168,220,7,34,252,26,18,124,0,10,38,0,4,42,0,68,21,0,58,20,0,98,8,128,156,7,129,100,10,128,140,10,64,132,9,32,14,20,144,31,18,79,253,49,32,252,13,255,240,13,255,248,27,2,92,26,0,12,26,0,6,26,8,4,58,60,68,72,196,100,88,48,180,88,105,74,72,1,170,40,1,10,24,1,12,24,0,140,24,8,136,24,13,144,24,115,160,24,190,224,44,33,32,42,6,32,53,66,64,116,230,240,170,63,152,18,239,102,31,193,244,31,192,254,31,192,62,63,192,2,63,192,2,63,224,2,62,120,2,126,76,2,156,118,0,116,63,62,108,3,118,112,0,92,72,0,8,64,6,8,224,14,8,240,6,8,208,25,16,240,127,144,248,252,208,248,137,224,230,140,192,247,132,64,243,192,224,225,253,192,9,223,192,10,160,48,9,0,8,18,0,4,20,0,60,16,33,196,20,206,4,21,16,6,23,32,12,22,103,12,28,224,214,25,99,146,26,69,10,17,128,6,17,128,70,19,192,90,35,128,132,69,129,62,5,195,197,5,192,20,4,192,36,65,104,15,49,127,190,78,159,252,49,192,236,39,128,96,47,0,24,47,0,88,39,243,40,54,0,232,52,0,28,63,131,248,16,36,10,51,131,140,48,0,12,48,0,12,32,116,4,96,0,2,32,253,2,33,194,130,35,231,68,19,126,68,51,60,68,23,0,216,15,24,224,7,219,224,7,255,224,7,255,160,104,68,160,17,255,64,44,0,224,59,255,48,36,0,200,40,0,40,56,0,24,59,1,248,56,230,24,83,199,168,85,9,40,80,8,40,208,4,20,32,36,26,112,24,18,240,103,50,209,219,50,145,167,58,57,125,124,121,1,124,188,60,247,71,155,136,137,255,4,145,252,24,252,0,10,240,8,10,248,16,30,248,16,6,244,225,252,233,2,4,247,4,28,254,4,116,252,8,56,252,8,24,255,48,48,250,192,8,250,192,4,58,224,4,250,192,2,185,192,10,253,128,8,253,192,56,255,96,88,249,112,144,249,184,48,255,248,32,255,223,192,246,253,192,64,15,224,64,112,224,128,128,112,160,0,56,160,0,24,224,112,92,225,254,252,195,231,254,198,249,60,204,28,252,204,109,248,220,1,184,208,0,120,136,0,48,136,1,48,136,1,96,220,3,224,220,123,224,254,255,224,255,131,192,255,133,128,255,199,128,255,255,128,243,255,192,2,27,40,34,196,136,49,132,228,53,59,84,180,196,147,184,3,25,249,0,29,18,96,42,194,240,106,165,140,250,4,56,170,20,80,132,148,0,68,166,0,36,134,0,40,134,3,40,71,0,136,92,28,122,78,31,185,86,16,60,151,51,180,151,3,18,131,51,245,145,31,228,190,224,28,255,196,60,255,114,42,207,207,178,255,129,226,199,254,60,223,121,252,248,254,126,248,198,78,200,16,110,248,0,12,120,0,4,248,0,12,248,0,12,248,7,204,248,1,140,124,0,24,126,8,88,250,0,24,254,1,176,255,128,48,244,224,120,116,120,248,248,31,126,224,2,252,232,2,254,252,0,126,240,13,254,224,7,255,234,227,231,241,224,15,241,255,127,243,199,254,227,154,118,227,136,31,249,128,3,253,128,2,123,128,6,127,128,22,127,128,118,127,128,38,63,135,30,127,134,6,127,128,238,127,192,14,23,240,14,7,252,30,142,63,254,255,199,254,255,192,254,255,192,46,255,192,6,255,128,6,255,56,6,254,60,6,254,7,6,222,31,62,254,10,102,222,0,124,206,0,92,248,0,72,120,8,8,48,3,200,48,0,24,112,0,16,240,15,144,242,0,96,243,6,32,233,128,64,236,192,128,244,49,0,246,31,0,20,44,128,24,74,192,17,138,32,4,63,240,49,192,26,35,0,26,38,0,18,38,192,52,77,244,116,200,12,148,40,112,244,92,0,136,216,0,72,44,0,44,151,2,60,74,1,220,36,0,20,84,3,216,178,12,88,79,3,148,151,193,55,19,243,121,1,255,244,49,127,201,28,2,120,28,0,60,60,0,60,56,0,30,56,0,30,120,0,30,112,1,254,112,11,14,112,60,26,119,227,62,116,103,42,104,64,2,92,64,18,76,64,18,110,33,10,108,32,242,108,32,2,47,35,180,44,103,248,46,96,126,110,96,15,207,48,15,159,30,63,155,3,255,32,0,58,32,0,12,32,0,2,64,0,2,95,252,2,62,3,194,77,160,50,92,56,12,76,12,14,76,247,28,200,40,100,200,0,116,232,0,168,240,4,136,104,8,136,72,4,144,72,3,16,72,24,32,40,6,32,20,0,64,138,24,64,101,1,80,50,195,40,41,61,164,112,0,26,112,0,62,112,0,14,96,255,222,127,128,30,127,0,6,126,24,2,126,14,2,124,1,6,108,14,220,108,0,60,76,0,36,36,0,4,36,0,4,60,0,20,100,1,152,196,0,248,68,14,80,66,29,240,66,48,32,67,17,224,33,161,128,32,240,192,16,127,192,7,255,112,15,207,248,15,129,252,31,0,124,62,0,6,62,0,6,62,0,6,62,56,6,92,14,4,124,63,52,120,20,76,56,0,120,56,0,40,24,0,72,40,4,72,56,62,72,60,127,144,126,207,112,173,193,224,191,199,96,95,195,96,47,231,224,23,255,224,15,255,192,32,126,40,33,128,56,38,0,8,40,127,200,49,128,52,38,0,12,38,56,4,36,4,4,36,58,60,36,20,76,44,0,244,36,0,172,12,0,132,52,4,72,84,6,72,84,29,136,84,33,144,148,30,144,18,1,16,26,14,32,9,2,64,4,128,128,132,101,128,130,62,192,15,3,192,31,14,48,28,24,8,126,96,12,127,192,14,61,128,14,127,184,12,127,188,28,63,115,206,127,112,142,118,195,220,127,224,156,121,224,8,125,96,4,47,224,36,127,224,60,126,192,120,63,193,216,63,3,156,62,34,28,126,56,48,118,24,112,252,15,240,252,7,240,29,192,232,24,130,68,56,1,4,56,11,4,113,38,82,97,15,146,129,0,10,130,48,74,130,248,242,69,13,148,132,121,244,132,33,84,68,0,136,162,0,136,162,4,148,146,3,20,10,24,116,10,103,178,12,200,50,8,3,41,42,226,230,81,119,163,160,191,194,112,95,68,208,16,3,144,16,3,144,16,3,144,116,2,147,163,129,150,124,112,188,0,26,223,128,248,62,99,108,155,245,200,144,128,140,136,0,8,136,16,8,136,32,28,72,32,29,72,60,25,68,16,26,68,0,22,68,98,30,70,24,110,69,0,126,69,0,190,196,193,62,254,122,63,128,55,254,16,63,2,32,227,250,89,60,6,90,192,14,93,48,26,218,28,52,100,7,124,20,58,84,200,92,68,52,0,66,196,0,34,194,0,34,49,3,36,65,0,206,50,3,56,236,78,52,44,63,206,78,12,78,156,7,154,62,0,82,111,65,154,7,241,252,1,255,244,159,127,145,33,128,4,92,127,248,82,128,11,149,112,5,189,28,5,186,2,2,170,112,50,148,40,74,140,0,141,144,0,245,176,0,173,144,0,74,240,14,74,80,1,140,208,60,8,208,35,16,200,29,144,200,2,160,96,12,64,84,0,128,17,1,0,2,131,192,5,124,160,176,0,0,120,0,0,120,0,0,124,0,0,248,0,0,241,1,0,228,128,0,248,66,8,249,240,12,247,126,60,242,126,248,226,0,8,242,0,4,242,0,4,241,0,8,115,2,8,99,199,136,87,31,240,123,120,112,119,240,48,127,224,48,239,224,48,252,243,32,222,127,240,145,73,40,136,255,248,67,0,8,124,255,244,35,0,20,44,0,36,40,192,196,60,61,178,60,241,98,68,73,2,116,1,4,80,0,132,8,0,68,32,4,68,16,3,132,20,3,228,12,30,104,20,16,168,20,147,136,18,128,16,33,208,144,100,121,184,164,31,214,144,135,213,33,255,224,39,255,240,47,194,208,63,128,72,63,0,12,62,0,4,62,0,4,62,48,12,60,12,24,28,2,40,40,60,120,36,0,72,36,0,68,18,0,36,18,1,36,10,0,200,12,1,40,10,7,248,10,14,56,13,15,208,21,8,144,50,140,184,178,125,188,65,63,235,34,63,250,36,64,5,36,191,249,91,192,6,154,176,6,164,248,12,165,12,156,165,3,36,153,28,60,90,40,42,74,0,34,42,0,18,90,1,18,90,1,149,131,0,229,131,1,181,43,7,29,37,7,253,77,142,12,77,136,206,138,232,78,21,248,95,44,252,253,83,63,244,12,255,32,103,82,244,88,255,43,239,0,245,236,0,21,185,193,154,147,163,254,180,36,52,81,197,212,114,166,180,112,4,20,80,0,20,80,0,20,104,2,28,184,22,36,168,0,36,168,30,36,168,35,34,174,0,98,78,28,115,91,0,107,101,0,167,192,201,36,195,63,68,135,255,240,143,3,248,76,0,8,44,0,4,46,0,4,119,28,4,118,35,12,116,1,142,116,14,20,102,20,60,68,0,44,80,0,34,72,0,18,32,0,146,24,0,114,16,0,4,48,1,36,80,2,248,80,0,8,200,0,72,169,0,16,168,192,16,20,48,32,84,79,192,192,31,224,206,127,240,115,255,248,65,255,252,131,255,198,255,0,2,255,0,3,255,128,15,255,128,19,255,0,30,254,15,213,254,56,13,255,7,9,255,10,5,103,0,3,42,0,2,36,0,30,16,0,95,24,0,63,91,0,194,208,128,14,104,51,30,36,15,254,178,3,254,127,255,252,127,255,252,127,254,252,127,0,254,124,1,30,120,111,206,103,225,226,111,60,28,118,30,52,62,42,76,46,0,248,36,0,104,32,0,8,32,0,8,24,2,88,24,7,144,56,63,208,232,56,224,166,193,224,162,14,96,243,198,192,209,230,128,200,255,128,200,255,128,162,222,156,82,49,28,42,192,204,43,15,226,83,48,18,84,192,10,73,184,4,43,14,28,47,3,54,30,28,68,38,8,180,42,0,228,35,0,64,23,0,64,18,128,36,10,1,32,6,0,196,6,0,8,3,3,192,15,0,8,36,129,16,68,32,0,98,24,32,113,23,192,72,222,56,73,180,4,151,80,2,152,7,226,102,88,25,80,128,5,157,166,5,165,39,5,96,72,239,176,71,149,41,73,29,43,64,10,166,64,10,32,128,4,55,128,4,76,128,104,68,64,16,194,64,240,50,65,16,196,128,32,25,240,32,3,142,48,152,67,208,120,35,72,132,100,234,131,153,50,144,250,10,173,4,242,116,248,10,213,0,6,77,0,4,101,97,44,85,63,118,77,2,70,101,60,118,37,0,70,53,0,36,45,6,36,17,11,196,28,158,52,20,147,232,34,84,40,74,64,64,21,64,22,131,248,161,72,191,240,37,63,232,18,95,246,0,191,224,1,64,24,2,128,4,10,0,4,18,0,2,20,15,242,44,48,14,44,192,2,87,128,3,87,0,63,87,30,107,151,10,67,169,0,35,169,0,18,148,129,146,74,128,227,41,192,18,36,195,226,19,128,4,10,128,4,10,80,11,57,44,18,210,147,228,36,79,203,134,0,30,136,0,2,177,255,194,159,128,61,175,6,2,215,1,2,199,25,131,214,6,206,198,3,28,100,0,36,68,0,56,128,1,28,128,2,16,0,1,16,16,0,160,16,14,64,144,3,128,136,1,0,4,1,0,2,6,0,32,6,0,33,9,192,16,241,32,16,65,24,43,255,224,27,255,240,61,128,144,52,0,8,118,0,8,118,0,4,116,0,28,118,120,36,52,78,68,56,0,184,72,60,212,72,80,68,40,0,68,16,0,36,8,3,36,12,1,200,42,6,56,42,13,232,47,10,8,72,129,144,86,80,32,81,56,32,88,159,192,86,79,224,48,31,132,33,224,116,34,31,140,69,224,122,170,0,14,180,0,122,169,240,142,91,9,122,72,113,170,88,161,10,72,1,4,80,0,132,32,4,132,68,3,6,76,28,229,68,48,57,134,79,136,174,16,24,11,3,152,10,132,56,106,64,43,145,48,64,32,143,144,208,64,32,164,4,58,139,248,10,148,4,30,109,255,230,86,0,26,84,0,10,84,0,12,105,224,4,74,24,52,80,240,204,113,137,250,80,1,154,88,1,10,44,1,12,26,0,140,24,9,8,40,6,16,72,25,144,72,55,208,84,1,32,84,14,32,147,140,192,197,127,80,144,222,64,96,4,62,96,35,60,32,32,252,52,64,252,23,128,120,28,2,24,24,3,248,21,131,248,30,0,56,13,128,248,12,225,248,13,162,184,12,2,24,4,2,24,12,2,16,4,2,16,2,12,48,2,31,32,2,51,224,7,2,112,7,134,240,15,193,248,127,243,254,255,255,255,15,255,240,15,255,248,31,142,60,60,0,12,120,0,12,120,0,12,120,0,12,115,192,124,116,97,204,19,177,162,48,0,10,48,0,10,16,0,4,48,0,4,48,26,4,16,26,8,16,96,8,8,252,144,8,128,16,12,0,48,58,0,60,89,0,114,136,192,169,132,63,41,162,57,248,106,89,252,217,25,252,240,49,252,240,62,12,240,192,12,243,0,28,254,60,124,254,6,92,252,30,116,244,8,68,236,0,36,234,0,36,218,0,24,218,0,24,234,0,232,243,0,8,124,0,248,126,3,232,57,0,76,120,128,12,232,96,30,160,24,63,164,7,255,129,166,8,67,2,200,76,127,248,39,192,8,60,0,4,86,0,28,167,0,36,150,120,120,182,140,104,202,28,68,80,40,68,72,0,36,32,0,20,16,1,20,28,0,228,20,0,4,52,0,20,48,1,232,48,2,8,72,128,8,196,64,30,34,56,33,33,7,192,32,130,32,80,255,133,163,0,98,76,255,153,159,0,117,161,0,11,215,128,69,168,96,229,163,33,21,165,130,197,160,2,165,160,2,5,160,1,10,80,34,10,80,28,10,208,0,20,80,126,26,80,129,19,152,24,58,60,0,84,75,0,214,136,129,81,132,126,76,66,0,147,33,255,32,204,134,26,210,137,1,210,144,129,204,129,65,64,175,33,63,88,17,3,23,17,28,26,17,32,24,10,47,0,14,185,192,2,163,160,3,85,2,210,80,5,243,104,24,178,232,1,155,20,18,15,12,28,207,134,49,142,67,18,159,51,208,126,15,248,254,17,255,253,32,127,251,51,50,84,36,211,212,41,0,2,74,127,50,145,128,202,193,0,10,178,56,28,138,7,52,2,60,120,130,80,168,130,0,136,66,0,68,34,0,228,50,0,8,49,3,104,49,14,56,78,27,220,100,10,16,134,8,208,69,128,16,158,104,184,89,188,252,56,79,235,0,0,0,66,240,130,190,64,9,161,63,137,144,192,126,181,0,10,173,12,4,165,31,4,162,35,198,186,15,12,162,2,28,82,0,20,110,0,8,154,0,4,66,0,132,18,0,120,216,3,24,56,7,248,88,14,24,180,16,88,82,32,208,157,96,224,32,248,96,32,47,252,88,63,195,68,62,14,88,0,18,102,0,13,216,127,241,135,128,15,246,112,2,148,156,2,160,7,15,96,120,26,64,92,50,96,8,90,64,0,68,48,0,68,112,0,36,176,1,36,176,6,200,184,12,56,116,31,240,54,52,48,41,1,144,84,160,32,74,114,96,101,54,240,146,159,200,1,99,10,34,193,10,37,92,50,34,99,129,110,64,125,176,64,2,136,152,2,197,14,7,186,3,158,202,29,26,161,14,60,85,0,42,117,0,18,34,0,10,5,0,10,5,0,116,13,0,4,29,0,232,54,130,8,82,128,204,146,192,16,12,176,20,51,72,50,192,191,210,11,133,10,72,125,10,87,131,18,158,120,234,156,6,18,70,129,228,54,128,12,173,24,12,85,60,188,178,3,180,90,14,42,186,20,34,90,2,18,185,4,10,177,0,202,63,0,60,86,1,76,151,3,140,38,7,248,47,133,8,95,8,120,167,204,94,51,252,240,14,15,224,99,251,70,52,14,180,153,242,84,210,29,146,178,0,26,149,128,122,151,228,74,140,48,148,148,253,244,149,81,84,148,1,12,148,1,12,84,0,140,84,4,148,68,3,28,36,8,146,58,31,42,58,0,75,119,134,108,172,113,187,71,14,112,148,192,204,42,63,35,204,0,176,70,0,1,96,0,0,65,255,224,131,192,24,140,0,4,50,24,5,78,40,2,86,12,2,84,126,7,68,43,26,192,0,60,192,0,84,184,0,68,72,0,40,72,0,40,136,7,40,152,0,208,20,8,48,36,7,48,98,0,80,162,6,208,81,1,160,136,131,160,132,127,144,4,0,0,72,0,0,193,249,128,179,143,224,167,192,24,199,240,40,200,185,252,153,97,204,152,0,246,152,0,54,152,0,6,152,2,6,160,27,6,160,0,4,176,154,4,177,251,141,139,1,201,134,8,105,196,0,41,206,0,49,199,0,99,231,205,243,247,255,251,255,255,247,31,255,240,63,252,56,63,192,24,124,0,24,124,0,12,124,0,60,124,0,76,124,0,214,60,248,230,61,188,2,60,226,2,124,2,2,60,0,2,60,4,2,60,5,210,60,1,178,58,7,34,62,15,4,45,0,228,45,128,4,59,64,8,59,32,8,11,156,62,11,135,243,159,255,240,111,255,248,159,255,248,63,225,76,255,192,6,63,0,3,127,128,3,127,56,6,127,15,26,127,1,178,127,14,60,126,5,42,114,0,34,24,0,18,8,0,18,30,0,212,18,0,100,49,0,180,41,3,248,36,143,40,233,64,80,240,48,16,255,78,56,127,55,252,228,131,16,34,76,16,145,48,112,9,129,136,6,14,4,24,16,12,96,96,72,129,193,212,133,198,28,157,201,146,126,227,10,62,192,4,86,128,4,75,0,28,69,0,40,32,128,12,24,0,124,31,0,238,28,128,202,28,128,154,58,96,136,201,17,24,100,140,56,50,67,252,8,98,48,2,29,20,132,192,196,104,158,20,155,97,226,66,128,11,37,112,10,149,24,12,106,7,25,138,122,56,74,20,123,186,0,84,66,0,37,90,0,39,33,1,36,49,0,201,81,0,8,111,1,232,171,2,8,107,0,208,78,128,16,204,96,56,73,152,84,144,103,170,214,0,80,220,127,40,167,128,232,168,0,19,144,0,213,150,0,242,47,0,149,33,195,209,167,230,130,193,2,10,64,66,12,64,1,10,192,1,10,32,57,14,32,30,8,192,0,8,64,0,22,224,29,20,224,96,18,208,6,42,216,0,43,94,0,170,91,192,82,146,63,211,170,131,16,177,68,12,85,68,50,219,191,194,42,67,138,31,128,26,70,0,58,49,120,74,42,134,122,20,28,84,44,40,68,44,0,36,44,0,24,52,0,24,156,1,232,70,2,120,51,7,252,27,135,30,199,12,12,79,8,230,47,153,5,157,88,116,24,191,241,196,111,250,255,0,28,254,0,28,254,62,30,255,201,30,255,133,30,254,7,58,126,24,254,253,120,102,255,254,30,248,227,54,248,141,46,249,128,36,248,128,4,120,128,0,120,128,20,124,128,244,56,128,36,56,192,236,72,129,56,15,128,88,3,192,60,3,48,52,7,12,240,5,131,216,28,0,18,56,0,1,44,0,1,56,0,0,50,0,0,127,252,0,127,51,192,127,60,113,250,4,13,254,62,7,244,23,31,236,0,115,232,0,227,168,0,142,144,0,140,16,0,140,48,12,136,48,39,152,112,58,184,232,7,184,228,6,124,194,28,252,97,3,252,33,131,252,224,255,242,195,0,14,134,0,2,150,56,1,86,78,7,116,3,159,116,14,34,84,16,62,132,0,34,164,0,17,84,0,9,80,0,201,32,0,50,24,1,10,16,7,250,16,1,14,16,0,244,16,0,4,48,1,164,48,128,232,40,96,8,116,56,232,186,15,240,41,81,240,41,206,122,43,0,14,42,63,246,43,192,14,38,61,2,46,70,2,60,56,58,60,80,38,44,0,90,80,0,84,80,0,68,80,0,34,32,6,34,48,0,196,56,30,4,88,48,100,80,71,184,80,8,88,200,1,136,232,0,16,229,0,16,242,195,32,249,111,96,117,63,176,202,5,10,202,255,254,223,0,6,224,0,6,240,127,254,127,128,4,63,0,4,63,131,130,119,4,230,115,0,10,42,1,204,34,2,140,122,0,10,112,0,4,56,0,4,30,0,52,18,0,24,18,0,232,41,1,248,40,2,136,100,0,112,146,0,32,137,17,112,68,143,240,127,209,223,126,48,63,124,58,31,63,255,158,63,0,254,60,0,62,56,0,14,55,195,110,20,102,60,55,129,196,48,0,6,48,0,6,48,32,14,48,96,14,24,24,12,27,0,8,9,243,200,8,126,8,12,28,16,4,0,16,14,8,48,15,0,120,30,193,172,62,255,44,160,62,60,224,1,92,192,0,124,232,0,60,248,31,252,240,224,12,225,142,4,215,3,68,254,14,248,254,7,56,206,0,16,246,0,16,222,0,8,218,0,8,202,0,136,106,0,112,114,1,160,122,3,16,238,7,240,194,4,48,226,8,224,242,136,64,234,200,96,226,63,224,17,255,224,19,255,240,11,255,240,27,193,248,27,128,8,59,0,4,59,128,4,59,228,4,61,195,140,61,192,216,61,131,152,53,133,8,49,128,8,20,0,4,16,0,36,8,0,56,22,0,200,18,1,136,18,0,112,57,0,16,40,128,96,100,96,32,163,24,32,16,199,192,176,99,243,33,156,15,66,96,3,69,128,2,138,0,50,138,31,254,116,96,4,88,6,4,80,139,134,95,128,206,39,7,138,182,5,28,235,0,20,163,0,12,150,128,4,178,0,100,62,0,24,86,0,8,82], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+215057);
/* memory initializer */ allocate([0,240,145,1,16,16,128,112,40,64,16,44,48,40,195,15,232,248,0,12,253,76,4,255,196,6,255,68,2,255,6,131,255,239,29,207,144,253,255,251,61,255,252,77,255,15,215,254,62,6,254,0,7,246,0,7,243,2,7,227,6,167,243,3,199,115,0,6,123,1,230,127,7,44,127,0,142,251,129,143,250,64,31,123,48,43,231,255,195,113,3,200,22,192,0,8,63,224,81,192,28,98,0,12,196,96,187,36,158,193,104,4,129,88,124,250,8,4,130,168,8,68,152,0,68,88,0,36,88,4,36,48,2,200,112,0,12,72,30,236,168,48,44,136,47,234,108,40,42,214,35,89,83,144,82,145,242,245,48,255,235,252,128,60,254,0,2,248,0,194,240,3,50,240,2,19,241,242,18,59,140,27,123,130,63,119,241,198,124,24,15,60,124,254,28,9,142,44,1,92,60,0,140,20,8,136,20,0,144,20,7,32,52,64,64,108,31,192,218,16,128,146,15,128,145,0,128,144,128,128,204,255,192,1,254,192,3,255,192,7,255,240,15,199,248,31,193,248,31,192,124,31,192,62,31,192,6,31,134,6,31,31,6,55,1,148,54,3,124,36,0,36,20,0,40,16,1,8,24,0,152,28,0,120,28,0,8,20,1,208,102,0,240,99,0,32,225,128,32,144,248,64,144,127,128,115,255,128,12,2,0,17,255,128,23,255,192,23,202,224,23,0,16,14,0,8,46,0,8,46,96,28,46,188,56,44,6,104,92,56,240,76,12,168,86,0,136,52,0,72,44,2,72,16,5,200,28,28,112,26,51,152,26,76,80,57,3,144,116,129,40,169,116,236,68,191,214,237,192,35,247,193,169,211,255,241,195,147,197,178,129,115,178,191,191,176,115,231,183,92,252,188,82,127,242,157,7,175,9,142,131,0,62,233,0,35,103,0,14,118,0,8,252,0,12,252,3,208,252,16,24,252,7,48,252,0,64,254,0,128,255,129,0,253,98,0,188,60,0,127,255,232,63,240,12,127,0,4,126,0,4,126,0,2,124,0,2,124,0,2,62,14,7,79,25,142,102,0,202,87,1,28,75,6,18,50,0,10,40,0,10,32,0,4,120,0,100,100,0,24,84,0,88,146,3,184,138,7,248,169,6,16,101,0,216,114,84,118,73,45,241,84,99,36,177,128,230,162,0,94,60,0,28,88,0,14,208,56,7,240,198,1,161,179,1,161,13,131,226,62,99,226,14,22,198,2,110,134,0,172,204,0,60,76,0,56,156,24,48,236,14,96,220,54,192,132,29,192,134,55,128,131,7,0,65,191,0,97,255,0,19,255,0,31,253,112,255,254,136,127,7,252,126,0,12,126,0,14,126,0,6,126,0,6,126,240,6,252,44,14,204,54,62,220,20,116,184,0,38,128,0,2,192,0,2,224,5,4,240,3,196,240,15,4,208,62,104,148,0,56,114,0,136,113,0,8,16,128,16,48,112,32,48,31,192,248,224,3,249,0,15,240,0,51,244,0,33,252,63,225,248,200,63,248,156,7,241,3,3,241,9,159,241,0,59,241,0,43,171,0,3,226,0,38,194,0,36,254,1,36,254,27,204,126,118,108,127,117,248,247,224,248,179,227,48,185,241,224,112,249,224,96,255,192,224,127,192,88,199,240,94,56,13,181,103,227,183,120,31,182,193,194,183,128,98,107,8,33,83,7,199,163,2,202,234,0,15,98,0,10,148,0,6,144,0,4,152,0,34,84,0,50,84,0,12,148,0,52,148,128,200,36,64,24,36,96,8,200,220,16,148,39,16,22,92,240,33,85,72,64,0,1,65,255,251,134,0,7,152,255,251,163,0,1,142,0,5,212,0,5,173,128,5,168,64,13,168,249,23,168,109,246,144,1,102,80,1,6,144,1,6,16,8,132,40,57,136,104,70,72,168,128,76,84,31,52,204,32,164,4,86,162,130,137,90,48,0,88,15,64,32,149,61,4,210,194,6,168,1,142,197,48,114,161,120,3,154,140,3,82,4,7,98,63,142,83,10,26,67,0,60,146,0,68,54,0,4,158,0,12,46,2,88,206,29,144,156,248,224,36,7,64,70,16,64,138,14,128,137,4,128,18,192,160,128,34,44,101,220,74,26,34,9,24,88,32,33,1,168,38,63,200,150,192,55,138,112,1,128,248,13,145,12,5,153,3,13,74,120,61,74,56,5,34,0,250,50,0,74,90,0,36,46,3,36,86,12,196,156,48,108,76,39,168,46,8,168,191,3,16,223,160,16,47,161,56,199,251,48,67,255,248,7,127,224,16,255,132,35,0,114,36,255,138,75,0,118,85,192,14,84,112,122,84,249,202,148,83,234,84,2,138,52,2,10,136,1,9,72,27,9,40,4,10,84,115,8,92,255,152,217,227,212,56,129,146,29,29,186,29,13,22,63,8,177,159,218,240,67,255,242,160,255,1,24,119,152,158,159,196,93,96,58,155,128,11,76,0,10,58,120,6,148,15,29,116,2,116,140,56,78,252,8,121,122,0,68,80,0,38,48,4,36,50,3,206,59,1,8,52,30,108,92,127,248,76,104,56,174,7,136,134,64,28,103,65,54,19,235,103,9,255,208,198,127,177,97,159,97,9,0,104,14,1,248,30,0,40,28,60,56,112,195,216,97,240,120,65,252,232,98,28,252,110,96,44,84,0,4,116,0,4,100,0,4,60,0,36,60,3,196,28,3,100,30,15,124,31,28,124,23,16,8,55,1,136,126,0,24,111,0,24,79,192,56,92,227,248,60,61,252,16,1,199,112,0,131,96,0,3,200,0,3,224,128,31,225,224,31,50,240,63,228,12,111,76,248,127,200,0,7,200,0,7,232,0,131,72,0,3,192,0,3,168,6,199,168,3,134,248,0,6,152,1,70,240,31,206,240,0,14,54,3,31,49,128,63,112,64,127,240,48,255,228,0,2,209,0,2,230,0,2,228,63,130,248,56,98,86,119,122,145,200,254,221,195,204,165,135,156,167,129,24,131,128,0,171,128,0,15,128,8,195,128,120,161,128,48,161,135,240,171,131,248,215,192,48,255,192,96,251,224,32,49,248,32,240,254,48,120,127,224,120,119,128,130,255,240,133,0,8,40,255,232,241,0,20,50,0,18,2,96,42,68,244,123,52,28,249,36,225,139,136,81,235,168,1,73,136,1,10,72,0,138,44,8,138,44,63,4,76,255,132,94,177,216,143,159,216,55,128,116,55,142,122,75,128,122,73,136,226,133,204,229,5,255,164,12,127,224,24,196,144,27,7,136,28,0,36,16,63,244,48,192,12,49,0,60,35,120,100,55,156,248,30,184,168,46,80,132,38,0,132,34,0,68,88,0,37,80,2,37,152,1,197,46,0,5,42,1,229,233,2,10,209,1,202,145,192,20,49,224,23,35,156,58,98,195,242,192,30,240,192,39,44,128,6,16,192,2,18,208,10,18,208,31,50,240,96,202,224,152,58,192,166,76,209,15,124,241,20,84,240,128,4,240,128,36,249,0,4,249,0,4,116,128,228,126,128,4,62,65,100,63,228,8,63,224,200,63,240,24,71,240,16,129,248,120,4,231,248,96,97,136,72,158,116,33,0,4,66,0,4,66,0,2,130,1,130,129,0,114,130,11,167,130,0,74,154,7,140,162,26,28,170,0,10,164,0,6,96,0,6,100,16,34,72,8,186,36,8,70,42,0,254,42,1,132,19,1,56,17,128,88,40,84,136,36,61,132,66,139,8,63,15,252,63,0,242,63,0,2,127,128,2,127,0,2,127,0,2,62,24,3,62,63,15,124,99,223,124,26,214,124,0,4,62,0,2,126,0,2,60,0,10,16,1,202,20,0,242,12,7,252,12,15,252,26,28,172,57,28,228,120,185,134,124,249,154,125,63,252,125,31,254,16,0,240,48,0,120,32,0,24,112,0,28,112,0,28,112,28,30,112,246,62,113,187,254,115,70,62,98,62,124,70,16,212,98,0,140,102,0,8,102,0,8,70,0,144,86,3,176,98,56,48,118,63,224,95,4,224,95,134,192,187,193,128,184,255,128,188,255,192,74,255,192,46,189,116,41,255,148,78,0,106,81,255,154,110,0,106,112,0,30,166,0,117,161,145,197,160,115,5,163,132,229,160,197,69,160,4,5,160,0,5,176,34,13,176,54,13,176,127,13,176,99,141,115,255,205,123,194,254,125,128,186,109,0,10,74,128,228,137,137,231,57,255,200,140,64,0,144,127,128,161,255,192,71,255,224,79,129,16,47,0,8,110,0,8,124,30,56,124,48,68,124,0,124,116,6,84,116,12,34,122,0,18,74,0,18,88,0,98,40,0,42,36,0,220,18,1,230,12,1,6,4,3,116,12,66,60,20,51,56,36,15,252,36,3,252,31,0,132,31,33,172,30,19,197,28,0,115,24,0,15,16,67,195,23,1,3,14,64,27,30,240,7,52,12,23,20,124,254,56,41,206,8,1,118,8,0,6,8,1,6,8,1,4,8,15,12,8,7,8,12,114,24,13,255,144,2,7,224,114,12,96,105,0,96,225,128,224,202,127,16,42,128,8,199,15,232,132,112,16,200,128,8,211,0,56,226,120,72,196,6,248,142,56,168,156,80,132,124,0,68,84,0,36,68,0,36,46,0,200,18,1,56,14,3,248,6,3,44,13,2,200,20,128,40,20,64,24,50,50,60,105,143,244,166,99,240,81,146,252,252,0,7,252,0,7,252,0,3,252,0,3,248,96,3,248,56,3,248,28,3,216,118,63,240,84,67,240,0,114,208,0,1,224,0,2,192,6,1,192,4,1,224,3,66,224,28,66,208,63,34,208,16,116,200,3,60,200,0,4,198,0,4,193,128,0,64,96,0,96,95,32,80,255,128,171,251,192,207,244,96,15,192,48,31,0,16,30,0,56,30,0,104,62,24,200,62,46,184,63,2,232,55,140,136,19,136,132,21,0,68,21,0,38,11,2,44,5,129,232,5,6,120,5,15,136,12,128,8,14,129,200,25,96,22,104,144,97,132,79,160,100,49,32,19,255,224,35,248,240,43,128,40,55,0,8,55,0,4,119,32,4,122,28,14,122,7,60,123,31,36,122,18,124,98,0,100,44,0,36,36,0,36,44,0,20,52,1,148,26,0,100,58,3,24,57,7,248,49,6,16,72,132,208,196,76,80,66,60,224,33,30,240,16,135,248,64,1,225,128,0,31,128,0,0,128,0,0,191,254,0,162,177,224,69,28,31,74,6,3,138,3,131,148,61,15,148,22,25,148,0,58,168,0,54,172,0,37,92,2,37,94,2,37,94,79,201,190,62,105,183,15,113,103,128,177,163,134,48,19,194,112,9,230,216,1,63,161,252,3,252,248,1,255,232,5,255,252,7,255,254,127,255,247,128,2,254,60,12,254,254,62,222,4,18,252,60,54,252,0,2,60,0,2,124,0,2,60,0,34,36,1,66,52,0,228,60,3,36,60,6,52,62,31,248,63,8,8,63,128,216,57,192,216,116,112,248,224,127,248,110,0,4,94,0,68,92,192,68,223,240,68,63,192,4,60,240,12,121,252,12,251,51,4,114,57,148,116,12,252,124,58,12,120,14,124,120,0,156,248,0,252,248,1,56,240,1,16,240,9,48,112,229,160,241,247,96,216,30,64,200,15,192,236,59,0,6,7,0,15,15,0,64,60,32,64,192,48,129,7,253,132,184,5,69,0,2,171,79,130,154,64,231,202,131,202,168,133,14,154,128,10,104,128,4,88,128,68,100,64,60,66,64,196,94,65,134,100,64,120,68,128,136,95,128,56,181,128,40,72,64,112,46,57,240,81,199,240,120,15,236,135,53,234,18,0,12,169,4,4,217,0,132,200,129,130,166,112,22,109,255,156,179,253,242,166,249,30,132,126,30,164,46,254,168,0,254,168,0,220,168,0,56,200,1,24,232,1,24,200,205,48,19,246,32,247,131,96,124,103,192,252,23,192,254,29,128,206,27,0,207,63,0,71,255,0,15,255,248,31,255,248,31,223,252,63,7,252,63,1,254,126,0,6,126,0,6,125,192,6,249,240,4,248,24,4,240,236,116,240,17,184,224,0,232,32,0,40,96,0,16,96,0,16,96,24,32,227,252,32,241,252,64,248,31,64,232,97,128,252,49,0,247,35,0,251,255,0,17,255,192,39,255,224,55,3,176,55,1,24,55,0,12,118,0,4,116,0,4,118,60,2,122,67,26,122,28,34,72,40,124,64,0,84,80,0,34,32,0,18,16,1,18,24,0,100,20,2,4,20,7,228,40,0,8,40,1,136,36,128,16,66,64,16,225,48,32,32,143,192,80,192,80,44,195,204,43,20,2,42,27,254,75,52,4,86,72,2,84,150,2,86,163,196,109,160,108,137,161,200,240,162,132,175,64,2,169,64,2,89,96,44,78,80,68,156,128,252,45,129,196,87,67,8,169,64,48,76,224,16,147,17,24,8,205,184,38,51,255,97,141,254,142,5,4,18,154,100,45,231,150,145,248,10,98,0,10,34,0,27,164,0,62,100,48,43,36,254,82,169,0,243,232,60,170,40,8,139,40,0,75,200,0,42,36,3,44,210,0,200,138,0,8,197,1,212,129,6,146,127,0,25,44,128,172,80,64,95,99,48,146,160,207,82,255,254,96,255,128,48,252,0,16,252,0,16,252,0,8,252,0,56,252,0,40,248,0,120,248,96,180,120,188,196,120,162,4,120,88,2,124,0,2,124,0,2,124,0,34,60,3,194,28,0,4,30,0,182,30,3,6,62,1,5,63,128,13,127,192,141,254,248,31,254,191,255,255,128,172,239,0,4,239,0,6,238,48,6,238,124,6,236,134,62,252,71,118,252,244,78,124,1,86,220,0,4,124,0,2,56,0,34,120,0,34,152,3,194,28,0,4,52,1,228,60,2,36,60,1,196,60,0,4,118,0,8,183,0,8,59,128,16,57,192,96,125,255,192,24,56,48,24,28,112,16,31,200,48,30,4,62,56,2,39,224,62,48,195,220,60,136,4,79,16,6,66,39,206,56,32,108,48,32,164,72,48,2,59,16,2,64,8,2,123,8,14,165,176,4,133,64,124,5,72,12,9,72,4,18,72,12,34,76,4,196,15,31,132,143,255,88,112,180,121,128,52,126,63,140,136,192,102,133,0,26,182,112,10,74,28,14,74,14,58,74,50,102,74,88,245,50,0,173,70,0,133,110,0,70,166,2,68,164,1,136,18,38,76,211,56,236,51,31,126,18,0,174,167,6,13,39,0,29,199,128,29,79,231,62,79,255,254,127,224,124,252,0,60,252,16,2,252,12,2,252,63,2,252,7,129,252,60,95,252,52,81,252,0,125,230,0,7,218,0,1,222,0,65,215,0,65,233,2,65,237,0,57,241,0,18,255,3,250,255,6,10,255,0,244,255,2,20,255,4,8,255,192,8,127,248,16,127,255,224,123,192,2,60,0,3,191,128,1,191,131,240,63,199,249,58,206,236,182,45,79,176,66,12,224,64,12,240,128,12,113,4,12,112,220,8,114,248,28,119,222,57,119,135,62,51,239,252,251,252,56,249,252,56,253,56,60,252,136,102,255,248,230,254,65,195,255,199,193,255,255,3,19,0,12,160,4,4,240,0,132,200,1,130,170,96,22,233,255,206,179,249,58,164,216,30,132,46,30,172,44,126,40,1,252,168,1,92,136,0,24,200,0,24,232,1,16,232,9,144,145,246,32,243,131,64,124,7,64,252,31,192,204,5,128,142,7,0,143,190,0,67,254,0,112,55,0,66,74,8,0,235,200,1,52,40,134,248,36,8,0,20,80,0,229,81,1,146,80,202,17,80,37,232,145,194,138,17,0,11,80,0,10,144,2,10,72,22,9,72,63,232,8,243,206,141,238,20,116,48,19,38,6,59,42,140,56,83,142,237,16,239,235,161,127,162,30,7,224,62,3,240,124,3,248,124,4,248,126,0,12,254,0,14,248,0,6,240,0,6,224,63,254,224,120,30,195,254,62,199,138,44,159,128,4,188,128,68,249,128,68,193,2,68,201,1,196,25,0,4,18,131,200,26,128,40,27,193,200,31,224,16,15,112,16,7,56,32,252,255,251,255,255,253,247,255,253,239,255,253,205,223,253,121,248,59,127,240,30,127,224,30,127,128,11,127,0,13,126,12,4,118,48,70,110,0,44,54,0,8,18,0,8,26,0,8,30,0,24,54,4,152,51,5,56,99,3,44,106,130,68,126,0,196,54,25,172,20,15,216,29,63,254,127,191,255,255,191,254,93,216,62,70,243,252,63,0,12,61,0,60,31,128,14,31,128,30,31,96,62,27,29,254,21,14,204,21,4,140,57,0,76,63,0,72,127,128,72,127,129,200,191,207,104,189,236,232,189,225,248,133,240,124,7,191,255,70,223,255,63,223,255,16,0,40,16,2,40,224,30,39,128,33,177,131,225,241,36,31,181,148,0,25,140,192,113,72,115,242,72,118,178,40,4,20,40,4,20,8,2,16,8,2,16,56,30,28,104,0,54,232,30,119,172,99,245,236,0,247,223,0,251,90,193,174,222,99,63,243,127,103,241,223,199,0,255,0,3,0,192,4,0,96,8,0,56,16,31,248,48,96,120,36,128,56,57,128,12,63,28,28,55,62,36,62,20,252,62,0,168,63,0,144,107,0,144,126,0,144,92,7,16,78,0,32,122,11,192,115,4,64,25,3,128,6,192,128,195,112,128,240,159,0,252,100,0,4,63,192,7,255,248,7,255,248,15,252,124,31,248,30,31,248,14,31,248,2,63,225,194,59,224,226,55,193,50,63,193,250,63,192,124,57,224,68,57,192,4,63,192,4,31,128,36,31,0,24,27,192,8,17,192,120,1,192,24,0,240,16,32,248,32,96,127,32,224,63,192,0,9,216,0,127,244,16,128,4,1,0,4,30,62,60,54,96,36,126,0,4,254,14,92,252,26,84,252,0,36,60,0,34,28,0,18,36,0,18,4,0,242,4,1,250,4,7,252,4,7,156,28,0,4,18,0,104,50,0,40,51,6,120,17,135,248,16,231,144,16,63,248,218,207,197,53,0,5,150,255,243,109,0,11,150,0,11,186,192,26,173,248,53,180,14,69,180,114,189,180,168,213,168,0,133,168,0,70,168,0,68,168,4,68,200,7,132,184,28,244,152,112,40,92,15,236,60,12,12,158,1,146,55,64,149,23,193,152,37,243,240,74,63,227,0,220,0,7,182,0,3,193,0,5,96,128,11,144,64,30,1,32,9,194,160,12,62,176,26,114,240,5,169,208,18,133,176,5,0,16,22,128,16,5,0,176,113,3,28,140,142,154,3,0,59,19,0,56,163,128,56,3,224,120,3,248,240,7,255,224,2,255,16,0,122,0,16,0,4,33,255,132,38,0,68,40,0,38,72,0,50,72,0,26,196,0,125,159,1,157,169,230,1,198,247,69,178,32,13,176,32,13,176,32,11,208,96,11,160,32,6,144,28,14,144,0,12,152,0,28,152,60,28,152,0,60,158,0,56,155,0,240,185,129,112,184,94,100,18,127,224,19,255,240,119,240,104,23,0,4,103,128,4,79,192,4,95,128,4,159,142,28,31,17,132,159,0,36,115,7,60,25,26,42,21,0,18,22,0,18,10,0,210,5,0,36,5,3,220,5,7,156,4,134,100,12,130,8,20,66,104,114,25,27,202,7,16,73,3,240,23,255,232,111,126,231,94,48,113,60,0,58,60,0,62,188,0,57,56,0,28,91,128,218,72,71,18,89,36,154,72,243,18,72,20,18,40,18,20,24,0,24,8,0,16,8,102,16,8,25,16,4,36,32,6,126,96,6,195,96,11,189,208,59,152,220,234,211,87,165,126,165,64,0,34,192,1,114,192,2,254,192,0,126,241,255,254,131,188,14,4,8,126,28,116,106,88,0,2,24,0,2,24,0,2,24,0,2,24,0,2,8,1,100,8,0,196,28,7,244,20,14,126,148,60,222,148,32,15,199,96,15,199,224,31,231,224,159,255,243,191,31,255,255,127,248,248,127,112,56,255,240,24,255,240,4,123,248,4,255,240,4,255,243,194,255,231,226,247,192,50,237,195,246,236,192,134,238,224,6,238,192,4,114,64,2,120,0,2,60,0,30,31,0,4,31,0,252,61,128,12,124,192,24,92,96,24,92,56,8,248,15,136,228,7,240,191,249,0,108,3,192,47,255,224,47,253,160,111,192,16,119,0,8,119,0,8,119,0,24,119,128,40,115,159,56,123,129,168,123,135,36,99,2,20,41,0,8,37,0,72,17,0,120,60,0,8,122,0,24,216,0,232,85,0,148,84,128,115,41,96,16,36,152,32,18,103,192,56,56,7,108,198,231,65,2,31,64,0,3,67,255,7,112,0,62,172,0,206,163,3,39,173,143,133,161,1,5,128,0,5,64,0,5,96,64,10,97,80,10,112,224,14,112,0,10,112,0,26,120,248,58,124,0,90,60,0,153,62,1,9,61,6,11,60,248,12,56,0,4,63,255,208,63,192,120,63,224,24,127,255,12,127,128,228,127,128,28,127,158,4,127,3,4,127,13,132,111,7,60,126,0,144,46,0,128,62,0,72,118,0,72,126,0,112,118,1,240,54,3,16,102,7,32,227,1,160,211,128,32,209,128,64,104,248,64,164,127,128,83,63,128,31,254,96,31,251,48,159,193,8,223,0,8,176,0,12,208,0,28,216,0,20,208,0,36,220,124,60,216,198,116,232,28,66,232,48,34,140,0,18,148,0,18,74,0,226,36,0,4,28,0,52,42,1,196,42,0,20,41,0,36,52,64,10,50,48,25,42,14,40,73,5,234,163,34,52,78,224,20,116,143,226,90,96,26,84,128,10,81,48,5,90,124,29,82,6,125,82,120,74,82,20,250,74,0,170,34,0,68,177,0,36,213,2,36,18,1,200,124,0,40,143,14,112,110,28,56,149,59,216,23,116,24,231,131,144,37,193,40,138,107,230,49,223,217,208,87,54,208,9,248,160,2,2,168,20,158,224,1,34,224,63,163,192,126,227,200,150,47,128,137,23,192,142,143,131,0,3,129,0,31,193,0,51,129,0,7,194,0,2,162,2,70,50,121,196,62,33,132,126,22,200,114,1,200,203,199,240,143,196,240,134,232,160,128,249,128,32,1,254,96,224,2,239,0,3,248,0,3,240,15,243,224,78,123,225,240,15,199,64,7,255,76,15,248,131,154,240,138,62,241,0,10,209,0,2,209,0,2,81,0,2,17,0,226,9,0,2,29,7,51,147,13,253,50,128,77,44,128,25,224,192,25,128,112,30,0,220,63,4,7,248,0,0,8,0,0,4,0,0,4,0,0,28,0,0,14,16,12,126,63,192,12,31,135,4,63,131,158,63,135,36,59,0,60,63,128,20,63,0,4,57,0,20,61,0,248,63,128,40,93,131,240,103,128,16,121,192,224,76,96,32,103,112,32,127,252,64,127,255,192,32,1,204,66,0,246,70,1,118,76,1,60,76,0,252,79,255,244,78,14,48,7,192,120,6,113,252,13,67,76,12,2,12,12,2,12,12,2,12,12,2,28,14,18,20,4,12,20,46,66,20,38,255,244,58,7,180,91,0,52,206,128,250,142,99,186,28,62,127,28,14,216,31,255,248,60,16,60,56,0,28,56,0,14,120,0,14,120,0,14,118,0,110,119,129,238,240,34,14,243,179,207,177,0,135,176,0,4,112,0,4,112,0,4,80,32,4,48,36,4,48,254,12,19,247,200,9,190,16,8,0,16,12,24,32,30,0,48,59,128,216,121,255,156,8,1,0,24,1,128,48,1,224,56,4,240,108,3,152,96,30,252,96,62,14,104,195,14,104,151,134,105,2,30,105,0,60,121,0,4,105,0,8,105,0,4,121,0,228,121,2,104,121,28,56,49,27,248,49,1,240,51,130,16,231,128,112,254,192,16,252,112,16,244,31,254,31,255,240,63,7,48,63,0,16,62,0,16,126,0,8,126,0,28,126,240,56,124,252,232,124,14,200,92,120,168,124,0,0,124,0,8,124,0,72,60,4,72,12,7,232,20,14,248,12,63,240,30,126,120,30,96,28,63,225,188,61,128,24,126,192,60,254,112,255,255,63,255,240,0,31,208,0,41,224,0,61,224,6,124,224,255,46,193,249,255,194,108,15,198,95,63,132,55,115,140,0,127,136,0,70,136,0,70,140,0,38,140,0,38,140,1,198,156,0,22,252,1,236,186,8,76,242,3,136,241,0,16,48,192,56,112,96,56,208,63,252,136,15,252,255,254,48,255,128,48,252,0,24,248,0,24,252,0,56,254,96,72,254,254,124,252,206,84,252,4,4,252,32,2,252,0,2,252,0,18,222,1,18,222,0,226,222,0,4,124,0,4,62,1,244,0,3,28,3,2,228,7,128,12,14,128,50,6,192,3,3,56,7,3,15,31,30,0,243,31,128,83,31,255,211,14,1,251,60,0,25,28,0,15,27,192,7,56,240,119,57,251,254,48,163,158,16,3,246,16,0,199,16,0,15,16,2,15,16,19,14,16,12,12,48,224,12,112,126,88,232,15,16,204,17,160,206,4,192,134,3,192,199,55,224,199,255,240,250,63,156,242,99,254,71,0,62,94,124,2,254,222,2,56,15,14,248,47,62,120,12,126,184,0,46,88,0,2,120,4,2,184,81,18,152,227,250,217,255,122,176,127,236,152,56,12,16,0,4,16,0,124,130,0,8,134,67,40,195,195,240,65,255,240,48,255,232,24,127,252,24,2,142,16,2,142,16,2,143,8,0,255,137,248,255,70,6,239,38,3,159,21,248,63,140,28,255,164,111,255,148,33,222,0,0,6,76,0,6,232,0,70,244,0,68,116,131,134,102,252,6,190,31,239,62,16,95,247,39,217,71,226,89,129,242,208,1,255,224,0,127,192,255,192,6,255,128,2,255,192,2,255,128,2,255,6,2,222,3,130,254,5,198,222,30,206,78,5,26,102,0,30,52,0,18,48,0,2,56,0,18,48,1,146,48,0,100,48,8,4,224,6,200,224,7,88,192,1,144,64,0,96,65,0,64,128,192,64,160,255,128,208,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,1,152,0,2,100,0,4,2,0,4,146,0,4,2,0,4,226,0,4,226,0,2,4,0,1,248,96,0,135,144,0,132,144,0,72,224,0,48,128,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,0,1,204,0,3,7,128,2,32,192,2,128,32,2,0,32,2,0,32,6,0,0,12,0,0,8,64,96,8,32,32,12,2,0,6,33,128,1,144,192,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,252,254,31,252,62,127,248,31,127,248,15,255,248,15,255,240,15,255,241,47,127,252,207,127,227,7,123,240,7,115,192,63,127,133,55,115,134,7,97,140,4,112,128,12,112,128,24,120,0,24,126,0,248,230,129,200,247,67,41,247,32,120,247,144,60,231,143,125,231,135,251,9,0,0,2,0,32,4,0,16,8,1,152,8,14,28,16,16,14,16,32,5,16,112,123,16,128,5,19,48,15,28,6,22,16,3,54,16,0,2,32,128,2,33,128,2,65,192,2,96,128,103,192,134,61,0,199,28,0,192,26,0,192,75,140,224,25,252,224,95,192,125,255,255,255,192,255,255,224,255,255,240,255,240,56,255,192,24,255,128,8,255,0,24,254,0,104,254,252,152,253,198,240,252,252,0,124,64,0,124,0,0,94,0,0,94,0,224,30,0,0,15,0,48,23,0,192,9,129,96,7,224,3,3,240,7,1,254,3,0,247,251,0,159,247,236,63,254,176,7,254,176,15,254,32,48,62,102,229,118,73,230,251,215,225,121,215,240,9,239,12,121,239,52,109,222,0,13,222,0,12,222,0,12,156,0,4,156,0,5,212,0,133,220,0,4,212,0,196,132,0,78,198,3,142,194,0,16,250,0,16,226,0,52,226,15,252,0,223,192,3,223,224,7,159,248,7,153,96,6,132,52,15,131,28,21,128,252,17,128,116,13,192,4,11,240,4,19,140,4,17,150,4,29,31,24,29,0,120,44,0,112,108,0,32,44,0,160,36,4,160,28,3,64,30,28,64,59,6,128,115,129,0,120,193,0,228,34,0,63,176,28,127,96,12,127,240,6,127,120,6,127,255,255,127,0,6,255,240,28,255,24,252,191,238,196,254,94,52,60,2,4,252,0,4,124,6,72,92,6,8,28,15,136,44,126,8,60,252,248,62,252,216,110,239,152,238,192,28,239,226,24,239,192,56,207,255,240,229,255,224,49,4,240,33,5,240,97,255,248,114,2,120,108,130,56,115,254,88,108,9,28,119,136,220,112,200,78,99,12,46,240,10,31,224,9,15,240,4,151,232,44,95,200,60,61,25,231,158,125,144,62,109,70,190,156,60,188,30,24,254,31,28,223,61,175,139,60,255,19,112,126,2,28,0,58,62,0,14,126,0,6,127,255,195,127,0,113,124,0,25,248,0,27,219,227,236,255,247,236,122,144,140,176,16,6,48,16,6,48,34,5,48,228,12,243,24,142,113,0,13,16,34,10,40,126,14,60,0,14,62,8,30,59,0,47,59,128,79,120,193,143,120,127,15,247,0,3,241,0,2,243,0,15,253,192,246,255,249,23,249,128,127,251,241,213,248,125,245,217,244,35,248,128,6,248,0,6,232,0,7,248,0,135,248,0,132,252,7,4,252,0,52,252,127,212,126,24,73,191,31,218,223,140,158,255,194,60,127,224,48,224,248,64,136,31,128,127,191,254,121,103,126,243,227,31,255,196,143,247,100,137,246,99,13,228,128,13,237,0,61,233,252,69,234,14,125,202,120,21,234,0,4,74,0,4,74,0,5,202,0,36,234,3,198,170,0,6,162,3,238,186,14,76,155,0,141,215,128,29,148,192,25,132,96,59,220,31,255,255,1,4,252,129,128,243,0,0,207,62,240,255,224,12,255,252,28,254,62,116,254,118,108,126,0,4,126,0,4,124,0,4,116,0,4,124,4,4,118,3,132,126,0,8,126,3,136,126,12,72,119,1,152,119,128,60,119,192,124,54,116,156,54,24,12,54,16,4,119,144,10,31,255,254,63,223,254,63,1,254,60,0,6,28,0,2,120,0,2,120,224,2,96,248,2,32,136,50,160,100,126,192,16,140,64,0,228,64,0,4,64,0,8,195,224,8,67,155,16,193,204,152,225,121,158,240,7,62,236,184,82,230,0,146,215,129,2,67,194,130,233,252,2,14,0,0,147,255,0,239,197,128,255,128,64,255,0,32,254,0,16,254,0,24,255,0,56,255,0,40,255,30,40,255,34,4,255,14,4,255,0,2,255,0,10,255,0,58,237,128,2,252,0,12,214,0,44,204,0,68,199,128,10,195,64,2,135,16,2,143,8,12,159,7,255,239,195,222,223,0,54,254,0,74,191,227,202,127,128,202,247,24,63,255,44,6,238,50,22,222,31,36,254,7,188,214,0,120,205,0,56,249,128,16,120,144,16,248,134,80,248,191,176,253,252,32,223,255,224,223,217,224,239,207,224,31,239,224,7,255,224,3,255,192,152,255,192,126,94,120,127,255,248,127,253,252,126,2,124,120,2,92,32,143,196,35,32,100,54,60,12,62,22,56,46,0,248,62,0,80,8,0,0,0,0,16,24,0,16,24,7,144,48,31,160,80,63,192,192,65,192,64,14,64,81,132,128,72,192,0,72,197,0,0,127,128,20,127,224,8,0,16,16,0,24,16,0,8,16,0,8,32,0,8,32,0,24,32,0,24,96,0,8,80,60,8,80,6,60,80,12,248,0,8,176,0,0,144,0,0,144,36,0,144,36,0,160,36,3,32,24,0,64,4,31,192,2,8,192,1,7,64,17,0,96,128,128,112,0,23,248,255,183,247,255,152,15,255,200,127,255,255,143,253,128,31,255,224,63,250,56,239,248,160,79,248,0,7,240,0,7,248,0,7,152,0,7,156,7,135,216,2,15,248,5,143,248,12,143,248,31,143,252,17,143,252,23,31,231,136,63,242,0,63,241,128,117,241,224,35,253,63,3,7,30,248,30,7,248,62,252,60,127,224,12,127,192,12,127,228,12,127,240,24,127,248,20,127,255,56,127,230,0,127,240,0,127,128,0,127,128,0,127,0,128,127,1,194,127,0,70,255,1,203,254,2,122,255,6,251,254,134,3,254,70,3,255,38,3,255,26,3,127,7,143,35,255,0,39,255,192,79,240,224,63,255,240,61,255,16,63,128,8,63,128,8,63,128,12,57,128,12,63,128,48,63,31,56,63,4,4,63,0,0,61,0,0,63,0,0,127,128,0,126,0,112,28,0,140,3,129,244,1,192,52,0,192,4,0,160,8,0,152,14,0,135,255,193,163,137,128,2,99,9,254,52,23,0,216,188,0,248,248,42,60,241,128,220,112,34,252,113,193,56,209,5,144,128,36,19,144,34,21,144,2,17,240,18,17,80,12,21,248,0,55,232,128,55,89,255,60,24,0,32,120,0,48,240,0,255,240,1,253,248,2,189,124,15,119,59,255,190,123,255,190,123,255,222,251,247,238,251,255,244,247,251,248,231,128,120,95,128,56,31,0,24,62,0,8,56,0,12,32,0,12,88,0,204,40,64,24,32,0,16,28,0,24,4,2,16,4,2,56,6,4,56,4,2,48,4,4,88,6,0,180,2,1,76,4,10,28,120,15,252,116,7,252,120,6,254,116,101,62,121,157,38,117,1,50,122,126,253,121,225,231,35,248,31,79,128,38,14,28,62,12,4,84,30,0,4,28,0,6,126,0,6,127,0,6,63,1,198,63,0,14,127,134,220,123,0,156,83,0,60,83,96,92,249,16,88,120,15,184,204,1,228,216,1,228,248,18,252,224,159,254,242,247,254,255,249,190,126,192,14,124,4,14,120,3,12,112,5,4,96,0,6,35,128,0,17,0,0,16,0,2,16,0,2,8,0,2,0,0,2,8,0,6,4,0,6,4,0,2,2,0,3,0,64,3,0,224,3,1,208,3,79,255,252,95,255,254,127,192,254,127,128,254,127,128,92,125,128,30,124,0,22,121,0,22,60,224,244,57,49,12,59,226,236,112,0,136,56,0,8,56,0,8,16,0,8,16,0,24,56,2,24,40,0,16,60,35,48,60,14,96,60,0,96,124,0,240,124,1,240,124,7,240,146,7,0,0,44,0,1,0,0,0,0,0,159,0,96,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,140,26,6,0,12,201,108,63,249,119,193,255,14,96,97,152,1,128,16,98,159,58,6,0,12,219,195,225,251,177,128,255,4,192,193,152,0,131,25,242,147,78,51,0,24,115,143,79,135,184,0,14,1,129,193,152,0,129,69,146,228,196,125,0,16,1,56,124,6,111,0,126,7,6,192,152,0,1,70,78,220,4,245,128,48,0,113,224,7,207,226,126,12,29,192,152,0,49,192,118,144,12,26,223,255,255,255,255,255,255,255,255,255,255,255,255,240,120,160,18,144,8,14,240,0,0,0,0,0,0,0,0,0,0,0,0,24,60,160,18,136,8,6,111,255,255,255,255,255,255,255,255,255,255,255,255,232,96,224,34,176,8,114,47,255,255,255,255,255,255,255,240,255,255,255,255,232,64,96,26,224,0,250,47,255,255,255,255,255,255,255,192,255,255,255,255,232,0,64,14,192,1,140,47,255,255,255,255,193,255,255,227,255,255,252,127,232,56,64,6,128,1,134,47,254,31,255,255,128,127,255,240,7,255,252,63,232,124,0,2,176,193,6,47,240,15,255,255,14,127,251,224,121,255,254,63,232,70,7,210,176,67,114,47,248,15,255,254,255,63,251,2,240,255,230,63,232,6,12,98,167,99,250,47,252,31,255,247,207,63,248,34,0,255,226,7,232,2,12,50,175,231,12,239,252,127,255,243,135,63,249,131,15,255,242,3,232,59,8,50,152,124,7,111,251,255,255,227,7,191,241,48,127,255,112,35,232,127,27,146,240,24,7,175,247,255,255,226,7,159,243,7,63,255,98,35,232,67,159,210,240,0,4,175,238,31,255,226,207,159,246,172,31,255,2,7,232,0,248,98,144,0,4,239,224,15,255,229,140,159,255,76,31,255,18,15,232,0,96,62,144,0,12,111,224,15,255,199,0,31,255,13,159,255,18,63,232,0,0,62,152,8,124,47,240,127,255,206,0,31,252,13,159,255,48,127,232,0,0,34,159,12,232,47,249,255,255,206,11,159,254,132,159,255,242,96,104,64,0,34,139,156,168,47,231,255,255,207,139,159,254,32,31,255,240,0,40,120,64,98,138,159,184,47,223,192,255,207,1,159,248,136,159,255,0,0,40,92,195,226,142,243,176,47,240,0,127,197,3,159,249,8,159,248,1,254,40,84,231,66,134,227,32,47,1,254,127,230,15,159,252,8,31,248,15,255,232,119,229,66,130,109,160,40,15,255,255,226,63,63,255,1,159,252,63,255,232,55,61,194,130,220,160,44,63,255,255,240,128,63,252,56,159,254,255,255,232,19,29,130,130,152,48,47,255,255,255,255,224,127,240,187,31,255,255,255,232,22,217,2,134,6,16,47,255,255,255,255,255,255,241,187,159,255,255,255,232,20,237,2,132,63,28,47,255,255,255,255,255,255,255,187,223,255,255,255,232,48,101,2,156,123,143,239,255,255,255,255,255,255,255,255,255,255,255,255,234,33,129,130,248,230,227,176,0,0,0,0,0,0,0,0,0,0,0,0,30,99,240,130,227,184,56,223,255,255,255,255,255,255,255,255,255,255,255,255,246,71,120,226,142,8,31,207,254,120,255,191,254,0,4,99,1,244,1,248,12,29,156,126,252,0,7,128,31,255,254,63,254,0,7,194,1,52,3,255,12,112,119,30,240,0,0,1,243,255,240,1,255,0,3,134,1,182,3,255,12,96,65,194,128,0,0,15,135,255,128,0,127,128,0,6,1,183,7,224,24,128,0,254,128,0,0,124,31,0,0,0,127,192,63,198,1,179,7,192,25,128,0,62,128,0,7,225,252,7,192,0,63,192,240,116,1,155,135,128,55,0,0,2,240,7,254,1,240,15,224,238,31,193,192,28,0,249,199,0,46,0,0,2,191,255,224,48,0,30,49,247,31,227,0,4,1,252,236,0,120,0,0,2,131,248,0,96,0,63,19,215,31,230,0,6,31,192,124,0,224,127,128,62,129,255,255,255,255,255,255,255,255,230,15,255,255,255,255,255,255,255,255,242,207,0,0,0,0,0,0,0,0,44,24,0,0,0,0,0,0,0,1,2,255,255,255,255,255,255,255,255,255,172,31,255,255,255,255,255,255,255,253,2,243,255,255,255,255,255,255,255,255,168,31,255,255,255,255,255,255,255,253,206,227,255,255,255,255,255,255,255,255,168,31,255,255,255,255,255,255,255,253,254,131,255,255,255,255,255,255,207,255,168,31,255,231,255,255,255,255,255,253,62,131,255,242,255,199,246,255,7,255,168,31,255,207,255,127,239,255,63,253,30,131,255,226,255,163,229,126,47,255,168,31,255,35,222,127,109,246,63,253,2,131,255,209,126,15,242,255,15,255,172,31,255,3,233,255,41,245,127,253,2,131,255,225,60,143,224,255,15,255,172,31,254,139,253,62,129,243,31,253,2,227,255,192,127,191,229,62,7,255,166,31,255,131,204,62,131,194,175,253,2,131,255,225,124,103,208,220,87,255,163,31,255,135,233,126,167,242,47,253,2,131,255,129,127,3,177,254,139,255,161,159,255,207,234,30,111,229,79,253,30,131,255,167,126,167,245,254,220,255,160,255,255,199,193,222,79,228,223,253,2,131,255,255,125,159,240,125,135,255,160,127,255,195,254,15,31,254,31,253,2,179,255,255,123,255,239,255,191,255,160,159,255,191,255,255,127,255,255,253,2,251,255,255,255,255,255,255,255,255,160,159,255,255,255,255,255,255,255,253,2,219,255,255,255,255,255,255,255,255,225,159,255,255,255,255,255,255,255,255,50,205,255,255,255,255,255,255,255,255,193,15,255,255,255,255,255,255,255,254,126,236,28,19,1,127,9,232,127,192,3,1,195,131,13,152,0,7,225,176,110,228,28,19,0,127,140,240,255,252,0,31,7,66,233,152,0,15,96,240,206,228,24,18,0,119,198,192,255,159,255,248,7,199,233,24,0,30,32,224,222,164,8,26,1,255,227,193,255,0,127,0,14,142,59,16,224,24,32,224,158,172,8,26,3,239,241,131,254,0,2,0,13,24,59,55,240,16,32,96,158,172,8,26,15,195,253,135,254,0,6,0,27,176,50,60,248,48,96,64,146,173,255,255,255,255,255,255,255,255,199,15,255,255,255,255,255,255,255,254,210,155,0,0,0,0,0,0,0,0,47,24,0,0,0,0,0,0,0,1,210,155,255,255,255,255,255,255,255,255,170,31,255,255,255,255,255,255,255,253,210,139,255,255,255,255,255,255,255,255,188,31,255,255,255,255,255,255,255,253,98,203,255,255,255,255,255,255,255,255,184,31,255,255,255,255,255,255,255,253,98,203,255,255,127,255,255,255,153,255,160,31,255,223,255,255,255,255,255,253,66,203,255,247,127,223,251,255,197,255,184,31,255,207,248,31,255,255,255,253,78,139,255,208,126,195,242,63,17,255,184,31,255,207,244,207,223,254,31,253,78,143,255,193,126,143,229,191,1,255,176,31,255,208,116,95,152,252,111,253,78,139,255,210,124,239,196,60,113,255,160,31,255,141,114,159,70,242,47,253,66,207,255,193,124,227,242,60,147,255,160,63,254,33,112,63,16,244,111,253,194,247,255,5,126,231,226,62,17,255,160,127,255,165,122,255,82,246,47,253,66,151,255,213,126,227,234,190,107,255,160,255,255,140,254,255,81,250,31,253,206,131,255,209,126,239,240,13,251,255,161,255,255,221,254,255,176,249,159,253,2,195,255,246,127,239,247,255,251,255,167,255,255,253,254,255,191,255,255,253,6,227,255,255,127,255,255,255,251,255,167,255,255,255,254,255,255,255,255,253,14,179,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,253,26,139,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,34,145,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,18,144,0,64,25,128,143,240,209,128,255,255,254,219,223,255,254,1,24,0,18,220,0,192,24,192,143,240,103,131,255,255,254,151,255,255,255,131,24,0,118,228,192,128,48,192,143,248,45,135,255,255,253,175,255,255,255,195,8,6,78,147,67,128,48,97,143,248,111,31,255,255,249,124,223,255,255,226,12,5,146,159,51,0,96,97,143,248,64,63,255,255,251,211,252,255,255,242,4,25,242,140,16,0,96,49,135,252,64,127,254,255,243,143,5,31,255,246,7,16,98,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,237,46,0,0,61,0,4,0,184,11,0,0,0,1,1,86,36,100,0,0,0,0,0,0,2,0,51,1,2,1,84,90,100,3,0,0,0,0,0,0,0,35,2,3,1,73,70,100,4,0,0,2,0,0,0,0,36,3,4,1,78,84,100,1,0,0,1,0,0,0,0,35,4,5,1,95,81,100,4,0,0,0,0,0,14,11,35,5,6,1,89,46,100,4,0,0,0,0,0,0,0,34,6,7,1,46,65,100,1,0,0,1,0,0,0,0,58,7,8,1,57,82,100,4,0,0,2,0,0,0,0,37,8,9,1,76,53,100,1,0,0,1,0,0,0,0,43,9,10,1,60,56,100,4,0,0,1,0,0,0,0,39,10,11,1,30,25,100,4,0,0,1,0,0,0,0,48,11,12,1,47,47,100,4,0,0,1,0,0,0,0,40,12,13,1,47,62,100,4,0,0,0,0,0,0,0,35,13,14,1,85,76,100,3,0,0,0,0,0,5,0,29,14,15,1,22,71,100,4,0,0,2,0,0,0,0,48,15,16,1,52,72,100,4,0,0,2,0,0,0,0,58,16,17,1,89,75,100,4,0,0,0,0,0,10,0,37,17,18,1,71,31,100,0,0,0,1,0,0,0,0,35,18,19,1,69,75,100,1,0,0,2,0,0,0,0,27,19,1,1,54,92,89,2,0,0,2,0,0,0,0,40,20,1,1,110,53,95,0,0,0,4,0,0,1,23,34,21,1,1,92,23,88,4,0,0,0,0,0,0,0,35,22,1,1,93,82,91,4,0,0,2,0,0,0,0,21,23,1,1,76,21,87,1,0,0,3,0,0,0,0,42,24,1,1,71,28,87,0,0,0,3,0,0,0,0,44,25,1,1,75,65,97,1,0,0,1,0,0,0,0,34,26,1,1,73,35,88,3,0,0,2,0,0,0,0,32,27,1,1,70,55,87,3,0,0,0,0,0,0,0,35,28,1,1,84,54,87,3,0,0,0,0,0,0,0,40,29,1,1,52,22,90,4,0,0,1,0,0,0,0,31,30,1,1,16,85,35,4,0,0,2,0,0,0,0,53,31,1,1,41,93,38,3,0,0,2,0,0,0,0,33,32,2,1,92,60,94,0,0,0,0,0,0,0,0,33,33,2,1,93,48,98,4,0,0,0,0,0,0,0,27,34,2,1,74,83,85,3,0,0,1,0,0,0,0,16,35,2,1,82,42,88,4,0,0,1,0,0,0,0,31,36], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+225297);
/* memory initializer */ allocate([2,1,80,63,92,0,0,0,2,0,0,0,0,21,37,2,1,73,74,94,0,0,0,3,0,0,0,0,22,38,3,1,94,55,98,0,0,0,0,0,0,0,0,30,39,3,1,95,48,95,0,0,0,0,0,0,0,0,29,40,3,1,82,40,84,0,0,0,2,0,0,0,0,44,41,3,1,50,88,85,4,0,0,2,0,0,0,0,37,42,3,1,57,85,86,3,0,0,1,0,0,0,0,34,43,3,1,28,94,96,4,0,0,2,0,0,0,0,28,44,3,1,21,91,92,4,0,0,2,0,0,0,0,26,45,3,1,39,82,84,2,0,0,1,0,0,0,0,35,46,4,1,88,49,88,4,0,0,0,0,0,6,0,35,47,4,1,72,40,75,1,0,0,1,0,0,0,0,33,48,4,1,81,35,78,0,0,0,1,0,0,0,0,44,49,4,1,74,24,88,0,0,0,2,0,0,0,0,32,50,5,1,88,83,90,4,0,0,1,0,0,0,0,39,51,5,1,83,40,94,4,0,0,3,0,0,0,0,34,52,5,1,76,63,93,4,0,0,3,0,0,0,0,36,53,5,1,81,61,96,4,0,0,2,0,0,0,0,35,54,5,1,96,58,100,4,0,0,0,0,0,0,0,45,55,5,1,77,80,100,4,0,0,1,0,0,0,0,38,56,6,1,70,60,90,3,0,0,0,0,0,0,0,27,57,6,1,98,53,100,0,0,0,0,0,0,0,0,24,58,6,1,96,20,94,0,0,0,0,0,0,0,0,23,59,6,1,62,31,88,0,0,0,2,0,0,0,0,44,60,6,1,78,40,87,0,0,0,1,0,0,0,0,23,61,6,1,45,51,86,0,0,0,2,0,0,0,0,22,62,6,1,83,40,83,0,0,0,1,0,0,0,0,22,63,6,1,71,29,84,0,0,0,1,0,0,0,0,25,64,6,1,45,38,88,0,0,0,1,0,0,0,0,25,65,6,1,70,63,86,0,0,0,0,0,0,0,0,25,66,6,1,70,56,88,0,0,0,2,0,0,0,0,25,67,7,1,31,88,87,3,0,0,2,0,0,0,0,58,68,7,1,69,86,88,3,0,0,0,0,0,0,0,21,69,7,1,30,82,87,3,0,0,1,0,0,0,0,23,70,7,1,53,82,83,3,0,0,2,0,0,0,0,25,71,7,1,65,23,88,1,0,0,1,0,0,0,0,21,72,7,1,58,53,82,4,0,0,0,0,0,0,0,35,73,8,1,93,43,88,4,0,0,0,0,0,0,0,24,74,8,1,57,41,87,0,0,0,1,0,0,0,0,35,75,9,1,35,66,88,4,0,0,1,0,0,0,0,30,76,9,1,51,50,84,4,0,0,2,0,0,0,0,30,77,9,1,57,47,78,4,0,0,1,0,0,0,0,40,78,10,1,57,80,75,3,0,0,2,0,0,0,0,34,79,10,1,76,21,88,0,0,0,1,0,0,0,0,36,80,10,1,80,38,86,0,0,0,0,0,0,0,0,34,81,11,1,51,80,88,4,0,0,2,0,0,0,0,26,82,11,1,28,74,87,4,0,0,1,0,0,0,0,25,83,11,1,56,41,94,4,0,0,0,0,0,0,0,22,84,11,1,54,80,96,4,0,0,2,0,0,0,0,22,85,12,1,73,34,78,0,0,0,0,0,0,0,0,30,86,0,1,51,93,86,3,0,0,2,0,0,0,0,36,87,13,1,101,56,75,4,0,0,0,0,0,7,0,30,88,13,1,40,56,94,4,0,0,1,0,0,0,0,30,89,14,1,106,81,98,4,0,0,1,0,0,3,0,28,90,14,1,107,67,98,0,0,0,0,0,0,4,0,23,91,15,1,20,93,88,3,0,0,2,0,0,0,0,35,92,15,1,53,74,78,1,0,0,1,0,0,0,0,33,93,15,1,78,59,85,2,0,0,3,0,0,0,0,35,94,15,1,78,82,76,2,0,0,3,0,0,0,0,36,95,15,1,70,43,88,1,0,0,1,0,0,0,0,42,96,15,1,92,49,88,4,0,0,0,0,0,0,0,27,97,16,1,86,77,88,3,0,0,2,0,0,0,0,21,98,16,1,89,83,86,4,0,0,0,0,0,0,0,37,99,17,1,78,43,94,4,0,0,0,0,0,0,0,30,100,17,1,44,59,87,4,0,0,2,0,0,0,0,26,101,17,1,54,32,84,4,0,0,1,0,0,0,0,24,102,17,1,81,58,82,4,0,0,1,0,0,0,0,27,103,18,1,77,36,100,0,0,0,1,0,0,0,0,18,104,18,1,75,53,85,0,0,0,2,0,0,0,0,16,105,19,1,77,45,84,4,0,0,0,0,0,0,0,18,106,19,1,20,68,87,1,0,0,1,0,0,0,0,23,107,19,1,41,53,88,4,0,0,2,0,0,0,0,20,108,19,1,56,78,78,3,0,0,2,0,0,0,0,27,109,0,1,85,67,0,0,0,0,3,0,0,0,0,31,110,0,1,72,61,0,0,0,0,3,0,0,0,0,16,111,0,1,36,88,0,3,0,0,2,0,0,0,0,45,112,0,1,49,92,0,3,0,0,1,0,0,0,0,23,113,0,1,47,42,0,0,0,0,2,0,0,0,0,28,114,0,1,83,67,0,0,0,0,1,0,0,0,0,44,115,0,1,28,95,0,4,0,0,2,0,0,0,0,37,116,0,1,33,94,0,4,0,0,1,0,0,0,0,49,117,0,1,68,78,0,4,0,0,3,0,0,0,0,21,118,0,1,75,45,0,4,0,0,1,0,0,0,0,42,119,0,1,57,83,0,4,0,0,2,0,0,0,0,27,120,0,1,21,77,0,3,0,0,1,0,0,0,0,28,121,0,1,52,92,0,4,0,0,2,0,0,0,0,33,122,0,1,52,84,0,0,0,0,1,0,0,0,0,30,123,0,1,58,72,0,3,0,0,1,0,0,0,0,34,124,0,1,38,98,0,3,0,0,2,0,0,0,0,41,125,0,1,77,64,0,3,0,0,1,0,0,0,0,33,126,0,1,28,99,0,3,0,0,2,0,0,0,0,20,127,0,1,41,78,0,4,0,0,3,0,0,0,0,28,128,0,1,40,84,0,4,0,0,3,0,0,0,0,22,129,0,1,47,70,0,3,0,0,1,0,0,0,0,33,130,0,1,36,89,0,4,0,0,1,0,0,0,0,49,131,0,1,82,56,0,4,0,0,1,0,0,0,0,42,132,0,1,37,96,0,3,0,0,1,0,0,0,0,43,133,0,1,81,56,0,0,0,0,3,0,0,0,0,22,134,0,1,54,79,0,3,0,0,1,0,0,0,0,19,135,0,1,78,97,0,3,0,0,2,0,0,0,0,40,136,0,1,75,59,0,4,0,0,0,0,0,0,0,18,137,0,1,96,24,0,0,0,0,1,0,0,0,0,20,138,0,1,43,94,0,3,0,0,2,0,0,0,0,27,139,0,1,39,93,0,3,0,0,1,0,0,0,0,44,140,0,1,56,88,0,1,0,0,2,0,0,0,0,20,141,0,1,74,77,0,4,0,0,0,0,0,0,0,18,142,0,1,82,76,0,4,0,0,0,0,0,0,0,21,143,0,1,82,59,0,3,0,0,1,0,0,0,0,24,144,0,1,67,70,0,3,0,0,1,0,0,0,0,23,145,0,1,30,88,0,1,0,0,2,0,0,0,0,45,146,0,1,26,87,0,3,0,0,1,0,0,0,0,28,147,0,1,77,70,0,3,0,0,2,0,0,0,0,31,148,0,1,83,47,0,0,0,0,1,0,0,0,0,41,149,0,1,77,55,0,0,0,0,0,0,0,0,0,17,150,0,1,57,63,0,1,0,0,3,0,0,0,0,44,151,0,1,34,75,0,3,0,0,1,0,0,0,0,37,152,0,1,40,86,0,4,0,0,2,0,0,0,0,34,153,0,1,84,56,0,4,0,0,3,0,0,0,0,26,154,0,1,72,55,0,4,0,0,3,0,0,0,0,26,155,0,1,91,53,0,4,0,0,0,0,0,0,0,20,156,0,1,25,84,0,4,0,0,1,0,0,0,0,16,157,0,1,26,100,0,4,0,0,1,0,0,0,0,39,158,0,1,36,80,0,1,0,0,1,0,0,0,0,35,159,0,1,74,44,0,0,0,0,1,0,0,0,0,30,160,0,1,77,52,0,4,0,0,3,0,0,0,0,43,161,0,1,83,45,0,4,0,0,2,0,0,0,0,36,162,0,1,54,94,0,1,0,0,2,0,0,0,0,39,163,0,1,86,83,0,3,0,0,0,0,0,0,0,21,164,0,1,75,33,0,0,0,0,3,0,0,0,0,25,165,0,1,92,69,0,4,0,0,0,0,0,0,0,23,166,0,1,98,87,0,4,0,0,2,0,0,0,0,22,167,0,1,83,46,0,4,0,0,1,0,0,0,0,20,168,0,1,71,77,0,3,0,0,2,0,0,0,0,28,169,0,1,91,59,0,0,0,0,1,0,0,0,0,45,170,0,1,46,72,0,0,0,0,1,0,0,0,0,43,171,0,1,20,86,0,4,0,0,1,0,0,0,0,18,172,0,1,75,84,0,4,0,0,3,0,0,0,0,18,173,0,1,77,53,0,1,0,0,3,0,0,0,0,38,174,0,1,51,73,0,4,0,0,1,0,0,0,0,22,175,0,1,58,77,0,4,0,0,2,0,0,0,0,22,176,0,1,34,71,0,0,0,0,1,0,0,0,0,23,177,0,1,44,75,0,4,0,0,1,0,0,0,0,23,178,0,1,22,77,0,0,0,0,3,0,0,0,0,42,179,0,1,93,57,0,0,0,0,2,0,0,0,0,42,180,0,1,83,54,0,0,0,0,1,0,0,0,0,31,181,0,1,59,41,0,0,0,0,3,0,0,0,0,22,182,0,1,47,41,0,1,0,0,2,0,0,0,0,38,183,0,1,24,74,0,0,0,0,1,0,0,0,0,30,184,0,1,46,81,0,3,0,0,1,0,0,0,0,45,0,0,20,150,150,0,4,0,0,4,0,0,0,0,0,0,0,20,150,150,0,4,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,23,1,1,76,21,100,1,0,0,3,0,0,0,0,50,1,2,1,84,90,100,3,0,0,0,0,0,8,0,43,13,3,1,85,76,100,3,0,0,0,0,0,5,0,37,2,4,1,73,70,100,4,0,0,2,0,0,0,0,44,3,5,1,78,84,100,1,0,0,1,0,0,0,0,43,54,6,1,96,58,100,4,0,0,0,0,0,0,0,23,12,7,1,47,62,100,4,0,0,0,0,0,0,0,43,161,8,1,83,45,100,4,0,0,2,0,0,0,0,44,20,9,1,110,53,100,0,0,0,4,0,0,1,23,42,9,10,1,39,44,100,1,0,0,0,0,0,0,0,35,17,11,1,71,31,100,0,0,0,1,0,0,0,0,43,5,12,1,89,46,100,4,0,0,0,0,0,0,0,42,14,13,1,22,71,100,4,0,0,2,0,0,0,0,56,113,14,1,47,49,100,0,0,0,2,0,0,0,0,36,18,15,1,69,75,100,1,0,0,2,0,0,0,0,35,7,16,1,57,82,100,4,0,0,2,0,0,0,0,45,25,1,1,75,65,97,1,0,0,1,0,0,0,0,42,24,1,1,71,28,87,0,0,0,3,0,0,0,0,52,29,1,1,52,22,90,4,0,0,1,0,0,0,0,39,32,2,1,92,60,94,0,0,0,0,0,0,0,0,41,33,2,1,93,48,98,4,0,0,0,0,0,0,0,35,34,2,1,74,83,85,3,0,0,1,0,0,0,0,24,35,2,1,82,42,88,4,0,0,1,0,0,0,0,39,36,2,1,80,63,92,0,0,0,2,0,0,0,0,29,37,2,1,73,74,94,0,0,0,3,0,0,0,0,30,25,2,1,72,61,88,0,0,0,1,0,0,9,0,18,8,2,1,76,53,72,1,0,0,1,0,0,0,0,51,182,2,1,47,41,71,1,0,0,2,0,0,0,0,46,147,2,1,77,70,77,3,0,0,2,0,0,0,0,39,138,2,1,43,94,84,3,0,0,2,0,0,0,0,35,31,2,1,41,93,89,3,0,0,2,0,0,0,0,41,89,3,1,106,81,98,4,0,0,1,0,0,3,0,36,90,3,1,107,67,98,0,0,0,0,0,0,4,0,31,176,3,1,34,71,74,0,0,0,1,0,0,0,0,31,67,3,1,31,88,87,3,0,0,2,0,0,0,0,66,68,3,1,69,86,88,3,0,0,0,0,0,0,0,29,69,3,1,30,82,87,3,0,0,1,0,0,0,0,27,70,3,1,53,82,83,3,0,0,2,0,0,0,0,33,71,3,1,65,23,88,1,0,0,1,0,0,0,0,29,72,3,1,58,53,82,4,0,0,0,0,0,0,0,43,38,4,1,94,55,98,0,0,0,0,0,0,0,0,38,39,4,1,95,48,95,0,0,0,0,0,0,0,0,37,165,4,1,92,69,88,4,0,0,0,0,0,0,0,31,40,4,1,82,40,84,0,0,0,2,0,0,0,0,52,180,4,1,83,54,88,0,0,0,1,0,0,0,0,39,181,4,1,59,41,72,0,0,0,3,0,0,0,0,30,46,4,1,80,42,74,0,0,0,1,0,0,0,0,20,159,4,1,74,44,75,0,0,0,1,0,0,0,0,18,149,4,1,77,55,75,0,0,0,0,0,0,0,0,25,150,4,1,57,63,71,1,0,0,3,0,0,0,0,22,50,4,1,77,38,77,0,0,0,3,0,0,0,0,24,148,4,1,83,47,71,0,0,0,1,0,0,0,0,19,41,4,1,50,88,85,4,0,0,2,0,0,0,0,45,42,4,1,57,85,86,3,0,0,1,0,0,0,0,42,43,4,1,28,94,96,4,0,0,2,0,0,0,0,36,44,4,1,21,91,92,4,0,0,2,0,0,0,0,34,45,4,1,39,82,84,2,0,0,1,0,0,0,0,43,158,4,1,36,80,81,1,0,0,1,0,0,0,0,43,174,4,1,51,73,85,4,0,0,1,0,0,0,0,30,82,4,1,28,74,87,4,0,0,1,0,0,0,0,33,134,4,1,54,79,72,3,0,0,1,0,0,0,0,27,61,4,1,43,75,77,0,0,0,1,0,0,0,0,38,62,4,1,39,72,86,4,0,0,0,0,0,0,0,28,81,5,1,51,80,88,4,0,0,2,0,0,0,0,34,46,5,1,88,49,88,4,0,0,0,0,0,6,0,43,47,5,1,72,40,75,1,0,0,1,0,0,0,0,41,48,5,1,81,35,78,0,0,0,1,0,0,0,0,22,49,5,1,74,24,88,0,0,0,2,0,0,0,0,40,76,5,1,51,50,84,4,0,0,2,0,0,0,0,38,77,5,1,57,47,78,4,0,0,1,0,0,0,0,48,73,6,1,93,43,88,4,0,0,0,0,0,0,0,32,50,6,1,88,83,90,4,0,0,1,0,0,0,0,47,52,6,1,76,63,93,4,0,0,3,0,0,0,0,44,51,6,1,83,40,94,4,0,0,3,0,0,0,0,42,133,6,1,81,56,81,0,0,0,3,0,0,0,0,30,155,6,1,91,53,74,4,0,0,0,0,0,0,0,28,76,6,1,72,56,72,4,0,0,2,0,0,0,0,28,114,6,1,83,67,83,0,0,0,1,0,0,0,0,22,78,6,1,77,98,95,3,0,0,2,0,0,0,0,23,152,6,1,40,86,82,4,0,0,2,0,0,0,0,42,151,6,1,34,75,88,3,0,0,1,0,0,0,0,45,117,6,1,68,78,86,4,0,0,3,0,0,0,0,29,10,7,1,30,25,88,4,0,0,1,0,0,0,0,50,88,7,1,40,56,94,4,0,0,1,0,0,0,0,38,84,8,1,74,64,85,0,0,0,0,0,0,0,0,28,132,8,1,37,96,77,3,0,0,1,0,0,0,0,51,22,9,1,93,82,91,4,0,0,2,0,0,0,0,29,167,9,1,83,46,76,4,0,0,1,0,0,0,0,28,88,9,1,67,32,81,0,0,0,2,0,0,0,0,35,89,9,1,84,48,88,0,0,0,3,0,0,0,0,42,26,9,1,73,35,88,3,0,0,2,0,0,0,0,40,27,9,1,70,55,87,3,0,0,0,0,0,0,0,43,86,9,1,51,93,79,3,0,0,2,0,0,0,0,44,179,10,1,93,57,82,0,0,0,2,0,0,0,0,50,169,10,1,91,59,77,0,0,0,1,0,0,0,0,23,127,10,1,41,78,89,4,0,0,3,0,0,0,0,36,103,11,1,77,36,100,0,0,0,1,0,0,0,0,26,104,11,1,75,53,85,0,0,0,2,0,0,0,0,24,56,12,1,70,60,90,3,0,0,0,0,0,0,0,35,57,12,1,98,53,100,0,0,0,0,0,0,0,0,32,100,12,1,74,45,85,3,0,0,2,0,0,0,0,24,58,12,1,96,20,94,0,0,0,0,0,0,0,0,31,59,12,1,62,31,88,0,0,0,2,0,0,0,0,22,60,12,1,78,40,87,0,0,0,1,0,0,0,0,31,61,12,1,45,51,86,0,0,0,2,0,0,0,0,30,62,12,1,83,40,83,0,0,0,1,0,0,0,0,30,63,12,1,71,29,84,0,0,0,1,0,0,0,0,33,64,12,1,45,38,88,0,0,0,1,0,0,0,0,33,65,12,1,70,63,86,0,0,0,0,0,0,0,0,33,66,12,1,70,56,88,0,0,0,2,0,0,0,0,33,91,13,1,20,93,88,3,0,0,2,0,0,0,0,43,92,13,1,53,74,78,1,0,0,1,0,0,0,0,41,112,13,1,58,72,84,4,0,0,1,0,0,0,0,25,146,13,1,26,87,73,3,0,0,1,0,0,0,0,36,93,13,1,78,59,85,2,0,0,3,0,0,0,0,43,115,13,1,47,44,81,3,0,0,0,0,0,0,0,24,170,13,1,46,72,72,0,0,0,1,0,0,0,0,21,117,13,1,58,10,83,1,0,0,3,0,0,0,0,32,118,13,1,35,10,83,1,0,0,1,0,0,0,0,30,94,13,1,78,82,76,2,0,0,3,0,0,0,0,44,95,13,1,70,43,88,1,0,0,1,0,0,0,0,50,96,13,1,92,49,88,4,0,0,0,0,0,0,0,35,131,13,1,82,56,74,4,0,0,1,0,0,0,0,20,173,13,1,77,53,71,1,0,0,3,0,0,0,0,46,97,14,1,86,77,88,3,0,0,2,0,0,0,0,29,98,14,1,89,83,86,4,0,0,0,0,0,0,0,45,143,14,1,82,59,81,3,0,0,1,0,0,0,0,32,127,14,1,82,44,83,4,0,0,2,0,0,0,0,27,136,14,1,75,59,78,4,0,0,0,0,0,0,0,26,129,14,1,79,58,77,4,0,0,2,0,0,0,0,28,144,14,1,67,70,74,3,0,0,1,0,0,0,0,31,142,14,1,82,76,72,4,0,0,0,0,0,0,0,29,141,14,1,74,77,87,4,0,0,0,0,0,0,0,26,140,14,1,56,88,87,1,0,0,2,0,0,0,0,28,139,14,1,39,93,89,3,0,0,1,0,0,0,0,22,105,15,1,77,45,84,4,0,0,0,0,0,0,0,26,106,15,1,20,68,87,1,0,0,1,0,0,0,0,31,107,15,1,41,53,88,4,0,0,2,0,0,0,0,28,108,15,1,56,78,78,3,0,0,2,0,0,0,0,35,74,16,1,57,41,87,0,0,0,1,0,0,0,0,43,116,0,1,33,94,0,4,0,0,1,0,0,0,0,57,126,0,1,28,99,0,3,0,0,2,0,0,0,0,28,111,0,1,36,88,0,3,0,0,2,0,0,0,0,23,123,0,1,58,72,0,3,0,0,1,0,0,0,0,42,144,0,1,51,76,0,4,0,0,3,0,0,0,0,37,147,0,1,77,70,0,3,0,0,2,0,0,0,0,40,87,13,1,101,56,75,4,0,0,0,0,0,7,0,38,137,0,1,96,24,0,0,0,0,1,0,0,0,0,28,148,0,1,50,77,0,0,0,0,1,0,0,0,0,35,149,0,1,47,60,0,4,0,0,3,0,0,0,0,34,163,0,1,86,83,0,3,0,0,0,0,0,0,0,29,110,0,1,72,61,0,0,0,0,3,0,0,0,0,24,152,0,1,32,73,0,4,0,0,3,0,0,0,0,57,120,0,1,21,77,0,3,0,0,1,0,0,0,0,28,119,0,1,57,83,0,4,0,0,2,0,0,0,0,27,175,0,1,58,77,0,4,0,0,2,0,0,0,0,30,156,0,1,37,73,0,0,0,0,0,0,0,0,0,0,177,0,1,44,75,0,4,0,0,1,0,0,0,0,31,158,0,1,83,48,0,4,0,0,0,0,0,0,0,0,130,0,1,36,89,0,4,0,0,1,0,0,0,0,57,121,0,1,52,92,0,4,0,0,2,0,0,0,0,33,122,0,1,52,84,0,0,0,0,1,0,0,0,0,30,162,0,1,25,81,0,4,0,0,0,0,0,0,0,27,166,0,1,101,87,0,4,0,0,2,0,0,10,0,30,125,0,1,77,64,0,3,0,0,1,0,0,0,0,33,153,0,1,84,56,0,4,0,0,3,0,0,0,0,34,154,0,1,72,55,0,4,0,0,3,0,0,0,0,34,167,0,1,62,43,0,0,0,0,3,0,0,0,0,19,183,0,1,24,74,0,0,0,0,1,0,0,0,0,38,184,0,1,46,81,0,3,0,0,1,0,0,0,0,53,124,0,1,38,98,0,3,0,0,2,0,0,0,0,19,135,0,1,78,97,0,3,0,0,2,0,0,0,0,18,172,0,1,27,83,0,1,0,0,2,0,0,0,0,0,171,0,1,20,86,0,4,0,0,1,0,0,0,0,26,128,0,1,40,84,0,4,0,0,3,0,0,0,0,30,178,0,1,22,77,0,0,0,0,3,0,0,0,0,20,129,0,1,47,70,0,3,0,0,1,0,0,0,0,41,156,0,1,25,84,0,4,0,0,1,0,0,0,0,24,172,0,1,75,84,0,4,0,0,3,0,0,0,0,26,75,9,1,35,66,88,4,0,0,1,0,0,0,0,38,180,0,1,67,56,0,0,0,0,0,0,0,0,0,36,181,0,1,52,35,0,0,0,0,3,0,0,0,0,34,0,0,1,26,100,0,4,0,0,1,0,0,0,0,19,0,0,20,150,150,0,4,0,0,4,0,0,0,0,19,0,0,20,150,150,0,4,0,0,5,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,0,0,0,0,0,0,0,0,0,3,0,0,0,0,19,9,1,1,39,44,100,1,0,0,0,0,0,0,0,45,1,2,1,53,52,100,0,0,0,3,0,0,0,0,48,2,3,1,41,41,100,0,0,0,3,0,0,0,0,34,3,4,1,51,63,100,0,0,0,1,0,0,0,0,42,1,5,1,84,90,100,3,0,0,0,0,0,8,25,53,13,6,1,85,76,100,3,0,0,0,0,0,5,24,47,6,7,1,74,73,100,4,0,0,0,0,0,0,30,26,5,8,1,89,46,100,4,0,0,0,0,0,0,0,52,18,9,1,69,75,100,1,0,0,2,0,0,0,0,45,113,10,1,47,49,100,0,0,0,2,0,0,0,0,46,103,11,1,77,36,100,0,0,0,1,0,0,0,0,36,179,1,1,93,57,86,0,0,0,2,0,0,0,0,60,169,1,1,91,59,74,0,0,0,1,0,0,0,0,33,13,2,1,61,40,72,0,0,0,0,0,0,0,0,18,127,1,1,41,78,89,4,0,0,3,0,0,0,0,46,15,2,1,50,37,83,1,0,0,0,0,0,0,0,21,16,2,1,71,51,82,0,0,0,2,0,0,0,0,38,17,3,1,80,22,72,0,0,0,3,0,0,0,0,41,18,3,1,68,35,71,0,0,0,1,0,0,0,0,21,19,4,1,59,77,86,0,0,0,1,0,0,0,0,30,135,5,1,1,1,70,3,0,0,2,0,0,0,0,28,32,5,1,92,60,94,0,0,0,0,0,0,0,0,51,33,5,1,93,48,98,4,0,0,0,0,0,0,0,45,23,5,1,59,69,85,4,0,0,3,0,0,0,0,23,24,5,1,71,64,77,0,0,0,2,0,0,0,0,25,25,5,1,45,63,76,4,0,0,1,0,0,0,0,27,7,5,1,57,82,0,4,0,0,2,0,0,0,0,55,34,5,1,74,83,81,3,0,0,1,0,0,0,0,34,28,5,1,38,82,88,1,0,0,2,0,0,0,0,33,35,5,1,82,42,88,4,0,0,1,0,0,0,0,49,36,5,1,80,63,92,0,0,0,2,0,0,0,29,39,37,5,1,73,74,94,0,0,0,3,0,0,0,0,40,32,5,1,80,22,79,4,0,0,1,0,0,0,0,49,110,5,1,72,61,82,0,0,0,3,0,0,0,0,34,34,5,1,52,77,89,3,0,0,0,0,0,0,0,21,35,5,1,68,79,85,4,0,0,0,0,0,0,0,23,36,5,1,20,88,84,3,0,0,0,0,0,0,0,16,147,5,1,77,70,73,3,0,0,2,0,0,0,0,49,138,5,1,43,94,90,3,0,0,2,0,0,0,0,45,31,5,1,41,93,89,3,0,0,2,0,0,0,0,51,116,5,1,33,94,83,4,0,0,1,0,0,0,0,67,111,5,1,36,88,78,3,0,0,2,0,0,0,0,33,42,5,1,52,80,77,3,0,0,0,0,0,0,0,41,123,5,1,58,72,74,3,0,0,1,0,0,0,0,52,144,5,1,51,76,72,4,0,0,3,0,0,0,0,47,137,5,1,96,24,87,0,0,0,1,0,0,0,0,38,148,5,1,50,77,87,0,0,0,1,0,0,0,0,45,163,5,1,86,83,89,3,0,0,0,0,0,0,0,39,46,5,1,80,42,88,0,0,0,1,0,0,0,0,18,49,5,1,30,79,86,1,0,0,0,0,0,0,0,33,165,5,1,92,69,88,4,0,0,0,0,0,0,0,41,180,5,1,83,54,88,0,0,0,1,0,0,0,0,49,181,5,1,59,41,72,0,0,0,3,0,0,0,0,40,159,5,1,74,44,75,0,0,0,1,0,0,0,0,18,50,5,1,77,38,77,0,0,0,3,0,0,0,0,21,174,5,1,51,73,85,4,0,0,1,0,0,0,0,40,134,5,1,54,79,72,3,0,0,1,0,0,0,0,37,61,5,1,43,75,77,0,0,0,1,0,0,0,0,48,68,5,1,69,86,88,3,0,0,0,0,0,0,0,39,72,5,1,58,53,82,4,0,0,0,0,0,0,0,53,22,5,1,93,82,91,4,0,0,2,0,0,0,0,39,167,5,1,83,46,76,4,0,0,1,0,0,0,0,38,89,5,1,84,48,88,0,0,0,3,0,0,0,0,52,26,5,1,73,35,88,3,0,0,2,0,0,0,0,50,27,5,1,70,55,87,3,0,0,0,0,0,0,0,53,65,5,1,21,87,85,1,0,0,3,0,0,0,0,57,66,5,1,52,60,80,0,0,0,3,0,0,0,0,49,161,5,1,83,45,0,4,0,0,2,0,0,0,0,54,132,5,1,37,96,77,3,0,0,1,0,0,0,0,61,93,5,1,78,59,85,2,0,0,3,0,0,0,0,53,92,5,1,53,74,78,1,0,0,1,0,0,0,0,51,112,5,1,58,72,84,4,0,0,1,0,0,0,0,23,72,5,1,36,73,72,3,0,0,2,0,0,0,0,52,170,5,1,46,72,72,0,0,0,1,0,0,0,0,31,117,5,1,58,30,83,1,0,0,3,0,0,0,0,42,118,5,1,35,32,83,1,0,0,1,0,0,0,0,40,94,5,1,78,82,76,2,0,0,3,0,0,0,0,54,131,5,1,82,56,74,4,0,0,1,0,0,0,0,30,173,5,1,77,53,71,1,0,0,3,0,0,0,0,56,89,6,1,106,81,98,4,0,0,1,0,0,3,23,46,90,6,1,107,67,98,0,0,0,0,0,0,4,27,41,166,6,1,101,87,98,4,0,0,2,0,0,10,0,40,125,6,1,77,64,88,3,0,0,1,0,0,0,0,21,83,6,1,72,55,87,0,0,0,0,0,0,0,0,22,154,6,1,72,55,87,4,0,0,3,0,0,0,0,44,153,6,1,84,56,88,4,0,0,3,0,0,0,0,44,176,6,1,34,71,84,0,0,0,1,0,0,0,0,41,69,6,1,30,82,87,3,0,0,1,0,0,0,0,29,70,6,1,53,82,83,3,0,0,2,0,0,0,0,43,71,6,1,65,23,88,1,0,0,1,0,0,0,0,39,90,6,1,26,100,100,4,0,0,1,0,0,0,0,27,115,6,1,47,44,81,3,0,0,0,0,0,0,0,34,73,7,1,93,43,88,4,0,0,0,0,0,0,0,42,96,7,1,92,49,88,4,0,0,0,0,0,0,0,45,52,7,1,76,63,93,4,0,0,3,0,0,0,0,54,50,7,1,88,83,90,4,0,0,1,0,0,0,0,57,51,7,1,83,40,94,4,0,0,3,0,0,0,0,52,133,7,1,81,56,81,0,0,0,3,0,0,0,0,40,155,7,1,91,53,74,4,0,0,0,0,0,0,0,38,172,7,1,75,84,80,4,0,0,3,0,0,0,0,36,100,7,1,75,64,79,4,0,0,0,0,0,0,0,18,114,7,1,83,67,83,0,0,0,1,0,0,0,0,32,102,7,1,78,44,80,1,0,0,0,0,0,0,0,31,103,7,1,76,51,80,0,0,0,3,0,0,0,0,19,78,7,1,77,98,95,3,0,0,2,0,0,0,0,33,152,7,1,40,86,82,4,0,0,2,0,0,0,0,52,151,7,1,34,75,88,3,0,0,1,0,0,0,0,55,76,7,1,72,56,72,4,0,0,3,0,0,0,0,23,108,7,1,80,43,76,4,0,0,2,0,0,0,0,39,117,7,1,68,78,86,4,0,0,3,0,0,0,0,39,171,7,1,20,86,95,4,0,0,1,0,0,0,0,36,128,7,1,40,84,83,4,0,0,3,0,0,0,0,40,178,7,1,22,77,84,0,0,0,3,0,0,0,0,30,129,7,1,47,70,86,3,0,0,1,0,0,0,0,51,156,7,1,25,84,95,4,0,0,1,0,0,0,0,34,115,7,1,72,47,98,0,0,0,2,0,0,0,0,27,116,7,1,81,40,86,4,0,0,3,0,0,0,0,26,117,7,1,31,73,81,0,0,0,2,0,0,0,0,40,118,7,1,36,75,78,4,0,0,1,0,0,0,0,24,119,7,1,78,47,74,4,0,0,3,0,0,0,0,31,120,7,1,28,74,89,0,0,0,1,0,0,0,0,19,121,7,1,77,91,76,4,0,0,3,0,0,0,0,30,122,7,1,26,94,73,4,0,0,3,0,0,0,0,25,56,8,1,70,60,90,3,0,0,0,0,0,0,0,45,57,8,1,98,53,100,0,0,0,0,0,0,0,0,42,100,8,1,74,45,85,3,0,0,2,0,0,0,0,25,58,8,1,96,20,94,0,0,0,0,0,0,0,0,41,59,8,1,62,31,88,0,0,0,2,0,0,0,0,32,60,8,1,78,40,87,0,0,0,1,0,0,0,0,41,61,8,1,45,51,86,0,0,0,2,0,0,0,0,40,62,8,1,83,40,83,0,0,0,1,0,0,0,0,40,63,8,1,71,29,84,0,0,0,1,0,0,0,0,43,64,8,1,45,38,88,0,0,0,1,0,0,0,0,43,65,8,1,70,63,86,0,0,0,0,0,0,0,0,43,66,8,1,70,56,88,0,0,0,2,0,0,0,0,43,105,9,1,77,45,84,4,0,0,0,0,0,0,0,36,106,9,1,20,68,87,1,0,0,1,0,0,0,0,41,107,9,1,41,53,88,4,0,0,2,0,0,0,0,38,108,9,1,56,78,78,3,0,0,2,0,0,0,0,45,97,10,1,86,77,88,3,0,0,2,0,0,0,0,39,98,10,1,89,83,86,4,0,0,0,0,0,0,0,55,143,10,1,82,59,81,3,0,0,1,0,0,0,0,42,127,10,1,82,44,83,4,0,0,2,0,0,0,0,18,136,10,1,75,59,78,4,0,0,0,0,0,0,0,36,129,10,1,79,58,77,4,0,0,2,0,0,0,0,38,175,10,1,58,77,88,4,0,0,2,0,0,0,0,40,144,10,1,67,70,74,3,0,0,1,0,0,0,0,41,147,10,1,41,77,72,0,0,0,3,0,0,0,0,33,142,10,1,82,76,72,4,0,0,0,0,0,0,0,39,141,10,1,74,77,87,4,0,0,0,0,0,0,0,36,140,10,1,56,88,87,1,0,0,2,0,0,0,0,38,139,10,1,39,93,89,3,0,0,1,0,0,0,0,32,152,0,1,32,73,0,4,0,0,3,0,0,0,0,67,120,0,1,21,77,0,3,0,0,1,0,0,0,0,16,119,0,1,57,83,0,4,0,0,2,0,0,0,0,27,156,0,1,37,73,0,0,0,0,0,0,0,0,0,18,177,0,1,44,75,0,4,0,0,1,0,0,0,0,41,158,0,1,83,48,0,4,0,0,0,0,0,0,0,17,104,11,1,75,53,85,0,0,0,2,0,0,0,0,34,159,0,1,74,55,0,0,0,0,1,0,0,0,0,0,130,0,1,36,89,0,4,0,0,1,0,0,0,0,67,121,0,1,52,92,0,4,0,0,2,0,0,0,0,21,122,0,1,52,84,0,0,0,0,1,0,0,0,0,18,162,0,1,25,81,0,4,0,0,0,0,0,0,0,37,164,0,1,39,72,0,2,0,0,3,0,0,0,0,34,124,0,1,38,98,0,3,0,0,2,0,0,0,0,29,166,0,1,52,71,0,4,0,0,1,0,0,0,0,25,167,0,1,84,93,0,3,0,0,3,0,0,0,0,0,168,0,1,41,94,0,3,0,0,1,0,0,0,0,0,169,0,1,52,89,0,3,0,0,3,0,0,0,0,29,170,0,1,86,90,0,4,0,0,3,0,0,0,0,0,171,0,1,74,52,0,3,0,0,0,0,0,0,0,18,172,0,1,59,35,0,0,0,0,3,0,0,0,0,32,62,4,1,39,72,86,4,0,0,0,0,0,0,0,38,174,0,1,42,73,0,4,0,0,3,0,0,0,0,0,175,0,1,61,36,0,0,0,0,1,0,0,0,0,0,176,0,1,40,43,0,1,0,0,2,0,0,0,0,0,177,0,1,28,75,0,4,0,0,1,0,0,0,0,0,178,0,1,76,43,0,0,0,0,0,0,0,0,0,23,179,0,1,45,84,0,0,0,0,0,0,0,0,0,0,180,0,1,85,53,0,0,0,0,2,0,0,0,0,30,181,0,1,73,51,0,0,0,0,3,0,0,0,0,16,182,0,1,83,52,0,0,0,0,2,0,0,0,0,27,183,0,1,80,49,0,0,0,0,3,0,0,0,0,28,184,0,1,48,73,0,4,0,0,3,0,0,0,0,19,184,0,1,46,81,0,3,0,0,1,0,0,0,0,63,183,0,1,24,74,0,0,0,0,1,0,0,0,0,48,0,0,20,150,150,0,4,0,0,4,0,0,0,0,20,0,0,20,150,150,0,4,0,0,5,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,0,0,0,0,0,0,0,0,0,3,0,0,0,0,20,34,1,1,52,77,100,3,0,0,0,0,0,0,0,38,1,2,1,37,5,100,1,0,0,0,0,0,0,0,18,6,3,1,74,73,100,4,0,0,0,0,0,0,30,43,3,4,1,87,66,100,0,0,0,0,0,0,0,0,42,103,5,1,77,36,100,0,0,0,1,0,0,0,0,53,135,1,1,1,1,70,3,0,0,2,0,0,0,0,45,13,1,1,61,40,72,0,0,0,0,0,0,0,0,35,23,1,1,59,69,85,4,0,0,3,0,0,0,0,40,24,1,1,71,64,77,0,0,0,2,0,0,0,0,42,25,1,1,45,63,77,4,0,0,1,0,0,0,0,23,10,1,1,90,32,75,0,0,0,0,0,0,0,0,35,35,1,1,68,79,85,4,0,0,0,0,0,0,0,40,36,1,1,20,88,84,3,0,0,0,0,0,0,0,33,58,0,1,96,20,0,0,0,0,0,0,0,0,0,22,34,1,1,74,83,81,3,0,0,1,0,0,0,0,51,28,0,1,38,82,0,1,0,0,2,0,0,0,0,22,35,1,1,82,42,88,4,0,0,1,0,0,0,0,66,36,1,1,80,63,92,0,0,0,2,0,0,0,29,56,37,1,1,73,74,94,0,0,0,3,0,0,0,0,57,32,1,1,80,22,79,4,0,0,1,0,0,0,0,66,110,1,1,72,61,82,0,0,0,3,0,0,0,0,51,147,1,1,77,70,73,3,0,0,2,0,0,0,0,66,31,1,1,41,93,89,3,0,0,2,0,0,0,0,68,116,1,1,33,94,83,4,0,0,1,0,0,0,0,84,111,1,1,36,88,78,3,0,0,2,0,0,0,0,50,42,1,1,52,80,77,3,0,0,0,0,0,0,0,58,123,1,1,58,72,74,3,0,0,1,0,0,0,0,69,144,1,1,51,76,72,4,0,0,3,0,0,0,0,64,137,1,1,96,24,87,0,0,0,1,0,0,0,0,55,148,1,1,50,77,87,0,0,0,1,0,0,0,0,62,163,1,1,86,83,89,3,0,0,0,0,0,0,0,56,46,1,1,80,42,88,0,0,0,1,0,0,0,0,35,49,1,1,30,79,86,1,0,0,0,0,0,0,0,50,165,1,1,92,69,84,4,0,0,0,0,0,0,0,58,180,1,1,83,54,88,0,0,0,1,0,0,0,0,66,181,1,1,59,41,72,0,0,0,3,0,0,0,0,57,176,1,1,40,43,70,1,0,0,2,0,0,0,0,20,159,1,1,74,44,75,0,0,0,1,0,0,0,0,35,50,1,1,77,38,77,0,0,0,3,0,0,0,0,38,174,1,1,51,73,85,4,0,0,1,0,0,0,0,57,134,1,1,54,79,72,3,0,0,1,0,0,0,0,54,61,1,1,43,75,77,0,0,0,1,0,0,0,0,65,68,1,1,69,86,88,3,0,0,0,0,0,0,0,56,72,1,1,58,53,82,4,0,0,0,0,0,0,0,70,167,1,1,83,46,76,4,0,0,1,0,0,0,0,55,89,1,1,84,48,88,0,0,0,3,0,0,0,0,69,183,1,1,80,49,79,0,0,0,3,0,0,0,0,45,26,1,1,73,35,88,3,0,0,2,0,0,0,0,67,27,1,1,70,55,87,3,0,0,0,0,0,0,0,70,65,1,1,21,87,85,1,0,0,3,0,0,0,0,74,170,1,1,46,72,72,0,0,0,1,0,0,0,0,48,66,1,1,52,60,80,0,0,0,3,0,0,0,0,66,161,1,1,83,45,0,4,0,0,2,0,0,0,0,71,132,1,1,37,96,77,3,0,0,1,0,0,0,0,78,92,1,1,53,74,78,1,0,0,1,0,0,0,0,68,112,1,1,58,72,84,4,0,0,1,0,0,0,0,30,72,1,1,36,73,72,3,0,0,2,0,0,0,0,69,131,1,1,82,56,74,4,0,0,1,0,0,0,0,47,105,1,1,77,45,84,4,0,0,0,0,0,0,0,53,106,1,1,20,68,87,1,0,0,1,0,0,0,0,58,107,1,1,41,53,88,4,0,0,2,0,0,0,0,55,108,1,1,56,78,78,3,0,0,2,0,0,0,0,62,141,1,1,74,77,87,4,0,0,0,0,0,0,0,53,169,1,1,52,89,74,3,0,0,3,0,0,0,0,46,64,1,1,43,89,88,3,0,0,1,0,0,0,0,17,65,1,1,55,94,88,3,0,0,3,0,0,0,0,25,173,1,1,77,53,71,1,0,0,3,0,0,0,0,73,67,1,1,75,66,72,0,0,0,1,0,0,0,0,25,68,1,1,84,54,74,1,0,0,1,0,0,0,0,23,182,1,1,83,52,75,0,0,0,2,0,0,0,0,44,70,1,1,79,74,75,3,0,0,1,0,0,0,0,49,71,1,1,72,78,71,3,0,0,1,0,0,0,0,33,90,2,1,26,100,100,4,0,0,1,0,0,0,0,44,166,2,1,109,87,98,4,0,0,2,0,0,10,9,57,169,2,1,91,59,74,0,0,0,1,0,0,0,0,50,57,2,1,98,53,100,0,0,0,0,0,0,0,0,59,100,2,1,74,45,85,3,0,0,2,0,0,0,0,42,154,2,1,72,55,87,4,0,0,3,0,0,0,0,61,176,2,1,34,71,84,0,0,0,1,0,0,0,0,58,69,2,1,30,82,87,3,0,0,1,0,0,0,0,28,70,2,1,53,82,83,3,0,0,2,0,0,0,0,60,81,2,1,94,52,77,4,0,0,3,0,0,3,0,26,82,2,1,93,51,71,0,0,0,3,0,0,4,0,27,143,2,1,82,59,81,3,0,0,1,0,0,0,0,59,127,2,1,82,44,83,4,0,0,2,0,0,0,0,35,142,2,1,82,76,72,4,0,0,0,0,0,0,0,56,152,2,1,32,73,72,4,0,0,3,0,0,0,0,84,120,2,1,21,77,81,3,0,0,1,0,0,0,0,33,119,2,1,57,83,76,4,0,0,2,0,0,0,0,32,156,2,1,37,73,88,0,0,0,0,0,0,0,0,35,177,2,1,44,75,83,4,0,0,1,0,0,0,0,58,130,2,1,36,89,81,4,0,0,1,0,0,0,0,84,122,2,1,52,84,74,0,0,0,1,0,0,0,0,35,93,2,1,74,49,88,4,0,0,3,0,0,0,0,17,171,2,1,74,52,74,3,0,0,0,0,0,0,0,35,172,2,1,59,35,89,0,0,0,3,0,0,0,0,49,62,2,1,39,72,86,4,0,0,0,0,0,0,0,55,177,2,1,28,75,82,4,0,0,1,0,0,0,0,31,178,2,1,76,43,70,0,0,0,0,0,0,0,0,40,179,2,1,45,84,77,0,0,0,0,0,0,0,0,31,100,2,1,83,58,70,4,0,0,1,0,0,0,0,25,147,2,1,41,77,72,0,0,0,3,0,0,0,0,50,102,0,1,90,29,0,4,0,0,2,0,0,0,0,22,96,0,1,92,49,0,4,0,0,0,0,0,0,0,22,52,3,1,76,63,93,4,0,0,3,0,0,0,0,71,50,3,1,88,83,90,4,0,0,1,0,0,0,0,74,51,3,1,83,40,94,4,0,0,3,0,0,0,0,69,133,3,1,81,56,81,0,0,0,3,0,0,0,0,57,155,3,1,91,53,74,4,0,0,0,0,0,0,0,55,172,3,1,75,84,80,4,0,0,3,0,0,0,0,53,100,3,1,75,64,79,4,0,0,0,0,0,0,0,35,116,3,1,81,40,86,4,0,0,3,0,0,0,0,43,114,3,1,83,67,83,0,0,0,1,0,0,0,0,49,103,3,1,76,51,80,0,0,0,3,0,0,0,0,36,102,3,1,78,44,80,1,0,0,0,0,0,0,0,48,152,3,1,40,86,82,4,0,0,2,0,0,0,0,69,151,3,1,34,75,88,3,0,0,1,0,0,0,0,72,76,3,1,72,56,72,4,0,0,3,0,0,0,0,31,108,3,1,80,43,76,4,0,0,2], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+235537);
/* memory initializer */ allocate([56,117,3,1,68,78,86,4,0,0,3,0,0,0,0,56,171,3,1,20,86,95,4,0,0,1,0,0,0,0,53,128,3,1,40,84,83,4,0,0,3,0,0,0,0,57,178,3,1,22,77,84,0,0,0,3,0,0,0,0,47,129,3,1,47,70,86,3,0,0,1,0,0,0,0,68,156,3,1,25,84,95,4,0,0,1,0,0,0,0,51,125,3,1,71,26,80,3,0,0,0,0,0,0,0,76,117,3,1,31,73,81,0,0,0,2,0,0,0,0,57,118,3,1,36,75,78,4,0,0,1,0,0,0,0,41,119,3,1,78,47,74,4,0,0,3,0,0,0,0,48,164,3,1,39,72,87,2,0,0,3,0,0,0,0,51,120,3,1,28,74,89,0,0,0,1,0,0,0,0,36,131,3,1,42,80,80,3,0,0,1,0,0,0,0,21,121,3,1,77,91,76,4,0,0,3,0,0,0,0,47,122,3,1,26,94,73,4,0,0,3,0,0,0,0,42,134,3,1,44,49,85,0,0,0,0,0,0,0,0,20,174,3,1,42,73,86,4,0,0,3,0,0,0,0,27,175,3,1,61,36,77,0,0,0,1,0,0,0,0,22,137,3,1,75,53,73,4,0,0,0,0,0,0,0,64,138,3,1,49,93,88,0,0,0,2,0,0,0,0,24,139,4,1,49,61,74,0,0,0,1,0,0,0,0,45,140,4,1,84,50,79,0,0,0,3,0,0,0,0,33,141,4,1,80,45,72,0,0,0,2,0,0,0,0,43,142,4,1,76,35,76,0,0,0,0,0,0,0,0,39,143,4,1,94,69,75,0,0,0,3,0,0,0,0,40,144,4,1,72,42,77,0,0,0,0,0,0,0,0,36,145,4,1,73,38,87,0,0,0,2,0,0,0,0,36,146,4,1,64,49,84,0,0,0,1,0,0,0,0,39,147,4,1,22,75,75,0,0,0,2,0,0,0,0,35,104,5,1,75,53,85,0,0,0,2,0,0,0,0,51,159,5,1,74,55,77,0,0,0,1,0,0,0,0,20,167,0,1,84,93,0,3,0,0,3,0,0,0,0,28,168,0,1,41,94,0,3,0,0,1,0,0,0,0,0,184,0,1,46,81,0,3,0,0,1,0,0,23,25,22,183,0,1,24,74,0,0,0,0,1,0,0,25,0,22,154,0,1,63,93,0,4,0,0,3,0,0,0,0,0,155,0,1,55,79,0,4,0,0,0,0,0,0,0,35,156,0,1,46,84,0,3,0,0,2,0,0,0,0,20,170,0,1,93,90,0,4,0,0,3,0,0,0,0,19,184,0,1,48,73,0,4,0,0,3,0,0,0,0,36,162,0,1,25,81,0,4,0,0,0,0,0,0,0,54,136,0,1,75,59,0,4,0,0,0,0,0,0,0,53,129,0,1,79,58,0,4,0,0,2,0,0,0,0,55,144,0,1,67,70,0,3,0,0,1,0,0,0,0,58,180,0,1,85,53,0,0,0,0,2,0,0,0,0,47,181,0,1,73,51,0,0,0,0,3,0,0,0,0,33,165,0,1,64,70,0,4,0,0,3,0,0,0,0,0,158,0,1,83,48,0,4,0,0,0,0,0,0,0,34,1,0,1,53,52,0,0,0,0,3,0,0,0,0,65,15,0,1,50,37,0,1,0,0,0,0,0,0,0,38,16,0,1,71,51,0,0,0,0,2,0,0,0,0,55,2,0,1,41,41,0,0,0,0,3,0,0,0,0,51,17,0,1,80,22,0,0,0,0,3,0,0,0,0,58,18,0,1,68,35,0,0,0,0,1,0,0,0,0,38,19,0,1,59,77,0,0,0,0,1,0,0,0,0,47,0,0,20,150,150,0,4,0,0,5,0,0,0,0,22,0,0,20,150,150,0,4,0,0,5,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,0,0,0,0,0,0,0,0,0,3,0,0,0,0,22,10,146,13,0,0,54,0,1,0,0,0,0,0,16,0,16,0,108,0,0,192,82,73,3,215,165,162,3,128,162,64,0,0,0,0,0,0,0,0,0,0,179,112,0,184,160,72,0,108,209,172,192,28,121,52,95,193,143,130,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,112,12,44,0,66,8,104,0,192,108,0,148,8,124,17,35,192,3,56,1,8,3,65,2,48,6,25,7,7,4,194,4,56,4,4,4,2,4,0,3,38,6,38,144,96,175,248,44,7,104,0,84,0,76,0,204,0,24,0,40,0,40,0,76,0,156,0,38,0,107,0,61,224,128,105,170,47,96,252,145,215,127,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,1,140,209,218,51,250,23,13,188,7,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,80,9,233,147,234,252,212,0,97,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,5,0,8,144,24,12,48,13,7,55,156,192,96,0,0,0,0,0,0,0,0,0,0,0,0,3,0,4,128,8,96,16,16,164,136,12,64,6,49,227,17,24,83,15,70,0,244,0,12,0,0,0,0,0,0,0,0,0,84,0,130,0,40,0,0,0,0,220,198,128,81,203,52,102,92,60,132,7,131,0,0,0,0,0,0,0,0,0,0,33,0,1,0,3,0,0,0,0,0,18,88,54,109,6,21,11,182,112,113,128,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,7,216,17,16,35,0,34,137,204,69,240,34,0,28,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,15,46,210,44,96,230,0,132,40,6,0,2,4,3,44,1,0,1,0,9,0,3,0,19,0,6,0,44,0,16,16,192,0,0,0,0,0,0,0,0,0,0,0,0,56,0,124,1,191,3,141,141,12,216,48,112,24,145,12,32,5,64,32,128,1,64,0,152,0,176,0,132,0,196,0,213,0,226,192,227,224,123,96,6,48,14,16,12,16,0,152,0,200,0,100,0,152,120,15,8,133,200,110,40,150,24,113,48,124,48,195,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,3,8,0,16,0,32,0,64,0,64,0,32,0,32,0,32,0,16,0,8,0,4,0,4,0,4,0,4,0,4,0,0,0,192,0,32,0,16,0,12,0,2,0,3,128,0,128,0,192,0,64,0,128,3,0,2,0,3,0,1,0,0,128,0,16,0,97,1,130,2,4,12,68,16,137,97,16,12,81,0,166,3,68,0,64,0,0,0,2,0,44,64,225,48,1,69,70,41,32,156,40,67,6,48,128,12,0,2,0,81,128,64,0,32,0,16,0,0,0,0,0,0,0,0,1,192,6,0,0,0,0,0,0,0,0,0,1,0,2,0,7,0,56,1,128,2,0,60,0,64,0,192,0,128,0,0,0,0,0,0,0,0,0,0,1,0,15,254,27,3,253,0,15,0,59,0,43,0,77,0,127,0,106,0,215,0,124,128,0,224,0,62,112,123,224,196,96,57,192,73,64,22,96,106,160,141,223,106,218,135,191,0,240,128,96,128,32,128,0,0,1,0,6,0,0,14,0,19,0,30,0,42,128,106,0,235,128,189,192,234,224,162,192,251,160,215,96,245,128,215,0,191,64,245,128,64,1,128,0,32,0,64,1,8,0,0,17,4,34,44,204,0,24,0,96,0,208,1,1,0,26,0,116,0,56,16,112,50,1,88,9,8,2,12,0,0,8,16,0,24,136,13,16,6,96,96,192,35,3,34,129,160,9,176,213,191,165,37,197,50,0,11,128,181,128,157,128,207,64,49,64,0,64,128,192,196,192,99,192,33,128,16,130,8,128,7,128,1,128,193,128,0,0,0,0,0,0,0,0,0,3,0,12,0,104,1,128,6,0,120,0,128,0,0,0,0,0,0,0,0,0,0,0,4,0,4,0,8,0,16,0,144,0,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,129,2,2,2,4,2,0,4,0,12,0,8,0,16,0,16,0,16,1,16,2,16,4,12,9,4,17,8,34,16,204,44,0,66,0,104,0,192,0,0,0,0,0,0,0,48,0,200,0,4,0,82,0,145,0,16,224,10,0,73,96,8,128,32,24,33,240,50,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,0,0,16,0,1,0,0,0,0,0,40,0,76,0,138,0,11,0,16,0,16,0,0,0,0,8,0,44,0,88,0,132,0,208,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,1,96,0,14,0,12,0,57,0,102,0,252,1,242,0,221,3,106,2,228,1,69,7,154,7,107,6,205,15,170,30,213,13,98,91,1,70,135,173,238,178,203,211,8,172,181,80,214,43,26,85,85,105,170,149,85,106,202,52,45,218,210,66,237,221,41,64,201,128,32,32,0,0,1,8,0,0,17,0,34,0,204,0,25,0,96,0,208,0,1,0,201,0,109,0,39,0,19,55,129,26,73,9,0,4,0,8,8,16,0,8,136,13,16,6,96,100,200,35,3,34,129,52,9,178,73,19,109,89,56,73,128,41,128,149,128,141,128,71,128,183,0,3,0,131,0,67,0,34,0,18,0,14,0,2,0,98,0,22,0,9,0,0,0,0,0,0,0,0,0,0,3,0,12,0,16,0,37,0,73,0,145,3,16,0,36,0,192,4,8,0,7,0,0,0,0,0,0,0,0,0,0,0,0,128,0,64,0,32,0,16,0,8,0,167,0,144,0,136,0,128,0,64,0,0,0,16,0,16,0,16,0,24,0,4,0,4,0,6,0,1,128,0,96,0,35,0,58,0,12,0,0,0,0,0,0,0,0,136,0,116,0,0,0,0,0,0,0,0,14,0,113,31,129,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,128,0,64,0,32,0,17,240,14,14,0,1,0,0,0,0,0,0,74,0,9,0,24,0,16,1,0,2,0,2,0,3,0,28,1,224,6,0,120,0,128,0,0,0,0,0,0,0,0,0,1,48,6,12,120,4,128,3,0,1,0,0,0,0,0,0,2,0,3,128,97,96,2,16,67,64,6,0,0,0,0,0,47,133,63,86,58,169,111,54,135,213,1,106,0,114,0,63,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,38,209,187,123,101,182,132,107,26,222,235,45,141,75,234,136,149,53,226,214,197,26,86,213,41,42,54,197,27,138,22,91,0,12,8,64,0,64,0,33,0,16,8,136,17,128,102,132,12,131,48,193,224,228,0,144,13,250,186,203,156,101,56,16,172,154,220,101,106,0,127,1,45,136,196,192,232,102,12,127,100,96,180,19,158,29,223,36,236,134,147,215,14,92,71,40,135,128,195,128,224,128,144,128,141,128,99,128,16,128,136,128,196,128,107,0,62,0,159,0,204,0,248,0,8,3,200,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,9,128,16,192,32,176,196,76,4,35,8,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,4,0,16,0,1,128,1,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,2,192,3,160,97,144,2,128,67,0,6,0,0,0,0,0,0,0,0,0,8,0,14,1,133,0,8,1,13,0,24,0,0,128,0,96,0,16,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,64,0,0,0,0,32,0,176,1,40,4,36,0,96,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,3,0,12,0,0,0,3,0,14,0,112,0,128,0,128,1,128,1,0,1,0,15,0,120,0,128,0,0,0,0,0,0,0,0,0,0,0,192,0,64,0,96,0,16,0,16,0,12,0,3,0,0,128,0,64,0,32,0,16,0,8,0,6,0,3,0,1,12,70,5,173,2,178,4,211,6,173,5,84,6,45,0,82,13,107,14,148,15,104,31,214,25,109,49,26,118,183,250,202,116,140,156,0,169,73,225,203,48,24,26,105,15,250,133,31,110,12,61,0,157,0,175,0,101,0,103,128,51,0,10,0,96,130,176,99,156,5,110,76,142,90,204,196,231,78,199,215,108,254,120,99,0,0,56,0,0,32,0,112,0,140,1,3,104,48,12,0,12,0,200,49,16,3,176,12,32,16,64,0,224,0,224,0,0,0,6,0,9,0,16,128,32,64,192,48,0,0,16,96,33,176,35,64,70,112,5,28,13,3,17,17,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,80,0,0,0,0,0,0,0,192,15,0,120,0,192,3,0,4,0,24,0,96,0,64,0,128,0,0,0,0,0,0,0,0,112,1,159,6,0,8,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,8,0,0,0,0,0,0,112,0,152,0,7,224,0,48,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,7,156,12,2,16,3,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,48,0,96,0,64,0,64,0,128,248,128,12,128,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,129,0,224,24,88,0,132,16,208,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,227,77,122,183,149,80,120,183,97,72,53,175,26,82,29,163,14,202,7,189,6,246,6,91,4,70,5,173,6,178,4,211,166,0,150,0,162,0,238,0,54,0,83,0,15,0,129,0,105,0,57,0,153,0,159,0,67,0,99,0,51,0,146,0,6,9,0,228,1,26,2,93,4,99,0,64,0,136,1,8,6,8,0,20,0,17,0,22,0,12,12,56,16,96,0,128,5,8,132,134,170,65,81,48,49,12,247,2,56,129,32,64,65,32,129,16,2,140,4,131,25,72,33,48,80,8,160,68,0,6,0,200,0,24,192,32,48,64,9,192,0,0,242,0,1,128,0,64,0,32,0,16,192,8,32,4,24,4,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,22,34,195,68,131,135,2,12,6,56,0,192,4,0,4,0,5,196,12,12,9,56,25,64,49,0,67,0,8,0,0,0,0,0,0,192,0,112,0,28,0,3,224,0,0,131,0,129,0,192,64,32,0,16,0,12,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,173,5,84,14,45,12,82,13,107,10,148,25,108,49,27,22,182,26,202,51,77,58,182,53,81,120,183,97,73,229,175,58,0,150,0,163,0,227,0,51,0,17,0,9,0,135,4,110,14,50,63,226,44,3,98,15,192,186,2,223,67,58,129,7,1,0,202,3,16,0,64,1,16,0,96,3,193,1,6,0,58,128,2,192,0,96,30,144,65,95,192,45,1,238,57,33,163,70,16,136,8,48,4,64,2,128,1,4,128,1,16,2,8,4,8,8,4,64,0,48,0,92,0,36,0,150,0,64,1,176,0,64,0,0,0,0,0,1,0,136,0,128,0,64,0,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,48,0,16,0,24,0,6,0,1,0,0,192,0,64,0,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,225,207,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,17,0,16,0,48,192,224,55,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,31,128,0,96,0,32,0,16,0,16,0,8,0,8,0,14,0,3,0,0,0,130,1,41,2,72,4,136,120,133,1,36,6,4,0,68,0,58,0,0,0,0,0,0,0,0,0,0,248,0,6,0,0,0,0,0,128,0,64,0,32,0,128,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,1,0,3,0,6,0,14,0,31,0,18,0,34,1,237,5,85,7,230,13,149,14,91,28,70,125,173,203,98,136,211,218,83,45,155,35,70,214,237,89,114,217,147,54,237,110,20,150,237,153,18,109,235,34,84,238,91,144,70,221,173,38,178,96,132,4,25,44,112,247,224,64,0,8,129,17,2,102,96,12,224,48,134,224,66,0,130,13,2,186,19,0,0,0,0,120,112,169,194,142,0,206,0,42,72,24,8,140,120,200,161,75,0,70,0,56,3,24,33,8,65,30,129,5,9,0,0,252,0,60,0,216,0,72,0,104,0,28,0,140,0,72,1,110,1,63,240,56,191,31,210,14,98,7,205,142,181,1,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,120,0,28,0,10,0,219,0,55,3,108,159,149,116,153,175,0,0,0,0,0,0,0,1,0,15,0,31,0,242,3,34,7,237,15,53,25,108,113,27,246,182,170,203,243,76,186,183,0,15,8,59,56,127,249,246,239,173,47,254,217,180,52,108,110,222,151,46,153,54,110,221,161,67,110,222,145,34,94,189,0,0,128,0,0,14,128,11,0,7,0,14,0,59,0,50,0,34,0,109,0,117,193,230,255,181,107,202,214,177,186,226,0,0,0,0,0,0,192,0,192,0,192,0,248,0,216,0,54,0,110,0,151,192,155,224,110,216,161,175,111,106,144,180,2,0,1,208,0,22,0,1,0,0,0,0,0,0,0,0,0,2,0,6,0,15,0,127,31,255,255,203,91,8,70,181,0,1,0,1,128,3,160,3,112,7,9,31,11,242,7,226,6,205,124,182,248,141,150,219,17,165,107,102,220,187,180,200,181,189,214,84,154,109,213,178,170,139,69,180,218,72,55,105,108,221,149,178,154,92,110,104,161,186,110,141,145,186,94,77,196,211,54,173,213,84,54,45,141,182,219,141,229,91,166,101,91,166,168,91,91,168,164,91,215,164,41,215,209,41,78,209,44,3,0,0,14,0,4,0,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,22,20,0,0,0,0,0,0,0,0,0,0,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,0,69,0,1,0,0,0,0,0,7,0,9,0,2,0,56,186,186,84,124,56,124,108,68,0,16,40,56,68,254,146,170,238,34,0,0,0,56,0,1,0,0,0,0,0,8,0,8,0,1,1,195,129,0,0,0,0,129,129,24,60,126,255,255,60,60,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,121,44,0,0,3,0,1,0,0,0,0,0,0,20,9,7,0,8,0,0,20,20,0,0,0,20,20,1,0,0,20,20,2,0,0,20,20,3,0,0,80,80,4,0,0,60,20,0,20,15,40,1,5,90,25,30,30,6,90,25,1,1,6,160,0,96,0,1,0,255,12,0,78,192,0,11,200,1,1,1,0,15,0,0,1,228,0,0,158,254,135,240,127,192,2,31,248,1,1,1,0,39,160,0,6,228,0,97,255,255,195,67,127,216,124,15,248,1,1,1,0,63,240,128,7,252,31,194,255,255,192,3,255,248,0,127,255,1,1,1,0,63,224,124,55,253,133,135,255,255,192,3,255,248,0,127,255,1,1,1,1,255,252,0,63,255,128,7,255,207,216,9,253,251,1,127,254,129,1,1,1,255,252,0,63,255,128,7,255,3,248,15,224,127,3,120,62,193,1,1,2,255,253,1,191,127,32,55,231,1,246,15,64,62,1,240,31,129,1,1,6,248,61,129,252,15,224,63,129,0,240,108,64,30,73,128,15,145,1,1,3,240,31,0,248,5,224,223,0,0,76,56,0,27,7,0,0,241,1,1,19,224,3,36,240,4,108,30,0,0,4,48,0,9,134,0,0,97,1,1,30,0,1,193,176,0,56,100,0,32,3,64,2,0,0,0,0,1,1,1,12,0,0,195,32,0,24,64,0,0,0,0,0,0,64,0,0,1,1,1,0,0,0,0,0,128,5,128,8,0,0,0,0,0,0,0,0,1,1,1,0,0,0,4,0,0,0,0,0,130,0,0,0,32,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,1,1,1,0,0,0,0,8,0,0,0,130,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,248,1,192,27,0,112,0,0,1,1,1,0,0,0,0,0,0,0,0,0,120,0,128,31,0,0,7,224,193,1,1,0,0,0,28,1,176,7,0,62,120,0,0,78,0,0,3,192,193,1,1,6,15,192,0,1,240,2,0,60,123,0,0,255,227,0,27,216,1,1,1,6,7,128,0,0,228,0,0,60,255,12,0,127,193,138,31,248,1,1,1,0,55,176,1,143,254,0,1,189,255,3,227,127,216,56,79,250,1,1,1,0,63,240,163,7,252,0,97,255,255,192,3,255,248,0,127,255,1,1,1,0,191,228,56,55,253,143,129,255,255,240,1,251,252,0,127,255,1,1,1,1,255,252,0,63,255,128,7,255,199,216,13,207,251,1,119,254,193,1,1,1,255,252,0,127,191,0,31,255,3,248,15,176,255,1,248,63,193,1,1,6,255,221,1,191,231,96,55,199,1,242,39,32,62,1,208,15,129,1,1,7,248,63,1,254,27,224,63,129,0,254,124,64,22,205,128,7,145,1,1,3,224,23,0,248,9,200,159,0,0,78,56,0,19,135,0,0,225,1,1,23,192,11,102,208,4,124,254,0,0,0,0,0,1,134,0,0,97,1,1,14,192,9,195,144,0,56,228,0,48,0,64,2,0,0,0,0,1,1,1,12,128,8,195,0,0,0,0,0,0,0,0,0,0,72,1,128,17,1,1,0,128,8,0,0,128,4,0,24,0,0,0,0,0,0,0,0,1,1,1,16,3,0,36,0,0,0,0,0,128,0,0,48,0,0,0,0,1,1,1,0,64,0,0,0,0,0,0,0,116,0,0,24,128,0,0,0,1,1,1,0,0,0,0,0,24,0,0,3,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,2,48,0,0,92,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,200,1,128,17,0,48,2,64,1,1,1,0,0,0,0,0,0,0,0,0,252,32,0,31,132,16,7,225,193,1,1,0,4,128,24,1,16,3,0,39,120,32,0,47,128,0,131,192,193,1,1,7,15,192,16,67,240,0,8,127,251,8,8,111,96,0,27,216,1,1,1,6,7,130,0,3,232,0,8,60,255,4,112,127,224,199,31,248,1,1,1,0,55,176,0,13,236,32,33,191,255,199,195,127,216,56,79,251,1,1,1,0,63,241,198,15,252,28,65,255,255,192,3,255,248,0,127,254,1,1,1,1,191,228,56,55,253,135,199,255,255,224,9,255,252,4,127,254,1,1,1,0,255,252,0,63,255,128,7,255,239,216,31,216,250,3,124,62,193,1,1,0,255,252,64,127,255,32,15,255,131,248,15,224,126,3,248,31,193,1,1,6,248,125,128,190,55,240,55,239,1,250,102,64,30,205,176,15,129,1,1,7,240,63,128,252,15,224,63,131,0,250,92,0,31,207,0,7,241,1,1,3,224,27,102,240,4,204,191,1,0,238,56,0,1,134,0,4,97,1,1,31,192,1,231,240,0,116,190,0,0,12,0,0,0,0,0,0,1,1,1,12,64,0,195,0,0,56,238,0,48,1,64,6,0,80,1,0,1,1,1,0,0,0,0,0,0,0,96,0,0,0,64,0,0,64,0,0,17,1,1,0,1,0,20,0,192,5,0,24,0,0,0,0,32,0,0,0,1,1,1,16,0,0,4,0,0,4,0,0,194,0,0,16,64,0,8,16,1,1,1,0,0,0,0,8,0,0,0,1,120,0,0,15,0,0,3,0,1,1,1,0,16,32,0,4,16,0,0,134,0,0,0,0,0,0,0,0,3,1,1,0,1,128,0,1,224,0,0,60,0,0,1,0,0,0,0,2,3,1,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,128,128,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,128,0,0,0,0,0,0,0,0,128,1,128,0,0,16,0,0,3,1,1,0,0,0,0,0,0,0,0,0,252,32,128,27,4,48,3,225,195,1,1,0,0,0,16,0,0,3,0,2,124,32,0,63,128,0,135,224,195,1,1,135,15,128,24,65,176,2,8,127,123,48,0,79,96,0,3,200,195,1,1,134,15,194,0,3,248,0,8,124,255,8,56,127,225,131,31,248,3,1,1,134,39,128,0,13,228,0,25,188,254,7,227,127,208,124,15,242,3,1,1,128,63,241,131,15,252,56,33,255,255,192,3,255,248,8,127,255,3,1,1,128,159,224,124,23,253,143,192,255,255,224,1,255,248,4,127,254,3,1,1,129,255,252,32,63,255,128,7,255,255,216,25,223,254,1,127,254,131,1,1,128,255,252,64,63,255,0,15,255,135,248,15,176,127,3,248,62,195,1,1,130,255,253,0,255,247,48,55,255,3,248,47,96,62,5,240,15,131,1,1,134,248,63,129,252,27,224,63,195,1,242,68,64,30,205,160,7,163,1,1,131,224,31,64,248,13,232,63,129,0,252,56,0,11,134,0,4,243,1,1,139,192,11,102,240,4,68,159,0,0,140,48,0,1,6,0,0,99,1,1,158,64,0,195,160,0,56,126,0,48,0,0,0,0,0,1,0,3,1,1,140,0,0,193,0,0,24,98,0,0,1,64,6,0,88,0,0,19,1,1,128,1,0,0,0,0,0,0,24,160,0,96,0,1,0,128,0,0,240,0,128,128,42,0,42,0,42,2,1,1,0,15,0,0,1,96,0,5,228,0,128,197,81,69,81,69,80,17,81,1,0,39,160,0,6,224,1,15,252,0,128,128,40,0,40,0,40,0,1,1,0,63,240,128,7,236,62,7,252,0,128,132,64,4,64,4,64,20,17,1,0,63,224,124,55,252,0,63,255,128,128,160,0,32,0,32,0,0,129,1,1,255,252,0,63,252,0,63,255,128,128,128,0,0,0,0,0,0,1,1,1,255,252,0,63,253,128,191,255,64,128,128,0,0,0,0,0,0,129,1,2,255,253,1,191,63,129,188,31,96,128,128,0,0,0,0,0,1,65,1,6,248,61,129,252,31,0,248,15,192,128,128,0,0,0,0,0,0,161,1,3,240,31,0,248,15,36,192,7,200,128,128,0,0,0,0,0,0,1,1,19,224,3,36,240,13,131,128,0,120,128,128,0,0,0,0,0,0,1,1,30,0,1,193,176,4,195,0,0,48,128,128,0,0,0,0,0,0,1,1,12,0,0,195,32,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,32,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,4,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,16,0,0,0,0,128,132,0,0,0,0,0,0,1,1,0,0,0,0,8,0,0,0,0,0,128,130,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,132,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,170,160,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,128,132,0,0,0,0,0,0,1,1,0,128,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,129,64,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,130,128,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,128,56,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,28,1,128,0,3,240,96,128,128,0,0,0,0,0,0,1,1,6,15,192,0,1,0,0,1,224,96,128,128,0,0,0,0,0,0,1,1,6,7,128,0,0,241,128,13,236,0,128,128,0,0,0,0,0,0,1,1,0,55,176,1,143,224,197,15,252,0,128,128,0,0,0,0,0,0,1,1,0,63,240,163,7,236,28,39,253,0,128,128,0,0,0,0,0,0,1,1,0,191,228,56,55,252,0,63,255,128,128,128,0,0,0,0,0,0,1,1,1,255,252,0,63,254,0,63,255,128,128,128,0,0,0,0,0,0,1,1,1,255,252,0,127,253,128,187,255,96,128,128,0,0,0,0,0,0,1,1,6,255,221,1,191,127,128,252,31,224,128,128,0,0,0,0,0,0,1,1,7,248,63,1,254,31,0,232,7,192,128,128,0,0,0,0,0,0,1,1,3,224,23,0,248,11,102,208,3,232,128,128,0,0,0,0,0,0,1,1,23,192,11,102,208,9,195,144,3,112,128,128,0,0,0,0,0,0,1,1,14,192,9,195,144,0,195,16,1,48,128,128,0,0,0,0,0,0,1,1,12,128,8,195,0,0,0,16,1,0,128,128,0,0,0,0,0,0,1,1,0,128,8,0,0,0,36,0,192,8,128,128,0,0,0,0,0,0,1,1,16,3,0,36,0,0,0,0,2,0,128,128,0,0,0,0,0,0,1,1,0,64,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,64,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,2,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,128,24,1,32,0,128,128,0,0,0,0,0,0,1,1,0,4,128,24,1,194,8,3,240,224,128,128,0,0,0,0,0,0,1,1,7,15,192,16,67,192,0,65,224,96,128,128,0,0,0,0,0,0,1,1,6,7,130,0,3,176,0,13,236,0,128,128,0,0,0,0,0,0,1,1,0,55,176,0,13,240,99,143,252,0,128,128,0,0,0,0,0,0,1,1,0,63,241,198,15,236,28,39,253,128,128,128,0,0,0,0,0,0,1,1,1,191,228,56,55,252,0,63,255,0,128,128,0,0,0,0,0,0,1,1,0,255,252,0,63,254,2,63,255,0,128,128,0,0,0,0,0,0,1,1,0,255,252,64,127,125,1,190,31,96,128,128,0,0,0,0,0,0,1,1,6,248,125,128,190,63,1,252,15,224,128,128,0,0,0,0,0,0,1,1,7,240,63,128,252,15,102,216,7,192,128,128,0,0,0,0,0,0,1,1,3,224,27,102,240,15,231,128,3,248,128,128,0,0,0,0,4,8,1,1,31,192,1,231,240,0,195,0,2,48,128,128,0,0,0,0,8,16,1,1,12,64,0,195,0,0,0,0,0,0,128,128,0,0,0,0,8,8,1,1,0,0,0,0,0,0,40,0,128,0,128,128,0,0,0,2,80,48,1,1,0,1,0,20,0,0,32,0,0,8,128,128,0,0,0,8,161,72,1,1,16,0,0,4,0,16,0,0,0,0,128,128,0,0,0,16,66,148,1,1,0,0,0,0,8,32,0,4,8,0,128,128,0,0,0,160,133,73,81,1,0,16,32,0,4,128,0,1,128,0,128,128,0,0,0,5,0,2,129,1,0,1,128,0,1,0,0,0,0,1,128,128,0,0,0,2,32,0,1,1,128,0,0,0,0,0,0,0,1,1,128,128,0,0,0,0,0,0,1,1,128,128,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,64,1,1,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,128,1,1,0,0,0,0,0,0,0,0,0,1,128,128,0,0,0,0,0,64,1,1,128,0,0,0,0,0,0,0,0,1,128,128,0,0,0,0,0,0,1,1,128,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,0,0,0,8,0,0,0,128,128,0,0,0,0,0,0,1,1,0,0,0,16,0,130,24,1,240,225,128,128,0,0,0,0,0,0,1,1,135,15,128,24,65,192,0,67,240,97,128,128,0,0,0,0,0,0,1,1,134,15,194,0,3,176,0,1,228,97,128,128,0,0,0,0,0,0,1,1,134,39,128,0,13,240,193,143,252,1,128,128,0,0,0,0,0,0,1,1,128,63,241,131,15,232,62,7,249,1,128,128,0,0,0,0,0,0,1,1,128,159,224,124,23,252,4,63,255,129,128,133,0,0,0,0,0,0,1,1,129,255,252,32,63,252,2,63,255,1,128,128,0,0,0,0,0,0,1,1,128,255,252,64,63,255,0,191,255,65,128,128,0,0,0,0,0,0,1,1,130,255,253,0,255,63,129,252,31,97,128,128,0,0,0,0,0,0,1,1,134,248,63,129,252,31,2,248,7,193,128,128,0,0,0,0,0,0,1,1,131,224,31,64,248,15,102,208,3,209,128,128,0,0,0,0,0,0,1,1,139,192,11,102,240,5,195,0,2,121,128,128,0,0,0,0,0,0,1,1,158,64,0,195,160,0,131,0,0,49,128,128,0,0,0,0,0,0,1,1,140,0,0,193,0,0,0,0,128,1,128,128,0,0,0,0,0,0,1,1,128,1,0,0,0,160,0,96,0,1,0,0,8,15,36,110,172,144,14,1,170,0,42,2,1,32,214,29,48,16,0,64,8,13,72,102,213,63,245,70,209,69,80,17,81,149,72,14,144,16,2,192,8,8,200,98,227,49,132,4,168,0,40,0,0,144,184,7,144,16,3,192,8,12,145,160,178,99,116,4,192,4,64,20,17,73,116,15,208,16,3,248,8,10,153,199,202,95,52,41,0,32,0,0,128,72,178,255,208,16,31,248,8,9,63,225,132,240,212,9,0,0,0,0,0,228,24,7,240,16,31,244,8,9,32,62,132,224,36,18,0,0,0,0,128,164,23,255,176,16,47,246,8,10,86,12,201,192,56,18,0,0,0,1,64,146,16,199,144,16,111,252,8,14,123,246,121,224,88,36,0,0,0,0,160,147,23,99,144,16,63,124,136,12,142,27,243,254,144,36,0,0,0,0,0,74,182,96,208,17,62,7,136,12,156,7,243,192,48,78,0,0,0,0,0,76,116,96,80,17,224,3,8,13,248,7,213,255,208,74,0,0,0,0,0,36,208,88,48,16,192,0,8,11,252,11,141,198,16,146,0,0,0,0,0,37,62,57,240,16,0,0,8,9,255,210,199,141,209,146,0,0,0,0,0,18,24,127,144,16,0,0,8,11,248,7,46,204,218,164,0,0,0,0,0,18,23,192,16,16,0,0,8,15,223,250,25,76,92,100,0,0,0,0,0,9,51,6,176,16,0,0,8,11,152,194,10,116,22,72,0,0,0,0,0,9,230,253,240,16,0,0,8,15,145,187,30,120,249,72,0,0,0,0,0,4,253,135,16,16,0,0,8,11,33,155,244,252,48,144,0,0,0,0,0,4,254,3,144,16,0,16,8,13,33,139,244,135,208,144,0,0,0,0,0,2,190,1,240,16,8,0,8,10,95,131,169,193,153,32,0,0,0,0,0,3,29,3,240,16,0,0,8,10,112,223,41,126,207,32,0,0,0,0,0,2,52,191,240,16,0,0,8,12,224,38,51,195,126,64,0,0,0,0,0,49,78,1,240,16,0,0,8,12,192,62,51,128,254,64,0,0,0,0,0,41,133,255,240,16,0,0,8,9,224,92,103,0,250,128,0,0,0,0,0,37,4,49,240,16,0,0,8,9,254,159,167,129,113,128,0,0,0,0,0,36,141,216,240,16,0,0,8,11,192,63,79,250,88,128,0,0,0,0,0,18,125,152,48,16,0,6,8,10,255,219,203,0,229,24,0,0,0,0,0,18,253,24,16,16,96,6,8,12,198,31,83,255,67,40,0,0,0,0,0,9,92,31,176,16,96,192,8,12,141,214,51,24,65,72,0,0,0,0,0,9,79,176,240,16,3,192,8,9,12,219,38,55,98,72,0,0,0,0,0,4,198,64,112,16,3,208,8,9,12,92,164,51,124,144,0,0,0,0,0,4,199,192,48,16,11,248,8,10,52,24,72,49,126,144,0,0,0,0,0,2,99,160,112,16,31,248,8,11,255,232,75,240,117,32,0,0,0,0,0,2,95,151,240,16,31,246,8,12,112,236,158,27,229,32,0,0,0,0,0,7,47,192,48,16,111,254,8,12,224,39,156,4,198,64,0,0,0,0,0,5,61,191,240,16,127,124,8,15,192,63,56,7,198,64], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+245780);
/* memory initializer */ allocate([4,175,134,48,16,62,62,136,15,224,95,60,11,140,128,0,0,0,0,0,4,198,187,16,17,124,55,8,11,254,158,127,211,244,128,0,0,0,0,0,2,77,179,16,16,236,19,8,15,192,62,126,7,233,192,0,0,0,0,0,2,83,163,16,16,200,16,8,14,255,218,251,251,121,64,0,0,0,0,0,1,33,130,208,16,8,0,136,12,198,17,242,195,234,64,0,0,0,0,0,1,33,127,240,17,0,32,8,12,141,216,243,186,198,64,0,0,0,0,0,0,147,112,240,16,4,0,8,9,12,213,229,155,100,128,0,0,0,0,0,0,158,64,112,16,0,0,8,9,12,83,37,139,148,128,0,0,0,0,0,0,79,192,48,16,0,0,8,10,52,17,78,131,9,0,0,0,0,0,0,0,79,160,112,16,0,0,8,11,248,227,207,253,9,0,0,0,0,0,0,0,39,151,240,16,0,0,8,14,28,60,158,29,146,0,0,0,0,0,0,6,39,192,48,16,0,0,8,12,7,248,156,4,242,0,0,0,0,0,0,5,21,191,240,16,0,0,8,8,5,247,56,7,228,0,0,0,0,0,0,4,152,134,48,16,0,0,8,12,10,229,60,11,228,0,0,0,0,0,0,4,145,187,16,16,0,0,8,15,211,70,127,211,200,0,0,0,0,0,0,2,74,179,16,16,0,0,8,8,6,198,248,7,200,192,0,0,0,0,0,2,76,163,16,16,0,0,8,15,250,107,127,251,81,64,0,0,0,0,0,1,40,130,208,16,0,0,8,8,195,178,120,194,50,64,0,0,0,0,0,1,44,113,240,16,0,14,8,9,187,218,113,187,18,64,0,0,0,0,0,0,147,195,144,16,112,6,8,9,155,228,193,154,164,128,0,0,0,0,0,0,145,254,16,16,96,192,8,9,138,68,129,138,100,128,0,0,0,0,0,0,78,250,16,16,3,192,8,14,130,73,6,130,41,0,0,0,0,0,0,0,74,117,16,16,3,216,8,15,28,105,255,28,105,0,0,0,0,0,0,0,38,44,176,16,27,240,8,15,132,51,195,135,146,0,0,0,0,0,0,0,54,54,16,16,15,240,8,8,255,243,128,255,18,0,0,0,0,0,0,0,45,101,240,16,15,246,8,8,63,231,0,190,228,0,0,0,0,0,0,0,36,220,48,16,111,254,8,8,95,231,129,92,164,0,0,0,0,0,0,0,37,189,208,16,127,124,8,15,43,207,250,104,200,0,0,0,0,0,0,0,18,125,144,16,62,63,136,15,159,207,0,216,216,0,0,0,4,8,0,0,18,37,16,17,252,35,8,12,207,95,255,77,104,0,0,0,8,16,0,0,9,36,16,16,196,0,8,8,118,55,24,118,72,0,0,0,8,8,0,0,9,99,144,16,0,0,8,12,123,30,55,123,72,0,0,2,80,48,0,0,4,194,16,16,0,0,136,10,60,184,51,124,144,0,0,8,161,72,0,0,4,255,240,17,0,0,8,12,8,96,49,72,144,0,0,16,66,148,0,0,2,127,208,16,0,128,8,14,8,56,208,73,32,0,0,160,133,73,80,0,2,127,176,16,1,0,8,14,12,68,227,141,32,0,0,5,0,2,128,0,3,61,80,16,0,0,24,15,135,199,240,134,64,0,0,2,32,0,0,0,3,63,144,24,0,16,24,15,255,252,31,254,64,0,0,0,0,0,0,0,1,175,48,24,8,0,8,15,254,171,7,252,128,0,0,0,0,0,0,0,0,198,240,16,0,0,8,15,252,144,11,252,128,0,0,0,0,64,0,0,0,141,240,16,0,0,8,15,120,193,229,121,128,0,0,0,0,128,0,0,0,83,208,16,0,0,24,8,248,255,243,249,128,0,0,0,0,64,0,0,0,97,16,24,0,0,24,9,113,255,153,235,0,0,0,0,0,0,0,0,1,193,16,24,0,0,8,14,254,247,14,198,0,0,0,0,0,0,0,0,2,35,16,16,0,0,8,8,253,235,143,98,0,0,0,0,0,0,0,0,2,62,16,16,0,14,24,8,207,231,71,148,0,0,0,0,0,0,0,0,3,255,240,24,112,6,24,9,255,231,129,12,0,0,0,0,0,0,0,0,0,23,240,24,96,70,24,9,215,255,193,7,0,0,0,0,0,0,0,0,0,19,240,24,98,192,24,9,240,255,193,136,128,0,0,0,0,0,0,0,0,17,240,24,3,144,24,8,248,255,240,248,128,0,0,0,0,0,0,0,0,17,240,24,9,248,24,8,31,207,255,255,128,0,0,0,0,0,0,0,0,8,240,24,31,240,24,8,16,55,255,208,0,0,0,0,0,0,0,0,0,7,240,24,15,244,24,8,31,15,255,144,0,0,0,0,0,0,0,0,0,3,240,24,47,246,24,8,7,227,239,16,0,0,0,0,0,0,0,0,0,3,48,24,111,124,24,8,14,112,31,16,0,0,0,0,0,0,0,0,20,3,240,24,62,61,24,8,12,28,46,32,0,0,0,0,0,0,0,0,32,14,176,24,188,39,152,8,24,19,223,192,0,0,0,0,0,0,0,0,1,16,240,25,228,3,24,8,56,32,31,128,0,0,0,0,0,0,0,0,2,17,240,24,192,0,24,8,126,64,25,128,0,0,0,0,0,0,0,0,5,31,144,24,0,160,0,96,0,1,0,0,8,14,235,158,249,154,42,63,250,0,42,11,255,157,255,247,176,16,0,64,8,14,108,35,135,139,81,240,195,69,80,24,97,228,48,255,240,16,2,192,8,14,40,231,1,130,47,193,186,0,40,11,176,125,216,255,240,16,3,192,8,10,11,254,1,28,94,249,154,4,64,27,51,239,155,14,48,16,3,248,8,12,127,255,2,132,35,135,138,32,0,10,60,56,156,7,48,16,31,248,8,14,28,255,244,252,39,1,130,0,0,8,48,28,148,3,240,16,31,244,8,15,246,62,1,132,126,1,28,0,0,7,16,15,138,7,240,16,47,246,8,12,25,255,254,227,191,2,132,0,0,4,40,31,153,127,208,16,111,252,8,13,142,124,48,150,31,244,252,0,0,7,229,255,252,3,208,16,63,124,136,14,95,252,110,184,126,1,132,112,1,196,48,15,11,255,176,17,62,7,136,14,241,195,102,193,255,254,227,144,1,56,239,255,232,97,240,17,224,3,8,15,19,128,226,142,124,48,150,16,1,13,33,135,219,176,112,16,192,0,8,12,63,0,160,191,252,110,184,96,0,195,174,199,255,48,16,16,0,0,8,8,255,129,71,241,195,102,193,192,0,112,108,216,113,56,16,16,0,0,8,11,255,250,97,211,128,226,142,60,7,142,40,224,57,45,240,16,0,0,8,15,63,0,255,127,0,160,188,34,8,135,160,160,31,30,16,16,0,0,8,13,255,255,65,159,129,71,252,98,8,199,252,80,63,56,16,16,0,0,8,15,62,24,88,239,250,97,207,114,9,222,112,203,255,248,16,16,0,0,8,12,248,55,101,135,0,255,99,252,7,248,223,224,28,20,16,16,0,16,8,9,0,51,110,31,255,65,156,0,0,7,48,95,252,210,240,16,8,0,8,11,128,113,112,126,24,88,228,0,0,4,227,67,15,56,16,16,0,0,8,15,254,208,67,248,55,101,132,0,0,4,52,221,131,247,240,16,0,0,8,8,225,227,143,0,51,110,26,0,0,11,14,217,128,16,208,16,0,0,8,9,192,112,191,128,113,112,113,0,0,17,193,209,192,55,112,16,0,0,8,15,128,127,247,254,208,67,143,0,0,30,56,65,111,254,112,16,0,0,8,15,192,160,216,225,227,143,8,128,0,34,30,56,240,226,112,16,0,0,8,15,253,44,121,192,112,191,24,128,0,35,31,161,192,114,80,16,0,6,8,11,128,114,207,128,127,243,220,128,0,39,121,255,192,62,48,16,96,6,8,11,255,183,15,192,160,223,255,0,0,31,255,96,160,126,112,16,96,192,8,15,12,56,63,253,44,115,252,0,0,7,249,198,151,255,240,16,3,192,8,12,27,161,203,128,114,195,252,0,0,7,248,105,192,58,16,16,3,208,8,8,25,167,155,255,183,15,248,0,0,3,254,29,191,251,144,16,11,248,8,8,56,191,159,12,56,56,248,0,0,3,227,131,134,31,112,16,31,248,8,8,104,63,252,27,161,199,252,0,0,7,252,112,187,7,240,16,31,246,8,12,241,236,128,25,167,132,123,0,0,27,196,60,179,0,48,16,111,254,8,15,248,82,64,56,191,140,113,0,0,17,198,63,163,128,112,16,127,124,8,15,31,227,224,104,63,238,99,0,0,24,206,255,130,192,176,16,62,62,136,8,192,71,252,241,236,127,254,0,0,15,255,198,241,231,240,17,124,55,8,8,38,57,255,248,82,98,0,0,0,0,8,201,67,255,240,16,236,19,8,8,57,99,223,31,227,255,0,0,0,0,31,248,255,31,112,16,200,16,8,8,91,132,112,192,71,255,0,0,0,0,31,252,64,97,208,16,8,0,136,14,156,28,224,38,57,126,0,0,0,0,15,211,140,128,240,17,0,32,8,8,48,231,192,57,97,62,0,0,0,0,15,144,211,128,112,16,4,0,8,15,211,207,224,91,134,63,0,0,0,0,31,140,59,64,240,16,0,0,8,14,31,203,254,156,28,62,192,0,0,0,111,135,7,47,240,16,0,0,8,13,220,253,192,48,227,252,64,0,0,0,71,248,225,128,112,16,0,0,8,12,214,253,255,211,194,56,192,0,0,0,99,136,121,127,240,16,0,0,8,12,89,255,134,31,198,63,128,0,0,0,63,140,127,12,48,16,0,0,8,12,17,254,13,220,247,32,0,0,0,0,0,157,231,118,16,16,0,0,8,8,227,192,12,214,255,192,0,0,0,0,0,127,237,102,16,16,0,0,8,12,62,248,28,89,255,0,0,0,0,0,0,31,243,71,16,16,0,0,8,15,227,134,52,17,255,0,0,0,0,0,0,31,241,5,144,16,0,0,8,8,39,1,120,227,255,128,0,0,0,0,0,63,248,227,208,16,0,0,8,11,62,1,252,38,63,96,0,0,0,0,0,223,140,135,240,16,0,0,8,12,191,2,143,236,30,32,0,0,0,0,0,143,6,254,48,16,0,14,8,13,223,244,128,63,156,96,0,0,0,0,0,199,63,128,48,16,112,6,8,14,14,1,227,28,159,192,0,0,0,0,0,127,39,24,240,16,96,192,8,8,127,254,156,176,160,0,0,0,0,0,0,0,161,167,48,16,3,192,8,9,252,48,133,195,64,0,0,0,0,0,0,0,88,116,48,16,3,216,8,15,240,110,198,14,128,0,0,0,0,0,0,0,46,12,112,16,27,240,8,14,0,102,248,113,224,0,0,0,0,0,0,0,241,195,240,16,15,240,8,11,0,226,193,225,16,0,0,0,0,0,0,1,16,240,112,16,15,246,8,12,129,160,199,227,16,0,0,0,0,0,0,1,24,252,112,16,111,254,8,12,243,199,62,123,144,0,0,0,0,0,0,1,59,207,144,16,127,124,8,15,255,225,59,63,224,0,0,0,0,0,0,0,255,155,144,16,62,63,136,15,0,127,244,255,176,0,0,0,4,8,0,1,191,229,240,17,252,35,8,15,132,1,220,255,16,0,0,0,8,16,0,1,31,231,112,16,196,0,8,12,195,24,229,254,48,0,0,0,8,8,0,1,143,244,240,16,0,0,8,8,96,229,135,31,224,0,0,2,80,48,0,0,255,28,48,16,0,0,136,10,176,46,30,8,0,0,0,8,161,72,0,0,2,15,16,17,0,0,8,9,254,48,126,8,0,0,0,16,66,148,0,0,2,15,208,16,0,128,8,8,227,195,143,8,0,0,0,160,133,73,80,0,2,30,48,16,1,0,8,8,126,15,8,144,0,0,0,5,0,2,128,0,1,34,16,16,0,0,24,8,50,63,24,160,0,0,0,2,32,0,0,0,0,163,16,24,0,16,24,8,201,255,220,192,0,0,0,0,0,0,0,0,0,103,112,24,8,0,8,13,9,216,255,224,0,0,0,0,0,0,0,0,0,255,240,16,0,0,8,14,7,164,63,224,0,0,0,0,0,64,0,0,0,255,144,16,0,0,8,15,142,70,63,192,0,0,0,0,0,128,0,0,0,127,144,16,0,0,24,15,253,143,63,192,0,0,0,0,0,64,0,0,0,127,144,24,0,0,24,11,254,24,159,224,0,0,0,0,0,0,0,0,0,255,48,24,0,0,8,8,248,48,127,216,0,0,0,0,0,0,0,0,3,127,208,16,0,0,8,15,64,112,127,136,0,0,0,0,0,0,0,0,2,63,208,16,0,14,24,15,224,248,127,24,0,0,0,0,0,0,0,0,3,31,208,24,112,6,24,15,255,240,159,240,0,0,0,0,0,0,0,0,1,255,48,24,96,70,24,14,208,97,0,0,0,0,0,0,0,0,0,0,0,0,16,24,98,192,24,14,96,98,0,0,0,0,0,0,0,0,0,0,0,0,16,24,3,144,24,15,128,255,0,0,0,0,0,0,0,0,0,0,0,0,16,24,9,248,24,11,1,255,0,5,0,0,0,0,0,0,0,0,0,0,16,24,31,240,24,12,129,254,0,0,0,0,0,0,0,0,0,0,0,0,16,24,15,244,24,12,129,254,0,0,0,0,0,0,0,0,0,0,0,0,16,24,47,246,24,14,128,255,0,0,0,0,0,0,0,0,0,0,0,0,16,24,111,124,24,15,129,254,192,0,0,0,0,0,0,0,0,0,20,0,112,24,62,61,24,8,1,252,64,0,0,0,0,0,0,0,0,0,32,0,80,24,188,39,152,8,1,248,192,0,0,0,0,0,0,0,0,0,1,0,112,25,228,3,24,8,0,255,128,0,0,0,0,0,0,0,0,0,2,0,48,24,192,0,24,8,0,0,0,0,0,0,0,0,0,0,0,0,5,0,16,24,0,160,0,96,0,1,0,0,8,8,11,167,145,8,51,192,135,41,186,18,75,160,148,93,16,16,0,64,8,8,25,176,147,237,100,1,125,51,179,147,219,60,156,89,144,16,2,192,8,9,248,173,37,104,38,195,52,146,163,121,234,59,78,81,240,16,3,192,8,15,190,63,189,44,79,127,20,188,143,123,184,251,223,199,208,16,3,248,8,8,225,228,105,139,233,119,210,68,241,36,95,9,35,184,112,16,31,248,8,9,192,71,57,125,18,92,50,157,65,57,220,9,79,160,48,16,31,244,8,15,128,124,178,17,206,120,9,167,192,154,124,4,211,224,16,16,47,246,8,15,192,168,114,31,44,240,9,194,160,156,42,4,225,80,48,16,111,252,8,15,253,44,100,42,20,248,20,198,151,204,105,126,99,75,240,16,63,124,136,15,128,126,231,75,25,255,164,175,192,78,252,2,119,224,16,17,62,7,136,15,255,191,200,31,185,240,14,95,191,229,251,255,63,223,240,17,224,3,8,14,4,61,207,239,242,255,246,105,132,39,56,65,51,194,16,16,192,0,8,8,11,167,145,15,243,192,133,41,186,18,123,160,151,221,16,16,0,0,8,8,25,176,146,239,228,1,117,50,179,19,235,48,158,217,144,16,0,0,8,9,248,189,46,111,102,3,54,146,163,249,250,63,79,81,240,16,0,0,8,14,8,63,182,43,207,63,21,189,130,91,184,34,223,193,16,16,0,0,8,14,249,228,86,11,237,193,5,70,243,220,95,62,227,185,240,16,0,0,8,11,135,199,38,125,21,223,60,158,252,73,223,194,79,190,16,16,0,0,8,15,1,252,165,241,201,112,252,167,240,74,127,2,83,248,16,16,0,16,8,14,1,8,72,127,41,224,62,66,16,36,33,1,33,8,16,16,8,0,8,15,2,140,72,66,19,192,34,70,40,36,98,129,35,20,16,16,0,0,8,15,244,158,144,163,19,224,81,47,37,242,242,95,151,146,240,16,0,0,8,14,1,255,157,39,167,254,147,63,240,19,255,0,159,248,16,16,0,0,8,15,254,255,32,127,231,192,63,146,47,249,126,255,207,247,240,16,0,0,8,8,16,247,63,191,203,255,208,148,33,9,206,16,76,240,144,16,0,0,8,8,46,158,68,63,207,2,16,76,46,132,154,232,37,183,80,16,0,0,8,8,102,194,75,167,144,5,208,72,44,196,246,204,39,118,112,16,0,6,8,15,226,244,153,163,152,12,208,100,40,254,122,143,211,148,112,16,96,6,8,8,32,254,248,185,60,252,80,174,32,130,238,8,55,240,80,16,96,192,8,8,231,145,8,63,163,4,17,209,60,227,23,206,40,254,112,16,3,192,8,9,159,156,185,244,65,28,243,167,63,58,119,243,211,255,144,16,3,208,8,11,3,242,215,231,62,51,243,105,248,22,159,129,180,252,16,16,11,248,8,15,224,33,208,252,180,96,127,80,128,247,8,15,184,64,112,16,31,248,8,14,24,49,152,8,87,252,5,49,131,19,24,48,152,193,144,16,31,246,8,12,4,123,150,12,101,195,7,59,196,19,188,64,149,226,16,16,111,254,8,8,7,255,33,30,231,128,143,151,252,9,255,192,79,254,16,16,127,124,8,12,11,255,33,255,207,0,255,148,10,9,255,160,79,253,16,16,62,62,136,15,211,254,66,255,207,129,64,76,25,124,255,151,231,252,176,17,124,55,8,8,7,254,116,255,159,250,96,72,28,4,251,192,39,174,16,16,236,19,8,15,250,252,129,221,159,0,224,100,11,254,93,191,243,221,240,16,200,16,8,8,67,220,254,143,47,255,64,164,8,66,114,132,19,36,48,16,8,0,136,8,186,121,16,225,60,8,64,146,11,161,36,186,9,69,208,17,0,32,8,9,155,9,46,250,64,23,65,50,11,49,57,179,9,157,144,16,4,0,8,15,138,210,102,142,96,51,65,41,10,63,159,163,244,245,16,16,0,0,8,8,131,251,226,132,243,241,66,123,136,35,187,130,29,252,16,16,0,0,8,11,158,70,160,190,236,16,71,108,71,58,197,243,150,59,144,16,0,0,8,15,124,114,231,209,164,115,136,233,199,222,157,253,244,251,240,16,0,0,8,8,207,204,223,28,187,239,142,102,126,98,103,230,19,63,48,16,0,0,8,8,32,132,179,243,46,25,249,164,32,130,66,8,18,16,80,16,0,0,8,8,32,201,8,33,60,4,16,146,96,129,38,8,9,48,80,16,0,0,8,8,81,233,8,50,120,4,25,50,241,65,47,20,9,120,176,16,0,0,8,14,159,242,20,122,124,10,61,41,255,47,159,242,252,255,144,16,0,0,8,8,63,243,167,252,255,211,254,73,3,128,151,248,4,255,208,16,0,0,8,15,223,100,15,252,184,7,2,68,129,127,207,247,254,127,176,16,0,0,8,10,31,231,245,249,255,250,4,132,129,8,78,112,130,103,144,16,0,14,8,13,211,200,132,121,224,66,4,130,65,116,36,247,65,47,176,16,112,6,8,12,216,73,116,50,0,186,9,2,67,102,39,182,97,57,176,16,96,192,8,12,94,147,55,147,1,155,9,1,35,71,243,244,126,157,176,16,3,192,8,12,31,223,23,231,159,139,18,1,115,4,23,112,65,191,144,16,3,216,8,12,250,33,7,244,96,131,58,0,139,231,24,190,113,71,240,16,27,240,8,11,243,151,62,136,35,159,68,25,57,249,147,191,156,159,240,16,15,240,8,8,126,93,252,231,198,126,114,117,79,193,84,252,10,167,240,16,15,246,8,14,4,61,31,149,76,15,202,180,132,15,120,64,251,194,16,16,111,254,8,9,134,57,129,9,127,192,132,178,140,49,40,195,9,70,16,16,127,124,8,8,79,121,97,138,92,48,197,50,94,65,53,228,9,47,48,16,62,63,136,8,127,242,19,222,120,9,233,41,63,192,159,252,4,255,240,17,252,35,8,8,191,242,31,252,240,15,242,73,9,160,158,250,4,239,208,16,196,0,8,13,59,228,47,252,248,22,2,68,137,151,207,249,126,127,208,16,0,0,8,8,127,231,79,249,255,166,4,132,208,192,79,220,2,125,112,16,0,0,136,15,191,200,27,169,240,12,4,138,97,191,230,235,255,46,208,17,0,0,8,12,59,207,233,211,255,244,9,18,66,132,39,56,65,51,80,16,0,128,8,11,167,145,12,51,192,132,9,161,37,186,18,75,160,148,80,16,1,0,8,9,176,146,239,36,1,116,18,5,32,179,19,139,48,152,208,16,0,0,24,8,173,38,105,230,3,52,18,2,144,163,249,250,63,79,208,24,0,16,24,8,63,190,40,79,63,20,36,0,184,130,11,184,32,223,208,24,8,0,8,9,228,66,11,232,193,4,116,0,68,115,140,95,56,163,176,16,0,0,8,15,199,46,125,16,71,56,136,0,156,124,201,223,204,79,176,16,0,0,8,8,252,185,241,207,140,248,228,0,167,224,106,126,6,83,240,16,0,0,24,8,8,112,63,40,24,31,148,0,66,0,116,32,7,33,16,24,0,0,24,8,12,112,2,16,56,1,8,0,70,2,252,96,47,227,16,24,0,0,8,8,30,250,3,16,253,1,136,0,47,3,254,240,63,247,144,16,0,0,8,15,255,254,7,191,255,3,208,0,31,255,253,255,255,223,240,16,0,14,24,15,253,255,255,254,255,255,224,0,0,31,104,127,254,135,240,24,112,6,24,15,240,191,255,248,91,224,0,0,0,3,255,255,255,255,240,24,96,70,24,15,255,255,159,255,255,0,0,0,0,15,127,235,247,254,176,24,98,192,24,13,191,247,199,95,251,192,0,0,0,23,191,87,123,245,112,24,3,144,24,8,215,239,67,171,247,160,0,0,0,35,220,58,61,195,144,24,9,248,24,8,225,222,56,112,239,16,0,0,0,35,199,226,60,126,16,24,31,240,24,12,191,30,62,31,143,16,0,0,0,39,224,6,126,0,112,24,15,244,24,11,128,63,35,128,31,144,0,0,0,59,248,15,191,128,208,24,47,246,24,15,128,254,224,192,127,112,0,0,0,29,232,63,222,131,240,24,111,124,24,15,224,189,193,240,94,224,0,0,0,15,231,199,255,252,112,24,62,61,24,15,31,63,131,143,159,192,0,0,0,3,240,1,255,192,16,24,188,39,152,12,0,127,158,0,63,0,0,0,0,2,112,0,39,192,16,25,228,3,24,8,0,115,240,0,57,0,0,0,0,3,248,0,63,192,16,24,192,0,24,14,0,255,112,0,127,0,0,0,0,14,168,0,234,224,16,24,0,52,0,64,0,1,1,255,255,254,1,255,255,240,255,255,240,0,255,255,240,255,255,192,0,127,255,240,255,254,0,0,63,255,240,255,252,0,0,63,255,240,255,252,0,0,63,255,240,255,252,0,0,63,255,240,255,252,0,0,63,255,240,255,254,0,0,127,255,240,255,255,0,0,1,255,240,255,255,128,0,0,7,240,255,255,192,0,0,0,240,241,255,128,0,0,0,48,224,254,0,0,0,0,16,224,240,0,0,0,0,16,224,224,0,0,31,128,0,224,128,0,0,14,0,0,224,0,0,0,0,0,0,224,0,0,0,0,0,0,224,0,0,0,0,0,0,192,0,0,0,0,0,0,192,0,0,0,0,0,16,192,0,0,0,0,0,48,128,0,0,0,0,31,240,128,0,0,0,1,255,240,0,64,0,0,0,255,240,0,192,0,0,0,255,240,0,128,0,0,0,127,240,0,0,0,0,0,127,240,129,0,0,128,0,127,240,129,0,0,128,0,127,240,129,0,1,128,0,127,240,193,128,1,0,0,127,240,227,128,0,1,192,127,240,254,0,0,0,64,127,240,248,0,0,0,0,127,240,240,0,0,0,0,127,240,240,0,0,0,0,127,240,240,0,0,0,0,127,240,248,0,0,0,0,127,240,248,0,0,0,0,127,240,240,0,0,0,0,127,240,224,0,0,0,0,127,240,224,0,0,0,0,127,240,224,0,0,0,0,127,240,224,0,1,0,0,127,240,224,0,1,0,0,127,240,240,0,1,0,0,127,240,240,0,0,0,0,127,240,248,0,0,0,0,127,240,248,0,0,0,128,127,240,252,0,0,0,0,63,240,252,0,0,0,0,63,240,240,0,0,0,0,63,240,224,0,30,0,0,63,240,192,0,62,0,0,63,240,192,0,62,0,0,63,240,192,0,62,4,0,63,240,192,16,126,14,0,127,240,192,112,126,15,0,127,240,224,240,126,15,128,127,240,255,240,126,15,192,127,240,255,248,255,31,224,127,240,255,255,255,255,240,255,240,0,0,1,254,0,0,0,0,0,15,255,0,0,0,0,0,63,3,128,0,0,0,1,248,1,192,0,0,0,3,224,0,192,0,0,0,3,0,0,192,0,0,0,3,0,0,192,0,0,0,3,128,7,192,0,0,0,1,224,31,128,0,0,0,0,224,127,254,0,0,0,0,112,255,255,248,0,0,0,56,62,3,255,0,14,0,124,0,0,15,192,31,1,248,0,127,225,224,27,15,192,8,127,240,96,27,31,0,24,96,112,112,27,120,4,24,241,224,48,27,240,12,56,63,192,48,25,192,12,56,31,0,48,25,128,28,60,12,0,48,56,28,28,60,0,0,112,48,120,56,124,0,63,224,48,248,56,124,31,255,192,112,240,112,112,127,224,0,97,240,248,97,254,0,0,227,176,248,127,135,0,0,195,49,252,255,3,0,0,195,113,231,254,3,128,0,231,248,227,228,1,128,0,102,209,195,96,1,128,0,102,193,135,96,113,128,0,118,227,6,103,241,128,0,62,102,14,231,241,128,0,28,116,7,206,49,128,0,1,240,3,207,177,128,0,7,224,7,207,241,128,0,15,0,7,192,241,128,0,12,12,1,192,113,128,0,14,60,0,192,49,128,0,7,248,0,192,49,128,0,7,224,112,192,49,128,0,15,128,97,204,113,128,0,28,0,193,204,113,128,0,24,28,7,200,241,128,0,24,60,7,200,241,128,0,24,248,6,200,113,128,0,28,224,6,200,17,128,0,12,192,14,220,1,128,0,14,0,31,207,193,128,0,6,0,59,207,241,128,0,7,248,32,199,113,128,0,3,224,0,219,241,192,0,3,192,63,217,240,192,0,15,0,255,156,112,192,0,30,0,225,158,16,192,0,56,24,193,158,0,192,0,48,56,193,159,0,192,0,48,253,193,187,129,192,0,49,237,129,177,193,128,0,63,141,129,176,225,128,0,31,13,129,176,113,128,0,0,15,129,240,57,128,0,0,7,0,224,31,128,0,0,0,0,0,15,0,0,59,0,49,0,1,1,255,255,255,192,63,255,255,224,255,255,255,128,15,255,255,224,255,255,255,0,7,255,255,224,255,255,255,0,3,255,255,224,255,255,255,0,3,255,255,224,255,255,255,0,3,255,255,224,255,255,255,128,3,255,255,224,255,255,3,192,3,255,255,224,255,254,0,224,3,255,255,224,255,254,0,96,3,255,255,224,255,254,0,96,0,31,255,224,255,254,0,32,0,7,255,224,255,255,0,32,0,3,255,224,255,255,0,0,0,1,255,224,255,255,0,0,0,0,255,224,255,143,128,0,0,0,255,224,255,7,128,0,0,0,255,224,255,7,128,0,0,0,255,224,255,2,0,0,0,0,255,224,254,0,0,0,0,0,255,224,254,0,0,0,0,0,255,224,254,0,0,0,0,1,255,224,254,0,0,0,0,7,255,224,254,0,0,0,0,15,255,224,254,0,0,0,0,31,255,224,254,0,0,0,0,63,255,224,254,0,0,0,0,127,255,224,254,0,0,0,1,255,255,224,254,0,64,0,3,255,255,224,255,0,64,0,15,255,7,224,255,0,192,0,12,0,1,224,255,128,192,0,0,0,0,224,255,193,192,0,0,0,0,96,255,255,0,0,0,0,0,96,255,224,0,0,0,0,0,32,252,0,0,0,0,0,0,32,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,255,252,0,32,0,0,0,255,255,255,240,96,0,0,3,255,255,255,255,224,0,0,31,255,255,255,255,224,0,0,255,255,255,255,255,224,0,3,255,255,255,255,255,224,0,15,255,255,255,255,255,224,0,63,255,255,255,255,255,224,0,127,255,255,255,255,255,224,0,0,0,63,192,0,0,0,0,0,0,127,240,0,0,0,0,0,0,224,120,0,0,0,0,0,0,192,28,0,0,0,0,0,0,192,12,0,0,0,0,0,0,224,12,0,0,0,0,0,0,112,12,0,0,0,0,0,252,56,12,0,0,0,0,1,255,24,12,0,0,0,0,1,135,152,12,0,0,0,0,1,129,152,15,224,0,0,0,1,193,216,15,248,0,0,0,0,192,216,8,60,0,0,0,0,192,248,0,14,0,0,0,0,224,120,8,7,0,0,0,112,96,64,12,3,0,0,0,248,96,8,30,3,0,0,0,216,96,56,30,3,0,0,0,221,224,120,28,3,0,0,1,207,192,120,24,3,0,0,1,135,0,120,24,15,0,0,1,128,0,120,0,30,0,0,1,128,0,120,0,56,0,0,1,128,32,120,0,112,0,0,1,128,96,120,0,224,0,0,1,128,96,120,3,192,0,0,1,128,224,120,7,128,0,0,1,129,240,120,30,0,0,0,1,193,176,112,60,0,0,0,0,195,176,64,48,0,248,0,0,227,48,112,51,255,254,0,0,127,48,112,127,255,143,0,0,62,48,112,126,0,3,128,0,0,240,112,0,0,1,128,0,31,240,0,0,0,1,192,3,255,128,0,0,0,0,192,127,240,0,0,0,0,0,224,254,0,0,0,0,0,0,96,192,0,0,31,255,254,0,96,192,0,1,255,255,255,248,224,192,0,7,240,0,3,255,192,192,0,63,0,0,0,15,128,224,1,252,0,0,0,0,0,96,7,224,0,0,0,0,0,112,31,0,0,0,0,0,0,56,124,0,0,0,0,0,0,28,240,0,0,0,0,0,0,15,192,0,0,0,0,0,0,7,128,0,0,0,0,0,0,100,19,0,0,22,0,1,0,0,0,0,0,1,6,60,18,0,59,75,9,24,1,6,2,17,5,5,0,10,17,4,4,1,15,17,4,4,2,20,17,4,4,3,25,17,4,4,2,30,17,4,4,3,40,17,5,5,4,50,17,10,1,5,85,11,10,10,7,75,17,24,1,9,2,17,5,5,0,10,17,4,4,1,15,17,4,4,2,20,17,4,4,3,25,17,4,4,2,30,17,4,4,3,40,17,5,5,4,50,17,10,1,5,85,17,10,10,8,75,17,24,1,11,2,17,5,5,0,10,17,4,4,1,15,17,4,4,2,20,17,4,4,3,25,17,4,4,2,30,17,4,4,3,40,17,5,5,4,50,17,10,1,5,85,17,10,10,10,75,16,24,1,16,2,17,5,5,0,10,17,4,4,1,15,17,4,4,2,20,17,4,4,3,25,17,4,4,2,30,17,4,4,3,40,17,5,5,4,50,17,10,1,5,85,18,10,10,17,75,7,24,1,12,2,17,5,5,0,10,17,4,4,1,15,17,4,4,2,20,17,4,4,3,25,17,4,4,2,30,17,4,4,3,40,17,5,5,4,50,17,10,1,5,85,8,10,10,13,75,15,24,1,15,2,17,5,5,0,10,17,4,4,1,15,17,4,4,2,20,17,4,4,3,25,17,4,4,2,30,17,4,4,3,40,17,5,5,4,50,17,10,1,5,85,15,10,10,14,25,0,29,0,1,1,255,239,255,128,255,128,255,128,255,192,127,128,255,192,63,128,255,192,63,128,255,128,63,128,255,128,63,128,255,128,31,128,63,192,15,128,31,128,7,128,143,0,7,128,198,0,7,128,226,0,4,128,240,0,0,0,240,0,0,0,240,0,0,128,248,0,7,128,254,0,3,128,255,0,1,128,255,128,1,128,255,0,1,128,254,7,129,128,252,7,131,128,254,12,67,128,254,0,1,128,252,0,1,128,248,0,3,128,252,0,31,128,255,129,255,128,0,16,0,0,0,111,0,0,0,49,128,0,0,62,192,0,0,57,64,0,0,127,192,0,0,117,64,0,0,124,96,0,192,62,240,0,160,79,88,0,80,135,216,0,41,130,200,0,29,161,171,0,11,33,180,128,12,242,116,128,12,255,255,0,7,253,248,0,1,223,220,0,0,139,178,0,0,120,114,0,0,175,178,0,1,200,122,0,3,72,124,0,1,147,164,0,1,255,254,0,3,159,254,0,7,255,252,0,3,255,224,0,0,126,0,0,19,0,30,0,1,1,255,143,224,254,7,224,252,1,224,254,0,224,255,0,224,255,0,224,253,0,224,252,0,224,254,0,224,252,1,224,248,3,224,240,3,32,240,0,0,240,0,32,224,0,96,192,0,96,192,0,224,224,3,224,224,7,224,224,7,224,224,7,224,192,15,224,128,7,224,128,7,224,0,15,224,128,3,224,128,3,224,0,7,224,0,31,224,0,127,224,0,112,0,1,248,0,2,70,0,1,227,0,0,249,0,0,255,0,2,253,0,3,213,0,1,233,0,3,242,0,5,124,0,9,188,192,9,223,32,12,252,192,28,211,128,63,174,128,47,27,0,19,252,0,28,136,0,31,56,0,31,232,0,32,208,0,97,136,0,83,200,0,247,240,0,127,156,0,79,252,0,255,248,0,211,224,0,255,128,0,24,0,30,0,1,1,255,255,255,255,240,255,255,224,127,255,192,63,255,224,31,255,240,31,255,224,15,254,0,15,252,0,15,248,0,15,248,0,31,252,0,57,248,0,113,248,0,227,224,0,71,192,0,15,224,0,31,240,0,63,240,0,63,248,0,31,248,0,31,224,4,15,128,12,15,128,120,31,192,248,3,192,255,1,129,248,3,128,0,15,0,0,31,128,0,255,0,0,0,0,15,0,0,17,128,0,44,64,0,28,96,0,14,160,0,31,240,1,255,80,3,253,112,5,191,16,7,135,32,3,67,198,6,207,138,6,223,20,30,206,168,39,207,208,22,206,160,11,228,192,9,254,192,4,127,32,7,143,160,27,251,16,113,242,144,107,135,96,35,7,188,63,0,254,102,7,252,119,255,240,255,255,224,127,255,0,26,0,30,0,1,1,255,255,255,192,255,254,63,192,255,248,31,192,255,240,7,192,255,248,3,192,255,254,1,192,255,252,1,192,255,248,1,192,255,0,1,192,254,0,1,192,252,0,3,192,252,0,7,192,252,0,7,192,252,0,1,192,252,0,0,192,248,0,0,64,248,0,120,0,248,0,252,64,224,0,127,192,192,0,127,192,192,0,63,192,128,240,63,192,129,240,63,192,199,224,63,192,195,224,63,192,225,248,255,192,128,0,31,192,128,0,15,192,224,0,31,192,255,129,255,192,0,0,0,0,0,1,192,0,0,6,32,0,0,12,24,0,0,7,132,0,0,1,246,0,0,3,254,0,0,7,246,0,0,255,106,0,1,231,162,0,3,97,204,0,2,99,184,0,2,55,184,0,3,127,254,0,3,212,51,0,5,20,126,128,5,255,134,192,6,255,3,128,31,127,128,0,61,195,128,0,49,254,192,0,95,14,64,0,110,12,64,0,56,25,192,0,60,31,192,0,30,7,0,0,127,252,224,0,127,251,176,0,31,255,224,0,0,126,0,0,21,0,28,0,1,1,252,31,248,248,15,248,252,7,248,252,3,248,252,3,248,248,3,248,248,3,248,248,1,248,240,0,248,224,0,72,192,0,0,192,0,0,128,0,0,128,0,8,0,0,24,0,1,248,0,0,56,128,0,24,192,0,24,224,0,24,224,8,24,192,120,56,192,192,120,224,0,56,192,0,24,128,0,56,128,0,248,192,63,248,3,224,0,6,240,0,3,24,0,3,132,0,3,4,0,7,252,0,7,84,0,7,86,0,15,207,0,31,253,176,48,236,200,40,122,200,108,51,104,94,39,240,255,239,224,255,254,0,231,255,192,77,187,96,36,118,32,31,142,96,24,247,32,56,135,192,51,60,128,31,255,192,41,255,96,119,255,192,127,255,0,63,192,0,32,0,29,0,1,1,255,240,255,255,255,224,63,255,255,192,31,255,255,224,15,255,255,192,15,255,255,224,15,255,254,0,15,255,252,0,15,255,248,0,15,255,248,0,31,255,248,0,63,255,252,0,124,1,248,0,0,0,224,0,0,1,192,0,0,63,192,0,8,247,224,0,63,255,248,0,31,237,248,0,15,223,248,0,15,59,240,0,28,247,192,12,127,239,192,60,15,223,128,120,15,255,0,240,31,255,129,0,127,255,192,0,63,255,128,0,127,255,128,7,255,255,0,15,0,0,0,16,192,0,0,44,32,0,0,30,112,0,0,40,48,0,0,31,208,0,1,253,80,0,2,255,80,0,5,191,16,0,7,143,96,0,7,131,192,0,3,192,131,254,7,4,124,129,31,143,9,254,55,167,248,192,58,255,247,0,25,255,192,0,4,255,160,0,6,123,144,0,7,135,16,0,13,255,96,0,63,115,128,0,34,194,240,0,113,135,176,0,255,15,224,0,94,255,128,0,47,255,192,0,127,255,128,0,127,248,0,0,31,0,36,0,1,1,255,255,159,254,255,252,15,254,255,240,15,254,255,224,31,254,255,224,31,254,255,224,15,242,255,224,3,226,255,224,7,198,255,192,7,142,235,192,7,30,225,224,2,62,224,96,0,126,192,0,0,254,192,0,1,254,128,0,0,254,0,0,0,14,0,0,0,6,144,0,0,2,248,0,0,2,252,0,0,2,254,0,0,2,254,0,0,48,254,0,0,48,254,0,0,48,254,0,96,16,254,7,240,18,254,15,240,26,255,15,241,26,255,7,241,30,255,15,243,62,255,15,243,62,254,15,243,62,248,7,128,6,240,0,0,2,240,0,0,14,248,0,3,254,0,0,96,0,0,3,208,0,0,12,112,0,0,24,96,0,0,23,224,0,0,27,144,12,0,16,204,20,0,29,248,40,0,39,136,80,20,32,24,160,30,31,229,64,23,154,247,128,35,254,187,0,42,255,234,0,78,127,223,0,247,63,239,240,191,190,14,248,105,175,254,124,5,245,142,116,3,247,222,52,1,231,246,60,1,131,206,74,1,8,206,74,1,134,254,74,1,207,159,46,1,200,15,44,1,80,11,164,0,208,10,164,0,200,14,160,0,208,12,192,0,208,12,192,1,80,12,192,7,120,111,120,15,223,255,252,15,223,255,240,7,255,252,0,31,0,38,0,1,1,255,247,255,254,255,227,255,254,125,227,255,254,187,227,1,254,199,226,1,254,199,227,3,254,199,226,0,254,187,226,0,126,125,224,0,254,255,224,1,254,251,224,0,254,225,240,0,254,224,32,0,254,192,0,1,254,192,0,3,254,192,0,3,254,128,0,3,238,128,0,0,66,128,0,0,0,216,0,0,0,254,0,0,0,255,0,0,0,254,0,0,0,248,0,0,0,248,0,0,0,249,128,0,2,249,195,241,2,249,199,240,150,248,71,248,150,248,71,249,158,254,15,241,30,255,159,243,30,255,159,194,30,255,56,0,30,240,0,0,6,224,0,0,6,224,0,0,30,254,0,255,254,0,8,0,0,0,20,0,0,130,20,0,0,68,20,254,0,56,21,142,0,56,20,220,0,56,21,51,0,68,21,83,128,130,31,159,0,0,23,246,0,4,25,119,0,30,14,27,0,31,223,221,0,49,163,246,0,43,231,204,0,47,127,220,0,87,57,228,16,127,254,123,188,95,253,199,246,38,252,127,122,1,206,126,42,0,143,248,106,1,6,124,106,6,207,62,234,5,200,254,110,6,103,255,60,6,36,14,156,6,40,15,104,7,168,7,104,6,184,6,96,1,208,10,224,0,32,12,224,0,96,53,224,0,199,255,224,15,255,255,120,31,127,255,248,31,255,255,224,1,255,0,0,26,0,32,0,1,1,190,255,255,192,221,255,255,192,227,239,255,192,227,231,255,192,227,231,255,192,221,231,137,192,190,231,0,192,255,230,0,192,255,228,1,192,255,228,3,192,255,228,1,192,255,192,0,192,255,192,0,0,255,224,0,192,255,224,0,192,255,224,0,64,255,192,0,64,255,192,0,192,255,231,128,192,255,252,0,192,255,248,0,192,255,240,0,192,255,240,0,192,255,224,1,192,255,0,3,192,255,0,15,192,255,131,7,192,255,7,7,192,255,0,3,192,255,128,1,192,255,224,0,192,255,252,1,192,65,0,0,0,34,0,0,0,28,16,0,0,28,24,0,0,28,24,0,0,34,24,118,0,65,24,157,0,0,25,5,0,0,27,158,0,0,27,220,0,0,26,238,0,0,46,179,0,0,54,56,192,0,31,61,0,0,18,243,0,0,28,89,128,0,47,12,128,0,47,255,0,0,24,121,0,0,3,251,0,0,7,111,0,0,14,159,0,0,12,79,0,0,28,118,0,0,246,124,0,0,151,240,0,0,92,232,0,0,248,152,0,0,255,228,0,0,127,46,0,0,31,63,0,0,3,254,0,29,0,28,0,1,1,255,254,127,248,255,192,63,248,255,128,63,248,255,0,63,248,255,0,127,248,255,0,127,248,255,0,127,224,255,0,31,192,254,0,63,136,252,0,63,24,252,0,30,56,252,0,28,120,192,0,16,248,128,0,1,248,128,0,1,248,192,0,3,248,252,0,3,248,248,0,7,248,240,0,31,248,240,0,31,248,248,0,63,248,252,0,63,248,252,0,31,248,248,0,15,248,240,0,15,248,240,0,7,248,240,0,7,248,248,0,7,248,0,1,128,0,0,62,192,0,0,71,64,0,0,227,192,0,0,207,128,0,0,243,128,0,0,252,128,24,0,166,96,40,1,135,192,80,2,77,192,160,2,122,97,64,3,60,226,128,63,211,173,0,73,191,214,0,95,255,186,0,63,253,164,0,3,127,236,0,6,254,248,0,9,100,32,0,9,185,224,0,5,131,64,0,3,254,64,0,3,196,96,0,7,119,240,0,9,254,240,0,15,255,248,0,15,254,56,0,7,255,248,0,33,0,29,0,1,1,190,255,255,255,128,221,255,255,255,128,227,255,255,127,128,227,255,252,63,128,227,255,240,31,128,221,255,224,31,128,190,255,192,63,128,255,255,192,41,128,255,243,192,0,128,255,225,128,0,128,255,0,0,0,128,252,0,0,0,0,248,48,0,0,0,240,240,0,0,128,225,230,0,3,128,195,207,0,3,128,199,158,0,7,128,135,60,0,15,128,142,8,0,31,128,140,128,0,127,128,137,128,0,127,128,131,192,0,255,128,135,224,0,255,128,143,248,1,255,128,31,224,63,255,128,31,128,7,255,128,191,0,1,255,128,255,0,1,255,128,255,192,3,255,128,65,0,0,0,0,34,0,0,0,0,28,0,0,128,0,28,0,3,64,0,28,0,15,160,0,34,0,17,224,0,65,0,49,192,0,0,0,47,214,0,0,12,61,255,0,0,26,111,107,0,0,245,170,127,0,3,252,227,189,128,5,206,119,157,128,11,15,222,127,0,22,25,131,124,0,44,48,254,188,0,40,97,144,248,0,88,195,177,240,0,81,247,255,224,0,115,78,254,128,0,118,91,63,128,0,124,63,25,0,0,120,27,55,0,0,112,5,254,0,0,160,30,192,0,0,160,119,248,0,0,64,251,254,0,0,0,255,254,0,0,0,63,252,0,0,23,0,29,0,1,1,255,227,254,255,129,254,255,1,254,238,1,254,204,1,198,204,1,6,204,0,6,196,0,0,128,0,0,0,0,2,0,0,6,0,0,14,0,0,14,0,0,30,0,0,62,0,0,62,128,0,126,128,0,254,192,0,126,224,0,254,240,0,254,240,0,126,248,192,62,240,112,62,224,0,62,192,0,30,192,0,14,224,0,14,255,192,62,0,28,0,0,122,0,0,158,0,17,6,0,51,62,56,51,198,232,51,123,88,43,81,246,110,25,234,205,55,252,205,224,232,207,249,240,207,111,144,191,255,32,147,147,192,151,246,64,127,174,128,91,219,0,45,204,128,23,247,0,14,169,0,15,209,128,7,57,192,9,143,64,19,255,192,63,253,96,63,248,112,31,255,240,0,63,192,36,0,40,0,1,1,255,255,248,255,240,31,255,0,127,240,143,254,0,63,240,135,254,2,31,240,195,254,3,255,240,241,254,1,255,240,248,62,1,255,240,252,31,0,255,240,248,15,129,255,240,240,7,128,255,240,240,3,0,127,240,224,0,0,127,240,224,0,0,127,240,192,0,0,63,240,128,0,0,31,240,0,0,0,31,240,0,0,0,15,240,144,0,0,0,240,248,0,0,0,112,252,0,0,0,48,255,0,0,0,16,255,0,0,1,16,255,0,0,1,16,248,0,0,1,0,240,0,0,1,0,241,0,0,1,128,243,128,3,1,128,251,192,63,129,128,255,193,255,128,128,255,193,255,129,128,255,193,255,129,192,255,193,255,129,240,255,193,255,129,240,255,193,255,129,240,255,192,255,129,240,255,192,255,1,240,255,192,84,1,112,250,128,0,0,48,240,0,0,0,112,248,0,0,0,240,0,0,7,0,0,224,0,252,128,0,80,1,94,64,0,72,1,61,224,0,52,1,236,0,0,10,1,246,0,0,5,193,82,0,0,3,32,177,0,0,7,112,126,0,0,13,40,123,0,0,15,180,217,128,0,23,235,63,128,0,25,245,251,128,0,47,243,172,64,0,117,61,47,96,0,223,158,255,160,0,187,155,158,208,0,105,75,205,255,0,5,132,71,127,128,3,254,99,191,192,0,231,255,201,160,0,249,158,230,160,0,231,239,122,160,7,159,191,254,144,15,243,223,238,208,10,242,31,230,112,12,102,60,226,80,4,39,192,114,112,0,46,0,115,80], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+256023);
/* memory initializer */ allocate([46,0,122,112,0,46,0,106,48,0,46,0,106,0,0,62,0,110,0,0,62,0,110,0,0,47,0,106,0,0,41,0,174,0,0,47,171,118,128,5,107,85,197,64,10,158,170,250,128,5,117,85,85,0,38,0,43,0,1,1,251,239,255,255,252,253,223,159,255,252,254,63,143,255,252,254,63,15,20,124,254,63,142,0,28,253,223,142,0,60,251,239,132,0,252,255,252,128,3,252,225,248,0,3,252,225,254,0,7,252,192,255,0,3,252,128,127,128,1,252,128,63,192,1,252,128,15,192,1,252,0,15,192,1,252,32,2,0,3,252,240,0,0,7,252,248,0,0,31,252,252,0,0,63,252,252,0,0,31,252,204,0,0,4,252,128,0,0,0,124,192,0,0,0,60,240,0,0,0,60,240,0,0,0,28,240,0,0,0,28,240,0,0,0,28,240,96,0,0,12,240,255,192,0,4,240,255,254,2,12,240,255,255,3,140,240,127,255,3,196,240,31,255,3,224,241,31,255,3,244,249,159,255,7,252,253,255,254,7,252,255,255,254,15,252,255,255,252,15,252,255,255,248,15,252,255,170,168,10,188,255,213,84,21,124,255,170,170,42,188,255,213,85,85,124,4,16,0,0,0,2,32,96,0,0,1,192,80,0,0,1,192,144,235,128,1,192,81,180,96,2,32,113,210,192,4,16,74,239,0,0,3,126,116,0,30,6,234,84,0,22,1,23,248,0,63,0,143,252,0,100,128,92,114,0,70,192,58,98,0,111,48,57,226,0,189,176,38,166,0,214,205,255,156,0,11,111,251,56,0,7,242,31,224,0,3,191,203,192,0,3,142,120,96,0,51,134,56,251,0,79,252,248,54,128,49,228,127,255,64,15,31,253,195,64,9,247,241,253,160,9,255,63,197,160,12,251,253,253,160,15,159,255,195,240,15,0,63,255,8,15,0,1,237,240,15,0,0,228,80,13,128,0,228,40,13,224,0,236,28,14,160,0,236,8,6,96,0,232,0,2,0,1,168,0,0,0,1,176,0,0,0,3,48,0,0,0,5,80,0,0,85,87,181,64,0,42,170,170,128,0,85,85,213,64,0,42,170,170,128,29,0,35,0,1,1,190,255,255,248,221,255,255,248,227,255,255,248,227,255,255,248,227,255,255,248,221,191,255,248,190,159,248,248,255,143,224,120,129,135,192,120,192,199,128,120,240,99,128,56,192,2,0,56,224,0,0,56,240,0,0,56,254,16,0,24,255,240,0,24,255,248,0,24,255,240,0,24,255,224,0,24,255,192,0,24,255,224,0,24,255,240,0,24,255,252,0,24,255,240,0,24,255,224,0,24,255,224,0,24,255,224,0,56,255,240,0,56,255,224,0,56,255,224,0,56,255,240,0,24,255,224,0,0,255,240,0,0,255,252,0,0,255,255,192,24,65,0,0,0,34,0,0,0,28,0,0,0,28,0,0,0,28,0,0,0,34,64,0,0,65,96,7,0,0,80,25,128,126,72,55,128,49,56,99,128,12,148,79,192,62,125,226,192,17,155,127,192,14,253,207,192,1,238,202,224,0,9,214,96,0,7,110,224,0,14,247,224,0,22,220,224,0,60,140,224,0,17,250,224,0,15,234,96,0,3,122,224,0,12,242,224,0,25,101,224,0,17,95,224,0,17,63,192,0,12,159,192,0,22,97,192,0,31,63,192,0,15,195,224,0,31,255,248,0,15,249,248,0,3,255,248,0,0,63,224,25,0,31,0,1,1,255,255,255,128,255,255,143,128,255,255,7,128,31,252,7,128,135,248,15,128,195,240,7,128,225,248,7,128,241,248,7,128,224,248,7,128,224,112,7,128,192,32,3,128,193,0,1,128,193,128,0,128,193,192,0,128,225,192,1,128,227,192,1,128,231,128,1,128,231,128,1,128,231,128,1,128,247,128,1,128,255,128,1,128,255,192,1,128,255,192,1,128,255,192,0,128,255,192,0,128,255,192,0,0,255,192,0,0,255,128,0,0,255,0,0,0,255,192,0,0,255,252,1,128,0,0,0,0,0,0,112,0,0,0,152,0,224,3,216,0,88,4,48,0,44,12,120,0,26,7,24,0,14,5,248,0,31,5,120,0,22,136,88,0,39,94,76,0,38,191,198,0,38,93,99,0,38,46,241,0,22,63,186,0,28,61,14,0,24,105,206,0,16,127,166,0,16,94,174,0,8,93,174,0,0,93,190,0,0,53,186,0,0,33,190,0,0,40,243,0,0,49,99,0,0,32,251,128,0,56,7,128,0,78,15,128,0,255,247,128,0,63,255,128,0,3,254,0,25,0,29,0,1,1,255,251,255,128,255,128,255,128,255,1,255,128,254,1,255,128,254,1,255,128,254,0,255,128,254,0,255,128,252,0,255,128,248,1,254,0,240,0,252,0,240,0,120,128,240,0,49,128,144,0,35,128,0,0,7,128,0,0,7,128,128,0,7,128,240,0,15,128,224,0,63,128,192,0,127,128,192,0,255,128,192,0,127,128,192,240,63,128,224,240,31,128,225,24,63,128,192,0,63,128,192,0,31,128,224,0,15,128,252,0,31,128,255,192,255,128,0,4,0,0,0,123,0,0,0,198,0,0,1,190,0,0,1,78,0,0,1,255,0,0,1,87,0,0,3,31,0,0,7,190,1,128,13,121,2,128,13,240,133,0,9,160,202,0,106,194,220,0,150,194,104,0,151,39,152,0,127,255,152,0,15,223,240,0,29,253,192,0,38,232,128,0,39,15,0,0,38,250,128,0,47,9,192,0,31,9,96,0,18,228,192,0,63,255,192,0,63,252,224,0,31,255,240,0,3,255,224,0,0,63,0,0,24,0,30,0,1,1,190,255,255,221,255,131,227,238,1,227,196,1,227,196,1,221,196,1,190,196,2,255,196,0,255,132,3,255,198,3,255,192,1,255,192,0,255,192,0,255,128,0,255,128,0,255,204,0,255,248,1,255,240,1,255,224,1,255,224,1,255,224,3,254,64,7,254,0,15,254,8,31,255,28,15,255,191,7,255,192,15,254,0,15,255,0,15,255,128,31,65,0,0,34,0,124,28,17,198,28,43,26,28,43,254,34,42,30,65,43,253,0,59,127,0,74,92,0,57,124,0,47,254,0,39,243,0,62,3,0,91,89,0,95,251,0,51,243,0,7,62,0,15,182,0,23,222,0,28,226,0,28,236,1,174,120,1,223,48,1,246,32,0,227,240,0,64,184,0,63,240,1,255,240,0,255,240,0,127,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,27,0,0,23,0,1,0,0,0,0,0,1,4,54,19,0,53,80,10,21,1,7,7,8,5,5,0,10,8,4,4,1,15,8,4,4,2,20,8,4,4,3,25,8,4,4,4,30,8,5,5,5,38,8,10,1,6,89,12,10,10,8,80,18,21,1,10,7,8,5,5,0,10,8,4,4,1,15,8,4,4,2,20,8,4,4,3,25,8,4,4,4,30,8,5,5,5,38,8,10,1,6,90,17,10,10,9,80,18,21,1,12,7,8,5,5,0,10,8,4,4,1,15,8,4,4,2,20,8,4,4,3,25,8,4,4,4,30,8,5,5,5,38,8,10,1,6,87,19,10,10,11,80,18,21,1,17,7,8,5,5,0,10,8,4,4,1,15,8,4,4,2,20,8,4,4,3,25,8,4,4,4,30,8,5,5,5,38,8,10,1,6,90,19,10,10,18,80,8,21,1,13,7,8,5,5,0,10,8,4,4,1,15,8,4,4,2,20,8,4,4,3,25,8,4,4,4,30,8,5,5,5,38,8,10,1,6,82,8,10,10,14,80,15,21,1,16,7,8,5,5,0,10,8,4,4,1,15,8,4,4,2,20,8,4,4,3,25,8,4,4,4,30,8,5,5,5,38,8,10,1,6,91,15,10,10,15,36,0,40,0,1,1,255,241,255,255,240,255,224,15,255,128,255,192,7,255,16,255,132,7,254,16,255,252,7,252,48,255,248,7,248,240,255,248,7,193,240,255,240,15,131,240,255,248,31,1,240,255,240,30,0,240,255,224,12,0,240,255,224,0,0,112,255,224,0,0,112,255,192,0,0,48,255,128,0,0,16,255,128,0,0,0,255,0,0,0,0,240,0,0,0,144,224,0,0,1,240,192,0,0,3,240,128,0,0,15,240,136,0,0,15,240,136,0,0,15,240,8,0,0,1,240,8,0,0,0,240,24,0,0,8,240,24,12,0,28,240,24,31,192,61,240,16,31,248,63,240,24,31,248,63,240,56,31,248,63,240,248,31,248,63,240,248,31,248,63,240,248,31,248,63,240,248,31,240,63,240,248,15,240,63,240,232,2,160,63,240,212,5,80,21,240,234,10,168,10,240,245,85,84,21,240,0,14,0,0,0,0,19,240,0,112,0,39,168,0,160,0,123,200,1,32,0,3,120,2,192,0,6,248,5,0,0,4,168,58,0,0,8,208,76,0,0,7,224,238,0,0,13,225,75,0,0,25,178,223,0,0,31,205,126,128,0,29,250,249,128,0,35,92,255,64,0,111,75,202,224,0,95,247,159,176,0,183,157,157,208,15,251,61,41,96,31,238,34,26,0,63,220,103,252,0,89,63,254,112,0,86,119,153,240,0,85,239,126,112,0,151,255,223,158,0,183,127,188,255,0,230,127,132,245,0,164,115,198,99,0,228,224,62,66,0,172,224,7,64,0,229,224,7,64,0,197,96,7,64,0,5,96,7,64,0,7,96,7,192,0,7,96,7,192,0,5,96,15,64,0,7,80,9,64,0,22,237,95,64,0,42,58,173,106,0,21,245,87,149,0,10,170,170,234,0,43,0,40,0,1,1,255,255,240,127,255,224,255,255,224,63,255,128,255,255,248,1,255,0,255,255,255,128,254,32,255,255,255,0,252,96,255,255,254,0,248,224,255,255,248,0,241,224,255,255,240,0,227,224,255,255,224,1,195,224,255,255,192,3,131,224,255,255,128,7,143,224,255,255,128,7,31,224,255,255,0,6,50,224,255,255,0,12,97,224,255,255,0,8,1,224,255,254,0,0,0,224,255,252,0,0,0,224,255,4,0,0,0,96,252,0,0,0,0,96,240,0,0,0,0,96,192,96,0,0,0,32,3,224,0,0,60,32,143,224,0,0,31,224,255,224,0,0,7,224,255,224,0,0,3,224,255,192,0,0,3,224,255,0,192,0,7,224,254,3,143,0,7,224,254,7,159,14,15,224,236,7,255,63,199,224,192,143,255,63,199,224,129,159,255,63,227,224,255,31,255,63,227,224,254,63,255,63,243,224,254,21,87,63,249,224,234,10,170,31,248,224,212,21,85,21,87,224,170,138,170,170,170,224,213,85,85,85,85,96,255,255,170,170,171,224,0,0,15,128,0,0,0,0,24,64,0,96,0,0,7,254,0,160,0,0,0,85,1,64,0,0,0,225,2,128,0,0,1,207,5,0,0,0,7,117,14,0,0,0,15,49,28,0,0,0,19,242,36,0,0,0,39,252,76,0,0,0,68,152,112,0,0,0,127,24,224,0,0,0,147,137,77,0,0,0,191,242,158,0,0,0,222,53,126,0,0,1,96,255,217,0,0,2,255,147,59,0,0,251,223,211,127,128,3,191,225,255,249,128,12,239,113,91,239,128,55,156,15,178,254,192,236,19,255,127,195,192,112,31,254,198,32,0,0,27,197,239,248,0,0,25,251,158,196,0,0,57,247,61,212,0,0,243,47,142,104,0,1,228,80,239,184,0,1,200,96,241,208,0,18,248,0,192,40,0,61,80,0,192,56,0,126,96,0,192,28,0,0,224,0,192,28,0,1,192,0,192,12,0,1,106,168,192,6,0,21,117,85,160,7,0,43,170,170,234,168,0,85,117,85,85,85,0,42,170,170,170,170,128,0,0,85,85,84,0,41,0,40,0,1,1,255,255,255,255,252,128,255,255,248,255,240,128,255,255,224,7,241,128,255,255,240,3,227,128,255,255,254,3,199,128,255,255,254,3,143,128,255,255,248,3,31,128,255,255,240,2,63,128,255,255,224,6,63,128,255,255,224,12,127,128,255,255,192,24,19,128,255,255,128,16,3,128,255,255,128,0,3,128,255,255,0,0,3,128,255,255,0,0,1,128,255,252,0,0,1,128,255,248,0,0,0,128,28,0,0,0,0,128,128,0,0,0,48,0,192,0,0,0,56,0,241,192,0,0,124,128,255,224,0,0,127,128,255,240,0,0,127,128,255,248,0,0,31,128,255,128,0,0,7,128,255,128,0,0,7,128,255,128,48,0,71,128,255,128,120,16,207,128,255,152,255,240,223,128,255,144,255,176,255,128,252,24,127,0,255,128,248,28,63,128,255,128,248,255,31,128,255,128,249,255,143,129,255,128,255,255,15,31,255,128,255,255,143,31,255,128,254,170,138,21,127,128,245,85,84,10,171,128,250,170,170,21,85,128,255,85,85,10,171,128,0,0,0,0,3,0,0,0,7,0,13,0,0,0,25,248,10,0,0,0,15,100,20,0,0,0,1,196,40,0,0,0,1,188,80,0,0,0,7,236,224,0,0,0,14,69,64,0,0,0,28,201,64,0,0,0,31,242,128,0,0,0,56,231,108,0,0,0,112,238,180,0,0,0,125,183,124,0,0,0,255,173,228,0,0,0,244,255,110,0,0,3,140,142,246,0,0,7,255,31,241,0,227,255,207,255,127,0,92,127,130,157,206,128,59,223,69,189,198,128,14,36,27,205,131,0,0,31,247,143,128,0,0,15,236,255,128,0,0,5,87,60,96,0,0,127,191,159,24,0,0,75,126,249,232,0,0,126,204,61,168,0,0,127,135,237,48,0,0,103,0,11,32,0,0,111,0,79,0,0,3,167,128,179,0,0,6,227,192,107,0,0,5,0,160,125,0,0,6,0,80,94,0,0,0,0,208,224,0,0,0,0,80,160,0,0,1,85,117,170,128,0,10,170,171,117,84,0,5,85,85,170,170,0,0,170,170,245,84,0,42,0,41,0,1,1,255,255,243,255,255,192,255,255,224,31,255,192,255,255,128,15,255,192,255,255,200,7,252,64,255,255,248,7,248,192,255,255,240,7,240,192,255,255,224,7,225,192,255,255,192,12,71,192,255,255,192,12,15,192,255,255,192,12,31,192,255,255,128,8,7,192,255,255,0,0,3,192,255,254,0,0,3,192,255,252,0,0,1,192,255,248,0,0,1,192,255,248,0,0,0,192,255,240,0,0,0,64,255,48,0,0,0,64,252,0,0,0,48,0,192,0,0,0,38,0,128,96,0,0,31,192,1,192,0,0,127,192,255,224,0,0,63,192,255,224,0,0,31,192,255,192,0,0,15,192,255,192,0,0,7,192,255,240,24,0,7,192,255,240,14,33,15,192,255,248,7,227,135,192,255,254,4,113,231,192,255,255,2,1,231,192,255,255,131,3,199,192,255,255,193,255,143,192,255,255,225,254,31,192,255,255,243,252,63,192,255,255,241,252,127,192,255,253,80,87,255,192,255,170,168,170,175,192,255,213,85,85,85,192,255,234,170,170,191,192,255,255,85,87,255,192,0,0,12,0,0,0,0,0,19,224,0,0,0,0,110,176,0,0,0,0,55,200,3,128,0,0,7,120,5,0,0,0,14,184,9,0,0,0,17,136,22,0,0,0,45,147,168,0,0,0,63,242,80,0,0,0,51,242,96,0,0,0,101,247,88,0,0,0,251,59,180,0,0,1,254,55,124,0,0,3,13,111,226,0,0,4,23,215,230,0,0,4,226,126,119,0,0,11,252,108,249,128,0,205,191,248,255,128,3,119,182,253,207,64,60,248,89,223,217,192,99,157,191,159,224,0,254,38,254,249,128,0,0,29,238,63,192,0,0,23,254,48,32,0,0,46,253,255,240,0,0,52,253,227,200,0,0,12,102,55,200,0,0,14,49,214,240,0,0,7,136,20,120,0,0,1,235,142,24,0,0,0,245,122,24,0,0,0,116,252,56,0,0,0,58,0,112,0,0,0,30,1,160,0,0,0,12,2,64,0,0,0,10,3,128,0,0,2,173,168,0,0,0,85,87,85,80,0,0,42,170,170,170,0,0,21,85,85,64,0,0,0,170,168,0,0,41,0,40,0,1,1,255,255,255,255,252,128,255,255,248,127,240,128,255,255,192,7,241,128,255,255,224,3,227,128,255,255,254,3,199,128,255,255,254,3,143,128,255,255,240,2,31,128,255,255,224,2,63,128,255,255,224,2,63,128,255,255,224,12,127,128,255,255,192,24,19,128,255,255,192,16,3,128,255,255,128,0,7,128,255,255,0,0,3,128,255,255,0,0,1,128,255,252,0,0,1,128,255,248,0,0,0,128,28,0,0,0,0,128,128,0,0,0,48,0,192,0,0,0,56,0,241,192,0,0,124,128,255,224,0,0,127,128,255,240,0,0,63,128,255,248,0,0,31,128,255,128,0,0,7,128,255,0,0,0,3,128,255,0,48,0,7,128,255,1,252,0,15,128,254,3,255,7,7,128,252,71,255,31,195,128,224,207,255,31,227,128,193,143,255,31,243,128,255,31,255,31,241,128,255,31,255,31,248,128,254,63,255,31,252,128,252,21,85,15,252,0,234,10,170,138,191,128,213,21,85,85,87,128,250,170,170,170,170,128,255,255,213,85,95,128,0,0,0,0,3,0,0,0,7,128,13,0,0,0,57,248,10,0,0,0,31,148,20,0,0,0,1,228,40,0,0,0,1,188,80,0,0,0,15,237,224,0,0,0,30,69,64,0,0,0,28,205,64,0,0,0,31,242,128,0,0,0,57,231,108,0,0,0,49,238,180,0,0,0,126,183,120,0,0,0,255,173,244,0,0,0,247,255,110,0,0,3,140,158,118,0,0,5,255,31,225,0,227,253,207,255,255,0,92,111,130,223,206,128,55,223,69,188,198,128,14,36,59,205,131,0,0,30,247,141,128,0,0,15,236,255,192,0,0,5,215,60,96,0,0,125,188,247,248,0,0,195,126,249,228,0,0,191,204,61,168,0,0,230,3,255,144,0,1,236,0,248,232,0,2,168,0,224,52,0,29,48,0,224,20,0,62,80,0,224,12,0,0,160,0,224,14,0,0,224,0,224,7,0,1,64,0,160,3,0,3,170,170,208,3,128,21,149,85,117,64,0,42,234,170,170,168,0,5,85,85,85,85,0,0,0,42,170,160,0,41,0,40,0,1,1,255,255,143,255,255,128,255,255,0,255,255,128,255,252,0,127,255,128,255,254,96,63,255,128,255,255,224,63,255,128,255,255,128,63,255,128,255,255,0,63,255,128,255,255,0,127,255,128,255,254,0,127,255,128,255,252,0,63,247,128,255,252,0,63,1,128,255,248,0,0,0,0,255,240,0,0,0,128,255,224,0,0,0,128,128,0,0,0,0,128,0,0,0,0,0,128,135,240,0,0,0,128,255,192,0,0,48,128,254,0,0,0,56,128,252,0,0,0,112,128,248,128,0,0,12,128,248,128,0,0,63,128,248,128,0,0,31,128,240,128,0,0,31,128,240,192,0,0,15,128,241,192,0,0,15,128,241,192,240,3,15,128,241,128,255,227,135,128,241,129,255,227,207,128,249,137,255,227,207,128,252,140,255,227,207,128,254,204,255,227,143,128,255,196,255,243,31,128,255,198,127,243,63,128,255,230,127,243,255,128,255,230,63,243,255,128,255,65,21,81,95,128,250,160,170,160,191,128,253,81,85,81,95,128,255,254,170,170,191,128,0,0,112,0,0,0,0,0,159,0,0,0,0,3,117,128,0,0,0,1,158,64,0,0,0,0,27,192,0,0,0,0,127,192,0,0,0,0,229,64,0,0,0,0,252,128,0,0,0,1,183,128,0,0,0,3,31,64,8,0,0,3,191,192,246,0,0,5,240,255,7,128,0,12,255,231,255,0,0,27,155,206,225,0,127,255,207,119,247,0,175,253,255,94,51,0,120,15,27,252,125,0,0,63,37,254,207,0,1,248,251,127,199,0,3,159,198,127,141,0,5,87,127,255,243,0,5,127,56,207,192,0,5,126,231,243,224,0,11,103,249,252,96,0,11,39,255,255,208,0,10,47,248,111,144,0,10,47,15,228,176,0,14,111,0,28,120,0,14,94,0,20,48,0,6,86,0,20,48,0,3,83,0,20,48,0,1,51,0,28,112,0,0,43,0,12,160,0,0,41,128,12,192,0,0,25,128,12,0,0,0,25,192,12,0,0,0,182,234,170,160,0,5,91,85,93,64,0,2,174,170,174,160,0,0,1,85,85,64,0,42,0,40,0,1,1,255,255,227,255,255,192,255,255,240,255,255,192,255,255,248,7,255,192,255,255,252,3,255,192,255,255,255,1,255,192,255,255,254,1,255,192,255,255,252,1,255,192,255,255,240,1,255,192,255,255,128,1,255,192,255,254,0,0,224,0,255,252,0,0,0,64,255,254,0,0,0,192,254,0,0,0,3,192,240,0,0,0,1,192,224,63,192,0,0,192,255,252,128,0,0,0,255,252,0,0,0,0,255,0,0,0,0,64,252,0,0,0,0,64,248,128,0,0,16,64,241,128,0,0,48,64,241,128,0,0,0,64,225,128,0,0,120,192,227,128,0,0,56,192,227,128,0,0,8,192,195,128,0,0,12,192,199,128,126,0,15,192,199,0,255,240,159,192,207,8,255,240,255,192,159,24,255,240,255,192,63,60,255,241,255,192,255,60,255,193,255,192,254,124,255,193,255,192,254,124,255,201,255,192,254,126,63,217,255,192,254,86,21,80,255,192,252,42,10,168,127,192,250,21,85,84,95,192,244,10,170,170,191,192,251,85,85,85,95,192,0,0,28,0,0,0,0,0,11,0,0,0,0,0,4,248,0,0,0,0,3,196,0,0,0,0,0,250,0,0,0,0,1,206,0,0,0,0,3,214,0,0,0,0,15,98,0,0,0,0,120,242,0,0,0,1,242,253,31,192,0,2,29,120,224,128,0,1,135,159,255,0,1,255,252,191,36,0,14,127,255,249,254,0,31,192,63,255,173,0,0,3,93,122,255,192,0,2,198,207,143,64,0,255,225,159,30,128,3,247,129,63,189,128,5,94,15,231,237,128,14,71,255,197,204,128,10,127,239,126,250,128,26,127,71,159,135,0,28,103,255,121,69,0,28,103,255,126,181,0,52,79,254,31,147,0,40,79,129,249,144,0,56,143,0,13,96,0,48,183,0,13,0,0,96,231,0,15,0,0,192,195,0,14,0,0,0,195,0,58,0,0,1,131,0,46,0,0,1,131,0,54,0,0,1,129,192,38,0,0,1,169,106,173,0,0,3,85,245,84,128,0,5,42,170,171,160,0,11,245,85,85,64,0,4,170,170,170,160,0,31,0,36,0,1,1,255,255,159,254,255,252,15,254,255,240,15,254,255,224,31,254,255,224,31,254,255,224,15,242,255,224,3,226,255,224,7,198,255,192,7,142,235,192,7,30,225,224,2,62,224,96,0,126,192,0,0,254,192,0,1,254,128,0,0,254,0,0,0,14,0,0,0,6,144,0,0,2,248,0,0,2,252,0,0,2,254,0,0,2,254,0,0,48,254,0,0,48,254,0,0,48,254,0,96,16,254,7,240,18,254,15,240,26,255,15,241,26,255,7,241,30,255,15,243,62,255,15,243,62,254,15,243,62,248,7,128,6,240,0,0,2,240,0,0,14,248,0,3,254,0,0,96,0,0,3,208,0,0,12,112,0,0,24,96,0,0,23,224,0,0,27,144,12,0,16,204,20,0,29,248,40,0,39,136,80,20,32,24,160,30,31,229,64,23,154,247,128,35,254,187,0,42,255,234,0,78,127,223,0,247,63,239,240,191,190,14,248,105,175,254,124,5,245,142,116,3,247,222,52,1,231,246,60,1,131,206,74,1,8,206,74,1,134,254,74,1,207,159,46,1,200,15,44,1,80,11,164,0,208,10,164,0,200,14,160,0,208,12,192,0,208,12,192,1,80,12,192,7,120,111,120,15,223,255,252,15,223,255,240,7,255,252,0,31,0,38,0,1,1,255,247,255,254,255,227,255,254,125,227,255,254,187,227,1,254,199,226,1,254,199,227,3,254,199,226,0,254,187,226,0,126,125,224,0,254,255,224,1,254,251,224,0,254,225,240,0,254,224,32,0,254,192,0,1,254,192,0,3,254,192,0,3,254,128,0,3,238,128,0,0,66,128,0,0,0,216,0,0,0,254,0,0,0,255,0,0,0,254,0,0,0,248,0,0,0,248,0,0,0,249,128,0,2,249,195,241,2,249,199,240,150,248,71,248,150,248,71,249,158,254,15,241,30,255,159,243,30,255,159,194,30,255,56,0,30,240,0,0,6,224,0,0,6,224,0,0,30,254,0,255,254,0,8,0,0,0,20,0,0,130,20,0,0,68,20,254,0,56,21,142,0,56,20,220,0,56,21,51,0,68,21,83,128,130,31,159,0,0,23,246,0,4,25,119,0,30,14,27,0,31,223,221,0,49,163,246,0,43,231,204,0,47,127,220,0,87,57,228,16,127,254,123,188,95,253,199,246,38,252,127,122,1,206,126,42,0,143,248,106,1,6,124,106,6,207,62,234,5,200,254,110,6,103,255,60,6,36,14,156,6,40,15,104,7,168,7,104,6,184,6,96,1,208,10,224,0,32,12,224,0,96,53,224,0,199,255,224,15,255,255,120,31,127,255,248,31,255,255,224,1,255,0,0,26,0,32,0,1,1,190,255,255,192,221,255,255,192,227,239,255,192,227,231,255,192,227,231,255,192,221,231,137,192,190,231,0,192,255,230,0,192,255,228,1,192,255,228,3,192,255,228,1,192,255,192,0,192,255,192,0,0,255,224,0,192,255,224,0,192,255,224,0,64,255,192,0,64,255,192,0,192,255,231,128,192,255,252,0,192,255,248,0,192,255,240,0,192,255,240,0,192,255,224,1,192,255,0,3,192,255,0,15,192,255,131,7,192,255,7,7,192,255,0,3,192,255,128,1,192,255,224,0,192,255,252,1,192,65,0,0,0,34,0,0,0,28,16,0,0,28,24,0,0,28,24,0,0,34,24,118,0,65,24,157,0,0,25,5,0,0,27,158,0,0,27,220,0,0,26,238,0,0,46,179,0,0,54,56,192,0,31,61,0,0,18,243,0,0,28,89,128,0,47,12,128,0,47,255,0,0,24,121,0,0,3,251,0,0,7,111,0,0,14,159,0,0,12,79,0,0,28,118,0,0,246,124,0,0,151,240,0,0,92,232,0,0,248,152,0,0,255,228,0,0,127,46,0,0,31,63,0,0,3,254,0,29,0,28,0,1,1,255,254,127,248,255,192,63,248,255,128,63,248,255,0,63,248,255,0,127,248,255,0,127,248,255,0,127,224,255,0,31,192,254,0,63,136,252,0,63,24,252,0,30,56,252,0,28,120,192,0,16,248,128,0,1,248,128,0,1,248,192,0,3,248,252,0,3,248,248,0,7,248,240,0,31,248,240,0,31,248,248,0,63,248,252,0,63,248,252,0,31,248,248,0,15,248,240,0,15,248,240,0,7,248,240,0,7,248,248,0,7,248,0,1,128,0,0,62,192,0,0,71,64,0,0,227,192,0,0,207,128,0,0,243,128,0,0,252,128,24,0,166,96,40,1,135,192,80,2,77,192,160,2,122,97,64,3,60,226,128,63,211,173,0,73,191,214,0,95,255,186,0,63,253,164,0,3,127,236,0,6,254,248,0,9,100,32,0,9,185,224,0,5,131,64,0,3,254,64,0,3,196,96,0,7,119,240,0,9,254,240,0,15,255,248,0,15,254,56,0,7,255,248,0,33,0,29,0,1,1,190,255,255,255,128,221,255,255,255,128,227,255,255,127,128,227,255,252,63,128,227,255,240,31,128,221,255,224,31,128,190,255,192,63,128,255,255,192,41,128,255,243,192,0,128,255,225,128,0,128,255,0,0,0,128,252,0,0,0,0,248,48,0,0,0,240,240,0,0,128,225,230,0,3,128,195,207,0,3,128,199,158,0,7,128,135,60,0,15,128,142,8,0,31,128,140,128,0,127,128,137,128,0,127,128,131,192,0,255,128,135,224,0,255,128,143,248,1,255,128,31,224,63,255,128,31,128,7,255,128,191,0,1,255,128,255,0,1,255,128,255,192,3,255,128,65,0,0,0,0,34,0,0,0,0,28,0,0,128,0,28,0,3,64,0,28,0,15,160,0,34,0,17,224,0,65,0,49,192,0,0,0,47,214,0,0,12,61,255,0,0,26,111,107,0,0,245,170,127,0,3,252,227,189,128,5,206,119,157,128,11,15,222,127,0,22,25,131,124,0,44,48,254,188,0,40,97,144,248,0,88,195,177,240,0,81,247,255,224,0,115,78,254,128,0,118,91,63,128,0,124,63,25,0,0,120,27,55,0,0,112,5,254,0,0,160,30,192,0,0,160,119,248,0,0,64,251,254,0,0,0,255,254,0,0,0,63,252,0,0,23,0,29,0,1,1,255,227,254,255,129,254,255,1,254,238,1,254,204,1,198,204,1,6,204,0,6,196,0,0,128,0,0,0,0,2,0,0,6,0,0,14,0,0,14,0,0,30,0,0,62,0,0,62,128,0,126,128,0,254,192,0,126,224,0,254,240,0,254,240,0,126,248,192,62,240,112,62,224,0,62,192,0,30,192,0,14,224,0,14,255,192,62,0,28,0,0,122,0,0,158,0,17,6,0,51,62,56,51,198,232,51,123,88,43,81,246,110,25,234,205,55,252,205,224,232,207,249,240,207,111,144,191,255,32,147,147,192,151,246,64,127,174,128,91,219,0,45,204,128,23,247,0,14,169,0,15,209,128,7,57,192,9,143,64,19,255,192,63,253,96,63,248,112,31,255,240,0,63,192,36,0,40,0,1,1,255,255,248,255,240,31,255,0,127,240,143,254,0,63,240,135,254,2,31,240,195,254,3,255,240,241,254,1,255,240,248,62,1,255,240,252,31,0,255,240,248,15,129,255,240,240,7,128,255,240,240,3,0,127,240,224,0,0,127,240,224,0,0,127,240,192,0,0,63,240,128,0,0,31,240,0,0,0,31,240,0,0,0,15,240,144,0,0,0,240,248,0,0,0,112,252,0,0,0,48,255,0,0,0,16,255,0,0,1,16,255,0,0,1,16,248,0,0,1,0,240,0,0,1,0,241,0,0,1,128,243,128,3,1,128,251,192,63,129,128,255,193,255,128,128,255,193,255,129,128,255,193,255,129,192,255,193,255,129,240,255,193,255,129,240,255,193,255,129,240,255,192,255,129,240,255,192,255,1,240,255,192,84,1,112,250,128,0,0,48,240,0,0,0,112,248,0,0,0,240,0,0,7,0,0,224,0,252,128,0,80,1,94,64,0,72,1,61,224,0,52,1,236,0,0,10,1,246,0,0,5,193,82,0,0,3,32,177,0,0,7,112,126,0,0,13,40,123,0,0,15,180,217,128,0,23,235,63,128,0,25,245,251,128,0,47,243,172,64,0,117,61,47,96,0,223,158,255,160,0,187,155,158,208,0,105,75,205,255,0,5,132,71,127,128,3,254,99,191,192,0,231,255,201,160,0,249,158,230,160,0,231,239,122,160,7,159,191,254,144,15,243,223,238,208,10,242,31,230,112,12,102,60,226,80,4,39,192,114,112,0,46,0,115,80,0,46,0,122,112,0,46,0,106,48,0,46,0,106,0,0,62,0,110,0,0,62,0,110,0,0,47,0,106,0,0,41,0,174,0,0,47,171,118,128,5,107,85,197,64,10,158,170,250,128,5,117,85,85,0,38,0,43,0,1,1,251,239,255,255,252,253,223,159,255,252,254,63,143,255,252,254,63,15,20,124,254,63,142,0,28,253,223,142,0,60,251,239,132,0,252,255,252,128,3,252,225,248,0,3,252,225,254,0,7,252,192,255,0,3,252,128,127,128,1,252,128,63,192,1,252,128,15,192,1,252,0,15,192,1,252,32,2,0,3,252,240,0,0,7,252,248,0,0,31,252,252,0,0,63,252,252,0,0,31,252,204,0,0,4,252,128,0,0,0,124,192,0,0,0,60,240,0,0,0,60,240,0,0,0,28,240,0,0,0,28,240,0,0,0,28,240,96,0,0,12,240,255,192,0,4,240,255,254,2,12,240,255,255,3,140,240,127,255,3,196,240,31,255,3,224,241,31,255,3,244,249,159,255,7,252,253,255,254,7,252,255,255,254,15,252,255,255,252,15,252,255,255,248,15,252,255,170,168,10,188,255,213,84,21,124,255,170,170,42,188,255,213,85,85,124,4,16,0,0,0,2,32,96,0,0,1,192,80,0,0,1,192,144,235,128,1,192,81,180,96,2,32,113,210,192,4,16,74,239,0,0,3,126,116,0,30,6,234,84,0,22,1,23,248,0,63,0,143,252,0,100,128,92,114,0,70,192,58,98,0,111,48,57,226,0,189,176,38,166,0,214,205,255,156,0,11,111,251,56,0,7,242,31,224,0,3,191,203,192,0,3,142,120,96,0,51,134,56,251,0,79,252,248,54,128,49,228,127,255,64,15,31,253,195,64,9,247,241,253,160,9,255,63,197,160,12,251,253,253,160,15,159,255,195,240,15,0,63,255,8,15,0,1,237,240,15,0,0,228,80,13,128,0,228,40,13,224,0,236,28,14,160,0,236,8,6,96,0,232,0,2,0,1,168,0,0,0,1,176,0,0,0,3,48,0,0,0,5,80,0,0,85,87,181,64,0,42,170,170,128,0,85,85,213,64,0,42,170,170,128,29,0,35,0,1,1,190,255,255,248,221,255,255,248,227,255,255,248,227,255,255,248,227,255,255,248,221,191,255,248,190,159,248,248,255,143,224,120,129,135,192,120,192,199,128,120,240,99,128,56,192,2,0,56,224,0,0,56,240,0,0,56,254,16,0,24,255,240,0,24,255,248,0,24,255,240,0,24,255,224,0,24,255,192,0,24,255,224,0,24,255,240,0,24,255,252,0,24,255,240,0,24,255,224,0,24,255,224,0,24,255,224,0,56,255,240,0,56,255,224,0,56,255,224,0,56,255,240,0,24,255,224,0,0,255,240,0,0,255,252,0,0,255,255,192,24,65,0,0,0,34,0,0,0,28,0,0,0,28,0,0,0,28,0,0,0,34,64,0,0,65,96,7,0,0,80,25,128,126,72,55,128,49,56,99,128,12,148,79,192,62,125,226,192,17,155,127,192,14,253,207,192,1,238,202,224,0,9,214,96,0,7,110,224,0,14,247,224,0,22,220,224,0,60,140,224,0,17,250,224,0,15,234,96,0,3,122,224,0,12,242,224,0,25,101,224,0,17,95,224,0,17,63,192,0,12,159,192,0,22,97,192,0,31,63,192,0,15,195,224,0,31,255,248,0,15,249,248,0,3,255,248,0,0,63,224,25,0,31,0,1,1,255,255,255,128,255,255,143,128,255,255,7,128,31,252,7,128,135,248,15,128,195,240,7,128,225,248,7,128,241,248,7,128,224,248,7,128,224,112,7,128,192,32,3,128,193,0,1,128,193,128,0,128,193,192,0,128,225,192,1,128,227,192,1,128,231,128,1,128,231,128,1,128,231,128,1,128,247,128,1,128,255,128,1,128,255,192,1,128,255,192,1,128,255,192,0,128,255,192,0,128,255,192,0,0,255,192,0,0,255,128,0,0,255,0,0,0,255,192,0,0,255,252,1,128,0,0,0,0,0,0,112,0,0,0,152,0,224,3,216,0,88,4,48,0,44,12,120,0,26,7,24,0,14,5,248,0,31,5,120,0,22,136,88,0,39,94,76,0,38,191,198,0,38,93,99,0,38,46,241,0,22,63,186,0,28,61,14,0,24,105,206,0,16,127,166,0,16,94,174,0,8,93,174,0,0,93,190,0,0,53,186,0,0,33,190,0,0,40,243,0,0,49,99,0,0,32,251,128,0,56,7,128,0,78,15,128,0,255,247,128,0,63,255,128,0,3,254,0,25,0,29,0,1,1,255,251,255,128,255,128,255,128,255,1,255,128,254,1,255,128,254,1,255,128,254,0,255,128,254,0,255,128,252,0,255,128,248,1,254,0,240,0,252,0,240,0,120,128,240,0,49,128,144,0,35,128,0,0,7,128,0,0,7,128,128,0,7,128,240,0,15,128,224,0,63,128,192,0,127,128,192,0,255,128,192,0,127,128,192,240,63,128,224,240,31,128,225,24,63,128,192,0,63,128,192,0,31,128,224,0,15,128,252,0,31,128,255,192,255,128,0,4,0,0,0,123,0,0,0,198,0,0,1,190,0,0,1,78,0,0,1,255,0,0,1,87,0,0,3,31,0,0,7,190,1,128,13,121,2,128,13,240,133,0,9,160,202,0,106,194,220,0,150,194,104,0,151,39,152,0,127,255,152,0,15,223,240,0,29,253,192,0,38,232,128,0,39,15,0,0,38,250,128,0,47,9,192,0,31,9,96,0,18,228,192,0,63,255,192,0,63,252,224,0,31,255,240,0,3,255,224,0,0,63,0,0,24,0,30,0,1,1,190,255,255,221,255,131,227,238,1,227,196,1,227,196,1,221,196,1,190,196,2,255,196,0,255,132,3,255,198,3,255,192,1,255,192,0,255,192,0,255,128,0,255,128,0,255,204,0,255,248,1,255,240,1,255,224,1,255,224,1,255,224,3,254,64,7,254,0,15,254,8,31,255,28,15,255,191,7,255,192,15,254,0,15,255,0,15,255,128,31,65,0,0,34,0,124,28,17,198,28,43,26,28,43,254,34,42,30,65,43,253,0,59,127,0,74,92,0,57,124,0,47,254,0,39,243,0,62,3,0,91,89,0,95,251,0,51,243,0,7,62,0,15,182,0,23,222,0,28,226,0,28,236,1,174,120,1,223,48,1,246,32,0,227,240,0,64,184,0,63,240,1,255,240,0,255,240,0,127,224,220,23,0,0,19,0,1,0,0,0,0,0,1,1,66,19,0,65,85,10,28,1,7,1,10,5,5,0,1,10,5,5,1,1,10,5,5,2,10,10,4,4,6,18,10,4,4,4,28,10,4,4,3,38,10,4,4,6,48,10,4,4,0,58,6,10,1,5,93,12,10,10,8,85,15,28,1,10,1,10,5,5,0,1,10,5,5,1,1,10,5,5,2,10,10,4,4,6,18,10,4,4,4,28,10,4,4,3,38,10,4,4,6,48,10,4,4,0,58,6,10,1,5,93,17,10,10,9,85,15,28,1,11,1,10,5,5,0,1,10,5,5,1,1,10,5,5,2,10,10,4,4,6,18,10,4,4,4,28,10,4,4,3,38,10,4,4,6,48,10,4,4,0,58,6,10,1,5,93,17,10,10,12,85,15,28,1,17,1,10,5,5,0,1,10,5,5,1,1,10,5,5,2,10,10,4,4,6,18,10,4,4,4,28,10,4,4,3,38,10,4,4,6,48,10,4,4,0,58,6,10,1,5,93,17,10,10,18,82,6,28,1,13,1,10,5,5,0,1,10,5,5,1,1,10,5,5,2,10,10,4,4,6,18,10,4,4,4,28,10,4,4,3,38,10,4,4,6,45,10,4,4,0,55,6,10,1,5,88,7,10,10,14,85,13,28,1,15,1,10,5,5,0,1,10,5,5,1,1,10,5,5,2,10,10,4,4,6,18,10,4,4,4,28,10,4,4,3,38,10,4,4,6,48,10,4,4,0,58,6,10,1,5,93,15,10,10,16,31,0,36,0,1,1,255,243,255,254,255,224,127,254,255,224,31,254,255,240,15,254,255,240,15,254,159,224,15,254,143,128,15,254,199,192,15,254,227,192,7,254,241,192,7,174,248,128,15,14,252,0,12,14,254,0,0,6,255,0,0,6,254,0,0,2,224,0,0,0,192,0,0,0,128,0,0,210,128,0,0,190,128,0,0,126,128,0,0,254,24,0,0,254,24,0,0,254,24,0,0,254,16,12,0,254,144,31,192,254,176,31,224,254,177,31,225,254,241,31,193,254,249,159,225,254,249,159,225,254,249,159,224,254,192,3,192,62,128,0,0,30,224,0,0,30,255,128,0,62,0,12,0,0,0,23,128,0,0,28,96,0,0,12,48,0,0,15,208,0,96,19,176,0,80,102,16,0,40,63,112,0,20,35,200,0,10,48,8,80,5,79,240,240,3,222,179,208,1,186,255,136,0,175,254,168,1,247,252,228,31,239,249,222,62,224,251,250,124,255,235,44,92,227,95,64,88,247,223,128,120,223,207,0,164,231,131,0,164,230,33,0,164,254,195,0,233,243,231,0,105,224,39,0,75,160,21,0,74,160,22,0,10,224,38,0,6,96,22,0,6,96,22,0,6,96,21,0,61,236,61,192,127,255,247,224,31,255,247,224,0,127,255,192,25,0,36,0,1,1,255,63,255,128,254,7,255,128,254,1,255,128,255,1,229,128,254,1,193,128,252,1,129,128,248,1,1,128,248,0,1,128,248,0,1,128,248,0,1,128,240,0,1,128,240,0,1,128,240,0,17,128,240,0,27,128,224,0,15,128,224,0,15,128,224,0,6,128,240,0,0,0,224,0,0,0,192,0,0,128,128,0,0,128,16,0,192,128,16,3,193,128,16,3,129,128,24,7,131,128,28,15,159,128,24,31,255,128,152,31,255,128,144,63,255,128,208,63,255,128,208,63,255,128,248,31,255,128,248,31,255,128,224,0,31,128,192,0,0,128,224,0,1,128,0,192,0,0,1,120,0,0,1,198,0,0,0,206,26,0,1,246,62,0,2,106,106,0,6,194,226,0,5,183,178,0,7,31,122,0,7,174,250,0,12,221,190,0,12,235,114,0,12,119,234,0,14,207,228,0,31,159,48,0,31,123,16,0,21,198,57,0,15,198,63,128,30,228,125,128,63,238,101,0,123,187,253,0,235,191,61,0,169,228,46,0,236,228,106,0,166,248,92,0,162,112,96,0,230,224,0,0,69,224,0,0,107,192,0,0,43,192,0,0,46,192,0,0,5,160,0,0,5,224,0,0,31,223,224,0,60,255,255,0,31,255,254,0,30,0,38,0,1,1,254,255,255,252,252,15,167,252,252,7,135,252,254,3,3,252,252,3,1,252,248,2,0,252,248,0,0,124,240,0,0,60,224,0,0,124,224,0,14,252,192,0,15,252,192,0,15,252,192,0,14,124,224,0,0,60,240,0,0,28,240,0,0,140,224,0,0,196,224,0,0,96,224,0,12,32,128,0,30,32,0,0,126,52,24,0,126,60,24,1,255,124,24,3,255,252,8,3,255,252,12,7,255,252,28,15,255,252,28,15,255,252,28,31,255,252,56,31,255,252,120,31,255,252,248,143,255,252,252,207,255,252,252,0,255,252,240,0,7,252,192,0,0,124,240,0,0,252,255,254,7,252,1,0,0,0,2,240,88,0,3,136,120,0,1,156,252,0,3,236,226,0,4,85,219,0,7,135,239,128,14,79,178,64,25,63,223,128,28,153,113,0,47,103,240,0,37,143,176,0,39,62,17,128,26,254,63,64,9,254,127,160,15,159,51,80,31,38,77,40,16,231,254,156,31,238,147,84,126,255,225,220,255,206,129,72,165,255,129,192,164,226,0,128,164,252,0,0,180,252,0,0,178,120,0,0,227,112,0,0,163,112,0,0,226,224,0,0,197,224,0,0,135,224,0,0,7,80,0,0,3,48,0,0,3,239,0,0,15,231,248,0,63,127,255,128,15,255,255,0,0,1,248,0,36,0,35,0,1,1,255,255,249,255,240,255,255,240,63,240,255,255,240,31,240,255,255,240,12,240,255,255,240,8,240,255,255,224,8,240,255,255,192,1,240,255,255,192,1,240,255,255,128,35,240,255,255,0,99,176,255,254,0,70,48,255,252,0,8,48,255,254,0,16,48,255,255,0,0,16,254,63,0,0,16,252,16,0,0,16,248,0,0,0,0,192,192,0,0,0,131,128,0,3,128,7,128,0,7,208,255,128,0,15,240,255,128,0,15,240,254,0,0,7,240,252,7,240,1,240,248,15,248,129,240,216,31,241,248,240,130,63,241,252,240,6,127,243,252,112,252,127,243,254,112,248,255,243,254,48,248,7,241,254,48,192,0,0,15,240,128,0,0,0,240,224,0,0,0,48,255,255,224,3,240,0,0,6,0,0,0,0,11,192,0,0,0,14,96,0,0,0,14,19,0,0,0,15,117,0,0,0,27,213,0,0,0,33,90,0,0,0,63,42,0,0,0,127,212,0,0,0,192,148,64,0,1,253,169,192,0,2,119,119,192,0,1,119,175,64,0,0,209,59,32,1,192,216,179,160,3,111,191,247,160,7,255,31,63,240,63,59,134,63,176,108,113,126,60,80,248,99,159,248,32,0,99,250,80,0,0,71,251,144,0,1,207,248,152,0,3,216,12,246,0,7,176,7,126,0,39,224,14,7,0,125,64,14,3,0,249,128,12,2,128,2,128,12,1,128,5,0,12,1,64,5,248,10,1,192,62,127,255,240,0,127,255,255,255,0,31,255,255,255,192,0,0,31,252,0,36,0,35,0,1,1,255,255,159,255,240,255,255,1,255,240,255,255,0,255,240,255,255,128,255,240,255,255,128,255,240,255,255,0,255,240,255,252,0,231,240,255,255,0,199,240,255,254,1,143,240,255,254,3,30,112,255,252,0,48,112,255,252,0,0,112,255,252,0,0,48,255,248,0,0,16,255,248,0,0,16,252,96,0,0,0,240,0,0,6,0,128,0,0,1,128,3,128,0,7,240,199,128,0,7,240,255,128,0,7,240,255,192,0,7,240,255,224,0,7,240,255,192,96,3,240,255,224,126,49,240,255,240,35,60,240,255,248,48,28,240,255,252,24,60,240,255,254,15], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+266263);
/* memory initializer */ allocate([225,240,255,255,15,195,240,255,255,135,135,240,255,240,3,255,240,255,128,0,0,240,254,0,0,0,112,255,128,0,15,240,0,0,96,0,0,0,0,190,0,0,0,0,227,0,0,0,0,113,0,0,0,0,125,0,0,0,0,239,0,0,0,3,25,24,0,0,0,249,40,0,0,1,206,80,0,0,1,212,161,128,0,3,111,79,128,0,3,46,189,128,0,2,119,252,64,0,7,26,245,160,0,7,167,206,32,3,155,231,159,240,14,249,253,249,208,123,238,24,222,112,228,99,241,248,0,56,65,251,136,0,0,97,239,8,0,0,51,230,40,0,0,27,242,120,0,0,51,159,124,0,0,28,129,206,0,0,15,92,195,0,0,7,207,163,0,0,3,167,195,0,0,1,208,30,0,0,0,240,36,0,0,0,120,120,0,0,15,228,0,0,0,127,255,255,0,1,255,255,255,128,0,127,255,240,0,34,0,41,0,1,1,255,254,160,127,192,255,255,254,31,192,255,255,255,143,192,255,255,255,199,192,255,255,255,231,192,255,255,255,247,192,255,255,255,251,192,255,255,239,251,192,255,255,193,251,0,255,255,192,126,0,255,254,192,60,64,255,252,64,56,192,255,254,0,49,192,255,240,0,35,192,255,224,0,7,192,255,192,0,7,192,255,128,0,7,192,255,128,0,15,192,255,192,0,1,64,255,224,0,0,64,248,192,0,0,64,240,0,0,0,64,224,0,0,0,64,194,0,0,0,64,198,0,0,0,64,134,0,0,96,64,142,0,0,124,64,142,0,0,126,192,158,0,0,63,192,28,7,192,31,192,56,7,254,63,192,124,79,254,63,192,254,79,254,63,192,254,71,248,63,192,254,71,248,63,192,252,71,248,63,192,252,71,255,63,192,240,0,0,31,192,224,0,0,3,192,224,0,0,1,192,252,0,0,3,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,46,0,192,0,0,57,129,64,0,1,48,194,128,0,3,190,197,0,0,1,127,74,0,0,15,197,84,0,0,18,124,184,0,0,38,223,88,0,0,94,208,72,0,0,95,143,240,0,0,62,60,254,128,0,23,255,255,128,7,59,167,232,128,15,221,221,219,128,27,142,25,252,128,53,143,243,173,128,41,14,51,229,128,89,63,254,158,128,81,31,241,130,128,81,63,255,129,0,97,127,241,64,0,98,120,63,160,0,198,120,1,192,0,130,176,1,192,0,1,176,1,64,0,1,184,7,64,0,1,184,5,192,0,3,184,7,192,0,3,184,0,192,0,14,239,255,160,0,31,63,255,252,0,31,255,255,254,0,3,255,255,252,0,36,0,35,0,1,1,255,255,251,255,240,255,255,240,255,240,255,255,240,127,240,255,255,224,63,240,255,255,224,63,240,255,255,128,28,240,255,255,0,24,240,255,255,128,49,240,255,255,128,35,240,255,254,0,6,240,255,252,0,12,112,255,248,0,0,112,255,248,0,0,48,255,252,0,0,16,255,248,0,0,16,48,0,0,0,16,128,0,0,0,16,224,64,0,3,0,255,192,0,3,144,255,192,0,3,240,255,224,0,3,240,255,0,0,3,240,255,0,0,3,240,255,0,224,7,240,255,3,248,15,240,254,35,255,15,240,248,33,248,15,240,248,120,248,15,240,248,252,124,15,240,251,252,60,15,240,255,252,56,255,240,255,255,56,31,240,240,0,0,7,240,192,0,0,7,240,248,0,0,63,240,0,0,4,0,0,0,0,11,0,0,0,0,14,128,0,0,0,24,64,0,0,0,28,64,0,0,0,127,163,0,0,0,194,229,0,0,0,118,74,0,0,0,111,84,0,0,1,255,169,0,0,3,3,83,128,0,5,249,174,128,0,5,181,250,64,0,3,179,51,160,0,6,217,35,224,207,251,125,199,96,120,252,223,255,32,31,174,126,116,208,0,39,12,100,96,0,51,255,228,0,0,25,248,236,0,0,240,251,204,0,0,129,240,196,0,0,255,24,200,0,0,252,7,80,0,1,92,0,176,0,7,222,7,240,0,5,135,7,144,0,7,3,130,240,0,4,3,67,240,0,0,3,71,0,0,0,0,197,224,0,15,255,253,248,0,63,255,255,248,0,7,255,255,192,0,31,0,36,0,1,1,255,255,159,254,255,252,15,254,255,240,15,254,255,224,31,254,255,224,31,254,255,224,15,242,255,224,3,226,255,224,7,198,255,192,7,142,235,192,7,30,225,224,2,62,224,96,0,126,192,0,0,254,192,0,1,254,128,0,0,254,0,0,0,14,0,0,0,6,144,0,0,2,248,0,0,2,252,0,0,2,254,0,0,2,254,0,0,48,254,0,0,48,254,0,0,48,254,0,96,16,254,7,240,18,254,15,240,26,255,15,241,26,255,7,241,30,255,15,243,62,255,15,243,62,254,15,243,62,248,7,128,6,240,0,0,2,240,0,0,14,248,0,3,254,0,0,96,0,0,3,208,0,0,12,112,0,0,24,96,0,0,23,224,0,0,27,144,12,0,16,204,20,0,29,248,40,0,39,136,80,20,32,24,160,30,31,229,64,23,154,247,128,35,254,187,0,42,255,234,0,78,127,223,0,247,63,239,240,191,190,14,248,105,175,254,124,5,245,142,116,3,247,222,52,1,231,246,60,1,131,206,74,1,8,206,74,1,134,254,74,1,207,159,46,1,200,15,44,1,80,11,164,0,208,10,164,0,200,14,160,0,208,12,192,0,208,12,192,1,80,12,192,7,120,111,120,15,223,255,252,15,223,255,240,7,255,252,0,31,0,38,0,1,1,255,247,255,254,255,227,255,254,125,227,255,254,187,227,1,254,199,226,1,254,199,227,3,254,199,226,0,254,187,226,0,126,125,224,0,254,255,224,1,254,251,224,0,254,225,240,0,254,224,32,0,254,192,0,1,254,192,0,3,254,192,0,3,254,128,0,3,238,128,0,0,66,128,0,0,0,216,0,0,0,254,0,0,0,255,0,0,0,254,0,0,0,248,0,0,0,248,0,0,0,249,128,0,2,249,195,241,2,249,199,240,150,248,71,248,150,248,71,249,158,254,15,241,30,255,159,243,30,255,159,194,30,255,56,0,30,240,0,0,6,224,0,0,6,224,0,0,30,254,0,255,254,0,8,0,0,0,20,0,0,130,20,0,0,68,20,254,0,56,21,142,0,56,20,220,0,56,21,51,0,68,21,83,128,130,31,159,0,0,23,246,0,4,25,119,0,30,14,27,0,31,223,221,0,49,163,246,0,43,231,204,0,47,127,220,0,87,57,228,16,127,254,123,188,95,253,199,246,38,252,127,122,1,206,126,42,0,143,248,106,1,6,124,106,6,207,62,234,5,200,254,110,6,103,255,60,6,36,14,156,6,40,15,104,7,168,7,104,6,184,6,96,1,208,10,224,0,32,12,224,0,96,53,224,0,199,255,224,15,255,255,120,31,127,255,248,31,255,255,224,1,255,0,0,26,0,32,0,1,1,190,255,255,192,221,255,255,192,227,239,255,192,227,231,255,192,227,231,255,192,221,231,137,192,190,231,0,192,255,230,0,192,255,228,1,192,255,228,3,192,255,228,1,192,255,192,0,192,255,192,0,0,255,224,0,192,255,224,0,192,255,224,0,64,255,192,0,64,255,192,0,192,255,231,128,192,255,252,0,192,255,248,0,192,255,240,0,192,255,240,0,192,255,224,1,192,255,0,3,192,255,0,15,192,255,131,7,192,255,7,7,192,255,0,3,192,255,128,1,192,255,224,0,192,255,252,1,192,65,0,0,0,34,0,0,0,28,16,0,0,28,24,0,0,28,24,0,0,34,24,118,0,65,24,157,0,0,25,5,0,0,27,158,0,0,27,220,0,0,26,238,0,0,46,179,0,0,54,56,192,0,31,61,0,0,18,243,0,0,28,89,128,0,47,12,128,0,47,255,0,0,24,121,0,0,3,251,0,0,7,111,0,0,14,159,0,0,12,79,0,0,28,118,0,0,246,124,0,0,151,240,0,0,92,232,0,0,248,152,0,0,255,228,0,0,127,46,0,0,31,63,0,0,3,254,0,29,0,28,0,1,1,255,254,127,248,255,192,63,248,255,128,63,248,255,0,63,248,255,0,127,248,255,0,127,248,255,0,127,224,255,0,31,192,254,0,63,136,252,0,63,24,252,0,30,56,252,0,28,120,192,0,16,248,128,0,1,248,128,0,1,248,192,0,3,248,252,0,3,248,248,0,7,248,240,0,31,248,240,0,31,248,248,0,63,248,252,0,63,248,252,0,31,248,248,0,15,248,240,0,15,248,240,0,7,248,240,0,7,248,248,0,7,248,0,1,128,0,0,62,192,0,0,71,64,0,0,227,192,0,0,207,128,0,0,243,128,0,0,252,128,24,0,166,96,40,1,135,192,80,2,77,192,160,2,122,97,64,3,60,226,128,63,211,173,0,73,191,214,0,95,255,186,0,63,253,164,0,3,127,236,0,6,254,248,0,9,100,32,0,9,185,224,0,5,131,64,0,3,254,64,0,3,196,96,0,7,119,240,0,9,254,240,0,15,255,248,0,15,254,56,0,7,255,248,0,23,0,29,0,1,1,255,227,254,255,129,254,255,1,254,238,1,254,204,1,198,204,1,6,204,0,6,196,0,0,128,0,0,0,0,2,0,0,6,0,0,14,0,0,14,0,0,30,0,0,62,0,0,62,128,0,126,128,0,254,192,0,126,224,0,254,240,0,254,240,0,126,248,192,62,240,112,62,224,0,62,192,0,30,192,0,14,224,0,14,255,192,62,0,28,0,0,122,0,0,158,0,17,6,0,51,62,56,51,198,232,51,123,88,43,81,246,110,25,234,205,55,252,205,224,232,207,249,240,207,111,144,191,255,32,147,147,192,151,246,64,127,174,128,91,219,0,45,204,128,23,247,0,14,169,0,15,209,128,7,57,192,9,143,64,19,255,192,63,253,96,63,248,112,31,255,240,0,63,192,33,0,29,0,1,1,190,255,255,255,128,221,255,255,255,128,227,255,255,127,128,227,255,252,63,128,227,255,240,31,128,221,255,224,31,128,190,255,192,63,128,255,255,192,41,128,255,243,192,0,128,255,225,128,0,128,255,0,0,0,128,252,0,0,0,0,248,48,0,0,0,240,240,0,0,128,225,230,0,3,128,195,207,0,3,128,199,158,0,7,128,135,60,0,15,128,142,8,0,31,128,140,128,0,127,128,137,128,0,127,128,131,192,0,255,128,135,224,0,255,128,143,248,1,255,128,31,224,63,255,128,31,128,7,255,128,191,0,1,255,128,255,0,1,255,128,255,192,3,255,128,65,0,0,0,0,34,0,0,0,0,28,0,0,128,0,28,0,3,64,0,28,0,15,160,0,34,0,17,224,0,65,0,49,192,0,0,0,47,214,0,0,12,61,255,0,0,26,111,107,0,0,245,170,127,0,3,252,227,189,128,5,206,119,157,128,11,15,222,127,0,22,25,131,124,0,44,48,254,188,0,40,97,144,248,0,88,195,177,240,0,81,247,255,224,0,115,78,254,128,0,118,91,63,128,0,124,63,25,0,0,120,27,55,0,0,112,5,254,0,0,160,30,192,0,0,160,119,248,0,0,64,251,254,0,0,0,255,254,0,0,0,63,252,0,0,36,0,40,0,1,1,255,255,248,255,240,31,255,0,127,240,143,254,0,63,240,135,254,2,31,240,195,254,3,255,240,241,254,1,255,240,248,62,1,255,240,252,31,0,255,240,248,15,129,255,240,240,7,128,255,240,240,3,0,127,240,224,0,0,127,240,224,0,0,127,240,192,0,0,63,240,128,0,0,31,240,0,0,0,31,240,0,0,0,15,240,144,0,0,0,240,248,0,0,0,112,252,0,0,0,48,255,0,0,0,16,255,0,0,1,16,255,0,0,1,16,248,0,0,1,0,240,0,0,1,0,241,0,0,1,128,243,128,3,1,128,251,192,63,129,128,255,193,255,128,128,255,193,255,129,128,255,193,255,129,192,255,193,255,129,240,255,193,255,129,240,255,193,255,129,240,255,192,255,129,240,255,192,255,1,240,255,192,84,1,112,250,128,0,0,48,240,0,0,0,112,248,0,0,0,240,0,0,7,0,0,224,0,252,128,0,80,1,94,64,0,72,1,61,224,0,52,1,236,0,0,10,1,246,0,0,5,193,82,0,0,3,32,177,0,0,7,112,126,0,0,13,40,123,0,0,15,180,217,128,0,23,235,63,128,0,25,245,251,128,0,47,243,172,64,0,117,61,47,96,0,223,158,255,160,0,187,155,158,208,0,105,75,205,255,0,5,132,71,127,128,3,254,99,191,192,0,231,255,201,160,0,249,158,230,160,0,231,239,122,160,7,159,191,254,144,15,243,223,238,208,10,242,31,230,112,12,102,60,226,80,4,39,192,114,112,0,46,0,115,80,0,46,0,122,112,0,46,0,106,48,0,46,0,106,0,0,62,0,110,0,0,62,0,110,0,0,47,0,106,0,0,41,0,174,0,0,47,171,118,128,5,107,85,197,64,10,158,170,250,128,5,117,85,85,0,38,0,43,0,1,1,251,239,255,255,252,253,223,159,255,252,254,63,143,255,252,254,63,15,20,124,254,63,142,0,28,253,223,142,0,60,251,239,132,0,252,255,252,128,3,252,225,248,0,3,252,225,254,0,7,252,192,255,0,3,252,128,127,128,1,252,128,63,192,1,252,128,15,192,1,252,0,15,192,1,252,32,2,0,3,252,240,0,0,7,252,248,0,0,31,252,252,0,0,63,252,252,0,0,31,252,204,0,0,4,252,128,0,0,0,124,192,0,0,0,60,240,0,0,0,60,240,0,0,0,28,240,0,0,0,28,240,0,0,0,28,240,96,0,0,12,240,255,192,0,4,240,255,254,2,12,240,255,255,3,140,240,127,255,3,196,240,31,255,3,224,241,31,255,3,244,249,159,255,7,252,253,255,254,7,252,255,255,254,15,252,255,255,252,15,252,255,255,248,15,252,255,170,168,10,188,255,213,84,21,124,255,170,170,42,188,255,213,85,85,124,4,16,0,0,0,2,32,96,0,0,1,192,80,0,0,1,192,144,235,128,1,192,81,180,96,2,32,113,210,192,4,16,74,239,0,0,3,126,116,0,30,6,234,84,0,22,1,23,248,0,63,0,143,252,0,100,128,92,114,0,70,192,58,98,0,111,48,57,226,0,189,176,38,166,0,214,205,255,156,0,11,111,251,56,0,7,242,31,224,0,3,191,203,192,0,3,142,120,96,0,51,134,56,251,0,79,252,248,54,128,49,228,127,255,64,15,31,253,195,64,9,247,241,253,160,9,255,63,197,160,12,251,253,253,160,15,159,255,195,240,15,0,63,255,8,15,0,1,237,240,15,0,0,228,80,13,128,0,228,40,13,224,0,236,28,14,160,0,236,8,6,96,0,232,0,2,0,1,168,0,0,0,1,176,0,0,0,3,48,0,0,0,5,80,0,0,85,87,181,64,0,42,170,170,128,0,85,85,213,64,0,42,170,170,128,25,0,31,0,1,1,255,255,255,128,255,255,143,128,255,255,7,128,31,252,7,128,135,248,15,128,195,240,7,128,225,248,7,128,241,248,7,128,224,248,7,128,224,112,7,128,192,32,3,128,193,0,1,128,193,128,0,128,193,192,0,128,225,192,1,128,227,192,1,128,231,128,1,128,231,128,1,128,231,128,1,128,247,128,1,128,255,128,1,128,255,192,1,128,255,192,1,128,255,192,0,128,255,192,0,128,255,192,0,0,255,192,0,0,255,128,0,0,255,0,0,0,255,192,0,0,255,252,1,128,0,0,0,0,0,0,112,0,0,0,152,0,224,3,216,0,88,4,48,0,44,12,120,0,26,7,24,0,14,5,248,0,31,5,120,0,22,136,88,0,39,94,76,0,38,191,198,0,38,93,99,0,38,46,241,0,22,63,186,0,28,61,14,0,24,105,206,0,16,127,166,0,16,94,174,0,8,93,174,0,0,93,190,0,0,53,186,0,0,33,190,0,0,40,243,0,0,49,99,0,0,32,251,128,0,56,7,128,0,78,15,128,0,255,247,128,0,63,255,128,0,3,254,0,29,0,35,0,1,1,190,255,255,248,221,255,255,248,227,255,255,248,227,255,255,248,227,255,255,248,221,191,255,248,190,159,248,248,255,143,224,120,129,135,192,120,192,199,128,120,240,99,128,56,192,2,0,56,224,0,0,56,240,0,0,56,254,16,0,24,255,240,0,24,255,248,0,24,255,240,0,24,255,224,0,24,255,192,0,24,255,224,0,24,255,240,0,24,255,252,0,24,255,240,0,24,255,224,0,24,255,224,0,24,255,224,0,56,255,240,0,56,255,224,0,56,255,224,0,56,255,240,0,24,255,224,0,0,255,240,0,0,255,252,0,0,255,255,192,24,65,0,0,0,34,0,0,0,28,0,0,0,28,0,0,0,28,0,0,0,34,64,0,0,65,96,7,0,0,80,25,128,126,72,55,128,49,56,99,128,12,148,79,192,62,125,226,192,17,155,127,192,14,253,207,192,1,238,202,224,0,9,214,96,0,7,110,224,0,14,247,224,0,22,220,224,0,60,140,224,0,17,250,224,0,15,234,96,0,3,122,224,0,12,242,224,0,25,101,224,0,17,95,224,0,17,63,192,0,12,159,192,0,22,97,192,0,31,63,192,0,15,195,224,0,31,255,248,0,15,249,248,0,3,255,248,0,0,63,224,25,0,29,0,1,1,255,251,255,128,255,128,255,128,255,1,255,128,254,1,255,128,254,1,255,128,254,0,255,128,254,0,255,128,252,0,255,128,248,1,254,0,240,0,252,0,240,0,120,128,240,0,49,128,144,0,35,128,0,0,7,128,0,0,7,128,128,0,7,128,240,0,15,128,224,0,63,128,192,0,127,128,192,0,255,128,192,0,127,128,192,240,63,128,224,240,31,128,225,24,63,128,192,0,63,128,192,0,31,128,224,0,15,128,252,0,31,128,255,192,255,128,0,4,0,0,0,123,0,0,0,198,0,0,1,190,0,0,1,78,0,0,1,255,0,0,1,87,0,0,3,31,0,0,7,190,1,128,13,121,2,128,13,240,133,0,9,160,202,0,106,194,220,0,150,194,104,0,151,39,152,0,127,255,152,0,15,223,240,0,29,253,192,0,38,232,128,0,39,15,0,0,38,250,128,0,47,9,192,0,31,9,96,0,18,228,192,0,63,255,192,0,63,252,224,0,31,255,240,0,3,255,224,0,0,63,0,0,24,0,30,0,1,1,190,255,255,221,255,131,227,238,1,227,196,1,227,196,1,221,196,1,190,196,2,255,196,0,255,132,3,255,198,3,255,192,1,255,192,0,255,192,0,255,128,0,255,128,0,255,204,0,255,248,1,255,240,1,255,224,1,255,224,1,255,224,3,254,64,7,254,0,15,254,8,31,255,28,15,255,191,7,255,192,15,254,0,15,255,0,15,255,128,31,65,0,0,34,0,124,28,17,198,28,43,26,28,43,254,34,42,30,65,43,253,0,59,127,0,74,92,0,57,124,0,47,254,0,39,243,0,62,3,0,91,89,0,95,251,0,51,243,0,7,62,0,15,182,0,23,222,0,28,226,0,28,236,1,174,120,1,223,48,1,246,32,0,227,240,0,64,184,0,63,240,1,255,240,0,255,240,0,127,224,98,11,0,0,64,0,163,0,0,0,192,0,152,2,5,0,157,2,5,0,162,2,5,0,167,2,5,0,172,2,5,0,177,2,5,0,182,2,5,0,187,2,5,0,192,2,5,0,197,2,5,0,202,2,9,0,211,2,4,0,215,2,4,0,219,2,4,0,223,2,4,0,227,2,4,0,231,2,4,0,235,2,4,0,239,2,4,0,243,2,4,0,247,2,4,0,251,2,4,0,255,2,8,0,7,3,8,0,15,3,10,0,25,3,4,0,29,3,4,0,33,3,4,0,37,3,4,0,41,3,4,0,45,3,4,0,49,3,4,0,53,3,4,0,57,3,4,0,61,3,10,0,71,3,10,0,81,3,16,0,97,3,56,0,153,3,20,0,173,3,20,0,193,3,10,0,203,3,10,0,213,3,10,0,223,3,7,0,230,3,7,0,237,3,8,0,245,3,4,0,249,3,4,0,253,3,4,0,1,4,2,0,3,4,2,0,5,4,12,0,17,4,12,0,29,4,8,0,37,4,8,0,45,4,12,0,57,4,10,0,67,4,8,0,75,4,10,0,85,4,12,0,97,4,12,0,109,4,4,0,113,4,2,0,115,4,4,0,119,4,10,0,129,4,4,0,133,4,6,0,139,4,6,0,145,4,6,0,151,4,6,0,157,4,4,0,161,4,4,0,165,4,4,0,169,4,4,0,173,4,4,0,177,4,20,0,197,4,20,0,217,4,5,0,222,4,5,0,227,4,10,0,237,4,9,0,246,4,15,0,5,5,9,0,14,5,14,0,28,5,10,0,38,5,10,0,48,5,12,0,60,5,10,0,70,5,12,0,82,5,12,0,94,5,9,0,103,5,9,0,112,5,8,0,120,5,10,0,130,5,23,0,153,5,12,0,165,5,8,0,173,5,4,0,177,5,9,0,186,5,34,0,220,5,16,0,236,5,13,0,249,5,13,0,6,6,6,0,12,6,2,0,14,6,9,0,23,6,11,0,34,6,5,0,39,6,16,0,55,6,10,0,65,6,8,0,73,6,14,0,87,6,16,0,103,6,3,0,106,6,3,0,109,6,16,0,125,6,10,0,135,6,24,0,159,6,14,0,173,6,36,0,209,6,24,0,233,6,24,0,1,7,36,0,37,7,22,0,59,7,36,0,95,7,16,0,111,7,32,0,143,7,24,0,167,7,22,0,189,7,34,0,223,7,28,0,251,7,20,0,15,8,30,0,45,8,12,0,57,8,36,0,93,8,24,0,117,8,22,0,139,8,42,0,181,8,36,0,217,8,42,0,3,9,42,0,45,9,38,0,83,9,32,0,115,9,32,0,147,9,30,0,177,9,26,0,203,9,32,0,235,9,28,0,7,10,9,0,16,10,11,0,27,10,2,0,29,10,10,0,39,10,28,0,67,10,38,0,105,10,24,0,129,10,34,0,163,10,24,0,187,10,36,0,223,10,36,0,3,11,26,0,29,11,22,0,51,11,36,0,87,11,11,0,151,116,140,108,250,121,169,138,180,250,140,107,138,152,250,133,105,146,117,250,137,140,146,117,250,131,177,150,146,250,119,128,148,150,250,136,139,127,154,250,125,176,135,110,250,129,120,138,115,250,122,179,113,120,113,184,129,102,250,149,189,115,99,124,98,123,132,122,117,148,150,139,110,148,150,113,105,118,111,134,175,113,184,114,125,113,184,121,109,113,184,139,110,113,184,124,107,113,184,144,190,113,184,224,144,149,224,224,131,187,224,224,121,169,224,224,138,180,224,224,139,185,148,154,115,135,138,144,224,117,136,124,118,142,164,129,102,150,135,129,102,150,146,115,143,126,109,145,169,140,165,129,102,113,184,150,150,113,184,129,102,132,170,129,164,224,224,117,128,126,159,146,123,224,224,224,224,117,128,126,159,118,190,224,224,132,154,149,190,141,162,125,123,126,188,113,120,151,116,127,182,127,106,127,145,149,144,137,140,139,145,145,112,150,142,128,173,115,182,145,114,149,144,125,117,116,102,149,118,129,183,119,133,137,141,116,141,131,123,138,149,125,123,146,151,145,167,135,171,138,164,139,141,146,134,118,111,128,171,124,164,149,144,128,127,114,159,119,116,119,116,124,164,136,112,125,117,149,172,114,172,149,183,113,184,119,150,133,164,130,147,118,161,115,182,149,183,224,224,129,120,138,115,114,153,151,183,224,224,125,176,135,110,114,153,151,183,224,224,138,127,113,184,114,153,151,183,114,153,151,183,150,117,250,151,174,116,179,150,117,250,130,178,136,171,130,180,115,182,148,154,146,112,126,189,150,183,119,189,130,114,142,158,237,237,146,145,116,175,133,105,146,117,137,143,143,158,146,145,116,175,137,140,146,117,137,143,143,158,117,144,119,125,115,135,115,152,142,158,119,104,117,125,116,175,142,158,136,139,149,124,129,172,115,135,115,152,142,158,113,184,127,137,119,150,133,164,142,146,119,125,115,135,115,152,142,158,151,163,121,123,125,176,135,110,120,131,125,107,140,165,129,102,114,123,151,163,119,128,148,150,146,145,116,175,137,143,143,158,121,107,148,106,132,170,148,130,224,224,224,224,131,187,224,224,115,134,224,224,147,131,119,104,142,164,129,102,98,189,150,135,129,102,98,189,146,134,118,111,98,189,113,184,150,150,98,190,151,112,113,120,138,121,147,131,139,110,113,184,144,190,113,184,124,107,113,184,224,144,149,224,224,131,187,224,131,188,129,174,132,127,113,170,138,113,124,164,224,224,224,224,224,224,224,224,224,237,237,224,224,237,237,224,224,237,237,224,126,189,150,183,224,224,148,162,125,153,135,171,147,117,129,98,144,130,126,189,224,115,137,142,106,126,189,150,183,224,113,123,114,159,119,116,115,137,142,106,126,189,150,183,224,138,134,129,102,131,176,141,182,115,135,150,144,142,158,127,149,143,144,142,164,125,107,120,131,125,107,142,158,117,128,126,159,115,135,150,144,142,158,117,128,126,159,120,131,125,107,117,128,126,159,146,145,130,186,115,135,150,144,142,158,119,189,130,114,142,146,126,188,136,107,126,188,120,114,131,123,142,146,126,188,116,179,123,177,136,107,138,100,224,149,125,118,119,138,100,128,187,224,149,125,118,119,138,103,112,156,145,97,148,177,132,127,113,170,114,127,118,147,146,145,115,182,119,98,224,142,146,148,120,124,147,136,171,99,108,142,106,150,183,121,107,144,103,129,102,99,97,142,158,127,137,115,182,149,183,142,164,125,107,126,188,118,147,125,184,121,101,142,146,119,125,115,135,150,144,149,146,117,125,224,140,189,139,117,115,135,150,144,147,144,142,123,143,141,149,159,99,108,127,137,143,103,115,124,142,116,132,156,119,131,117,125,97,99,138,114,131,116,146,114,131,123,149,146,117,125,97,109,97,109,115,135,150,144,149,146,117,125,125,176,135,110,224,115,135,150,144,149,146,117,125,129,120,138,115,224,126,188,224,54,51,224,126,188,224,115,137,142,106,119,189,130,114,224,117,136,115,137,142,106,119,189,130,114,224,149,125,139,128,120,131,125,107,140,181,124,190,142,158,119,104,138,121,147,131,224,138,134,129,102,121,169,125,117,224,224,224,115,182,143,150,224,224,99,108,144,171,126,97,127,172,150,142,128,173,97,99,224,133,105,146,117,127,106,119,98,118,136,113,164,142,106,224,224,232,235,233,97,99,224,137,140,146,117,127,106,119,98,118,136,113,164,142,106,224,224,131,177,150,146,113,164,142,106,224,224,115,135,138,144,151,116,140,108,149,189,115,99,99,108,119,128,148,150,113,164,142,106,224,142,175,151,138,148,139,139,141,141,170,113,143,97,99,141,126,150,144,147,182,117,125,137,125,148,180,99,108,139,185,138,164,139,141,142,175,150,138,113,123,135,128,125,153,146,123,127,149,99,97,114,159,130,148,125,161,138,184,116,166,116,98,125,184,118,136,125,161,138,184,147,142,143,119,122,159,99,97,142,146,134,177,138,135,140,112,137,186,133,130,139,128,150,110,141,125,99,97,132,163,123,121,138,135,137,153,119,145,116,125,137,160,99,108,142,146,138,135,114,123,123,161,113,115,144,133,134,186,146,165,117,132,99,97,126,141,134,126,132,163,146,106,142,146,121,169,125,117,99,108,144,102,123,112,99,97,121,190,97,109,97,109,99,108,128,116,112,137,99,108,138,110,112,139,132,170,122,179,147,150,138,135,146,123,140,181,122,131,122,122,99,97,139,128,99,108,142,146,134,177,123,161,127,150,126,165,99,127,140,172,131,188,142,161,137,173,140,100,123,134,136,106,99,108,118,104,134,176,141,178,126,188,118,161,146,181,115,114,99,97,146,123,134,108,150,146,115,143,99,108,126,121,148,162,116,139,116,189,147,182,97,109,97,109,115,100,116,139,146,148,141,185,99,108,136,139,144,132,132,145,129,180,97,109,97,109,150,183,121,107,116,139,126,153,151,148,147,144,117,128,128,173,99,108,142,146,136,116,142,158,119,104,128,173,125,162,97,109,97,109,142,146,126,182,114,123,123,161,121,124,120,122,150,183,121,107,118,148,142,146,117,132,134,154,141,187,99,97,135,171,134,154,116,189,142,146,136,149,122,179,117,132,113,173,143,150,99,97,115,124,118,104,126,143,121,106,126,97,116,161,99,108,146,148,113,104,116,176,150,183,121,107,150,110,118,183,99,97,132,115,148,120,144,103,139,128,150,146,97,99,148,154,143,130,114,123,114,133,99,108,131,137,131,183,121,107,114,123,134,186,99,108,148,120,144,103,136,110,130,173,150,110,128,141,97,99,132,115,139,164,114,123,114,133,99,108,148,120,142,106,150,183,121,107,144,103,128,141,97,99,135,171,150,183,121,107,134,154,116,189,142,146,117,132,113,173,143,150,112,137,97,99,150,123,134,126,132,163,142,146,125,123,135,169,99,108,114,123,151,163,146,148,140,150,130,155,140,172,143,130,116,179,138,130,99,108,135,171,123,152,112,137,97,99,138,114,131,116,124,102,131,185,121,119,117,129,150,110,141,125,99,108,146,114,143,171,136,131,142,146,142,106,132,163,144,103,129,102,99,127,132,115,117,132,132,156,129,102,123,121,114,123,151,163,146,148,117,99,117,113,150,152,136,142,99,108,151,163,143,130,129,173,135,171,120,159,131,183,112,137,97,99,113,136,148,154,143,130,120,159,131,183,150,110,138,127,150,154,118,160,99,108,131,183,121,107,122,142,113,152,137,161,129,124,114,133,148,177,144,160,132,126,99,127,116,139,138,130,113,163,125,123,120,184,142,146,99,108,147,144,128,187,117,132,143,187,143,98,142,146,118,124,123,161,116,184,123,152,128,116,97,99,138,180,143,130,149,162,126,141,118,111,137,173,99,108,150,183,121,107,126,141,126,114,116,189,124,145,146,180,112,137,97,99,138,180,143,130,123,161,129,180,144,132,120,183,150,150,143,187,143,98,99,108,146,148,134,154,147,144,139,185,117,131,97,99,142,146,136,101,115,135,150,144,119,131,143,141,99,108,120,183,142,123,119,145,144,132,129,180,138,152,129,139,97,99,122,131,117,132,136,139,114,133,99,108,146,106,135,151,151,148,136,101,149,146,114,133,144,144,97,99,142,106,129,139,125,177,122,179,116,179,146,117,99,108,115,135,150,144,127,116,127,116,146,114,119,135,123,117,138,130,97,99,142,146,139,164,114,123,148,120,136,167,116,139,99,108,117,107,146,114,138,135,114,123,117,131,146,145,97,99,130,147,117,131,125,176,135,110,224,99,123,118,161,117,131,129,120,138,115,224,97,99,130,173,137,143,115,182,119,98,97,99,116,139,138,130,114,123,113,152,148,153,139,117,99,108,149,125,115,97,137,143,119,150,120,159,117,141,99,97,132,163,127,172,123,152,136,101,113,120,122,131,113,184,130,173,99,108,142,146,117,125,149,125,115,97,137,143,148,153,116,176,120,116,132,163,97,99,144,102,123,112,99,108,120,131,141,118,125,117,117,132,138,135,132,163,131,135,112,137,99,97,116,179,117,104,99,97,126,121,120,146,144,97,127,116,142,146,99,108,121,182,123,152,136,101,143,114,122,131,114,113,151,147,99,97,138,130,117,125,136,167,125,177,99,108,146,114,150,123,122,131,125,117,129,139,97,109,97,109,116,139,132,139,140,172,131,188,99,108,135,171,131,183,121,107,137,134,116,189,142,146,117,132,114,127,138,180,122,141,112,153,144,149,97,99,142,106,129,139,113,156,131,162,137,186,129,169,141,127,140,127,99,108,125,117,146,114,138,135,142,158,127,137,132,142,122,142,97,109,97,109,142,146,132,139,125,159,115,143,141,118,125,117,99,108,135,171,131,183,121,107,142,176,146,137,99,97,150,183,121,107,118,183,135,169,99,108,147,128,131,186,147,154,144,132,97,109,97,109,134,126,142,146,117,132,136,189,116,167,114,123,128,131,150,110,137,160,99,108,118,104,136,131,139,187,123,152,144,132,151,106,146,162,97,99,224,114,159,130,148,150,144,97,109,97,109,86,1,0,0,73,0,38,0,10,0,195,0,122,128,143,175,126,112,173,109,195,144,137,162,147,138,120,121,195,109,195,144,138,163,132,189,120,121,195,109,195,144,152,140,115,142,134,111,195,109,195,144,142,110,124,140,128,102,195,109,195,144,139,192,127,165,120,121,195,109,195,144,142,110,143,189,173,109,195,109,195,144,149,147,143,175,128,102,195,109,195,144,138,163,125,170,128,102,195,109,195,144,144,190,151,133,138,124,195,109,195,144,124,136,120,176,120,121,195,109,195,144,132,188,171,125,195,121,195,109,195,144,142,129,133,176,122,107,195,109,195,144,142,178,154,150,116,187,122,107,195,144,122,121,182,126,116,187,122,107,195,144,135,110,154,150,195,187,122,107,195,144,145,165,154,150,116,187,122,107,195,144,124,176,124,139,154,150,195,107,195,144,142,178,174,186,116,187,122,107,195,144,145,129,170,151,154,150,195,107,195,144,140,143,129,192,141,172,195,107,195,144,139,192,133,151,195,172,195,107,195,144,118,163,144,134,195,172,195,107,195,144,120,135,133,111,195,172,195,107,195,144,129,187,150,115,195,172,195,107,195,144,154,105,126,137,122,140,120,170,195,144,144,184,154,122,195,187,122,190,195,144,129,109,122,110,195,187,122,190,195,144,115,154,123,174,195,187,122,190,195,144,130,175,125,128,195,187,122,190,195,144,143,189,137,178,116,187,122,190,195,144,143,110,147,193,116,187,122,190,195,144,142,113,152,128,116,187,122,190,195,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,20,0,0,24,0,1,0,0,0,0,0,0,5,60,18,0,59,75,9,25,1,6,7,15,5,5,0,7,15,5,5,1,15,15,4,4,2,20,15,4,4,3,25,15,4,4,2,30,15,4,4,3,35,15,5,5,4,45,15,10,1,5,85,10,10,10,7,73,16,25,1,9,7,15,5,5,0,7,15,5,5,1,15,15,4,4,2,20,15,4,4,3,25,15,4,4,2,30,15,4,4,3,35,15,5,5,4,45,15,10,1,5,85,15,10,10,8,72,15,25,1,11,7,15,5,5,0,7,15,5,5,1,15,15,4,4,2,20,15,4,4,3,25,15,4,4,2,30,15,4,4,3,35,15,5,5,4,45,15,10,1,5,85,16,10,10,10,72,16,25,1,16,7,15,5,5,0,7,15,5,5,1,15,15,4,4,2,20,15,4,4,3,25,15,4,4,2,30,15,4,4,3,35,15,5,5,4,45,15,10,1,5,85,17,10,10,17,72,5,25,1,12,7,15,5,5,0,7,15,5,5,1,15,15,4,4,2,20,15,4,4,3,25,15,4,4,2,30,15,4,4,3,35,15,5,5,4,45,15,10,1,5,85,6,10,10,13,72,15,25,1,15,7,15,5,5,0,7,15,5,5,1,15,15,4,4,2,20,15,4,4,3,25,15,4,4,2,30,15,4,4,3,35,15,5,5,4,45,15,10,1,5,85,15,10,10,14,25,0,31,0,1,1,255,255,255,128,248,255,255,128,240,127,255,128,240,31,252,0,248,15,240,128,240,7,225,128,240,15,195,128,240,15,199,128,240,15,131,128,240,7,3,128,224,2,1,128,192,0,65,128,128,0,193,128,128,1,193,128,192,1,195,128,192,1,227,128,192,0,243,128,192,0,243,128,192,0,243,128,192,0,247,128,192,0,255,128,192,1,255,128,192,1,255,128,128,1,255,128,128,1,255,128,0,1,255,128,0,1,255,128,0,0,255,128,0,0,127,128,0,1,255,128,192,31,255,128,0,0,0,0,7,0,0,0,12,128,0,0,13,224,3,128,6,16,13,0,15,24,26,0,12,112,44,0,15,208,56,0,15,80,124,0,13,8,180,0,25,61,114,0,49,254,178,0,99,93,50,0,71,186,50,0,46,254,52,0,56,94,28,0,57,203,12,0,50,255,4,0,58,189,4,0,58,221,8,0,62,221,0,0,46,214,0,0,62,194,0,0,103,138,0,0,99,70,0,0,239,130,0,0,240,14,0,0,248,57,0,0,247,255,128,0,255,254,0,0,63,224,0,0,27,0,31,0,1,1,255,255,255,224,252,127,255,224,248,31,255,224,248,7,255,224,248,7,255,224,240,7,255,0,240,7,252,0,240,7,248,32,240,7,224,96,224,7,129,224,192,2,3,224,192,0,35,224,192,0,225,224,192,1,225,224,192,0,193,224,192,0,65,224,192,0,65,224,192,0,67,224,224,0,195,224,224,0,243,224,224,1,243,224,192,1,255,224,192,0,255,224,192,0,255,224,128,0,255,224,128,0,255,224,0,0,127,224,0,0,127,224,0,0,127,224,128,0,255,224,224,15,255,224,0,0,0,0,3,128,0,0,6,224,0,0,7,24,0,0,7,136,0,0,15,8,0,224,12,120,3,32,15,136,4,192,12,168,27,128,24,152,126,0,49,221,252,0,63,127,220,0,63,243,26,0,60,38,26,0,48,191,50,0,48,188,162,0,48,172,170,0,56,178,168,0,28,191,60,0,31,191,12,0,31,250,12,0,63,254,0,0,59,239,0,0,48,35,0,0,112,65,0,0,127,143,0,0,224,28,128,0,252,127,128,0,243,255,128,0,127,255,0,0,31,240,0,0,27,0,29,0,1,1,255,199,255,224,255,128,255,224,255,128,127,224,255,128,127,224,255,128,63,224,255,128,63,224,255,128,63,0,255,0,62,0,254,0,62,32,252,0,120,96,248,0,248,224,252,0,240,224,255,0,224,224,254,0,96,224,254,0,0,224,252,0,0,224,252,0,0,224,248,0,1,224,240,0,1,224,224,0,99,224,192,0,99,224,128,0,111,224,0,0,127,224,0,0,127,224,128,0,127,224,192,0,63,224,128,0,31,224,0,0,63,224,128,31,255,224,0,56,0,0,0,103,0,0,0,115,128,0,0,112,128,0,0,120,192,0,0,127,192,0,0,102,64,224,0,229,65,32,1,204,65,64,3,141,135,128,7,31,5,0,3,187,15,0,0,249,31,0,1,237,157,0,1,227,249,0,3,224,249,0,3,224,145,0,7,226,170,0,15,242,242,0,30,242,148,0,60,122,156,0,112,63,144,0,224,31,128,0,248,12,128,0,118,28,128,0,55,3,192,0,127,199,32,0,253,255,192,0,127,224,0,0,25,0,29,0,1,1,254,31,255,128,252,7,255,128,252,3,255,128,252,3,255,128,252,3,255,128,252,3,255,128,252,3,252,0,252,3,248,0,248,3,248,128,240,3,241,128,224,7,225,128,224,3,193,128,248,2,3,128,240,0,3,128,240,0,3,128,240,0,3,128,240,0,67,128,240,0,195,128,224,0,195,128,224,1,227,128,192,1,227,128,192,1,227,128,128,1,247,128,128,1,255,128,192,1,255,128,224,1,255,128,192,0,255,128,192,1,255,128,224,7,255,128,1,224,0,0,3,56,0,0,3,140,0,0,3,132,0,0,3,196,0,0,3,252,0,0,3,188,3,128,3,44,6,128,6,100,5,0,14,100,14,0,28,120,26,0,24,220,62,0,7,173,244,0,15,122,244,0,15,71,244,0,15,20,228,0,15,22,164,0,15,23,52,0,31,151,52,0,31,246,28,0,59,246,28,0,57,254,20,0,112,10,8,0,124,18,0,0,63,174,0,0,22,18,0,0,63,255,0,0,62,126,0,0,31,248,0,0,26,0,31,0,1,1,255,15,255,192,255,7,255,192,254,3,255,192,254,1,255,192,254,0,255,192,254,0,255,192,254,0,255,192,254,0,255,192,252,0,255,192,240,0,255,192,224,1,255,192,192,3,252,64,224,0,96,0,240,0,0,64,224,0,1,192,224,0,7,192,192,0,7,192,192,0,7,192,192,0,7,192,192,0,7,192,224,0,15,192,224,0,15,192,224,0,31,192,192,0,63,192,128,0,63,192,128,0,63,192,192,0,31,192,128,0,31,192,0,0,127,192,128,0,255,192,224,31,255,192,0,240,0,0,0,136,0,0,1,220,0,0,1,230,0,0,1,227,0,0,1,241,0,0,1,255,0,0,1,173,0,0,3,149,0,0,15,17,0,0,28,22,0,0,59,252,3,128,30,219,156,64,14,105,105,128,29,255,62,0,24,101,216,0,59,247,232,0,55,127,168,0,55,189,200,0,50,90,72,0,24,250,80,0,25,242,240,0,31,227,224,0,63,140,192,0,124,24,64,0,127,231,192,0,52,14,32,0,120,127,224,0,255,255,128,0,124,255,0,0,31,224,0,0,30,0,28,0,1,1,255,240,255,252,255,240,63,252,255,240,31,252,255,240,15,252,255,224,15,252,255,224,15,252,255,192,15,252,254,0,15,224,252,0,15,128,254,0,4,4,255,0,0,12,255,128,0,60,255,128,0,60,255,128,0,60,255,0,0,124,255,0,0,252,255,0,3,252,254,0,15,252,252,0,15,252,240,0,15,252,224,0,15,252,192,0,15,252,224,0,7,252,128,0,7,252,0,0,15,252,0,0,15,252,128,0,63,252,240,15,255,252,0,15,0,0,0,12,192,0,0,15,32,0,0,14,48,0,0,30,16,0,0,31,240,0,0,56,208,0,1,241,80,28,3,227,16,100,1,199,107,184,0,254,254,176,0,126,181,64,0,123,231,64,0,121,188,64,0,242,248,128,0,243,115,0,0,248,76,0,1,254,240,0,3,253,240,0,15,63,144,0,30,3,16,0,62,4,112,0,28,24,200,0,127,227,248,0,254,15,240,0,255,255,240,0,124,127,192,0,15,240,0,0,31,0,36,0,1,1,255,255,159,254,255,252,15,254,255,240,15,254,255,224,31,254,255,224,31,254,255,224,15,242,255,224,3,226,255,224,7,198,255,192,7,142,235,192,7,30,225,224,2,62,224,96,0,126,192,0,0,254,192,0,1,254,128,0,0,254,0,0,0,14,0,0,0,6,144,0,0,2,248,0,0,2,252,0,0,2,254,0,0,2,254,0,0,48,254,0,0,48,254,0,0,48,254,0,96,16,254,7,240,18,254,15,240,26,255,15,241,26,255,7,241,30,255,15,243,62,255,15,243,62,254,15,243,62,248,7,128,6,240,0,0,2,240,0,0,14,248,0,3,254,0,0,96,0,0,3,208,0,0,12,112,0,0,24,96,0,0,23,224,0,0,27,144,12,0,16,204,20,0,29,248,40,0,39,136,80,20,32,24,160,30,31,229,64,23,154,247,128,35,254,187,0,42,255,234,0,78,127,223,0,247,63,239,240,191,190,14,248,105,175,254,124,5,245,142,116,3,247,222,52,1,231,246,60,1,131,206,74,1,8,206,74,1,134,254,74,1,207,159,46,1,200,15,44,1,80,11,164,0,208,10,164,0,200,14,160,0,208,12,192,0,208,12,192,1,80,12,192,7,120,111,120,15,223,255,252,15,223,255,240,7,255,252,0,31,0,38,0,1,1,255,247,255,254,255,227,255,254,125,227,255,254,187,227,1,254,199,226,1,254,199,227,3,254,199,226,0,254,187,226,0,126,125,224,0,254,255,224,1,254,251,224,0,254,225,240,0,254,224,32,0,254,192,0,1,254,192,0,3,254,192,0,3,254,128,0,3,238,128,0,0,66,128,0,0,0,216,0,0,0,254,0,0,0,255,0,0,0,254,0,0,0,248,0,0,0,248,0,0,0,249,128,0,2,249,195,241,2,249,199,240,150,248,71,248,150,248,71,249,158,254,15,241,30,255,159,243,30,255,159,194,30,255,56,0,30,240,0,0,6,224,0,0,6,224,0,0,30,254,0,255,254,0,8,0,0,0,20,0,0,130,20,0,0,68,20,254,0,56,21,142,0,56,20,220,0,56,21,51,0,68,21,83,128,130,31,159,0,0,23,246,0,4,25,119,0,30,14,27,0,31,223,221,0,49,163,246,0,43,231,204,0,47,127,220,0,87,57,228,16,127,254,123,188,95,253,199,246,38,252,127,122,1,206,126,42,0,143,248,106,1,6,124,106,6,207,62,234,5,200,254,110,6,103,255,60,6,36,14,156,6,40,15,104,7,168,7,104,6,184,6,96,1,208,10,224,0,32,12,224,0,96,53,224,0,199,255,224,15,255,255,120,31,127,255,248,31,255,255,224,1,255,0,0,26,0,32,0,1,1,190,255,255,192,221,255,255,192,227,239,255,192,227,231,255,192,227,231,255,192,221,231,137,192,190,231,0,192,255,230,0,192,255,228,1,192,255,228,3,192,255,228,1,192,255,192,0,192,255,192,0,0,255,224,0,192,255,224,0,192,255,224,0,64,255,192,0,64,255,192,0,192,255,231,128,192,255,252,0,192,255,248,0,192,255,240,0,192,255,240,0,192,255,224,1,192,255,0,3,192,255,0,15,192,255,131,7,192,255,7,7,192,255,0,3,192,255,128,1,192,255,224,0,192,255,252,1,192,65,0,0,0,34,0,0,0,28,16,0,0,28,24,0,0,28,24,0,0,34,24,118,0,65,24,157,0,0,25,5,0,0,27,158,0,0,27,220,0,0,26,238,0,0,46,179,0,0,54,56,192,0,31,61,0,0,18,243,0,0,28,89,128,0,47,12,128,0,47,255,0,0,24,121,0,0,3,251,0,0,7,111], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+276503);
/* memory initializer */ allocate([0,0,14,159,0,0,12,79,0,0,28,118,0,0,246,124,0,0,151,240,0,0,92,232,0,0,248,152,0,0,255,228,0,0,127,46,0,0,31,63,0,0,3,254,0,29,0,28,0,1,1,255,254,127,248,255,192,63,248,255,128,63,248,255,0,63,248,255,0,127,248,255,0,127,248,255,0,127,224,255,0,31,192,254,0,63,136,252,0,63,24,252,0,30,56,252,0,28,120,192,0,16,248,128,0,1,248,128,0,1,248,192,0,3,248,252,0,3,248,248,0,7,248,240,0,31,248,240,0,31,248,248,0,63,248,252,0,63,248,252,0,31,248,248,0,15,248,240,0,15,248,240,0,7,248,240,0,7,248,248,0,7,248,0,1,128,0,0,62,192,0,0,71,64,0,0,227,192,0,0,207,128,0,0,243,128,0,0,252,128,24,0,166,96,40,1,135,192,80,2,77,192,160,2,122,97,64,3,60,226,128,63,211,173,0,73,191,214,0,95,255,186,0,63,253,164,0,3,127,236,0,6,254,248,0,9,100,32,0,9,185,224,0,5,131,64,0,3,254,64,0,3,196,96,0,7,119,240,0,9,254,240,0,15,255,248,0,15,254,56,0,7,255,248,0,33,0,29,0,1,1,190,255,255,255,128,221,255,255,255,128,227,255,255,127,128,227,255,252,63,128,227,255,240,31,128,221,255,224,31,128,190,255,192,63,128,255,255,192,41,128,255,243,192,0,128,255,225,128,0,128,255,0,0,0,128,252,0,0,0,0,248,48,0,0,0,240,240,0,0,128,225,230,0,3,128,195,207,0,3,128,199,158,0,7,128,135,60,0,15,128,142,8,0,31,128,140,128,0,127,128,137,128,0,127,128,131,192,0,255,128,135,224,0,255,128,143,248,1,255,128,31,224,63,255,128,31,128,7,255,128,191,0,1,255,128,255,0,1,255,128,255,192,3,255,128,65,0,0,0,0,34,0,0,0,0,28,0,0,128,0,28,0,3,64,0,28,0,15,160,0,34,0,17,224,0,65,0,49,192,0,0,0,47,214,0,0,12,61,255,0,0,26,111,107,0,0,245,170,127,0,3,252,227,189,128,5,206,119,157,128,11,15,222,127,0,22,25,131,124,0,44,48,254,188,0,40,97,144,248,0,88,195,177,240,0,81,247,255,224,0,115,78,254,128,0,118,91,63,128,0,124,63,25,0,0,120,27,55,0,0,112,5,254,0,0,160,30,192,0,0,160,119,248,0,0,64,251,254,0,0,0,255,254,0,0,0,63,252,0,0,23,0,29,0,1,1,255,227,254,255,129,254,255,1,254,238,1,254,204,1,198,204,1,6,204,0,6,196,0,0,128,0,0,0,0,2,0,0,6,0,0,14,0,0,14,0,0,30,0,0,62,0,0,62,128,0,126,128,0,254,192,0,126,224,0,254,240,0,254,240,0,126,248,192,62,240,112,62,224,0,62,192,0,30,192,0,14,224,0,14,255,192,62,0,28,0,0,122,0,0,158,0,17,6,0,51,62,56,51,198,232,51,123,88,43,81,246,110,25,234,205,55,252,205,224,232,207,249,240,207,111,144,191,255,32,147,147,192,151,246,64,127,174,128,91,219,0,45,204,128,23,247,0,14,169,0,15,209,128,7,57,192,9,143,64,19,255,192,63,253,96,63,248,112,31,255,240,0,63,192,36,0,40,0,1,1,255,255,248,255,240,31,255,0,127,240,143,254,0,63,240,135,254,2,31,240,195,254,3,255,240,241,254,1,255,240,248,62,1,255,240,252,31,0,255,240,248,15,129,255,240,240,7,128,255,240,240,3,0,127,240,224,0,0,127,240,224,0,0,127,240,192,0,0,63,240,128,0,0,31,240,0,0,0,31,240,0,0,0,15,240,144,0,0,0,240,248,0,0,0,112,252,0,0,0,48,255,0,0,0,16,255,0,0,1,16,255,0,0,1,16,248,0,0,1,0,240,0,0,1,0,241,0,0,1,128,243,128,3,1,128,251,192,63,129,128,255,193,255,128,128,255,193,255,129,128,255,193,255,129,192,255,193,255,129,240,255,193,255,129,240,255,193,255,129,240,255,192,255,129,240,255,192,255,1,240,255,192,84,1,112,250,128,0,0,48,240,0,0,0,112,248,0,0,0,240,0,0,7,0,0,224,0,252,128,0,80,1,94,64,0,72,1,61,224,0,52,1,236,0,0,10,1,246,0,0,5,193,82,0,0,3,32,177,0,0,7,112,126,0,0,13,40,123,0,0,15,180,217,128,0,23,235,63,128,0,25,245,251,128,0,47,243,172,64,0,117,61,47,96,0,223,158,255,160,0,187,155,158,208,0,105,75,205,255,0,5,132,71,127,128,3,254,99,191,192,0,231,255,201,160,0,249,158,230,160,0,231,239,122,160,7,159,191,254,144,15,243,223,238,208,10,242,31,230,112,12,102,60,226,80,4,39,192,114,112,0,46,0,115,80,0,46,0,122,112,0,46,0,106,48,0,46,0,106,0,0,62,0,110,0,0,62,0,110,0,0,47,0,106,0,0,41,0,174,0,0,47,171,118,128,5,107,85,197,64,10,158,170,250,128,5,117,85,85,0,38,0,43,0,1,1,251,239,255,255,252,253,223,159,255,252,254,63,143,255,252,254,63,15,20,124,254,63,142,0,28,253,223,142,0,60,251,239,132,0,252,255,252,128,3,252,225,248,0,3,252,225,254,0,7,252,192,255,0,3,252,128,127,128,1,252,128,63,192,1,252,128,15,192,1,252,0,15,192,1,252,32,2,0,3,252,240,0,0,7,252,248,0,0,31,252,252,0,0,63,252,252,0,0,31,252,204,0,0,4,252,128,0,0,0,124,192,0,0,0,60,240,0,0,0,60,240,0,0,0,28,240,0,0,0,28,240,0,0,0,28,240,96,0,0,12,240,255,192,0,4,240,255,254,2,12,240,255,255,3,140,240,127,255,3,196,240,31,255,3,224,241,31,255,3,244,249,159,255,7,252,253,255,254,7,252,255,255,254,15,252,255,255,252,15,252,255,255,248,15,252,255,170,168,10,188,255,213,84,21,124,255,170,170,42,188,255,213,85,85,124,4,16,0,0,0,2,32,96,0,0,1,192,80,0,0,1,192,144,235,128,1,192,81,180,96,2,32,113,210,192,4,16,74,239,0,0,3,126,116,0,30,6,234,84,0,22,1,23,248,0,63,0,143,252,0,100,128,92,114,0,70,192,58,98,0,111,48,57,226,0,189,176,38,166,0,214,205,255,156,0,11,111,251,56,0,7,242,31,224,0,3,191,203,192,0,3,142,120,96,0,51,134,56,251,0,79,252,248,54,128,49,228,127,255,64,15,31,253,195,64,9,247,241,253,160,9,255,63,197,160,12,251,253,253,160,15,159,255,195,240,15,0,63,255,8,15,0,1,237,240,15,0,0,228,80,13,128,0,228,40,13,224,0,236,28,14,160,0,236,8,6,96,0,232,0,2,0,1,168,0,0,0,1,176,0,0,0,3,48,0,0,0,5,80,0,0,85,87,181,64,0,42,170,170,128,0,85,85,213,64,0,42,170,170,128,29,0,35,0,1,1,190,255,255,248,221,255,255,248,227,255,255,248,227,255,255,248,227,255,255,248,221,191,255,248,190,159,248,248,255,143,224,120,129,135,192,120,192,199,128,120,240,99,128,56,192,2,0,56,224,0,0,56,240,0,0,56,254,16,0,24,255,240,0,24,255,248,0,24,255,240,0,24,255,224,0,24,255,192,0,24,255,224,0,24,255,240,0,24,255,252,0,24,255,240,0,24,255,224,0,24,255,224,0,24,255,224,0,56,255,240,0,56,255,224,0,56,255,224,0,56,255,240,0,24,255,224,0,0,255,240,0,0,255,252,0,0,255,255,192,24,65,0,0,0,34,0,0,0,28,0,0,0,28,0,0,0,28,0,0,0,34,64,0,0,65,96,7,0,0,80,25,128,126,72,55,128,49,56,99,128,12,148,79,192,62,125,226,192,17,155,127,192,14,253,207,192,1,238,202,224,0,9,214,96,0,7,110,224,0,14,247,224,0,22,220,224,0,60,140,224,0,17,250,224,0,15,234,96,0,3,122,224,0,12,242,224,0,25,101,224,0,17,95,224,0,17,63,192,0,12,159,192,0,22,97,192,0,31,63,192,0,15,195,224,0,31,255,248,0,15,249,248,0,3,255,248,0,0,63,224,25,0,31,0,1,1,255,255,255,128,255,255,143,128,255,255,7,128,31,252,7,128,135,248,15,128,195,240,7,128,225,248,7,128,241,248,7,128,224,248,7,128,224,112,7,128,192,32,3,128,193,0,1,128,193,128,0,128,193,192,0,128,225,192,1,128,227,192,1,128,231,128,1,128,231,128,1,128,231,128,1,128,247,128,1,128,255,128,1,128,255,192,1,128,255,192,1,128,255,192,0,128,255,192,0,128,255,192,0,0,255,192,0,0,255,128,0,0,255,0,0,0,255,192,0,0,255,252,1,128,0,0,0,0,0,0,112,0,0,0,152,0,224,3,216,0,88,4,48,0,44,12,120,0,26,7,24,0,14,5,248,0,31,5,120,0,22,136,88,0,39,94,76,0,38,191,198,0,38,93,99,0,38,46,241,0,22,63,186,0,28,61,14,0,24,105,206,0,16,127,166,0,16,94,174,0,8,93,174,0,0,93,190,0,0,53,186,0,0,33,190,0,0,40,243,0,0,49,99,0,0,32,251,128,0,56,7,128,0,78,15,128,0,255,247,128,0,63,255,128,0,3,254,0,25,0,29,0,1,1,255,251,255,128,255,128,255,128,255,1,255,128,254,1,255,128,254,1,255,128,254,0,255,128,254,0,255,128,252,0,255,128,248,1,254,0,240,0,252,0,240,0,120,128,240,0,49,128,144,0,35,128,0,0,7,128,0,0,7,128,128,0,7,128,240,0,15,128,224,0,63,128,192,0,127,128,192,0,255,128,192,0,127,128,192,240,63,128,224,240,31,128,225,24,63,128,192,0,63,128,192,0,31,128,224,0,15,128,252,0,31,128,255,192,255,128,0,4,0,0,0,123,0,0,0,198,0,0,1,190,0,0,1,78,0,0,1,255,0,0,1,87,0,0,3,31,0,0,7,190,1,128,13,121,2,128,13,240,133,0,9,160,202,0,106,194,220,0,150,194,104,0,151,39,152,0,127,255,152,0,15,223,240,0,29,253,192,0,38,232,128,0,39,15,0,0,38,250,128,0,47,9,192,0,31,9,96,0,18,228,192,0,63,255,192,0,63,252,224,0,31,255,240,0,3,255,224,0,0,63,0,0,24,0,30,0,1,1,190,255,255,221,255,131,227,238,1,227,196,1,227,196,1,221,196,1,190,196,2,255,196,0,255,132,3,255,198,3,255,192,1,255,192,0,255,192,0,255,128,0,255,128,0,255,204,0,255,248,1,255,240,1,255,224,1,255,224,1,255,224,3,254,64,7,254,0,15,254,8,31,255,28,15,255,191,7,255,192,15,254,0,15,255,0,15,255,128,31,65,0,0,34,0,124,28,17,198,28,43,26,28,43,254,34,42,30,65,43,253,0,59,127,0,74,92,0,57,124,0,47,254,0,39,243,0,62,3,0,91,89,0,95,251,0,51,243,0,7,62,0,15,182,0,23,222,0,28,226,0,28,236,1,174,120,1,223,48,1,246,32,0,227,240,0,64,184,0,63,240,1,255,240,0,255,240,0,127,224,144,19,0,0,20,0,1,0,0,0,0,0,1,2,60,18,0,59,85,8,29,1,4,3,15,5,5,0,15,15,5,5,1,21,15,5,5,2,27,15,5,5,1,33,15,5,5,2,39,15,5,5,1,45,15,5,5,0,52,15,10,1,3,94,10,10,10,5,85,14,29,1,7,3,15,5,5,0,15,15,5,5,1,21,15,5,5,2,27,15,5,5,1,33,15,5,5,2,39,15,5,5,1,45,15,5,5,0,52,15,10,1,3,95,16,10,10,6,85,14,29,1,9,3,15,5,5,0,15,15,5,5,1,21,15,5,5,2,27,15,5,5,1,33,15,5,5,2,39,15,5,5,1,45,15,5,5,0,52,15,10,1,3,92,16,10,10,8,85,15,29,1,17,3,15,5,5,0,15,15,5,5,1,21,15,5,5,2,27,15,5,5,1,33,15,5,5,2,39,15,5,5,1,45,15,5,5,0,52,15,10,1,3,95,17,10,10,14,82,4,29,1,10,3,15,5,5,0,15,15,5,5,1,21,15,5,5,2,27,15,5,5,1,33,15,5,5,2,39,15,5,5,1,45,15,5,5,0,52,15,10,1,3,87,5,10,10,11,85,12,29,1,13,3,15,5,5,0,15,15,5,5,1,21,15,5,5,2,27,15,5,5,1,33,15,5,5,2,39,15,5,5,1,45,15,5,5,0,52,15,10,1,3,95,14,10,10,12,29,0,28,0,1,1,255,249,255,248,255,240,15,248,255,240,7,248,255,240,3,248,255,248,3,248,63,248,3,248,31,248,3,248,143,224,3,248,199,240,1,248,227,240,0,248,241,224,0,248,248,224,0,248,252,32,0,8,254,0,0,0,254,0,0,0,255,0,0,8,255,0,0,248,255,128,0,120,255,224,0,56,255,224,0,56,255,240,0,120,255,240,0,248,255,224,112,248,255,192,64,120,255,192,0,56,255,128,0,56,255,128,0,56,255,128,0,120,0,6,0,0,0,13,240,0,0,11,136,0,0,15,28,0,0,7,204,0,192,7,60,0,160,4,252,0,80,25,148,0,40,15,134,0,20,14,201,0,10,25,121,0,5,28,243,0,2,215,47,240,1,175,246,72,1,119,255,232,0,150,255,240,0,223,251,0,0,125,253,128,0,16,154,64,0,30,118,64,0,11,6,128,0,9,255,0,0,24,143,0,0,63,187,128,0,61,254,64,0,127,255,192,0,113,255,192,0,127,255,128,25,0,28,0,1,1,255,128,255,128,255,0,127,128,255,0,127,128,255,128,63,128,255,192,62,0,255,128,60,0,254,0,56,128,252,0,56,128,255,0,113,128,254,0,241,128,248,0,99,128,240,0,99,128,240,0,71,128,240,0,7,128,248,0,15,128,252,0,15,128,248,0,31,128,240,0,63,128,224,0,31,128,248,0,31,128,240,0,63,128,224,64,127,128,224,248,127,128,192,240,63,128,129,240,31,128,192,28,31,128,0,3,255,128,0,0,63,128,0,127,0,0,0,185,128,0,0,240,128,0,0,127,192,0,0,63,193,128,0,103,66,128,1,205,69,0,3,28,69,0,0,253,138,0,1,119,10,0,6,161,148,0,11,24,148,0,9,252,168,0,11,179,200,0,5,57,176,0,3,248,144,0,7,252,224,0,11,127,192,0,28,221,160,0,7,59,32,0,12,198,192,0,24,191,128,0,29,6,128,0,51,15,192,0,102,15,32,0,51,227,224,0,249,252,0,0,255,255,192,0,21,0,28,0,1,1,255,35,248,254,1,248,254,0,248,255,0,248,255,0,248,254,0,248,248,0,248,252,0,248,252,1,248,240,0,248,224,0,24,192,0,24,192,0,56,192,0,8,224,0,0,240,3,8,224,1,248,192,0,248,224,0,120,240,0,120,224,0,248,193,225,248,195,192,248,225,193,248,227,224,248,252,0,120,128,0,120,224,0,120,0,220,0,1,114,0,1,225,0,0,249,0,0,239,0,1,157,0,6,27,0,2,57,0,3,250,0,12,223,0,30,37,224,49,19,32,35,204,192,51,243,48,19,207,72,14,60,240,28,122,0,39,229,0,19,204,128,14,28,128,29,249,0,58,26,0,52,63,0,26,58,0,28,23,0,3,244,128,127,249,128,31,255,128,32,0,31,0,1,1,255,255,252,255,255,255,255,63,255,255,7,159,255,255,241,223,255,255,252,239,255,255,255,111,255,255,255,189,255,254,71,248,255,252,3,216,255,252,1,241,255,254,0,241,255,242,1,227,255,240,0,227,255,248,0,199,255,128,0,199,255,0,1,143,254,0,0,7,252,0,0,15,252,0,0,31,248,0,0,63,248,0,7,255,252,0,3,255,252,0,3,255,252,0,3,255,248,0,135,255,224,57,143,255,224,255,15,255,192,0,7,255,128,0,3,255,0,0,7,255,128,0,31,255,0,0,3,0,0,0,0,192,0,0,248,96,0,0,14,32,0,0,3,16,0,0,0,144,0,0,0,66,0,1,184,5,0,2,100,37,0,3,194,10,0,1,213,10,0,13,206,20,0,11,153,20,0,4,21,40,0,126,241,40,0,147,182,80,1,54,79,248,3,112,192,144,2,223,253,160,6,184,127,192,5,255,248,0,2,243,220,0,3,223,36,0,2,96,244,0,4,121,104,0,29,198,112,0,31,0,240,0,63,255,184,0,111,255,228,0,248,255,248,0,127,255,224,0,31,0,36,0,1,1,255,255,159,254,255,252,15,254,255,240,15,254,255,224,31,254,255,224,31,254,255,224,15,242,255,224,3,226,255,224,7,198,255,192,7,142,235,192,7,30,225,224,2,62,224,96,0,126,192,0,0,254,192,0,1,254,128,0,0,254,0,0,0,14,0,0,0,6,144,0,0,2,248,0,0,2,252,0,0,2,254,0,0,2,254,0,0,48,254,0,0,48,254,0,0,48,254,0,96,16,254,7,240,18,254,15,240,26,255,15,241,26,255,7,241,30,255,15,243,62,255,15,243,62,254,15,243,62,248,7,128,6,240,0,0,2,240,0,0,14,248,0,3,254,0,0,96,0,0,3,208,0,0,12,112,0,0,24,96,0,0,23,224,0,0,27,144,12,0,16,204,20,0,29,248,40,0,39,136,80,20,32,24,160,30,31,229,64,23,154,247,128,35,254,187,0,42,255,234,0,78,127,223,0,247,63,239,240,191,190,14,248,105,175,254,124,5,245,142,116,3,247,222,52,1,231,246,60,1,131,206,74,1,8,206,74,1,134,254,74,1,207,159,46,1,200,15,44,1,80,11,164,0,208,10,164,0,200,14,160,0,208,12,192,0,208,12,192,1,80,12,192,7,120,111,120,15,223,255,252,15,223,255,240,7,255,252,0,31,0,38,0,1,1,255,247,255,254,255,227,255,254,125,227,255,254,187,227,1,254,199,226,1,254,199,227,3,254,199,226,0,254,187,226,0,126,125,224,0,254,255,224,1,254,251,224,0,254,225,240,0,254,224,32,0,254,192,0,1,254,192,0,3,254,192,0,3,254,128,0,3,238,128,0,0,66,128,0,0,0,216,0,0,0,254,0,0,0,255,0,0,0,254,0,0,0,248,0,0,0,248,0,0,0,249,128,0,2,249,195,241,2,249,199,240,150,248,71,248,150,248,71,249,158,254,15,241,30,255,159,243,30,255,159,194,30,255,56,0,30,240,0,0,6,224,0,0,6,224,0,0,30,254,0,255,254,0,8,0,0,0,20,0,0,130,20,0,0,68,20,254,0,56,21,142,0,56,20,220,0,56,21,51,0,68,21,83,128,130,31,159,0,0,23,246,0,4,25,119,0,30,14,27,0,31,223,221,0,49,163,246,0,43,231,204,0,47,127,220,0,87,57,228,16,127,254,123,188,95,253,199,246,38,252,127,122,1,206,126,42,0,143,248,106,1,6,124,106,6,207,62,234,5,200,254,110,6,103,255,60,6,36,14,156,6,40,15,104,7,168,7,104,6,184,6,96,1,208,10,224,0,32,12,224,0,96,53,224,0,199,255,224,15,255,255,120,31,127,255,248,31,255,255,224,1,255,0,0,26,0,32,0,1,1,190,255,255,192,221,255,255,192,227,239,255,192,227,231,255,192,227,231,255,192,221,231,137,192,190,231,0,192,255,230,0,192,255,228,1,192,255,228,3,192,255,228,1,192,255,192,0,192,255,192,0,0,255,224,0,192,255,224,0,192,255,224,0,64,255,192,0,64,255,192,0,192,255,231,128,192,255,252,0,192,255,248,0,192,255,240,0,192,255,240,0,192,255,224,1,192,255,0,3,192,255,0,15,192,255,131,7,192,255,7,7,192,255,0,3,192,255,128,1,192,255,224,0,192,255,252,1,192,65,0,0,0,34,0,0,0,28,16,0,0,28,24,0,0,28,24,0,0,34,24,118,0,65,24,157,0,0,25,5,0,0,27,158,0,0,27,220,0,0,26,238,0,0,46,179,0,0,54,56,192,0,31,61,0,0,18,243,0,0,28,89,128,0,47,12,128,0,47,255,0,0,24,121,0,0,3,251,0,0,7,111,0,0,14,159,0,0,12,79,0,0,28,118,0,0,246,124,0,0,151,240,0,0,92,232,0,0,248,152,0,0,255,228,0,0,127,46,0,0,31,63,0,0,3,254,0,29,0,28,0,1,1,255,254,127,248,255,192,63,248,255,128,63,248,255,0,63,248,255,0,127,248,255,0,127,248,255,0,127,224,255,0,31,192,254,0,63,136,252,0,63,24,252,0,30,56,252,0,28,120,192,0,16,248,128,0,1,248,128,0,1,248,192,0,3,248,252,0,3,248,248,0,7,248,240,0,31,248,240,0,31,248,248,0,63,248,252,0,63,248,252,0,31,248,248,0,15,248,240,0,15,248,240,0,7,248,240,0,7,248,248,0,7,248,0,1,128,0,0,62,192,0,0,71,64,0,0,227,192,0,0,207,128,0,0,243,128,0,0,252,128,24,0,166,96,40,1,135,192,80,2,77,192,160,2,122,97,64,3,60,226,128,63,211,173,0,73,191,214,0,95,255,186,0,63,253,164,0,3,127,236,0,6,254,248,0,9,100,32,0,9,185,224,0,5,131,64,0,3,254,64,0,3,196,96,0,7,119,240,0,9,254,240,0,15,255,248,0,15,254,56,0,7,255,248,0,33,0,29,0,1,1,190,255,255,255,128,221,255,255,255,128,227,255,255,127,128,227,255,252,63,128,227,255,240,31,128,221,255,224,31,128,190,255,192,63,128,255,255,192,41,128,255,243,192,0,128,255,225,128,0,128,255,0,0,0,128,252,0,0,0,0,248,48,0,0,0,240,240,0,0,128,225,230,0,3,128,195,207,0,3,128,199,158,0,7,128,135,60,0,15,128,142,8,0,31,128,140,128,0,127,128,137,128,0,127,128,131,192,0,255,128,135,224,0,255,128,143,248,1,255,128,31,224,63,255,128,31,128,7,255,128,191,0,1,255,128,255,0,1,255,128,255,192,3,255,128,65,0,0,0,0,34,0,0,0,0,28,0,0,128,0,28,0,3,64,0,28,0,15,160,0,34,0,17,224,0,65,0,49,192,0,0,0,47,214,0,0,12,61,255,0,0,26,111,107,0,0,245,170,127,0,3,252,227,189,128,5,206,119,157,128,11,15,222,127,0,22,25,131,124,0,44,48,254,188,0,40,97,144,248,0,88,195,177,240,0,81,247,255,224,0,115,78,254,128,0,118,91,63,128,0,124,63,25,0,0,120,27,55,0,0,112,5,254,0,0,160,30,192,0,0,160,119,248,0,0,64,251,254,0,0,0,255,254,0,0,0,63,252,0,0,23,0,29,0,1,1,255,227,254,255,129,254,255,1,254,238,1,254,204,1,198,204,1,6,204,0,6,196,0,0,128,0,0,0,0,2,0,0,6,0,0,14,0,0,14,0,0,30,0,0,62,0,0,62,128,0,126,128,0,254,192,0,126,224,0,254,240,0,254,240,0,126,248,192,62,240,112,62,224,0,62,192,0,30,192,0,14,224,0,14,255,192,62,0,28,0,0,122,0,0,158,0,17,6,0,51,62,56,51,198,232,51,123,88,43,81,246,110,25,234,205,55,252,205,224,232,207,249,240,207,111,144,191,255,32,147,147,192,151,246,64,127,174,128,91,219,0,45,204,128,23,247,0,14,169,0,15,209,128,7,57,192,9,143,64,19,255,192,63,253,96,63,248,112,31,255,240,0,63,192,36,0,40,0,1,1,255,255,248,255,240,31,255,0,127,240,143,254,0,63,240,135,254,2,31,240,195,254,3,255,240,241,254,1,255,240,248,62,1,255,240,252,31,0,255,240,248,15,129,255,240,240,7,128,255,240,240,3,0,127,240,224,0,0,127,240,224,0,0,127,240,192,0,0,63,240,128,0,0,31,240,0,0,0,31,240,0,0,0,15,240,144,0,0,0,240,248,0,0,0,112,252,0,0,0,48,255,0,0,0,16,255,0,0,1,16,255,0,0,1,16,248,0,0,1,0,240,0,0,1,0,241,0,0,1,128,243,128,3,1,128,251,192,63,129,128,255,193,255,128,128,255,193,255,129,128,255,193,255,129,192,255,193,255,129,240,255,193,255,129,240,255,193,255,129,240,255,192,255,129,240,255,192,255,1,240,255,192,84,1,112,250,128,0,0,48,240,0,0,0,112,248,0,0,0,240,0,0,7,0,0,224,0,252,128,0,80,1,94,64,0,72,1,61,224,0,52,1,236,0,0,10,1,246,0,0,5,193,82,0,0,3,32,177,0,0,7,112,126,0,0,13,40,123,0,0,15,180,217,128,0,23,235,63,128,0,25,245,251,128,0,47,243,172,64,0,117,61,47,96,0,223,158,255,160,0,187,155,158,208,0,105,75,205,255,0,5,132,71,127,128,3,254,99,191,192,0,231,255,201,160,0,249,158,230,160,0,231,239,122,160,7,159,191,254,144,15,243,223,238,208,10,242,31,230,112,12,102,60,226,80,4,39,192,114,112,0,46,0,115,80,0,46,0,122,112,0,46,0,106,48,0,46,0,106,0,0,62,0,110,0,0,62,0,110,0,0,47,0,106,0,0,41,0,174,0,0,47,171,118,128,5,107,85,197,64,10,158,170,250,128,5,117,85,85,0,38,0,43,0,1,1,251,239,255,255,252,253,223,159,255,252,254,63,143,255,252,254,63,15,20,124,254,63,142,0,28,253,223,142,0,60,251,239,132,0,252,255,252,128,3,252,225,248,0,3,252,225,254,0,7,252,192,255,0,3,252,128,127,128,1,252,128,63,192,1,252,128,15,192,1,252,0,15,192,1,252,32,2,0,3,252,240,0,0,7,252,248,0,0,31,252,252,0,0,63,252,252,0,0,31,252,204,0,0,4,252,128,0,0,0,124,192,0,0,0,60,240,0,0,0,60,240,0,0,0,28,240,0,0,0,28,240,0,0,0,28,240,96,0,0,12,240,255,192,0,4,240,255,254,2,12,240,255,255,3,140,240,127,255,3,196,240,31,255,3,224,241,31,255,3,244,249,159,255,7,252,253,255,254,7,252,255,255,254,15,252,255,255,252,15,252,255,255,248,15,252,255,170,168,10,188,255,213,84,21,124,255,170,170,42,188,255,213,85,85,124,4,16,0,0,0,2,32,96,0,0,1,192,80,0,0,1,192,144,235,128,1,192,81,180,96,2,32,113,210,192,4,16,74,239,0,0,3,126,116,0,30,6,234,84,0,22,1,23,248,0,63,0,143,252,0,100,128,92,114,0,70,192,58,98,0,111,48,57,226,0,189,176,38,166,0,214,205,255,156,0,11,111,251,56,0,7,242,31,224,0,3,191,203,192,0,3,142,120,96,0,51,134,56,251,0,79,252,248,54,128,49,228,127,255,64,15,31,253,195,64,9,247,241,253,160,9,255,63,197,160,12,251,253,253,160,15,159,255,195,240,15,0,63,255,8,15,0,1,237,240,15,0,0,228,80,13,128,0,228,40,13,224,0,236,28,14,160,0,236,8,6,96,0,232,0,2,0,1,168,0,0,0,1,176,0,0,0,3,48,0,0,0,5,80,0,0,85,87,181,64,0,42,170,170,128,0,85,85,213,64,0,42,170,170,128,29,0,35,0,1,1,190,255,255,248,221,255,255,248,227,255,255,248,227,255,255,248,227,255,255,248,221,191,255,248,190,159,248,248,255,143,224,120,129,135,192,120,192,199,128,120,240,99,128,56,192,2,0,56,224,0,0,56,240,0,0,56,254,16,0,24,255,240,0,24,255,248,0,24,255,240,0,24,255,224,0,24,255,192,0,24,255,224,0,24,255,240,0,24,255,252,0,24,255,240,0,24,255,224,0,24,255,224,0,24,255,224,0,56,255,240,0,56,255,224,0,56,255,224,0,56,255,240,0,24,255,224,0,0,255,240,0,0,255,252,0,0,255,255,192,24,65,0,0,0,34,0,0,0,28,0,0,0,28,0,0,0,28,0,0,0,34,64,0,0,65,96,7,0,0,80,25,128,126,72,55,128,49,56,99,128,12,148,79,192,62,125,226,192,17,155,127,192,14,253,207,192,1,238,202,224,0,9,214,96,0,7,110,224,0,14,247,224,0,22,220,224,0,60,140,224,0,17,250,224,0,15,234,96,0,3,122,224,0,12,242,224,0,25,101,224,0,17,95,224,0,17,63,192,0,12,159,192,0,22,97,192,0,31,63,192,0,15,195,224,0,31,255,248,0,15,249,248,0,3,255,248,0,0,63,224,25,0,31,0,1,1,255,255,255,128,255,255,143,128,255,255,7,128,31,252,7,128,135,248,15,128,195,240,7,128,225,248,7,128,241,248,7,128,224,248,7,128,224,112,7,128,192,32,3,128,193,0,1,128,193,128,0,128,193,192,0,128,225,192,1,128,227,192,1,128,231,128,1,128,231,128,1,128,231,128,1,128,247,128,1,128,255,128,1,128,255,192,1,128,255,192,1,128,255,192,0,128,255,192,0,128,255,192,0,0,255,192,0,0,255,128,0,0,255,0,0,0,255,192,0,0,255,252,1,128,0,0,0,0,0,0,112,0,0,0,152,0,224,3,216,0,88,4,48,0,44,12,120,0,26,7,24,0,14,5,248,0,31,5,120,0,22,136,88,0,39,94,76,0,38,191,198,0,38,93,99,0,38,46,241,0,22,63,186,0,28,61,14,0,24,105,206,0,16,127,166,0,16,94,174,0,8,93,174,0,0,93,190,0,0,53,186,0,0,33,190,0,0,40,243,0,0,49,99,0,0,32,251,128,0,56,7,128,0,78,15,128,0,255,247,128,0,63,255,128,0,3,254,0,24,0,30,0,1,1,190,255,255,221,255,131,227,238,1,227,196,1,227,196,1,221,196,1,190,196,2,255,196,0,255,132,3,255,198,3,255,192,1,255,192,0,255,192,0,255,128,0,255,128,0,255,204,0,255,248,1,255,240,1,255,224,1,255,224,1,255,224,3,254,64,7,254,0,15,254,8,31,255,28,15,255,191,7,255,192,15,254,0,15,255,0,15,255,128,31,65,0,0,34,0,124,28,17,198,28,43,26,28,43,254,34,42,30,65,43,253,0,59,127,0,74,92,0,57,124,0,47,254,0,39,243,0,62,3,0,91,89,0,95,251,0,51,243,0,7,62,0,15,182,0,23,222,0,28,226,0,28,236,1,174,120,1,223,48,1,246,32,0,227,240,0,64,184,0,63,240,1,255,240,0,255,240,0,127,224,25,0,29,0,1,1,255,251,255,128,255,128,255,128,255,1,255,128,254,1,255,128,254,1,255,128,254,0,255,128,254,0,255,128,252,0,255,128,248,1,254,0,240,0,252,0,240,0,120,128,240,0,49,128,144,0,35,128,0,0,7,128,0,0,7,128,128,0,7,128,240,0,15,128,224,0,63,128,192,0,127,128,192,0,255,128,192,0,127,128,192,240,63,128,224,240,31,128,225,24,63,128,192,0,63,128,192,0,31,128,224,0,15,128,252,0,31,128,255,192,255,128,0,4,0,0,0,123,0,0,0,198,0,0,1,190,0,0,1,78,0,0,1,255,0,0,1,87,0,0,3,31,0,0,7,190,1,128,13,121,2,128,13,240,133,0,9,160,202,0,106,194,220,0,150,194,104,0,151,39,152,0,127,255,152,0,15,223,240,0,29,253,192,0,38,232,128,0,39,15,0,0,38,250,128,0,47,9,192,0,31,9,96,0,18,228,192,0,63,255,192,0,63,252,224,0,31,255,240,0,3,255,224,0,0,63,0,0,24,0,30,0,1,1,190,255,255,221,255,131,227,238,1,227,196,1,227,196,1,221,196,1,190,196,2,255,196,0,255,132,3,255,198,3,255,192,1,255,192,0,255,192,0,255,128,0,255,128,0,255,204,0,255,248,1,255,240,1,255,224,1,255,224,1,255,224,3,254,64,7,254,0,15,254,8,31,255,28,15,255,191,7,255,192,15,254,0,15,255,0,15,255,128,31,65,0,0,34,0,124,28,17,198,28,43,26,28,43,254,34,42,30,65,43,253,0,59,127,0,74,92,0,57,124,0,47,254,0,39,243,0,62,3,0,91,89,0,95,251,0,51,243,0,7,62,0,15,182,0,23,222,0,28,226,0,28,236,1,174,120,1,223,48,1,246,32,0,227,240,0,64,184,0,63,240,1,255,240,0,255,240,0,127,224,25,0,29,0,1,1,255,251,255,128,255,128,255,128,255,1,255,128,254,1,255,128,254,1,255,128,254,0,255,128,254,0,255,128,252,0,255,128,248,1,254,0,240,0,252,0,240,0,120,128,240,0,49,128,144,0,35,128,0,0,7,128,0,0,7,128,128,0,7,128,240,0,15,128,224,0,63,128,192,0,127,128,192,0,255,128,192,0,127,128,192,240,63,128,224,240,31,128,225,24,63,128,192,0,63,128,192,0,31,128,224,0,15,128,252,0,31,128,255,192,255,128,0,4,0,0,0,123,0,0,0,198,0,0,1,190,0,0,1,78,0,0,1,255,0,0,1,87,0,0,3,31,0,0,7,190,1,128,13,121,2,128,13,240,133,0,9,160,202,0,106,194,220,0,150,194,104,0,151,39,152,0,127,255,152,0,15,223,240,0,29,253,192,0,38,232,128,0,39,15,0,0,38,250,128,0,47,9,192,0,31,9,96,0,18,228,192,0,63,255,192,0,63,252,224,0,31,255,240,0,3,255,224,0,0,63,0,0,124,18,0,0,57,0,4,0,156,4,0,0,0,6,57,21,20,211,6,102,25,28,7,59,58,152,253,7,0,173,101,2,0,202,0,180,1,0,0,0,3,0,0,1,17,17,92,21,141,5,130,24,2,12,43,56,43,161,7,0,107,54,2,0,85,1,99,1,0,0,3,6,0,1,2,18,0,147,13,227,4,198,14,110,4,39,55,75,49,3,0,234,70,1,0,126,0,56,1,0,0,9,3,1,1,3,6,0,249,6,184,2,56,8,199,3,58,69,81,76,1,0,185,89,0,0,107,0,174,0,0,0,12,5,2,0,4,10,0,26,18,178,6,157,18,227,6,67,69,202,39,3,0,26,218,0,0,195,0,172,1,0,0,17,4,2,1,5,14,0,166,9,170,3,182,9,77,3,68,62,56,84,1,0,225,125,0,0,93,0,234,0,0,0,21,5,3,0,6,3,0,200,24,41,10,230,22,99,9,68,43,207,28,8,0,162,249,3,0,11,1,138,2,0,0,26,13,3,0,7,8,0,47,29,2,14,21,27,74,10,46,60,56,249,7,0,214,222,2,0,36,1,128,3,0,0,39,3,3,0,8,6,6,209,18,231,7,143,18,89,8,47,51,178,29,3,0,79,239,0,0,237,0,249,1,0,0,42,8,3,0,9,12,0,211,16,57,6,214,18,21,5,52,49,204,43,3,0,228,11,1,0,144,0,142,1,0,0,50,5,3,1,10,1,0,162,33,39,17,244,34,69,20,49,39,12,116,12,0,253,87,8,0,64,2,73,4,0,0,55,4,4,0,11,11,0,117,23,82,10,210,29,192,7,35,37,11,11,8,0,182,105,2,0,220,0,148,2,0,0,59,9,4,0,12,2,0,72,17,214,4,28,19,199,4,48,30,54,40,3,0,139,250,0,0,135,0,53,1,0,0,68,11,4,2,13,7,0,91,23,181,7,178,29,100,10,50,57,110,11,8,0,190,158,3,0,39,1,237,1,0,0,79,4,6,0,14,19,0,25,28,109,8,112,25,105,9,39,50,9,22,8,0,2,109,2,0,11,1,27,2,0,0,83,5,6,1,15,1,0,177,37,153,19,247,34,46,18,36,48,16,74,12,0,8,37,6,0,5,2,230,4,0,0,88,9,7,0,16,9,0,137,20,191,5,226,22,251,10,53,60,255,11,8,0,153,126,2,0,56,1,111,1,0,0,97,6,7,3,17,7,0,246,6,147,2,130,7,218,2,62,40,72,109,1,0,71,102,0,0,81,0,164,0,0,0,103,3,10,2,18,7,0,53,4,239,1,219,5,163,1,62,62,143,176,1,0,119,112,0,0,46,0,123,0,0,0,106,2,12,0,19,0,0,13,4,86,1,125,8,36,3,55,36,207,177,1,0,209,138,0,0,89,0,85,0,0,0,108,1,12,0,20,1,0,106,18,26,8,99,15,0,4,55,39,52,18,3,0,105,204,0,0,113,0,6,2,0,0,109,2,12,0,21,4,0,28,14,131,4,143,17,95,7,66,44,0,21,3,0,66,12,1,0,209,0,32,1,0,0,111,5,12,0,22,0,0,166,27,113,12,20,30,35,14,61,33,103,24,8,0,157,192,2,0,146,1,28,3,0,0,116,3,12,1,23,0,0,0,13,240,4,11,17,214,7,36,66,178,23,3,0,2,29,1,0,222,0,60,1,0,0,119,1,13,0,24,16,0,189,21,155,7,79,20,187,8,69,53,31,227,7,0,90,53,2,0,248,0,230,1,0,0,120,5,13,0,25,0,0,101,16,235,4,224,14,232,4,59,63,63,78,3,0,143,211,0,0,139,0,58,1,0,0,125,1,13,0,26,15,0,236,21,221,9,100,23,31,9,37,68,119,22,8,0,198,18,3,0,3,1,119,2,0,0,126,7,13,0,27,15,0,233,11,61,5,81,14,149,6,60,35,127,29,3,0,197,134,1,0,187,0,79,1,0,0,133,3,13,2,28,0,0,33,15,254,4,148,16,162,5,56,47,6,92,3,0,155,53,1,0,160,0,63,1,0,0,136,1,15,2,29,0,0,25,15,198,3,30,16,229,7,44,63,141,31,3,0,218,7,1,0,224,0,241,0,0,0,137,1,17,1,30,0,0,87,15,114,4,145,13,96,6,45,54,71,86,3,0,211,8,1,0,181,0,28,1,0,0,138,4,18,0,31,0,0,50,5,99,2,231,9,68,3,39,68,0,95,1,0,66,91,0,0,92,0,152,0,0,0,142,2,18,0,32,0,0,181,17,5,6,156,15,142,6,48,60,83,57,3,0,101,115,1,0,186,0,129,1,0,0,144,1,18,0,33,5,0,193,11,13,5,207,14,151,4,59,69,177,14,3,0,241,17,1,0,130,0,67,1,0,0,145,6,18,0,34,0,0,8,16,64,6,21,19,52,8,62,49,97,42,3,0,2,235,0,0,233,0,144,1,0,0,151,2,18,0,35,0,0,242,17,255,6,134,12,2,5,68,40,59,74,3,0,0,123,1,0,142,0,191,1,0,0,153,0,18,2,36,0,0,251,13,74,6,126,13,101,5,44,62,236,59,3,0,137,223,0,0,153,0,146,1,0,0,153,1,20,2,37,0,0,243,18,148,7,157,12,46,6,32,40,117,117,3,0,121,80,1,0,175,0,229,1,0,0,154,3,22,0,190,0,0,12,0,125,21,61,9,82,21,248,5,39,40,173,231,7,0,133,216,2,0,169,0,79,2,0,0,0,6,0,0,1,4,0,198,29,4,11,57,27,182,8,55,41,83,167,7,0,178,113,3,0,247,0,193,2,0,0,6,7,0,1,2,11,0,21,13,105,6,40,13,100,5,62,32,137,18,3,0,137,121,1,0,153,0,154,1,0,0,13,4,1,0,3,12,0,80,11,240,2,20,11,224,3,64,41,106,163,1,0,12,109,0,0,110,0,188,0,0,0,17,3,1,1,4,4,0,190,13,232,5,193,15,226,4,34,40,85,83,3,0,156,135,1,0,138,0,122,1,0,0,20,4,2,1,5,4,0,147,8,88,3,156,10,46,3,33,54,174,120,1,0,129,169,0,0,90,0,214,0,0,0,24,4,3,0,6,4,0,152,23,51,9,25,20,7,6,43,42,157,0,8,0,39,0,2,0,171,0,76,2,0,0,28,6,3,0,7,16,0,88,28,167,7,78,23,236,7,68,61,206,250,7,0,68,121,2,0,225,0,233,1,0,0,34,3,3,0,8,12,0,20,16,192,6,198,12,245,3,51,37,144,131,3,0,214,76,1,0,112,0,176,1,0,0,37,7,3,0,9,1,0,16,13,157,5,112,16,101,7,67,68,150,14,3,0,120,203,0,0,210,0,103,1,0,0,44,2,3,1,10,1,0,251,35,130,20,229,34,73,21,58,54,153,130,12,0,236,65,9,0,93,2,32,5,0,0,46,4,4,0,11,4,0,19,22,208,10,221,29,115,10,37,38,115,232,7,0,91,14,2,0,41,1,180,2,0,0,50,6,4,2,12,9,0,6,18,104,5,162,16,125,4,50,65,230,35,3,0,43,241,0,0,127,0,90,1,0,0,56,10,6,0,13,3,0,42,26,229,8,52,20,126,9,52,33,51,243,7,0,53,78,2,0,14,1,57,2,0,0,66,6,6,1,14,15,0,182,23,2,9,171,20,32,10,67,60,35,226,7,0,229,32,2,0,32,1,64,2,0,0,72,6,7,0,15,0,0,31,4,10,0,176,5,10,0,41,59,194,102,1,0,52,172,0,0,53,0,102,0,0,0,78,1,7,1,16,2,0,197,30,98,11,165,22,236,7,39,67,159,235,7,0,214,136,2,0,225,0,216,2,0,0,79,15,8,0,17,3,0,251,4,61,2,0,5,25,2,46,63,77,87,1,0,235,157,0,0,59,0,143,0,0,0,94,6,8,2,18,3,0,114,10,152,4,140,8,26,4,38,68,165,71,1,0,139,160,0,0,116,0,38,1,0,0,100,3,10,3,19,14,0,174,5,185,2,88,9,52,4,34,35,98,165,1,0,214,193,0,0,119,0,174,0,0,0,103,5,13,1,20,8,0,239,18,133,8,206,17,167,7,49,67,131,38,3,0,177,209,0,0,217,0,33,2,0,0,108,4,14,1,21,5,0,26,12,223,3,237,18,180,8,31,61,44,69,3,0,156,95,1,0,247,0,247,0,0,0,112,9,15,1,22,6,0,198,23,44,11,136,19,8,7,42,46,134,18,8,0,245,107,2,0,200,0,203,2,0,0,121,8,16,1,23,6,0,95,14,156,6,244,12,88,6,62,56,218,82,3,0,65,255,0,0,180,0,167,1,0,0,129,6,17,0,24,14,0,103,24,120,11,198,23,252,9,49,33,122,15,8,0,55,210,2,0,28,1,222,2,0,0,135,4,17,0,25,14,0,175,16,87,7,211,12,0,5,48,59,24,95,3,0,167,149,1,0,142,0,213,1,0,0,139,1,17,0,26,13,0,50,25,24,12,86,26,204,10,40,34,77,166,7,0,102,152,3,0,51,1,6,3,0,0,140,15,17,0,27,13,0,11,13,155,5,173,13,247,3,62,65,20,108,3,0,232,76,1,0,112,0,102,1,0,0,155,5,17,1,28,0,0,58,14,175,6,4,16,73,5,31,53,108,38,3,0,194,90,1,0,150,0,171,1,0,0,160,1,18,2,29,0,0,67,18,6,6,89,19,40,7,40,33,58,18,3,0,186,243,0,0,203,0,129,1,0,0,161,0,20,0,30,0,0,127,16,150,7,254,14,50,7,56,32,36,89,3,0,182,9,1,0,204,0,229,1,0,0,161,0,20,0,31,14,0,73,8,207,3,43,11,119,4,33,46,119,123,1,0,214,113,0,0,127,0,243,0,0,0,161,4,20,0,32,0,0,2,18,5,7,121,18,127,8,67,56,97,90,3,0,217,35,1,0,241,0,193,1,0,0,165,1,20,0,33,10,0,221,11,203,3,248,18,53,7,49,31,248,90,3,0,196,104,1,0,205,0,242,0,0,0,166,4,20,1,34,0,0,4,19,191,8,234,17,141,5,34,57,50,56,3,0,157,139,1,0,157,0,47,2,0,0,170,1,21,0,35,0,0,161,16,124,6,149,13,88,4,41,47,171,109,3,0,14,174,1,0,123,0,159,1,0,0,171,1,21,1,36,0,0,198,15,52,5,133,15,13,6,37,64,226,46,3,0,184,203,0,0,172,0,77,1,0,0,172,0,22,1,37,7,0,230,16,151,6,23,18,248,5,41,45,187,25,3,0,254,253,0,0,169,0,165,1,0,0,172,3,23,0,198,0,0,8,0,63,31,79,15,7,22,94,8,53,31,78,11,8,0,193,208,2,0,238,0,211,3,0,0,0,4,0,0,1,5,0,49,27,132,9,44,24,126,7,52,63,32,22,8,0,115,101,3,0,213,0,97,2,0,0,4,8,0,0,2,11,0,63,19,50,5,67,15,5,7,36,58,168,117,3,0,68,36,1,0,199,0,76,1,0,0,12,3,0,4,3,8,0,113,4,85,1,72,11,48,5,62,52,227,89,1,0,196,103,0,0,147,0,85,0,0,0,15,2,4,1,4,5,0,8,18,239,7,129,16,151,7,56,42,225,90,3,0,95,70,1,0,215,0,251,1,0,0,17,3,5,0,5,5,0,52,8,51,3,219,6,32,2,59,54,133,168,1,0,134,199,0,0,60,0,204,0,0,0,20,0,5,0,6,5,0,39,22,134,9,91,29,159,12,53,38,72,214,7,0,179,94,3,0,103,1,97,2,0,0,20,2,5,1,7,5,0,215,29,10,11,46,25,145,9,39,53,246,184,7,0,140,41,2,0,16,1,194,2,0,0,22,4,6,1,8,8,0,48,19,183,6,18,13,103,6,32,65,207,98,3,0,180,242,0,0,182,0,173,1,0,0,26,9,7,0,9,5,0,128,13,81,4,10,18,13,5,41,43,72,64,3,0,150,68,1,0,143,0,20], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+286743);
/* memory initializer */ allocate([1,0,0,35,3,7,0,10,5,0,225,34,249,21,93,34,109,25,32,42,168,69,12,0,104,245,8,0,211,2,126,5,0,0,38,5,7,0,11,5,0,147,26,5,13,16,31,161,9,61,64,43,240,7,0,39,126,3,0,17,1,65,3,0,0,43,2,7,0,12,5,0,135,14,249,6,232,16,108,6,55,66,194,16,3,0,175,120,1,0,182,0,190,1,0,0,45,5,7,0,13,5,0,124,24,9,10,128,26,48,12,32,69,177,29,8,0,248,235,2,0,90,1,130,2,0,0,50,2,7,0,14,9,0,94,24,23,6,185,21,154,7,36,44,144,183,7,0,245,218,2,0,216,0,133,1,0,0,52,5,7,1,15,5,0,138,8,253,2,157,5,103,1,39,35,10,152,1,0,55,163,0,0,39,0,191,0,0,0,57,3,8,0,16,5,0,180,19,70,8,59,22,0,8,68,56,33,174,7,0,132,38,2,0,227,0,17,2,0,0,60,4,8,3,17,0,0,89,10,18,5,55,7,115,2,30,68,168,119,1,0,47,105,0,0,69,0,68,1,0,0,64,0,11,1,18,0,0,29,5,149,1,175,10,134,3,51,54,136,78,1,0,3,97,0,0,100,0,101,0,0,0,64,2,12,0,19,10,0,199,4,123,1,55,6,156,2,36,40,92,78,1,0,206,153,0,0,74,0,94,0,0,0,66,3,12,0,20,5,0,160,18,245,5,165,12,203,3,63,40,213,104,3,0,53,218,0,0,107,0,125,1,0,0,69,4,12,0,21,5,0,23,19,113,7,213,12,125,4,45,57,150,46,3,0,69,94,1,0,127,0,220,1,0,0,73,4,12,1,22,7,0,47,30,47,14,198,22,121,10,44,39,25,180,7,0,131,158,2,0,41,1,139,3,0,0,77,24,13,0,23,7,0,191,13,57,5,76,12,168,5,46,46,200,127,3,0,242,223,0,0,160,0,78,1,0,0,101,3,13,1,24,10,0,58,23,110,7,92,22,157,9,64,60,228,173,7,0,27,58,2,0,17,1,219,1,0,0,104,7,14,0,25,10,0,69,12,48,3,67,16,247,7,52,34,226,138,3,0,237,253,0,0,226,0,204,0,0,0,111,3,14,2,26,5,0,84,22,126,10,80,25,216,7,63,64,233,229,7,0,115,175,2,0,223,0,159,2,0,0,114,20,16,0,27,6,0,253,12,63,3,197,18,161,5,36,38,86,55,3,0,239,23,1,0,160,0,207,0,0,0,134,14,16,0,28,7,0,179,16,4,8,122,15,207,6,39,67,89,127,3,0,184,182,1,0,193,0,1,2,0,0,148,4,16,2,29,7,0,140,15,249,4,105,19,153,6,43,66,213,111,3,0,137,69,1,0,187,0,62,1,0,0,152,1,18,0,30,0,0,139,12,163,3,131,18,8,7,37,47,67,36,3,0,147,41,1,0,200,0,232,0,0,0,153,0,18,1,31,10,0,247,8,35,3,234,9,16,4,54,63,143,93,1,0,224,97,0,0,115,0,200,0,0,0,153,7,19,0,32,4,0,250,12,48,5,85,13,153,3,36,54,89,30,3,0,120,255,0,0,102,0,76,1,0,0,160,3,19,2,33,1,0,51,16,74,7,191,11,43,3,66,54,245,31,3,0,252,23,1,0,90,0,210,1,0,0,163,5,21,0,34,7,0,133,14,206,5,152,13,194,4,68,31,108,54,3,0,13,222,0,0,135,0,115,1,0,0,168,3,21,1,35,2,0,117,15,7,6,162,14,205,3,68,41,58,141,3,0,129,89,1,0,108,0,129,1,0,0,171,4,22,0,36,3,0,16,14,160,5,54,12,64,5,64,51,142,48,3,0,162,228,0,0,149,0,104,1,0,0,175,3,22,0,37,0,0,163,16,167,7,93,18,229,7,49,48,205,17,3,0,9,74,1,0,224,0,233,1,0,0,178,1,22,0,208,0,0,0,0,227,27,98,13,228,22,77,10,50,55,91,222,7,0,78,92,2,0,37,1,88,3,0,0,0,2,0,1,1,1,0,68,24,64,8,70,22,61,8,65,38,247,215,7,0,140,130,2,0,234,0,16,2,0,0,2,4,1,1,2,5,0,128,16,66,7,225,13,105,5,39,65,153,127,3,0,151,30,1,0,153,0,208,1,0,0,6,3,2,0,3,0,0,170,7,234,1,67,4,11,2,63,58,75,66,1,0,61,90,0,0,58,0,122,0,0,0,9,1,2,1,4,1,0,59,12,134,4,142,17,50,7,63,38,93,82,3,0,167,109,1,0,204,0,33,1,0,0,10,4,3,0,5,1,0,87,4,21,2,34,7,145,2,35,33,35,69,1,0,11,104,0,0,73,0,133,0,0,0,14,3,3,0,6,1,0,190,22,12,7,161,26,131,12,58,62,180,12,8,0,135,200,3,0,99,1,195,1,0,0,17,5,3,1,7,1,0,107,23,61,11,154,27,115,7,31,48,172,195,7,0,171,24,2,0,211,0,207,2,0,0,22,6,4,0,8,1,0,160,18,198,5,175,12,18,5,34,44,74,87,3,0,8,248,0,0,144,0,113,1,0,0,28,2,4,1,9,1,0,192,13,12,6,246,13,232,3,44,52,51,18,3,0,158,50,1,0,111,0,131,1,0,0,30,11,5,1,10,1,0,20,38,70,26,196,37,208,26,63,45,14,120,12,0,120,27,7,0,250,2,145,6,0,0,41,6,6,0,11,1,0,231,25,197,7,37,25,13,9,67,34,166,180,7,0,85,1,3,0,1,1,241,1,0,0,47,3,6,0,12,1,0,74,16,221,5,94,14,188,3,58,47,171,20,3,0,172,114,1,0,106,0,119,1,0,0,50,2,6,0,13,1,0,240,19,98,5,211,22,186,10,69,55,80,197,7,0,230,64,2,0,49,1,88,1,0,0,52,5,6,0,14,2,0,99,21,105,9,201,19,234,7,45,39,78,7,8,0,91,207,2,0,225,0,90,2,0,0,57,9,6,0,15,1,0,37,9,98,3,166,4,65,1,51,48,161,139,1,0,64,158,0,0,35,0,216,0,0,0,66,7,6,0,16,1,0,15,30,56,10,51,28,64,13,32,56,198,189,7,0,17,203,3,0,120,1,142,2,0,0,73,3,6,1,17,0,0,46,7,59,3,145,7,103,3,30,42,67,139,1,0,75,142,0,0,96,0,206,0,0,0,76,0,7,1,18,0,0,249,9,151,2,97,8,154,3,45,42,222,94,1,0,219,143,0,0,102,0,165,0,0,0,76,0,8,0,19,2,0,93,8,173,2,202,5,36,2,39,66,69,116,1,0,105,182,0,0,60,0,171,0,0,0,76,3,8,1,20,1,0,201,17,222,5,103,15,119,4,52,56,101,26,3,0,222,45,1,0,127,0,119,1,0,0,79,6,9,0,21,1,0,194,17,220,5,7,16,156,5,63,69,82,106,3,0,179,128,1,0,159,0,119,1,0,0,85,4,9,1,22,3,0,144,28,35,9,51,28,84,7,47,39,38,218,7,0,167,211,2,0,208,0,72,2,0,0,89,9,10,2,23,3,0,32,13,84,4,204,18,84,7,55,48,26,25,3,0,26,77,1,0,208,0,21,1,0,0,98,3,12,2,24,2,0,72,23,122,10,210,23,110,6,30,45,110,225,7,0,25,194,2,0,182,0,158,2,0,0,101,9,14,3,25,2,0,245,11,139,4,110,14,49,5,40,32,199,128,3,0,0,22,1,0,147,0,34,1,0,0,110,7,17,0,26,3,0,16,24,140,11,48,23,29,8,51,39,172,216,7,0,253,155,3,0,230,0,227,2,0,0,117,4,17,0,27,3,0,4,19,119,6,82,12,139,5,59,59,8,115,3,0,107,238,0,0,157,0,157,1,0,0,121,4,17,2,28,3,0,138,18,30,6,219,14,175,6,38,49,203,14,3,0,38,10,1,0,190,0,135,1,0,0,125,4,19,1,29,3,0,222,12,45,6,93,18,135,7,56,68,201,55,3,0,131,73,1,0,214,0,139,1,0,0,129,3,20,0,30,4,4,184,16,4,6,72,14,72,4,65,57,153,44,3,0,203,117,1,0,121,0,129,1,0,0,132,11,20,0,31,2,0,35,8,2,3,52,6,27,2,50,41,119,136,1,0,247,105,0,0,59,0,192,0,0,0,143,8,20,3,32,3,0,145,15,35,5,27,13,238,3,60,35,131,13,3,0,202,48,1,0,111,0,72,1,0,0,151,5,23,0,33,3,0,117,17,117,6,220,12,168,5,65,55,191,135,3,0,50,33,1,0,160,0,157,1,0,0,156,1,23,0,34,3,0,120,14,124,4,234,15,0,7,56,60,21,95,3,0,193,123,1,0,199,0,31,1,0,0,157,5,23,1,35,3,0,197,12,87,4,251,11,213,3,69,43,15,66,3,0,218,216,0,0,109,0,21,1,0,0,162,2,24,0,36,3,0,12,14,18,4,58,13,175,5,39,66,29,93,3,0,227,122,1,0,161,0,4,1,0,0,164,2,24,0,37,0,0,211,18,54,6,229,11,254,4,33,43,19,77,3,0,173,56,1,0,142,0,141,1,0,0,166,0,24,1,225,0,235,4,0,0,38,0,1,0,0,0,0,0,0,0,15,4,0,14,86,14,43,1,1,4,14,20,20,0,10,14,6,2,0,16,14,6,2,0,22,14,6,2,0,28,14,6,2,0,34,14,6,2,0,40,14,6,2,0,46,14,6,2,0,52,14,6,2,0,58,14,6,2,0,64,14,6,2,0,70,14,14,1,0,82,16,3,3,2,70,6,30,30,3,32,0,32,0,1,1,255,243,255,255,255,224,31,255,240,0,15,255,224,0,7,255,224,0,7,255,240,0,7,255,248,0,3,255,252,0,3,255,252,0,1,255,254,0,0,63,254,0,0,31,198,0,0,15,192,0,0,15,0,0,0,15,0,0,6,15,0,0,252,31,128,1,252,31,128,0,120,63,128,0,0,63,192,0,0,127,224,0,0,127,192,0,0,127,128,0,0,95,128,0,0,15,128,0,0,7,192,0,0,3,128,0,0,1,216,0,0,1,240,0,0,3,250,0,0,15,255,0,0,63,255,192,0,255,0,12,0,0,0,31,224,0,15,255,208,0,19,255,232,0,23,240,8,0,12,0,8,0,4,0,4,0,2,0,4,0,2,0,2,0,1,0,7,192,1,0,4,224,57,0,5,112,55,0,4,112,253,0,6,112,191,0,249,112,223,255,2,224,111,254,2,224,71,255,133,192,107,222,249,192,52,94,227,128,3,9,155,128,52,118,103,128,106,145,155,160,5,238,103,240,81,17,155,152,32,206,103,236,88,37,155,198,37,8,103,170,10,49,155,140,5,66,165,176,0,212,75,192,0,43,13,0,32,0,32,0,1,1,255,255,207,255,255,248,7,255,255,240,0,15,255,224,0,7,255,224,0,7,255,224,0,15,255,192,0,31,255,192,0,63,255,128,0,63,252,0,0,127,248,0,0,127,240,0,0,99,240,0,0,3,240,0,0,0,240,96,0,0,248,63,0,0,248,63,128,1,252,30,0,1,252,0,0,1,254,0,0,3,254,0,0,7,254,0,0,3,250,0,0,1,240,0,0,1,224,0,0,1,192,0,0,3,128,0,0,1,128,0,0,27,192,0,0,15,240,0,0,95,252,0,0,255,255,0,3,255,0,0,48,0,0,7,248,0,0,11,255,240,0,23,255,200,0,16,15,232,0,16,0,48,0,32,0,32,0,32,0,64,0,64,0,64,3,224,0,128,7,32,0,128,14,160,0,156,14,32,0,236,14,96,0,191,14,159,0,253,7,64,255,251,7,64,127,246,3,161,255,226,3,159,123,214,1,199,122,44,1,217,144,192,1,230,110,44,5,217,137,86,15,230,119,160,25,217,136,138,55,230,115,4,99,217,164,26,85,230,16,164,49,217,140,80,13,165,66,160,3,210,43,0,0,176,212,0,23,0,21,0,1,1,255,251,254,247,227,254,225,129,254,240,1,252,224,0,98,224,0,6,192,0,14,0,0,14,128,0,30,224,0,30,224,0,14,128,0,14,192,0,6,240,0,2,252,0,0,254,0,30,255,0,126,255,131,254,255,199,254,255,207,254,255,239,254,0,4,0,8,28,0,30,98,0,9,130,2,16,1,156,16,0,104,32,0,16,192,0,16,96,0,32,16,0,32,16,0,16,96,0,16,48,0,8,12,0,4,2,0,30,1,0,96,0,131,128,0,68,0,0,40,0,0,48,0,0,16,0,46,0,42,0,1,1,255,255,255,207,255,252,255,255,255,207,255,252,255,63,252,15,255,252,255,63,252,15,255,252,252,3,192,3,255,252,252,3,192,3,255,252,255,0,0,3,255,240,255,0,0,3,255,240,252,0,0,0,60,12,252,0,0,0,60,12,252,0,0,0,0,60,252,0,0,0,0,60,240,0,0,0,0,252,240,0,0,0,0,252,0,0,0,0,0,252,0,0,0,0,0,252,192,0,0,0,3,252,192,0,0,0,3,252,252,0,0,0,3,252,252,0,0,0,3,252,252,0,0,0,0,252,252,0,0,0,0,252,192,0,0,0,0,252,192,0,0,0,0,252,240,0,0,0,0,60,240,0,0,0,0,60,255,0,0,0,0,12,255,0,0,0,0,12,255,240,0,0,0,0,255,240,0,0,0,0,255,252,0,0,3,252,255,252,0,0,3,252,255,255,0,0,63,252,255,255,0,0,63,252,255,255,192,15,255,252,255,255,192,15,255,252,255,255,240,63,255,252,255,255,240,63,255,252,255,255,240,255,255,252,255,255,240,255,255,252,255,255,252,255,255,252,255,255,252,255,255,252,0,0,0,48,0,0,0,0,0,48,0,0,0,192,3,240,0,0,0,192,3,240,0,0,3,252,60,12,0,0,3,252,60,12,0,0,0,195,192,12,0,12,0,195,192,12,0,12,3,0,0,3,195,240,3,0,0,3,195,240,3,0,0,0,60,192,3,0,0,0,60,192,12,0,0,0,3,0,12,0,0,0,3,0,240,0,0,0,3,0,240,0,0,0,3,0,60,0,0,0,12,0,60,0,0,0,12,0,3,0,0,0,12,0,3,0,0,0,12,0,3,0,0,0,3,0,3,0,0,0,3,0,60,0,0,0,3,0,60,0,0,0,3,0,15,0,0,0,0,192,15,0,0,0,0,192,0,240,0,0,0,48,0,240,0,0,0,48,0,12,0,0,3,252,0,12,0,0,3,252,0,3,0,0,60,0,0,3,0,0,60,0,0,0,192,15,192,0,0,0,192,15,192,0,0,0,48,48,0,0,0,0,48,48,0,0,0,0,12,192,0,0,0,0,12,192,0,0,0,0,15,0,0,0,0,0,15,0,0,0,0,0,3,0,0,0,0,0,3,0,0,0,200,0,0,0,102,0,1,0,0,0,0,0,0,0,1,1,0,0,6,69,10,10,0,69,0,19,0,1,0,127,255,255,255,255,255,255,255,240,192,0,0,0,0,0,0,0,8,255,255,255,255,255,255,255,255,232,255,249,255,255,255,255,255,220,232,255,121,255,255,255,127,255,10,104,255,121,254,203,254,35,255,98,232,253,5,254,67,252,89,252,8,232,252,85,252,135,240,217,254,16,232,252,21,248,143,240,129,248,61,232,250,53,242,227,248,73,248,208,232,249,21,248,235,248,65,252,1,232,196,85,253,231,248,203,252,144,104,236,93,253,225,250,211,253,1,104,253,29,253,233,252,128,123,125,232,253,13,253,239,253,12,119,253,232,255,113,255,239,253,255,255,253,232,255,248,255,239,255,255,255,253,232,255,255,255,255,255,255,255,255,248,127,255,255,255,255,255,255,255,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,18,0,0,21,0,1,0,0,0,0,0,1,3,54,18,0,53,85,8,23,1,4,5,15,7,7,0,5,14,6,6,1,5,14,6,6,2,5,15,16,1,3,45,20,3,3,16,55,5,3,3,16,75,24,3,3,17,92,10,10,10,5,85,15,23,1,7,5,15,7,7,0,5,14,6,6,1,5,14,6,6,2,5,15,16,1,3,45,20,3,3,16,55,5,3,3,16,75,24,3,3,17,95,15,10,10,6,85,15,23,1,9,5,15,7,7,0,5,14,6,6,1,5,14,6,6,2,5,15,16,1,3,45,20,3,3,16,55,5,3,3,16,75,24,3,3,17,92,17,10,10,8,85,14,23,1,14,5,15,7,7,0,5,14,6,6,1,5,14,6,6,2,5,15,16,1,3,45,20,3,3,16,55,5,3,3,16,75,24,3,3,17,95,16,10,10,15,85,5,23,1,10,5,15,7,7,0,5,14,6,6,1,5,14,6,6,2,5,15,16,1,3,45,20,3,3,16,55,5,3,3,16,75,24,3,3,17,87,7,10,10,11,85,14,23,1,13,5,15,7,7,0,5,14,6,6,1,5,14,6,6,2,5,15,16,1,3,45,20,3,3,16,55,5,3,3,16,75,24,3,3,17,95,14,10,10,12,23,0,29,0,1,1,255,143,254,255,3,254,255,1,254,255,0,238,199,0,102,193,0,102,192,0,102,0,0,70,0,0,2,128,0,0,192,0,0,224,0,0,224,0,0,240,0,0,248,0,0,248,0,0,252,0,2,254,0,2,252,0,6,254,0,14,254,0,30,252,0,30,248,0,62,248,0,30,248,0,14,240,0,6,224,0,6,224,0,14,248,7,254,0,112,0,0,188,0,0,242,0,0,193,16,56,249,152,46,199,152,53,189,152,223,21,168,175,48,236,127,217,102,46,15,102,31,63,230,19,237,230,9,255,250,7,147,146,4,223,210,2,235,252,1,183,180,2,103,104,1,223,208,1,42,224,3,23,224,7,57,192,5,227,32,7,255,144,13,127,248,28,63,248,31,255,240,7,248,0,28,0,31,0,1,1,255,255,63,240,255,255,63,240,255,159,31,240,255,15,31,240,254,3,7,240,239,1,3,240,199,0,17,240,129,0,24,176,128,0,28,0,0,0,0,0,0,0,0,16,128,0,0,48,224,0,8,112,192,0,0,112,192,0,0,112,224,0,28,112,240,0,28,112,248,0,28,240,252,0,24,240,254,0,1,240,252,0,3,240,252,0,7,240,254,0,15,240,254,0,31,240,252,0,31,240,252,0,31,240,252,0,15,240,240,0,7,240,224,0,7,240,240,0,31,240,248,15,255,240,0,0,192,0,0,0,192,0,0,96,160,0,0,176,224,0,1,188,248,0,16,194,236,0,40,225,238,0,78,243,229,64,101,255,163,176,159,147,255,144,223,119,255,224,127,198,100,64,31,222,114,128,61,49,123,128,39,3,253,128,19,255,227,128,9,246,227,128,4,220,227,0,3,249,229,0,1,179,254,0,2,243,252,0,3,222,88,0,1,99,176,0,1,29,32,0,3,17,224,0,2,227,224,0,3,127,208,0,12,191,248,0,30,31,248,0,15,255,224,0,7,240,0,0,27,0,31,0,1,1,255,255,127,224,255,254,63,224,255,191,31,224,255,7,143,224,254,3,135,224,238,1,35,224,135,0,113,224,129,0,249,32,128,1,248,0,0,1,192,0,0,0,0,32,128,0,0,96,192,0,0,224,192,0,12,224,192,0,60,224,224,0,248,224,240,0,248,224,248,0,240,224,252,0,97,224,254,0,3,224,252,0,7,224,252,0,15,224,254,0,31,224,248,0,63,224,240,0,63,224,224,0,31,224,224,0,15,224,192,0,7,224,192,0,15,224,192,0,31,224,224,7,255,224,0,0,128,0,0,1,64,0,0,64,160,0,0,184,80,0,1,100,104,0,17,194,220,0,120,247,142,0,110,227,6,192,105,254,7,160,159,54,63,32,222,255,253,192,127,191,236,128,56,159,141,0,56,157,243,0,40,255,195,0,31,247,5,0,15,43,5,0,5,253,13,0,3,246,158,0,1,123,124,0,2,255,248,0,2,57,240,0,1,198,160,0,7,57,64,0,14,127,64,0,31,131,224,0,25,191,144,0,55,255,248,0,49,255,240,0,49,255,224,0,31,248,0,0,28,0,29,0,1,1,255,143,255,240,255,3,255,240,255,1,254,240,255,0,254,112,197,128,126,112,192,128,124,112,192,0,124,48,128,0,121,48,0,0,57,16,128,0,19,144,192,0,3,144,192,0,3,144,192,0,0,16,224,0,64,0,224,0,96,0,193,128,76,16,195,0,28,48,130,0,56,112,196,0,0,240,228,0,1,240,254,0,15,240,252,0,15,240,248,30,15,240,240,62,15,240,224,112,7,240,224,0,7,240,192,0,15,240,224,0,127,240,240,1,255,240,0,112,0,0,0,188,0,0,0,242,1,0,0,225,1,128,58,120,129,128,53,103,131,128,52,189,131,192,93,155,134,192,239,50,198,224,123,217,44,96,63,7,124,96,63,55,92,96,39,205,207,224,25,255,185,208,19,251,159,144,54,78,179,224,60,233,227,64,77,191,198,128,58,115,191,0,27,220,174,0,1,163,112,0,3,63,112,0,7,97,240,0,11,193,240,0,29,143,72,0,23,255,248,0,56,255,240,0,28,127,128,0,15,254,0,0,31,0,36,0,1,1,255,255,159,254,255,252,15,254,255,240,15,254,255,224,31,254,255,224,31,254,255,224,15,242,255,224,3,226,255,224,7,198,255,192,7,142,235,192,7,30,225,224,2,62,224,96,0,126,192,0,0,254,192,0,1,254,128,0,0,254,0,0,0,14,0,0,0,6,144,0,0,2,248,0,0,2,252,0,0,2,254,0,0,2,254,0,0,48,254,0,0,48,254,0,0,48,254,0,96,16,254,7,240,18,254,15,240,26,255,15,241,26,255,7,241,30,255,15,243,62,255,15,243,62,254,15,243,62,248,7,128,6,240,0,0,2,240,0,0,14,248,0,3,254,0,0,96,0,0,3,208,0,0,12,112,0,0,24,96,0,0,23,224,0,0,27,144,12,0,16,204,20,0,29,248,40,0,39,136,80,20,32,24,160,30,31,229,64,23,154,247,128,35,254,187,0,42,255,234,0,78,127,223,0,247,63,239,240,191,190,14,248,105,175,254,124,5,245,142,116,3,247,222,52,1,231,246,60,1,131,206,74,1,8,206,74,1,134,254,74,1,207,159,46,1,200,15,44,1,80,11,164,0,208,10,164,0,200,14,160,0,208,12,192,0,208,12,192,1,80,12,192,7,120,111,120,15,223,255,252,15,223,255,240,7,255,252,0,31,0,38,0,1,1,255,247,255,254,255,227,255,254,125,227,255,254,187,227,1,254,199,226,1,254,199,227,3,254,199,226,0,254,187,226,0,126,125,224,0,254,255,224,1,254,251,224,0,254,225,240,0,254,224,32,0,254,192,0,1,254,192,0,3,254,192,0,3,254,128,0,3,238,128,0,0,66,128,0,0,0,216,0,0,0,254,0,0,0,255,0,0,0,254,0,0,0,248,0,0,0,248,0,0,0,249,128,0,2,249,195,241,2,249,199,240,150,248,71,248,150,248,71,249,158,254,15,241,30,255,159,243,30,255,159,194,30,255,56,0,30,240,0,0,6,224,0,0,6,224,0,0,30,254,0,255,254,0,8,0,0,0,20,0,0,130,20,0,0,68,20,254,0,56,21,142,0,56,20,220,0,56,21,51,0,68,21,83,128,130,31,159,0,0,23,246,0,4,25,119,0,30,14,27,0,31,223,221,0,49,163,246,0,43,231,204,0,47,127,220,0,87,57,228,16,127,254,123,188,95,253,199,246,38,252,127,122,1,206,126,42,0,143,248,106,1,6,124,106,6,207,62,234,5,200,254,110,6,103,255,60,6,36,14,156,6,40,15,104,7,168,7,104,6,184,6,96,1,208,10,224,0,32,12,224,0,96,53,224,0,199,255,224,15,255,255,120,31,127,255,248,31,255,255,224,1,255,0,0,26,0,32,0,1,1,190,255,255,192,221,255,255,192,227,239,255,192,227,231,255,192,227,231,255,192,221,231,137,192,190,231,0,192,255,230,0,192,255,228,1,192,255,228,3,192,255,228,1,192,255,192,0,192,255,192,0,0,255,224,0,192,255,224,0,192,255,224,0,64,255,192,0,64,255,192,0,192,255,231,128,192,255,252,0,192,255,248,0,192,255,240,0,192,255,240,0,192,255,224,1,192,255,0,3,192,255,0,15,192,255,131,7,192,255,7,7,192,255,0,3,192,255,128,1,192,255,224,0,192,255,252,1,192,65,0,0,0,34,0,0,0,28,16,0,0,28,24,0,0,28,24,0,0,34,24,118,0,65,24,157,0,0,25,5,0,0,27,158,0,0,27,220,0,0,26,238,0,0,46,179,0,0,54,56,192,0,31,61,0,0,18,243,0,0,28,89,128,0,47,12,128,0,47,255,0,0,24,121,0,0,3,251,0,0,7,111,0,0,14,159,0,0,12,79,0,0,28,118,0,0,246,124,0,0,151,240,0,0,92,232,0,0,248,152,0,0,255,228,0,0,127,46,0,0,31,63,0,0,3,254,0,29,0,28,0,1,1,255,254,127,248,255,192,63,248,255,128,63,248,255,0,63,248,255,0,127,248,255,0,127,248,255,0,127,224,255,0,31,192,254,0,63,136,252,0,63,24,252,0,30,56,252,0,28,120,192,0,16,248,128,0,1,248,128,0,1,248,192,0,3,248,252,0,3,248,248,0,7,248,240,0,31,248,240,0,31,248,248,0,63,248,252,0,63,248,252,0,31,248,248,0,15,248,240,0,15,248,240,0,7,248,240,0,7,248,248,0,7,248,0,1,128,0,0,62,192,0,0,71,64,0,0,227,192,0,0,207,128,0,0,243,128,0,0,252,128,24,0,166,96,40,1,135,192,80,2,77,192,160,2,122,97,64,3,60,226,128,63,211,173,0,73,191,214,0,95,255,186,0,63,253,164,0,3,127,236,0,6,254,248,0,9,100,32,0,9,185,224,0,5,131,64,0,3,254,64,0,3,196,96,0,7,119,240,0,9,254,240,0,15,255,248,0,15,254,56,0,7,255,248,0,33,0,29,0,1,1,190,255,255,255,128,221,255,255,255,128,227,255,255,127,128,227,255,252,63,128,227,255,240,31,128,221,255,224,31,128,190,255,192,63,128,255,255,192,41,128,255,243,192,0,128,255,225,128,0,128,255,0,0,0,128,252,0,0,0,0,248,48,0,0,0,240,240,0,0,128,225,230,0,3,128,195,207,0,3,128,199,158,0,7,128,135,60,0,15,128,142,8,0,31,128,140,128,0,127,128,137,128,0,127,128,131,192,0,255,128,135,224,0,255,128,143,248,1,255,128,31,224,63,255,128,31,128,7,255,128,191,0,1,255,128,255,0,1,255,128,255,192,3,255,128,65,0,0,0,0,34,0,0,0,0,28,0,0,128,0,28,0,3,64,0,28,0,15,160,0,34,0,17,224,0,65,0,49,192,0,0,0,47,214,0,0,12,61,255,0,0,26,111,107,0,0,245,170,127,0,3,252,227,189,128,5,206,119,157,128,11,15,222,127,0,22,25,131,124,0,44,48,254,188,0,40,97,144,248,0,88,195,177,240,0,81,247,255,224,0,115,78,254,128,0,118,91,63,128,0,124,63,25,0,0,120,27,55,0,0,112,5,254,0,0,160,30,192,0,0,160,119,248,0,0,64,251,254,0,0,0,255,254,0,0,0,63,252,0,0,23,0,29,0,1,1,255,227,254,255,129,254,255,1,254,238,1,254,204,1,198,204,1,6,204,0,6,196,0,0,128,0,0,0,0,2,0,0,6,0,0,14,0,0,14,0,0,30,0,0,62,0,0,62,128,0,126,128,0,254,192,0,126,224,0,254,240,0,254,240,0,126,248,192,62,240,112,62,224,0,62,192,0,30,192,0,14,224,0,14,255,192,62,0,28,0,0,122,0,0,158,0,17,6,0,51,62,56,51,198,232,51,123,88,43,81,246,110,25,234,205,55,252,205,224,232,207,249,240,207,111,144,191,255,32,147,147,192,151,246,64,127,174,128,91,219,0,45,204,128,23,247,0,14,169,0,15,209,128,7,57,192,9,143,64,19,255,192,63,253,96,63,248,112,31,255,240,0,63,192,36,0,40,0,1,1,255,255,248,255,240,31,255,0,127,240,143,254,0,63,240,135,254,2,31,240,195,254,3,255,240,241,254,1,255,240,248,62,1,255,240,252,31,0,255,240,248,15,129,255,240,240,7,128,255,240,240,3,0,127,240,224,0,0,127,240,224,0,0,127,240,192,0,0,63,240,128,0,0,31,240,0,0,0,31,240,0,0,0,15,240,144,0,0,0,240,248,0,0,0,112,252,0,0,0,48,255,0,0,0,16,255,0,0,1,16,255,0,0,1,16,248,0,0,1,0,240,0,0,1,0,241,0,0,1,128,243,128,3,1,128,251,192,63,129,128,255,193,255,128,128,255,193,255,129,128,255,193,255,129,192,255,193,255,129,240,255,193,255,129,240,255,193,255,129,240,255,192,255,129,240,255,192,255,1,240,255,192,84,1,112,250,128,0,0,48,240,0,0,0,112,248,0,0,0,240,0,0,7,0,0,224,0,252,128,0,80,1,94,64,0,72,1,61,224,0,52,1,236,0,0,10,1,246,0,0,5,193,82,0,0,3,32,177,0,0,7,112,126,0,0,13,40,123,0,0,15,180,217,128,0,23,235,63,128,0,25,245,251,128,0,47,243,172,64,0,117,61,47,96,0,223,158,255,160,0,187,155,158,208,0,105,75,205,255,0,5,132,71,127,128,3,254,99,191,192,0,231,255,201,160,0,249,158,230,160,0,231,239,122,160,7,159,191,254,144,15,243,223,238,208,10,242,31,230,112,12,102,60,226,80,4,39,192,114,112,0,46,0,115,80,0,46,0,122,112,0,46,0,106,48,0,46,0,106,0,0,62,0,110,0,0,62,0,110,0,0,47,0,106,0,0,41,0,174,0,0,47,171,118,128,5,107,85,197,64,10,158,170,250,128,5,117,85,85,0,38,0,43,0,1,1,251,239,255,255,252,253,223,159,255,252,254,63,143,255,252,254,63,15,20,124,254,63,142,0,28,253,223,142,0,60,251,239,132,0,252,255,252,128,3,252,225,248,0,3,252,225,254,0,7,252,192,255,0,3,252,128,127,128,1,252,128,63,192,1,252,128,15,192,1,252,0,15,192,1,252,32,2,0,3,252,240,0,0,7,252,248,0,0,31,252,252,0,0,63,252,252,0,0,31,252,204,0,0,4,252,128,0,0,0,124,192,0,0,0,60,240,0,0,0,60,240,0,0,0,28,240,0,0,0,28,240,0,0,0,28,240,96,0,0,12,240,255,192,0,4,240,255,254,2,12,240,255,255,3,140,240,127,255,3,196,240,31,255,3,224,241,31,255,3,244,249,159,255,7,252,253,255,254,7,252,255,255,254,15,252,255,255,252,15,252,255,255,248,15,252,255,170,168,10,188,255,213,84,21,124,255,170,170,42,188,255,213,85,85,124,4,16,0,0,0,2,32,96,0,0,1,192,80,0,0,1,192,144,235,128,1,192,81,180,96,2,32,113,210,192,4,16,74,239,0,0,3,126,116,0,30,6,234,84,0,22,1,23,248,0,63,0,143,252,0,100,128,92,114,0,70,192,58,98,0,111,48,57,226,0,189,176,38,166,0,214,205,255,156,0,11,111,251,56,0,7,242,31,224,0,3,191,203,192,0,3,142,120,96,0,51,134,56,251,0,79,252,248,54,128,49,228,127,255,64,15,31,253,195,64,9,247,241,253,160,9,255,63,197,160,12,251,253,253,160,15,159,255,195,240,15,0,63,255,8,15,0,1,237,240,15,0,0,228,80,13,128,0,228,40,13,224,0,236,28,14,160,0,236,8,6,96,0,232,0,2,0,1,168,0,0,0,1,176,0,0,0,3,48,0,0,0,5,80,0,0,85,87,181,64,0,42,170,170,128,0,85,85,213,64,0,42,170,170,128,29,0,35,0,1,1,190,255,255,248,221,255,255,248,227,255,255,248,227,255,255,248,227,255,255,248,221,191,255,248,190,159,248,248,255,143,224,120,129,135,192,120,192,199,128,120,240,99,128,56,192,2,0,56,224,0,0,56,240,0,0,56,254,16,0,24,255,240,0,24,255,248,0,24,255,240,0,24,255,224,0,24,255,192,0,24,255,224,0,24,255,240,0,24,255,252,0,24,255,240,0,24,255,224,0,24,255,224,0,24,255,224,0,56,255,240,0,56,255,224,0,56,255,224,0,56,255,240,0,24,255,224,0,0,255,240,0,0,255,252,0,0,255,255,192,24,65,0,0,0,34,0,0,0,28,0,0,0,28,0,0,0,28,0,0,0,34,64,0,0,65,96,7,0,0,80,25,128,126,72,55,128,49,56,99,128,12,148,79,192,62,125,226,192,17,155,127,192,14,253,207,192,1,238,202,224,0,9,214,96,0,7,110,224,0,14,247,224,0,22,220,224,0,60,140,224,0,17,250,224,0,15,234,96,0,3,122,224,0,12,242,224,0,25,101,224,0,17,95,224,0,17,63,192,0,12,159,192,0,22,97,192,0,31,63,192,0,15,195,224,0,31,255,248,0,15,249,248,0,3,255,248,0,0,63,224,25,0,31,0,1,1,255,255,255,128,255,255,143,128,255,255,7,128,31,252,7,128,135,248,15,128,195,240,7,128,225,248,7,128,241,248,7,128,224,248,7,128,224,112,7,128,192,32,3,128,193,0,1,128,193,128,0,128,193,192,0,128,225,192,1,128,227,192,1,128,231,128,1,128,231,128,1,128,231,128,1,128,247,128,1,128,255,128,1,128,255,192,1,128,255,192,1,128,255,192,0,128,255,192,0,128,255,192,0,0,255,192,0,0,255,128,0,0,255,0,0,0,255,192,0,0,255,252,1,128,0,0,0,0,0,0,112,0,0,0,152,0,224,3,216,0,88,4,48,0,44,12,120,0,26,7,24,0,14,5,248,0,31,5,120,0,22,136,88,0,39,94,76,0,38,191,198,0,38,93,99,0,38,46,241,0,22,63,186,0,28,61,14,0,24,105,206,0,16,127,166,0,16,94,174,0,8,93,174,0,0,93,190,0,0,53,186,0,0,33,190,0,0,40,243,0,0,49,99,0,0,32,251,128,0,56,7,128,0,78,15,128,0,255,247,128,0,63,255,128,0,3,254,0,25,0,29,0,1,1,255,251,255,128,255,128,255,128,255,1,255,128,254,1,255,128,254,1,255,128,254,0,255,128,254,0,255,128,252,0,255,128,248,1,254,0,240,0,252,0,240,0,120,128,240,0,49,128,144,0,35,128,0,0,7,128,0,0,7,128,128,0,7,128,240,0,15,128,224,0,63,128,192,0,127,128,192,0,255,128,192,0,127,128,192,240,63,128,224,240,31,128,225,24,63,128,192,0,63,128,192,0,31,128,224,0,15,128,252,0,31,128,255,192,255,128,0,4,0,0,0,123,0,0,0,198,0,0,1,190,0,0,1,78,0,0,1,255,0,0,1,87,0,0,3,31,0,0,7,190,1,128,13,121,2,128,13,240,133,0,9,160,202,0,106,194,220,0,150,194,104,0,151,39,152,0,127,255,152,0,15,223,240,0,29,253,192,0,38,232,128,0,39,15,0,0,38,250,128,0,47,9,192,0,31,9,96,0,18,228,192,0,63,255,192,0,63,252,224,0,31,255,240,0,3,255,224,0,0,63,0,0,24,0,30,0,1,1,190,255,255,221,255,131,227,238,1,227,196,1,227,196,1,221,196,1,190,196,2,255,196,0,255,132,3,255,198,3,255,192,1,255,192,0,255,192,0,255,128,0,255,128,0,255,204,0,255,248,1,255,240,1,255,224,1,255,224,1,255,224,3,254,64,7,254,0,15,254,8,31,255,28,15,255,191,7,255,192,15,254,0,15,255,0,15,255,128,31,65,0,0,34,0,124,28,17,198,28,43,26,28,43,254,34,42,30,65,43,253,0,59,127,0,74,92,0,57,124,0,47,254,0,39,243,0,62,3,0,91,89,0,95,251,0,51,243,0,7,62,0,15,182,0,23,222,0,28,226,0,28,236,1,174,120,1,223,48,1,246,32,0,227,240,0,64,184,0,63,240,1,255,240,0,255,240,0,127,224,10,0,5,0,1,0,3,128,7,0,121,0,160,0,96,0,9,0,5,0,1,0,96,0,160,0,121,0,7,0,3,128,18,11,0,0,76,0,1,0,0,0,0,0,84,0,64,0,4,0,255,255,255,255,255,255,255,255,255,255,240,128,0,0,0,0,0,0,0,0,0,16,191,255,255,255,255,255,255,255,255,255,208,128,176,0,0,0,0,0,0,0,63,16,128,73,0,0,0,0,0,0,63,192,16,128,102,192,0,0,0,0,0,0,0,16,128,50,96,0,0,0,0,0,0,0,16,128,25,176,0,0,0,0,0,0,0,16,128,12,16,0,0,3,0,0,31,255,208,128,6,8,0,0,63,255,254,0,0,16,128,1,12,0,0,4,128,0,0,0,16,128,0,227,0,0,15,192,0,0,0,16,191,255,56,128,0,16,32,9,0,0,16,128,0,4,192,0,56,112,31,128,0,16,128,0,3,240,0,111,223,164,128,0,16,128,3,128,252,0,207,203,100,128,0,16,128,12,0,126,1,235,89,192,128,0,16,135,240,0,31,1,155,103,128,96,0,16,184,0,0,15,225,196,143,0,56,7,208,128,0,0,3,241,163,27,4,15,248,16,128,3,63,128,255,156,114,6,4,0,16,128,4,128,0,57,143,226,6,6,0,16,128,12,192,0,16,195,130,0,3,0,16,128,8,76,0,16,65,129,0,1,63,208,128,31,242,0,16,227,1,196,1,128,16,128,23,173,0,25,226,0,254,0,128,16,128,28,237,0,7,230,0,101,4,128,16,128,15,192,128,1,132,0,94,181,128,16,128,31,2,64,7,28,0,215,255,0,16,128,50,51,64,4,56,0,185,36,0,16,128,36,49,64,12,40,0,229,128,0,16,128,72,33,64,8,88,0,84,224,0,16,128,120,14,64,8,80,0,146,64,0,16,128,96,60,64,24,208,0,146,160,0,16,128,225,112,80,28,144,0,139,48,0,16,128,183,160,110,16,140,1,9,16,0,16,128,159,32,33,208,142,1,24,136,0,16,191,255,96,56,16,135,17,56,136,0,16,129,27,72,54,16,128,94,76,132,0,16,129,22,72,26,136,128,22,4,195,0,16,131,252,200,11,8,128,16,4,225,192,16,183,232,228,5,140,192,104,9,176,96,16,143,9,36,6,132,192,200,9,24,32,16,190,9,38,2,88,96,136,3,14,32,16,188,26,2,1,112,177,8,246,7,224,16,176,18,0,1,33,249,153,242,0,0,16,160,18,4,1,127,95,247,194,0,0,16,128,19,133,129,254,103,255,1,0,0,16,128,18,147,33,51,96,247,3,0,0,16,128,10,18,33,17,176,67,2,128,228,16,128,27,50,17,9,144,85,134,128,252,16,128,55,35,120,141,216,99,140,128,252,16,128,61,55,248,154,220,33,140,128,252,16,128,57,31,249,145,148,96,140,152,252,16,128,5,143,210,97,38,96,152,196,152,16,128,18,135,151,97,131,1,13,2,128,16,128,32,71,151,144,145,152,159,129,152,16,128,0,103,18,208,8,228,148,193,163,144,128,0,103,54,200,24,115,0,32,7,144,128,2,178,8,0,128,10,160,24,0,16,128,0,82,64,40,2,0,0,0,0,16,191,224,8,2,4,0,17,32,0,0,16,128,0,0,0,0,0,0,0,0,0,16,255,255,255,255,239,255,254,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,128,0,0,0,0,0,0,49,0,0,16,128,0,0,0,0,0,0,95,128,0,16,128,0,0,0,0,0,0,129,0,0,16,128,0,0,0,0,0,3,1,0,0,16,128,0,0,0,0,0,4,1,0,56,16,128,0,0,0,0,0,4,1,0,68,16,128,0,0,0,0,0,8,99,3,242,16,128,0,0,0,0,0,16,67,4,15,16,128,3,128,0,0,0,32,131,135,196,16,128,12,64,0,0,0,32,12,132,68,16,128,195,232,0,0,0,78,188,204,132,16,128,63,4,0,7,192,130,248,68,188,16,128,2,124,0,56,48,203,0,71,118,16,128,6,198,2,15,207,207,224,104,129,144,128,4,134,3,16,0,255,152,59,31,208,143,14,206,6,176,0,31,142,53,242,80,144,247,79,218,112,7,56,129,136,15,80,152,25,176,224,8,255,224,144,119,245,80,167,246,1,160,207,248,1,24,24,4,144,160,113,151,192,199,0,129,8,20,254,144,159,231,124,136,1,1,99,8,29,254,80,136,64,255,136,0,130,51,24,29,136,144,176,103,255,12,6,66,26,144,253,136,144,159,255,25,14,46,36,158,255,30,120,144,143,207,250,1,251,196,197,36,255,255,144,153,115,115,14,159,133,228,255,12,63,144,190,14,232,240,130,9,100,46,30,69,208,132,0,31,129,0,9,36,17,159,164,144,132,121,246,1,0,19,52,32,249,38,144,132,198,240,1,0,19,20,64,8,31,208,134,112,144,1,128,34,10,64,12,31,144,131,28,200,128,128,34,6,134,38,9,16,128,198,109,225,128,54,3,159,99,13,144,128,62,117,114,192,1,2,51,65,230,208,128,51,243,150,192,7,218,226,0,99,80,128,51,137,228,64,15,252,240,0,207,16,128,99,7,31,160,241,237,142,1,158,16,128,222,3,224,102,193,216,131,1,248,16,176,142,0,31,231,199,209,135,0,238,16,184,227,14,5,60,66,121,15,128,24,16,190,57,158,3,12,0,63,30,192,16,16,135,255,160,230,4,0,22,30,224,176,16,142,63,112,254,3,0,0,0,191,192,16,156,7,248,103,241,192,0,1,31,64,80,152,0,12,48,126,64,0,1,14,65,208,160,0,3,55,6,32,0,1,28,1,16,128,0,1,152,204,96,0,2,24,33,144,128,0,1,136,57,192,0,2,32,0,16,128,0,1,136,1,0,0,0,16,16,80,128,0,0,204,0,0,0,0,0,4,16,128,0,0,0,0,0,0,0,128,0,16,128,0,0,4,0,0,0,0,0,0,16,128,0,0,0,0,0,0,0,0,0,16,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,128,0,0,0,0,0,0,0,0,0,16,128,0,0,1,248,0,198,0,208,0,16,128,0,0,2,32,0,56,0,80,0,16,128,0,0,2,96,0,198,0,160,0,16,128,0,0,12,192,1,57,0,160,0,16,128,0,1,211,64,2,237,129,160,0,16,128,0,6,173,32,4,146,129,64,0,16,128,0,8,76,144,5,58,129,64,0,16,128,0,23,60,88,5,117,3,64,0,16,128,0,16,178,8,5,125,2,128,0,16,128,0,30,194,40,5,125,2,128,0,16,128,0,27,226,36,2,186,134,128,0,16,128,0,27,52,20,2,214,133,0,0,16,128,0,62,24,20,1,185,133,0,0,16,128,0,111,248,18,0,199,5,0,0,16,128,0,154,24,10,0,56,5,0,0,16,128,1,162,24,9,0,0,5,0,0,16,128,3,98,28,5,128,0,5,0,0,16,128,4,194,12,4,192,0,5,0,0,16,128,5,1,12,1,32,0,6,0,0,16,128,26,1,12,0,156,0,2,128,0,16,128,54,1,14,0,79,0,2,128,0,16,128,72,1,14,0,12,128,2,128,0,16,128,208,1,6,0,3,112,3,64,0,16,129,176,1,7,0,0,152,1,64,0,16,130,64,0,7,0,0,4,1,64,0,16,134,128,0,134,128,0,10,1,160,0,16,141,0,0,142,128,0,5,192,160,0,16,147,0,0,140,64,0,2,96,160,0,16,180,0,0,140,64,0,0,80,80,0,16,168,0,1,156,96,0,0,46,80,0,16,144,0,1,248,32,0,0,19,80,0,16,160,0,3,250,32,0,0,2,208,0,16,128,0,6,250,60,0,1,225,32,0,16,128,0,5,240,98,0,2,16,160,0,16,128,0,4,100,206,0,28,200,64,0,16,128,0,10,229,154,0,96,56,64,0,16,128,0,13,69,54,0,192,40,0,0,16,128,0,8,79,48,0,62,4,0,0,16,128,0,10,139,91,1,219,196,0,0,16,128,0,13,50,85,1,195,228,0,0,16,128,0,3,226,83,3,231,178,0,0,16,128,0,0,34,79,131,66,50,0,0,16,128,0,0,67,46,130,0,50,0,0,16,128,0,0,99,191,130,8,58,0,0,16,128,0,0,17,173,66,0,123,0,0,16,128,0,0,16,210,166,24,193,0,0,16,128,0,0,28,249,215,1,129,0,0,16,128,0,0,8,111,111,1,2,0,0,16,128,0,0,12,182,215,129,6,0,0,16,128,0,0,4,155,165,195,252,0,0,16,128,0,0,3,25,170,63,64,0,0,16,128,0,0,4,47,165,173,131,0,0,16,128,0,0,4,36,224,30,52,192,0,16,128,0,0,2,44,152,192,73,240,0,16,128,0,0,2,104,143,243,175,252,0,16,128,0,0,1,24,7,233,255,255,0,16,128,0,0,0,176,0,227,249,238,128,16,128], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+296983);
/* memory initializer */ allocate([112,0,95,128,254,192,16,128,0,0,0,48,0,137,192,127,32,16,128,0,0,0,16,0,136,192,63,224,16,128,0,0,0,0,0,0,0,0,0,16,255,255,255,255,255,255,251,255,249,47,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,224,186,255,151,255,255,255,255,255,255,240,224,186,255,151,255,255,255,255,255,255,240,213,130,185,182,115,252,255,255,251,255,240,213,130,185,182,115,252,255,255,251,255,240,229,207,23,255,207,255,253,255,255,255,240,229,207,23,255,207,255,253,255,255,255,240,245,255,15,252,63,255,255,255,255,255,240,245,255,15,252,63,255,255,255,255,255,240,255,255,15,227,255,255,255,255,255,255,240,255,255,15,227,255,255,255,255,255,255,240,255,255,131,31,255,255,255,255,255,255,240,255,255,131,31,255,255,255,255,255,255,240,255,255,192,31,255,255,255,255,255,255,240,255,255,192,31,255,255,255,255,255,255,240,255,255,128,7,255,255,255,255,255,127,240,255,255,128,7,255,255,255,255,255,127,240,255,252,0,1,255,255,255,255,255,255,240,255,252,0,1,255,255,255,255,255,255,240,255,195,128,33,255,255,255,255,255,255,240,255,195,128,33,255,255,255,255,255,255,240,254,1,0,24,127,255,255,255,255,255,240,254,1,0,24,127,255,255,255,255,255,240,241,248,0,31,191,255,255,255,255,255,240,241,248,0,31,191,255,255,255,255,255,240,193,252,48,31,199,255,255,255,255,255,240,193,252,48,31,199,255,255,255,255,255,240,255,254,112,15,240,255,255,255,255,255,240,255,254,112,15,240,255,255,255,255,255,240,255,255,240,15,254,31,255,255,255,255,240,255,255,240,15,254,31,255,255,255,255,240,255,255,240,7,255,192,1,255,255,255,240,255,255,240,7,255,192,1,255,255,255,240,255,255,224,1,255,240,0,31,255,255,240,255,255,224,1,255,240,0,31,255,255,240,255,255,224,129,255,252,0,3,255,255,240,255,255,224,129,255,252,0,3,255,255,240,255,255,225,193,255,255,0,0,7,255,240,255,255,225,193,255,255,0,0,7,255,240,251,255,195,224,127,255,192,0,1,255,240,251,255,195,224,127,255,192,0,1,255,240,251,255,199,240,63,255,240,0,0,7,240,251,255,199,240,63,255,240,0,0,7,240,255,255,199,252,15,255,255,0,0,1,240,255,255,199,252,15,255,255,0,0,1,240,255,255,135,254,15,255,255,195,193,231,240,255,255,135,254,15,255,255,195,193,231,240,255,255,143,255,207,255,255,248,255,255,240,255,255,143,255,207,255,255,248,255,255,240,255,255,31,255,223,255,255,255,255,255,240,255,255,31,255,223,255,255,255,255,255,240,255,255,31,255,255,255,255,255,255,255,240,255,255,31,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,255,255,255,255,255,255,255,255,255,255,240,138,9,0,0,13,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,2,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,2,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,2,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,2,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,2,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,232,232,0,100,100,100,100,100,100,100,0,0,0,100,100,100,100,100,0,0,0,0,0,100,100,100,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,120,9,0,0,6,0,1,0,0,0,0,0,0,0,96,1,0,95,0,95,10,10,0,0,94,10,10,0,0,93,10,10,0,0,92,10,10,0,0,91,10,10,0,0,90,10,10,0,0,89,10,10,0,0,88,10,10,0,0,87,10,10,0,0,86,10,10,0,0,85,10,10,0,0,84,10,10,0,0,83,10,10,0,0,82,10,10,0,0,81,10,10,0,0,80,10,10,0,0,79,10,10,0,0,78,10,10,0,0,77,10,10,0,0,76,10,10,0,0,75,10,10,0,0,74,10,10,0,0,73,10,10,0,0,72,10,10,0,0,71,10,10,0,0,70,10,10,0,0,69,10,10,0,0,68,10,10,0,0,67,10,10,0,0,66,10,10,0,0,65,10,10,0,0,64,10,10,0,0,63,10,10,0,0,62,10,10,0,0,61,10,10,0,0,60,10,10,0,0,59,10,10,0,0,58,10,10,0,0,57,10,10,0,0,56,10,10,0,0,55,10,10,0,0,54,10,10,0,0,53,10,10,0,0,52,10,10,0,0,51,10,10,0,0,50,10,10,0,0,49,10,10,0,0,48,10,10,0,0,47,10,10,0,0,46,10,10,0,0,45,10,10,0,0,44,10,10,0,0,43,10,10,0,0,42,10,10,0,0,41,10,10,0,0,40,10,10,0,0,39,10,10,0,0,38,10,10,0,0,37,10,10,0,0,36,10,10,0,0,35,10,10,0,0,34,10,10,0,0,33,10,10,0,0,32,10,10,0,0,31,10,10,0,0,30,10,10,0,0,29,10,10,0,0,28,10,10,0,0,27,10,10,0,0,26,10,10,0,0,25,10,10,0,0,24,10,10,0,0,23,10,10,0,0,22,10,10,0,0,21,10,10,0,0,20,10,10,0,0,19,10,10,0,0,18,10,10,0,0,17,10,10,0,0,16,10,10,0,0,15,10,10,0,0,14,10,10,0,0,13,10,10,0,0,12,10,10,0,0,11,10,10,0,0,10,10,10,0,0,9,10,10,0,0,8,10,10,0,0,7,10,10,0,0,6,10,10,0,0,5,10,10,0,0,4,10,10,0,0,3,10,10,0,0,2,10,10,0,0,1,10,10,0,0,0,10,10,0,159,0,96,0,1,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,1,56,0,8,0,0,0,0,0,0,3,0,0,0,1,128,0,0,166,166,3,216,4,204,0,3,253,254,56,0,31,0,0,0,15,128,0,0,202,202,3,176,6,216,0,7,135,195,248,128,122,0,0,0,61,0,0,0,166,166,2,240,7,88,0,14,71,35,147,0,228,0,0,0,114,0,0,0,202,202,1,224,7,40,0,0,152,78,28,1,198,0,0,0,227,0,0,48,166,166,0,248,15,40,0,7,227,240,32,1,140,48,0,192,198,1,2,32,202,202,7,216,31,168,12,7,195,224,192,3,20,118,211,65,138,247,182,88,166,166,7,176,29,168,8,6,51,24,96,2,40,213,178,129,20,173,44,232,202,202,3,192,3,8,0,4,18,8,176,2,89,43,103,1,45,73,85,80,166,166,2,112,7,136,16,14,103,49,28,3,149,109,190,65,202,121,250,232,202,202,4,94,8,168,16,7,195,226,6,0,57,185,99,128,28,102,45,240,166,166,0,135,0,88,0,0,0,0,2,0,96,0,0,0,48,0,1,0,202,202,0,128,0,8,0,0,0,0,0,0,192,0,0,0,96,0,2,0,166,166,0,128,0,0,0,0,0,0,0,1,128,0,0,0,192,0,2,0,202,202,0,0,0,0,0,0,0,0,0,1,0,0,0,0,128,0,0,0,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,202,202,0,0,0,96,0,0,0,0,24,0,0,0,0,0,1,152,0,0,166,166,0,0,1,224,0,0,6,0,31,192,24,0,0,0,2,100,0,0,202,202,1,60,6,96,0,0,26,1,253,192,8,0,0,0,4,2,0,0,166,166,7,204,7,192,0,0,28,1,26,0,8,0,0,0,4,146,0,0,202,202,3,56,3,224,0,1,132,1,123,0,15,0,0,0,4,2,0,0,166,166,3,176,1,224,0,0,223,3,124,0,25,128,0,0,4,226,0,0,202,202,15,56,2,224,0,1,45,0,18,0,255,0,0,0,4,226,0,0,166,166,62,248,2,248,12,1,157,0,26,0,106,0,0,0,2,4,0,0,202,202,27,56,4,204,8,0,157,0,58,0,126,0,0,0,1,248,96,0,166,166,6,120,7,56,0,0,151,0,46,0,104,0,0,0,0,135,144,0,202,202,14,16,8,32,16,0,93,0,62,0,11,0,0,0,0,132,144,0,166,166,10,126,24,32,16,0,215,0,42,0,61,0,0,0,0,72,224,0,202,202,2,64,16,32,0,0,173,0,38,0,96,0,0,0,0,48,128,0,166,166,2,0,0,224,0,0,3,192,6,0,0,0,0,0,0,15,0,0,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,166,166,0,0,0,0,0,0,16,0,0,0,0,0,64,0,0,230,0,0,202,202,0,0,0,0,0,0,24,0,16,0,0,0,48,0,1,131,192,0,166,166,0,0,0,0,0,0,24,0,28,0,16,0,126,0,1,16,96,0,202,202,0,0,0,0,0,0,30,0,12,0,24,0,231,0,1,64,16,0,166,166,0,0,0,0,0,0,240,0,63,192,8,1,182,0,1,0,16,0,202,202,0,0,0,0,0,0,124,7,250,0,8,0,230,0,1,0,16,0,166,166,0,0,0,0,0,0,31,131,28,0,8,0,188,0,3,0,0,0,202,202,0,0,0,0,0,0,56,64,23,1,56,192,162,0,6,0,0,0,166,166,0,0,0,0,0,1,236,64,35,1,201,192,250,0,4,32,48,0,202,202,0,0,0,0,0,0,152,64,102,3,200,193,235,0,4,16,16,0,166,166,0,0,0,0,0,0,140,64,166,3,56,0,85,0,6,1,0,0,202,202,0,0,0,0,0,0,152,129,28,3,24,0,144,32,3,16,192,0,166,166,0,0,0,0,0,0,11,128,24,0,0,1,144,96,0,200,96,0,202,202,0,0,0,0,0,0,9,128,0,0,0,1,15,224,0,51,0,0,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,3,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,1,224,0,48,0,0,252,0,0,128,0,0,0,0,0,0,0,0,202,202,7,192,3,240,0,1,252,0,1,128,0,0,0,0,0,0,0,0,166,166,1,224,1,224,0,3,16,0,1,0,0,0,0,0,0,0,0,0,202,202,3,192,0,192,0,2,0,16,7,6,64,0,0,0,0,0,0,0,166,166,3,240,0,192,12,1,193,182,222,14,200,0,0,0,0,0,0,0,202,202,7,160,0,192,8,0,49,101,178,26,144,0,0,0,0,0,0,0,166,166,6,144,1,254,0,0,26,171,36,37,48,0,0,0,0,0,0,0,202,202,63,160,31,6,16,4,51,221,237,45,232,0,0,0,0,0,0,0,166,166,33,224,8,0,16,15,241,105,54,54,176,0,0,0,0,0,0,0,202,202,30,28,0,0,0,15,192,0,0,0,96,0,0,0,0,0,0,0,166,166,0,6,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,202,202,0,2,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,32,0,0,8,0,0,0,0,0,202,202,0,0,0,0,0,0,0,0,0,100,0,0,62,0,0,0,0,0,166,166,0,0,0,0,0,15,12,24,0,124,0,248,68,1,224,192,32,0,202,202,0,0,0,0,0,61,62,125,240,56,1,16,68,6,19,224,120,0,166,166,0,0,0,0,0,33,98,199,0,92,2,32,116,6,54,32,248,0,202,202,0,0,0,0,0,51,195,134,0,120,1,64,84,0,236,33,24,0,166,166,0,0,0,0,0,12,135,15,224,104,1,128,100,7,136,97,24,0,202,202,0,0,0,0,0,57,135,10,32,120,1,128,124,7,152,65,248,0,166,166,0,0,0,0,0,97,14,24,32,127,130,128,92,0,80,193,216,0,202,202,0,0,0,0,0,197,26,48,227,200,4,128,148,0,81,129,24,0,166,166,0,0,0,0,0,253,114,239,195,8,4,128,164,17,151,1,248,0,202,202,0,0,0,0,0,248,225,207,0,8,7,0,148,31,14,0,152,0,166,166,0,0,0,0,0,0,0,0,0,8,0,0,140,0,0,0,16,0,202,202,0,0,0,0,0,0,0,0,0,8,0,1,4,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,202,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,166,166,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,202,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,108,9,0,0,63,0,4,0,88,2,0,0,139,0,16,155,0,13,154,0,7,155,0,22,155,0,34,156,0,9,132,0,14,153,0,8,147,0,17,151,0,5,142,0,12,150,0,10,155,0,38,161,0,6,142,0,27,132,0,25,153,0,2,155,0,3,163,0,15,150,0,16,156,0,16,155,0,16,169,0,16,148,0,11,146,0,11,156,0,11,158,0,11,155,0,21,180,0,21,159,0,21,137,0,16,157,0,16,157,0,13,163,0,13,174,0,13,159,0,13,169,0,13,168,0,13,160,0,7,161,0,7,146,0,7,153,0,7,156,0,7,162,0,7,164,0,7,155,0,7,155,0,22,157,0,22,176,0,22,158,0,22,151,0,34,156,0,34,154,0,34,155,0,34,175,0,34,182,0,34,163,0,1,166,0,1,167,0,9,176,0,4,167,0,9,168,0,9,168,0,9,165,0,9,165,0,4,165,0,9,165,0,9,132,0,14,169,0,14,197,0,14,165,0,14,169,0,18,155,0,19,166,0,8,155,0,8,160,0,17,160,0,17,150,0,17,156,0,5,154,0,5,156,0,5,164,0,12,165,0,12,168,0,12,168,0,12,160,0,10,154,0,0,160,0,38,160,0,38,162,0,6,167,0,6,155,0,27,157,0,27,155,0,27,154,0,27,148,0,28,163,0,28,169,0,25,153,0,25,160,0,2,164,0,2,166,0,2,163,0,2,172,0,3,174,0,3,172,0,15,167,0,15,170,0,15,163,0,15,189,0,29,174,0,13,175,0,13,167,0,12,162,0,25,176,0,24,183,0,23,141,0,16,169,0,22,178,0,29,193,0,26,192,0,32,187,147,27,190,0,27,156,0,10,179,158,27,187,90,6,170,117,13,162,0,35,168,0,24,157,0,23,141,0,28,178,0,27,147,0,10,168,0,34,171,0,12,180,14,27,172,0,32,170,0,13,163,2,12,176,0,38,170,0,32,172,0,31,169,0,0,166,0,0,167,0,0,175,0,0,162,0,0,159,0,0,179,0,7,173,0,7,176,0,7,153,0,0,156,0,0,164,0,0,164,0,0,170,0,0,174,0,0,181,14,27,155,0,0,190,0,0,177,0,0,154,0,0,151,0,0,169,0,0,165,0,0,167,0,0,168,0,2,170,0,0,192,0,0,175,0,0,177,0,0,172,0,0,172,0,0,152,0,0,168,0,0,168,0,0,167,0,0,167,0,0,178,0,0,148,0,0,159,0,0,168,0,0,152,0,0,160,0,0,145,0,0,170,72,31,170,72,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,0,11,155,0,17,161,0,14,154,0,7,155,0,22,175,0,23,155,0,38,154,0,21,156,0,13,163,0,34,155,0,3,156,0,9,142,0,27,162,0,25,163,0,15,153,0,8,156,0,11,146,0,10,159,0,10,157,0,17,163,0,17,174,0,17,159,0,17,169,0,17,168,0,17,180,0,17,147,0,17,152,0,17,159,0,17,163,0,17,157,0,17,162,0,14,167,0,14,167,0,18,132,0,14,169,0,19,197,0,19,165,0,18,169,0,18,155,0,19,160,0,7,161,0,7,167,0,6,146,0,5,159,0,12,168,0,12,190,0,5,180,0,2,173,0,2,176,0,6,187,0,7,179,0,5,153,0,6,156,0,5,162,0,7,164,0,7,155,0,2,155,0,12,168,0,12,165,0,12,171,0,7,160,0,6,170,0,5,164,0,22,155,0,22,157,0,22,176,0,22,158,0,22,160,0,22,150,0,22,166,0,23,151,0,23,154,0,23,156,0,23,168,0,24,170,0,23,194,0,24,176,0,24,175,0,23,156,0,24,153,0,24,169,0,24,148,0,38,160,0,38,170,0,21,147,0,21,169,0,13,170,0,13,163,0,13,156,0,13,158,0,13,155,0,13,154,0,13,148,0,34,175,0,34,162,0,34,172,0,3,174,0,3,163,0,1,166,0,9,183,0,9,167,0,9,176,0,4,167,0,4,168,0,1,168,0,1,165,0,9,165,0,9,165,0,9,165,0,9,155,0,27,157,0,27,195,0,27,162,0,27,155,0,27,174,0,27,177,0,27,166,0,28,168,0,28,154,0,27,148,0,28,163,0,28,178,0,27,152,0,27,169,0,32,153,0,20,166,0,26,190,0,26,172,0,32,170,0,32,167,0,25,169,0,20,172,0,20,170,0,25,176,0,0,172,0,15,167,0,15,170,0,15,163,0,15,155,0,8,141,30,0,170,141,0,175,142,0,156,142,0,161,143,0,0,0,17,160,20,17,170,147,17,163,0,0,164,0,0,169,0,0,174,0,0,141,0,0,192,0,0,193,0,0,168,0,0,190,0,0,167,0,0,191,0,0,141,3,0,187,3,0,190,0,0,171,0,0,168,3,18,187,32,0,164,32,0,164,32,0,179,0,0,160,0,0,145,0,0,179,0,27,180,0,27,195,0,0,172,0,0,168,0,0,178,0,0,157,0,0,174,0,0,172,0,0,160,0,0,162,0,0,164,0,0,181,3,27,170,118,19,170,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,163,0,0,160,0,0,174,0,0,166,0,0,155,0,27,161,0,0,182,0,24,156,0,9,163,0,0,162,0,25,172,0,0,148,0,0,175,0,0,190,0,0,162,0,0,187,0,0,170,0,0,167,0,0,187,0,0,178,0,0,180,0,11,157,0,10,163,0,11,185,0,2,183,0,5,202,0,6,153,0,7,174,0,27,175,0,8,159,0,27,169,0,10,168,0,27,159,0,27,174,0,10,187,0,17,185,0,8,192,0,17,159,0,2,163,0,17,157,0,13,141,0,27,175,0,11,167,0,12,156,0,13,161,0,27,170,0,27,163,0,14,169,0,8,190,0,16,175,0,27,167,0,12,159,0,13,168,0,16,190,0,21,187,0,22,168,0,22,171,0,22,160,0,21,169,0,14,155,0,21,169,0,27,170,0,27,156,0,27,158,0,5,155,0,5,151,0,22,159,0,0,154,0,21,147,0,17,155,0,27,157,0,0,195,0,0,156,0,0,177,0,0,166,0,27,168,0,27,154,0,27,178,0,27,152,0,27,162,0,0,167,0,0,168,0,0,187,0,0,200,0,0,164,0,0,164,0,0,167,0,0,197,0,0,165,0,0,169,0,0,181,0,0,174,0,0,166,0,29,163,0,29,154,0,29,151,0,23,156,0,24,168,0,30,170,0,35,172,0,35,190,0,0,176,0,0,177,0,0,189,0,0,175,0,29,156,0,0,153,0,0,194,0,0,169,0,0,169,0,0,172,0,0,168,0,0,178,0,0,157,0,0,174,0,0,193,0,0,182,0,0,168,0,0,184,0,0,177,0,0,189,0,0,178,0,0,183,0,0,163,0,1,166,0,9,183,0,9,167,0,9,176,0,4,167,0,4,168,0,9,168,0,9,165,0,9,165,0,0,165,0,0,165,0,0,172,0,0,167,0,0,170,0,0,163,0,0,169,0,32,153,0,20,166,0,26,190,0,25,172,0,32,170,0,32,168,0,26,167,0,20,175,0,20,169,0,32,172,0,32,170,0,25,176,0,25,141,0,26,192,0,0,193,0,0,190,0,0,167,0,0,191,0,0,174,0,0,205,0,0,141,0,0,187,0,0,190,0,0,171,0,0,174,0,0,179,91,27,183,0,0,197,0,0,225,0,0,179,0,0,206,0,0,190,0,0,176,0,0,170,0,0,226,0,0,212,0,0,205,0,0,194,0,0,185,0,0,194,0,0,178,0,0,192,0,0,181,0,0,180,0,0,189,0,0,145,0,0,160,0,0,170,176,11,170,135,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,187,0,17,207,0,25,182,0,24,183,0,0,172,0,0,180,0,0,190,0,0,185,0,0,183,0,0,202,0,11,190,0,11,185,0,11,192,0,0,0,0,0,174,0,0,0,0,0,159,0,0,169,0,0,168,0,0,159,0,0,174,0,0,159,0,0,157,0,0,141,0,0,175,0,0,167,0,0,156,0,0,161,0,0,170,0,0,163,0,0,169,0,0,190,0,0,175,0,0,167,0,0,159,0,0,168,0,0,205,0,0,190,0,0,187,0,0,168,0,0,171,0,0,160,0,0,169,0,0,155,0,0,170,0,0,156,0,0,180,0,0,158,0,0,155,0,0,151,0,0,177,0,0,159,0,0,154,0,0,147,0,0,157,0,0,195,0,0,156,0,0,178,0,0,172,0,0,167,0,0,170,0,0,163,0,0,172,0,0,179,0,0,208,0,0,211,0,0,152,0,0,200,0,0,202,0,0,181,0,0,176,0,0,192,0,0,181,0,0,168,0,0,175,0,0,166,0,0,183,0,0,164,0,0,167,0,0,197,0,0,165,0,0,199,0,0,198,0,0,166,0,0,190,0,0,169,0,0,141,0,0,192,0,0,193,0,0,190,0,0,167,0,0,141,0,0,190,0,0,208,0,0,190,0,0,176,0,0,170,0,0,194,0,0,185,0,0,194,0,0,200,0,0,175,0,0,0,0,0,0,0,0,154,0,0,151,0,0,156,0,0,168,0,0,170,0,0,172,0,0,190,0,0,182,0,0,176,0,0,189,0,0,177,0,0,156,0,0,153,0,0,194,0,0,169,0,0,169,0,0,172,0,0,168,0,0,178,0,0,157,0,0,174,0,0,149,0,0,168,0,0,184,0,0,177,0,0,174,0,0,189,0,0,204,0,0,178,0,0,183,0,0,242,0,0,226,0,0,212,0,0,161,0,0,212,0,0,180,0,0,192,0,0,182,0,0,186,0,0,185,0,0,189,0,0,189,0,0,186,0,0,190,0,0,174,0,0,205,0,0,197,0,0,225,0,0,0,0,0,0,0,0,221,0,0,190,0,0,205,0,0,206,0,0,189,0,0,171,0,0,172,0,0,170,0,0,167,0,0,178,0,0,192,0,0,212,0,0,191,0,0,160,0,0,187,0,0,170,0,0,174,0,0,167,0,0,187,0,0,178,0,0,170,2,3,170,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,6,0,0,71,0,207,0,8,0,195,0,125,110,147,193,195,100,124,176,132,184,121,139,195,100,124,176,152,151,122,121,195,100,124,176,128,179,147,192,195,100,124,176,117,159,117,156,195,100,124,176,132,184,116,123,195,100,124,176,142,178,139,107,195,100,124,176,133,176,143,157,195,100,124,176,152,136,133,118,195,100,124,176,132,184,171,115,195,100,124,176,124,110,142,178,130,120,195,176,126,137,153,149,195,120,195,176,145,125,148,150,195,120,195,176,148,177,132,167,195,120,195,176,144,184,131,141,195,120,195,176,132,184,146,144,195,120,195,176,147,143,120,131,139,156,195,176,118,133,150,105,195,156,195,176,116,110,133,100,195,156,195,176,124,113,153,129,195,156,195,176,147,175,141,191,195,156,195,176,146,135,125,177,101,178,195,176,146,135,125,177,151,107,195,176,146,135,125,177,140,147,195,176,146,135,125,177,120,133,195,176,146,135,125,177,115,151,195,176,130,154,139,157,195,151,195,176,131,177,120,167,195,151,195,176,148,177,147,161,195,151,195,176,131,153,128,187,195,151,195,176,117,159,125,172,195,151,195,176,117,159,139,141,195,151,195,176,136,102,128,179,195,151,195,176,117,159,147,160,195,151,195,176,117,159,155,106,195,151,195,176,117,159,152,169,195,151,195,176,117,159,153,117,195,151,195,176,150,157,128,190,195,151,195,176,159,186,101,167,195,151,195,176,159,186,155,191,195,151,195,176,118,143,173,136,195,151,195,176,132,184,173,141,195,151,195,176,118,133,139,125,195,151,195,176,133,189,118,171,195,151,195,176,134,110,104,188,195,151,195,176,147,176,180,149,195,151,195,176,119,161,170,191,195,151,195,176,147,175,126,145,195,151,195,176,124,188,126,119,195,151,195,176,128,114,123,140,195,151,195,176,152,136,104,187,195,151,195,176,123,162,131,131,195,151,195,176,123,162,123,140,195,151,195,176,152,136,135,146,195,151,195,176,152,136,148,163,195,151,195,176,144,184,147,161,195,151,195,176,147,132,136,193,195,151,195,176,118,133,132,152,195,151,195,176,118,133,120,138,195,151,195,176,117,159,116,109,195,151,195,176,152,136,132,140,195,151,195,176,173,115,115,151,195,151,195,176,145,125,147,187,195,151,195,176,125,177,118,140,195,151,195,176,123,162,142,118,195,151,195,176,153,150,183,176,195,151,195,176,133,176,148,150,195,151,195,176,152,136,147,168,195,151,195,176,127,153,157,127,195,151,195,176,117,143,171,102,195,151,195,176,155,164,151,128,195,151,195,176,125,110,164,151,195,151,195,176,121,112,152,148,195,151,195,176,144,184,183,150,195,151,195,176,117,143,153,147,195,151,195,176,117,143,125,144,195,151,195,176,152,136,151,141,195,151,195,176,145,135,137,123,195,151,195,176,144,184,144,193,195,151,195,176,124,155,150,179,195,151,195,176,152,136,122,140,195,151,195,176,152,151,151,137,195,151,195,176,124,155,137,128,195,151,195,176,132,184,122,165,195,151,195,176,132,145,126,114,195,151,195,176,153,159,117,153,195,151,195,176,127,181,150,125,195,151,195,176,142,178,138,111,195,151,195,176,134,150,182,134,195,151,195,176,134,150,122,127,195,132,195,176,153,177,123,179,132,132,195,176,132,184,170,188,195,132,195,176,143,110,141,122,119,139,195,176,123,141,135,193,195,139,195,176,126,137,123,138,195,139,195,176,118,143,137,152,195,139,195,176,125,110,120,116,195,139,195,176,128,114,138,152,195,139,195,176,153,159,143,108,195,139,195,176,121,100,122,177,195,139,195,176,147,175,141,101,195,139,195,176,118,133,145,167,195,139,195,176,136,142,171,115,195,139,195,176,132,171,144,118,195,139,195,176,153,159,171,103,195,139,195,176,152,136,152,148,195,139,195,176,152,136,131,67,195,139,195,176,153,175,153,145,195,139,195,176,121,112,146,113,195,139,195,176,133,131,122,121,195,139,195,176,133,118,142,163,195,139,195,176,150,160,122,112,195,139,195,176,166,158,151,182,195,139,195,176,126,109,175,106,195,139,195,176,153,177,123,179,128,186,195,176,142,178,140,147,146,166,195,176,153,175,139,126,195,166,195,176,124,142,150,125,195,166,195,176,148,146,104,189,195,166,195,176,153,175,126,123,195,166,195,176,152,136,145,133,195,166,195,176,133,131,134,140,195,166,195,176,133,128,148,122,195,166,195,176,125,110,142,175,195,166,195,176,133,176,118,111,195,166,195,176,133,176,164,122,195,166,195,176,136,150,120,133,195,166,195,176,125,177,148,100,195,166,195,176,118,143,149,187,195,166,195,176,131,177,130,115,195,166,195,176,152,136,125,164,195,166,195,176,132,125,147,142,195,166,195,176,118,140,149,142,195,166,195,176,133,176,144,169,195,166,195,176,148,177,138,178,195,166,195,176,152,136,145,131,195,166,195,176,148,177,142,140,195,166,195,176,148,177,139,145,195,166,195,176,148,153,137,151,195,166,195,176,152,136,139,145,195,166,195,176,148,146,148,152,195,166,195,176,145,165,159,117,195,166,195,176,145,165,115,163,195,166,195,176,131,154,144,112,195,166,195,176,145,165,131,127,195,166,195,176,144,184,131,158,195,166,195,176,126,137,139,107,195,166,195,176,131,177,126,153,195,166,195,176,131,177,148,146,195,166,195,176,134,146,119,178,195,166,195,176,152,136,142,140,195,166,195,176,122,107,152,192,195,166,195,176,120,142,153,104,195,166,195,176,121,112,151,141,195,166,195,176,122,148,104,186,195,166,195,176,124,188,155,191,153,113,195,176,146,181,131,141,195,113,195,176,166,185,115,189,195,113,195,176,124,110,142,178,124,106,195,176,124,110,142,178,151,107,195,176,128,114,170,193,195,107,195,176,133,176,132,127,195,107,195,176,133,176,157,152,195,107,195,176,144,184,123,105,195,107,195,176,136,142,130,102,195,107,195,176,136,150,144,118,195,117,195,176,152,151,131,158,195,117,195,176,120,142,115,111,195,117,195,176,153,150,126,164,195,117,195,176,142,129,133,176,159,117,195,176,128,109,145,111,195,117,195,176,152,136,164,157,195,117,195,176,118,133,141,128,195,117,195,176,118,133,152,179,195,117,195,176,133,128,130,124,195,117,195,176,127,153,126,109,195,117,195,176,117,108,141,130,139,141,195,176,121,112,125,144,195,141,195,176,120,142,146,144,195,141,195,176,136,150,149,138,195,141,195,176,123,162,136,169,195,141,195,176,148,177,126,118,195,141,195,176,120,167,133,189,195,141,195,176,144,184,142,110,195,141,195,176,153,177,123,179,129,188,195,176,126,109,156,101,195,188,195,176,124,159,172,190,195,169,195,176,144,107,146,191,118,169,195,176,135,146,122,128,147,100,124,176,195,146,122,128,147,100,124,176,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,142,8,0,0,66,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,8], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+307223);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+317506);
/* memory initializer */ allocate([91,3,47,0,138,3,42,0,180,3,12,0,192,3,8,0,200,3,8,0,208,3,8,0,216,3,9,0,225,3,8,0,233,3,4,0,237,3,4,0,241,3,4,0,245,3,4,0,249,3,4,0,253,3,4,0,1,4,4,0,5,4,4,0,9,4,5,0,14,4,21,0,35,4,21,0,56,4,40,0,96,4,38,0,134,4,42,0,176,4,44,0,220,4,42,0,6,5,40,0,46,5,10,0,56,5,32,0,88,5,28,0,116,5,8,0,124,5,10,0,134,5,2,0,136,5,3,0,139,5,5,0,144,5,5,0,149,5,8,0,157,5,38,0,195,5,8,0,203,5,8,0,211,5,8,0,219,5,8,0,227,5,8,0,235,5,8,0,243,5,8,0,251,5,8,0,3,6,10,0,13,6,16,0,29,6,2,0,31,6,9,0,40,6,9,0,49,6,13,0,62,6,13,0,142,158,119,104,117,125,116,175,225,131,123,147,144,132,127,113,170,131,188,129,174,142,158,144,103,140,172,122,178,116,173,142,179,117,152,144,142,116,173,142,179,124,124,132,156,114,123,151,163,114,157,117,152,134,125,148,109,137,125,117,152,137,109,129,150,116,165,151,111,115,135,115,152,147,106,149,111,122,147,129,183,121,101,123,183,124,134,132,113,114,169,127,116,116,189,123,186,123,152,122,143,125,161,138,184,136,107,126,188,115,119,141,139,149,125,118,119,118,111,123,109,146,134,118,111,139,153,118,136,117,144,126,188,146,134,118,111,114,123,127,116,121,155,127,116,127,172,139,153,130,189,139,153,134,175,113,184,114,125,113,184,121,109,113,184,139,110,126,188,124,107,113,184,144,190,113,184,117,136,124,118,250,229,224,60,113,184,150,150,250,224,224,224,224,60,142,164,129,102,250,229,224,224,60,150,135,129,102,250,229,224,224,60,126,109,145,169,250,229,224,224,60,137,186,131,188,250,229,224,224,60,124,124,129,102,250,229,224,224,60,121,101,123,183,250,229,224,224,224,60,119,128,147,185,250,229,224,224,224,60,113,184,129,102,250,229,224,224,224,60,151,116,140,108,250,114,157,117,152,99,122,138,138,122,143,120,183,113,184,150,150,151,183,149,125,150,110,117,152,144,142,97,99,142,158,119,128,147,185,144,103,121,187,97,99,134,125,148,109,99,122,138,138,122,143,120,183,113,184,150,150,151,183,149,125,150,110,117,152,144,142,97,99,142,158,119,128,147,185,144,103,121,187,97,99,137,125,117,152,99,122,138,138,122,143,114,125,113,184,122,141,121,109,124,189,113,184,151,183,149,125,150,110,117,152,144,142,97,99,114,125,113,184,97,98,121,109,124,189,113,184,119,128,147,185,137,143,137,189,243,240,229,97,99,137,109,129,150,99,122,138,138,122,143,114,125,113,184,122,141,121,109,124,189,113,184,151,183,149,125,150,110,117,152,144,142,97,99,114,125,113,184,97,98,121,109,124,189,113,184,119,128,147,185,137,143,137,189,241,245,229,97,99,116,165,151,111,99,122,138,138,122,143,120,183,113,184,150,150,151,183,149,125,150,110,117,152,144,142,97,99,120,183,113,184,150,150,119,128,147,185,137,143,137,189,241,240,229,97,99,115,135,115,152,99,122,138,138,122,143,120,183,113,184,150,150,151,183,149,125,150,110,117,152,144,142,97,99,120,183,113,184,150,150,119,128,147,185,137,143,137,189,245,240,229,97,99,147,106,149,111,99,122,138,138,122,143,120,183,113,184,150,150,151,183,149,125,150,110,117,152,144,142,97,99,120,183,113,184,150,150,119,128,147,185,137,143,137,189,242,240,229,97,99,122,147,129,183,99,122,138,138,122,143,139,110,126,188,151,183,149,125,150,110,117,152,144,142,97,99,139,110,126,188,142,158,119,128,147,185,144,103,121,187,97,99,224,224,123,177,117,131,126,109,145,169,99,122,113,184,129,102,124,181,137,153,113,184,129,102,148,182,124,147,129,120,114,157,124,181,137,153,124,134,132,113,138,103,112,156,225,224,143,157,136,171,129,139,224,149,189,115,99,123,172,130,146,125,187,150,164,118,104,137,173,134,166,131,133,118,157,124,151,138,111,149,179,135,113,151,153,224,151,116,140,108,224,142,146,126,188,117,132,129,120,138,115,143,187,122,132,141,170,129,139,97,99,224,117,144,126,188,117,132,129,120,138,115,143,187,122,132,141,170,129,139,97,99,139,166,151,133,132,156,129,102,117,132,140,161,137,189,99,108,142,146,146,114,147,102,120,131,147,144,120,188,122,131,117,132,113,173,143,150,112,137,99,97,121,190,121,190,97,109,97,109,99,108,150,106,117,128,142,146,117,132,128,183,122,102,129,139,112,137,99,97,147,116,147,116,147,116,97,109,97,109,148,167,126,141,139,117,121,189,99,108,142,146,138,135,142,158,117,144,117,132,130,175,99,97,148,181,131,116,126,141,131,123,136,139,127,143,144,133,132,152,99,127,126,141,149,162,117,163,113,184,129,102,99,108,138,117,148,154,142,158,119,104,148,153,149,125,143,130,136,101,99,108,150,123,122,131,143,136,115,119,141,139,129,139,97,99,132,113,138,130,148,154,136,139,99,108,115,137,138,130,148,154,140,172,97,99,142,146,146,145,126,97,129,102,97,99,138,113,146,114,99,127,131,188,146,114,99,127,142,106,138,114,131,116,138,156,137,139,117,132,151,156,138,135,142,146,99,127,142,146,114,123,120,138,144,132,99,108,142,146,114,123,120,138,144,132,99,97,138,134,129,102,144,142,138,134,141,124,147,142,143,119,123,119,126,115,113,164,129,127,115,181,138,124,123,111,138,103,112,156,97,99,135,171,150,152,138,148,99,97,147,142,143,119,146,189,135,166,115,181,138,124,123,111,138,103,112,156,97,99,135,171,150,152,138,148,99,97,117,154,224,224,224,224,140,172,149,125,115,97,144,142,138,134,141,124,126,188,125,107,250,129,120,114,157,250,255,255,255,255,255,125,107,129,172,119,150,114,124,146,145,123,177,136,97,117,144,136,139,151,174,144,130,135,169,113,104,99,97,127,137,138,121,147,131,114,169,149,146,124,188,121,155,127,116,97,99,113,99,129,180,144,178,122,133,113,99,129,180,144,178,122,133,113,99,129,180,144,178,122,133,113,99,129,180,144,178,122,133,113,99,129,180,144,178,122,133,113,99,129,180,144,178,122,133,113,99,129,180,144,178,122,133,113,99,129,180,144,178,122,133,51,33,46,39,47,224,238,51,33,54,224,224,224,224,224,224,224,224,224,224,224,224,224,224,132,170,127,149,116,166,116,98,150,144,238,238,238,118,129,136,97,150,144,238,238,238,116,116,125,104,142,132,124,190,138,103,112,156,225,116,178,127,106,142,132,124,190,138,103,112,156,225,232,5,0,0,12,0,31,0,50,0,192,0,134,175,113,184,117,132,123,185,113,126,124,124,132,156,99,108,127,137,118,148,114,125,113,184,148,172,115,137,146,123,118,104,137,139,122,102,97,99,192,172,130,146,97,99,192,192,192,192,192,192,134,175,113,184,117,132,150,144,124,118,124,124,132,156,99,108,127,137,118,148,144,173,118,160,113,184,150,150,148,172,115,137,146,123,118,104,137,139,122,102,97,99,192,99,192,192,192,192,192,192,134,175,113,184,117,132,120,159,124,118,124,124,132,156,99,108,127,137,118,148,139,185,147,144,113,184,150,150,148,172,115,137,125,143,116,179,137,139,122,102,97,99,192,99,192,192,192,192,192,192,138,121,132,127,113,170,117,144,136,139,117,132,114,127,118,147,138,156,117,125,122,156,116,179,137,139,122,102,99,108,141,108,138,113,143,157,136,171,123,172,130,146,97,99,192,192,192,192,192,192,115,131,117,144,136,139,114,123,119,128,113,120,99,108,119,133,123,176,137,149,117,144,136,139,123,178,129,120,114,157,97,99,192,113,143,157,136,171,123,172,130,146,97,99,192,192,192,192,192,192,128,187,147,131,120,159,115,182,117,132,117,152,138,134,99,108,138,121,147,131,121,182,132,126,121,101,123,183,117,144,136,139,97,99,192,157,136,171,123,172,130,146,97,99,192,192,192,192,192,192,128,187,147,131,120,159,115,182,117,132,117,152,138,134,99,108,143,178,143,130,118,106,138,111,141,119,97,99,192,144,136,139,97,99,192,157,136,171,123,172,130,146,97,99,192,192,192,192,192,192,136,107,126,188,138,127,134,184,120,159,112,122,99,108,119,156,129,102,146,123,149,125,97,99,192,119,97,99,192,99,192,139,97,99,192,157,136,171,123,172,130,146,97,99,192,192,192,192,192,192,121,109,124,189,113,184,148,118,115,140,119,98,124,189,99,108,124,164,125,147,121,101,123,183,117,144,136,139,97,99,192,139,97,99,192,157,136,171,123,172,130,146,97,99,192,192,192,192,192,192,147,137,147,154,121,109,124,189,117,132,138,189,129,127,140,107,118,160,99,108,119,137,138,120,113,164,115,137,129,139,124,189,147,170,97,99,192,171,123,172,130,146,97,99,192,192,192,192,192,192,124,189,141,119,116,184,123,176,99,108,127,137,146,148,148,172,115,137,150,152,116,179,137,139,122,102,99,108,123,178,146,189,136,124,126,188,129,120,97,99,192,146,97,99,192,192,192,192,192,192,128,187,147,131,117,144,136,139,114,123,150,106,139,110,144,148,117,132,140,152,117,163,99,108,150,152,116,116,117,144,136,139,97,99,192,188,129,120,97,99,192,146,97,99,192,192,192,192,192,192,131,141,129,146,151,114,123,183,117,144,136,139,117,132,116,108,150,123,99,108,118,148,132,127,113,170,148,172,115,137,137,139,122,102,97,99,192,120,97,99,192,146,97,99,192,192,192,192,192,192,138,121,132,127,113,170,114,127,118,147,142,158,119,104,138,105,149,121,124,124,132,156,97,99,192,170,148,172,115,137,137,139,122,102,97,99,192,120,97,99,192,146,97,99,192,192,192,192,192,192,138,121,132,127,113,170,114,127,118,147,142,158,119,104,146,134,118,111,97,99,192,156,97,99,192,170,148,172,115,137,137,139,122,102,97,99,192,120,97,99,192,146,97,99,192,192,192,192,192,192,138,121,132,127,113,170,117,144,136,139,123,172,130,146,97,99,192,111,97,99,192,156,97,99,192,170,148,172,115,137,137,139,122,102,97,99,192,120,97,99,192,146,97,99,192,192,192,192,192,192,123,150,120,116,118,148,147,145,137,153,129,127,113,184,129,102,97,99,192,99,192,156,97,99,192,170,148,172,115,137,137,139,122,102,97,99,192,120,97,99,192,146,97,99,192,192,192,192,192,192,128,187,147,131,117,152,128,187,99,108,146,189,136,123,116,179,123,176,99,108,119,153,137,149,117,144,136,139,97,99,192,139,122,102,97,99,192,120,97,99,192,146,97,99,192,192,192,192,192,192,124,157,147,185,127,177,119,167,99,108,146,189,119,98,122,99,144,101,99,108,121,101,123,183,139,110,131,166,126,188,118,147,97,99,192,99,192,120,97,99,192,146,97,99,192,192,192,192,192,192,138,121,132,127,113,170,114,127,118,147,148,154,149,125,115,97,137,143,142,158,138,147,134,164,139,187,114,127,118,147,117,132,151,168,117,114,99,108,125,184,144,144,146,134,118,111,97,99,192,192,138,121,132,127,113,170,114,127,118,147,142,106,117,144,136,139,114,123,127,137,124,187,97,99,192,187,114,127,118,147,117,132,151,168,117,114,99,108,125,184,144,144,146,134,118,111,97,99,192,192,138,105,149,121,119,104,138,181,99,108,120,132,113,164,117,113,135,112,149,125,115,97,140,172,134,184,97,99,192,123,118,104,137,139,122,102,97,99,192,192,192,192,192,192,192,192,192,192,192,192,128,187,147,131,117,152,128,173,123,119,126,115,99,108,114,124,150,131,135,137,131,174,149,179,119,104,97,99,192,147,117,132,151,168,117,114,99,108,125,184,144,144,146,134,118,111,97,99,192,192,148,154,138,138,117,113,117,132,117,152,119,125,141,154,143,157,154,165,97,99,192,174,149,179,119,104,97,99,192,147,117,132,151,168,117,114,99,108,125,184,144,144,146,134,118,111,97,99,192,192,128,187,147,131,140,172,180,101,150,110,146,180,118,148,117,144,136,139,125,184,144,144,131,148,123,179,97,99,192,147,117,132,151,168,117,114,99,108,125,184,144,144,146,134,118,111,97,99,192,192,143,187,115,189,114,127,118,147,117,132,144,144,118,111,151,153,124,99,97,99,192,127,118,147,141,108,138,113,148,153,121,101,123,183,146,123,116,142,117,144,136,139,97,99,192,111,97,99,192,192,138,121,129,153,125,188,132,127,113,170,117,144,136,139,117,132,114,125,113,184,114,127,118,147,141,108,138,113,148,153,121,101,123,183,146,123,116,142,117,144,136,139,97,99,192,111,97,99,192,192,151,148,124,122,114,127,118,147,127,172,139,153,146,134,118,111,97,99,192,184,114,127,118,147,141,108,138,113,148,153,121,101,123,183,146,123,116,142,117,144,136,139,97,99,192,111,97,99,192,192,123,150,120,116,118,148,147,145,116,179,129,127,113,184,129,102,97,99,192,184,114,127,118,147,141,108,138,113,148,153,121,101,123,183,146,123,116,142,117,144,136,139,97,99,192,111,97,99,192,192,126,189,150,183,140,152,147,144,124,124,132,156,97,99,127,137,146,148,123,177,136,97,117,144,136,139,117,132,151,174,144,130,149,125,115,97,135,169,113,104,97,99,192,192,192,192,192,192,192,192,198,4,0,0,35,0,1,0,0,0,0,0,0,11,8,2,0,7,0,0,20,20,0,0,0,20,20,1,0,0,20,20,0,0,0,20,20,1,0,0,20,20,0,0,0,20,20,1,0,0,20,20,0,0,0,20,20,1,65,0,64,0,1,0,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,247,255,255,255,255,128,255,255,255,241,255,255,255,255,128,255,255,255,160,255,255,255,255,128,255,255,255,160,127,255,255,255,128,255,255,255,128,127,255,255,255,128,255,255,254,128,127,255,255,255,128,255,255,252,0,255,255,255,255,128,255,255,252,0,191,255,255,255,128,255,255,252,0,191,255,255,255,128,255,255,248,0,163,255,255,255,128,255,255,248,0,3,255,255,255,128,255,252,40,0,1,255,255,255,128,255,254,8,0,0,127,255,255,128,255,252,28,0,0,63,255,255,128,255,248,28,0,0,7,255,255,128,255,248,28,0,0,1,255,159,128,255,248,12,4,0,1,254,15,128,127,248,12,15,192,1,120,15,128,127,248,28,15,252,0,0,15,128,127,248,63,62,127,48,0,15,128,127,252,19,255,255,240,0,205,128,115,252,3,241,255,240,3,241,128,35,255,195,224,7,240,3,240,128,35,255,159,225,7,240,3,248,0,3,187,255,224,71,248,7,240,0,1,153,255,224,7,248,7,240,0,129,129,255,240,7,248,3,248,128,3,193,235,236,3,8,3,255,128,1,248,96,110,1,4,3,255,128,1,224,0,6,0,4,121,255,128,3,224,0,48,0,7,252,255,128,3,224,0,30,0,1,254,255,128,159,227,128,14,0,193,254,255,128,255,247,192,14,0,23,255,255,128,255,231,128,14,0,31,255,255,128,255,246,12,0,0,31,255,255,128,255,255,252,1,17,31,255,255,128,255,255,252,15,249,223,255,255,128,255,255,252,63,255,255,254,255,128,255,255,254,127,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,65,0,64,0,1,0,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,127,255,255,128,255,255,255,255,254,63,255,255,128,255,255,255,255,252,127,255,255,128,255,255,255,255,248,127,255,255,128,255,255,255,255,240,127,255,255,128,255,255,255,255,224,255,255,255,128,255,255,255,255,224,255,255,255,128,255,255,255,255,192,255,255,255,128,255,255,255,255,193,255,255,255,128,255,255,255,255,129,255,255,255,128,255,255,255,254,1,255,255,255,128,255,255,255,255,3,255,255,255,128,255,255,255,255,0,191,255,255,128,255,255,255,255,128,31,255,255,128,255,255,255,254,128,31,255,255,128,255,255,255,254,128,31,255,255,128,255,255,255,226,128,15,255,255,128,255,255,255,224,0,15,255,255,128,255,255,255,192,0,10,31,255,128,255,255,255,0,0,8,63,255,128,255,255,254,0,0,28,31,255,128,255,255,240,0,0,28,15,255,128,252,255,192,0,0,28,15,255,128,248,63,192,0,16,24,15,255,128,248,15,64,1,248,24,15,255,128,248,0,0,31,248,28,15,255,128,248,0,6,127,62,126,15,255,128,217,128,7,255,255,228,31,255,128,199,224,7,255,199,224,31,255,128,135,224,7,240,3,225,255,255,128,15,224,7,240,67,252,255,255,128,7,240,15,241,3,255,238,255,128,7,240,15,240,3,255,204,255,128,143,224,15,240,7,255,192,255,128,255,224,8,96,27,235,193,255,128,255,224,16,64,59,3,15,255,128,255,207,16,0,48,0,3,255,128,255,159,240,0,6,0,3,255,128,255,191,192,0,60,0,3,255,128,255,191,193,128,56,0,227,255,128,255,255,244,0,56,1,247,255,128,255,255,252,0,56,0,243,255,128,255,255,252,0,0,24,55,255,128,255,255,252,68,64,31,255,255,128,255,255,253,207,248,31,255,255,128,255,191,255,255,254,31,255,255,128,255,255,255,255,255,63,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,255,255,255,255,255,255,255,255,128,134,4,0,0,37,0,1,0,0,0,0,0,0,10,8,2,0,7,0,0,20,20,0,0,0,20,20,1,0,0,20,20,0,0,0,20,20,1,0,0,20,20,0,0,0,20,20,1,0,0,20,20,0,0,0,20,20,1,64,0,64,0,1,0,255,255,255,255,255,255,255,255,128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1,128,0,0,0,0,0,0,1,128,28,0,0,0,0,0,1,128,118,0,0,0,0,0,1,128,171,0,0,0,0,0,1,129,69,128,0,0,0,0,1,130,14,96,0,0,0,0,1,132,21,80,0,0,0,0,1,136,46,136,0,0,0,0,7,144,87,4,28,0,0,0,9,160,134,170,42,0,0,0,17,192,5,5,69,0,0,0,33,136,15,235,135,128,0,0,65,145,6,255,5,64,0,15,129,160,46,126,10,160,0,245,3,212,72,116,21,80,1,90,17,168,155,24,10,168,2,188,33,208,30,92,21,86,4,88,1,162,50,76,26,171,24,176,129,193,25,248,15,85,177,103,1,162,47,240,2,170,194,219,131,197,23,128,13,87,133,185,213,168,46,0,2,186,195,33,201,148,94,129,5,95,214,108,113,136,253,65,134,142,130,249,115,196,222,129,67,95,20,73,49,161,186,0,173,190,34,231,251,241,117,129,127,92,20,95,223,150,174,1,229,188,58,142,173,203,252,3,207,249,95,13,89,149,232,43,157,242,142,11,163,202,240,7,184,225,20,21,69,129,232,3,149,98,8,43,161,215,128,17,137,208,56,23,17,213,80,45,191,151,0,5,195,174,128,87,221,174,40,34,143,225,4,63,252,87,16,5,21,212,0,95,228,43,160,142,43,200,64,43,112,21,21,213,85,162,178,58,180,39,175,186,171,213,117,117,95,15,119,253,125,170,171,254,170,170,243,255,255,170,170,170,170,170,195,170,171,128,84,0,84,4,216,193,65,138,178,138,160,34,242,234,169,129,252,0,80,0,146,97,5,139,150,8,128,40,79,194,137,195,62,64,0,1,63,145,65,134,119,0,0,0,28,0,1,142,227,0,0,1,0,16,25,142,85,0,14,2,128,40,255,134,39,0,55,1,64,21,203,134,254,0,115,128,0,1,159,131,116,0,67,128,0,3,59,128,240,0,216,192,0,7,113,128,0,0,242,224,0,7,43,128,0,0,146,96,0,3,19,128,0,0,79,192,0,3,127,128,0,0,63,128,0,1,187,255,255,255,255,255,255,255,255,66,0,64,0,1,0,255,255,255,255,255,255,255,255,192,128,0,0,0,0,0,0,0,64,128,0,0,0,0,0,0,0,64,128,0,0,0,0,0,0,0,64,128,0,0,0,0,0,0,0,64,128,0,0,0,0,0,0,0,64,128,14,0,0,0,0,0,0,64,128,59,0,0,0,0,0,0,64,128,85,128,0,0,0,0,0,64,128,162,192,0,0,0,0,0,64,129,7,48,0,0,0,0,0,64,130,10,168,0,0,0,0,0,64,132,23,68,0,0,0,0,3,64,136,43,130,14,0,0,0,4,192,144,67,85,21,0,0,0,8,64,160,2,130,162,128,0,0,16,192,196,7,21,195,192,0,0,32,64,136,130,191,130,160,0,7,192,192,144,23,95,5,80,0,122,129,64,170,39,170,10,168,0,173,8,64,212,77,212,5,84,1,94,16,64,168,14,184,10,171,2,44,0,64,209,29,240,13,85,140,88,64,64,160,138,224,7,170,216,176,0,192,209,23,224,1,85,97,96,1,64,162,139,112,6,171,194,192,138,64,212,23,56,1,93,97,128,4,64,138,44,56,130,175,235,10,8,192,196,125,140,195,71,65,84,81,64,162,111,46,161,175,138,56,40,192,208,217,38,80,223,17,116,29,64,184,188,252,235,46,10,43,175,64,203,87,248,209,222,29,77,214,64,165,255,193,168,252,175,156,236,64,202,244,21,4,121,71,16,241,64,165,120,3,136,176,138,54,50,64,192,244,1,84,81,4,60,184,64,171,192,8,138,168,28,36,152,64,170,168,22,174,139,128,19,241,192,151,64,43,191,215,20,31,231,192,240,130,31,242,235,136,7,138,192,234,0,47,231,213,208,71,21,64,164,32,21,206,234,138,234,170,64,209,89,29,220,115,213,221,85,64,170,186,187,202,167,171,254,190,192,213,85,255,196,245,79,255,255,192,213,85,85,223,213,85,85,85,64,128,42,0,110,130,0,32,160,64,197,81,69,94,17,81,21,84,64,128,40,0,40,0,0,0,130,64,132,64,4,64,20,17,65,68,64,160,0,32,0,0,135,8,160,64,128,0,0,0,0,27,128,0,64,128,0,0,0,0,185,200,0,64,128,0,0,0,1,97,212,0,64,128,0,0,0,0,236,106,0,64,128,24,0,0,0,121,112,0,64,128,254,0,0,0,73,48,0,64,129,203,0,0,0,39,224,0,64,129,159,0,0,0,31,192,0,64,131,59,128,0,0,14,0,0,64,135,113,128,0,0,0,0,12,64,135,42,128,7,0,0,0,127,64,255,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,4,0,0,31,0,1,0,0,0,0,0,130,0,64,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,128,0,159,131,0,3,96,0,39,224,192,0,198,7,240,0,64,128,60,224,100,4,0,128,15,56,25,1,0,56,0,9,248,64,254,126,64,31,255,192,127,159,144,7,255,240,0,3,206,6,64,255,255,128,1,255,197,127,255,224,0,127,241,95,231,228,1,192,255,255,0,0,255,234,255,255,192,0,63,250,191,255,248,0,64,225,252,0,0,63,255,248,127,0,0,15,255,255,255,240,0,64,128,0,0,2,63,255,224,0,0,0,143,255,254,31,192,0,192,128,0,0,31,31,255,192,0,0,7,199,255,248,0,0,11,192,128,0,255,255,143,255,128,0,63,255,227,255,240,0,0,127,192,128,0,255,255,255,255,128,0,63,193,255,255,224,0,15,255,192,128,62,255,231,255,255,255,143,191,128,127,255,224,0,15,240,64,255,255,254,7,255,255,255,255,224,0,127,255,224,3,239,224,64,255,255,224,1,255,129,255,255,192,0,63,224,127,239,248,0,64,255,254,0,0,62,0,255,255,138,170,15,128,63,255,240,0,64,255,224,0,3,62,1,255,248,21,85,207,128,127,255,224,0,192,252,31,255,242,255,209,252,7,255,255,191,243,255,254,0,1,192,191,255,192,255,255,252,1,255,240,63,254,60,0,121,255,255,192,159,240,0,124,3,255,7,252,0,31,0,0,0,15,255,255,192,227,0,32,0,0,7,255,128,0,0,0,0,129,0,0,7,192,156,128,80,0,32,3,254,0,1,0,16,1,66,128,0,0,64,255,72,96,0,80,1,240,0,2,128,40,1,131,0,16,4,64,159,180,0,8,96,0,0,0,67,0,48,0,0,0,40,10,64,131,216,112,20,0,0,8,0,160,0,0,0,0,0,48,12,64,184,209,136,24,0,0,20,0,192,0,0,16,0,0,0,0,64,199,106,244,0,0,2,24,0,0,0,0,40,16,16,0,0,64,128,229,250,0,0,5,0,16,16,1,0,48,40,40,0,0,64,255,37,254,0,128,6,0,40,40,2,128,0,48,48,0,0,64,255,179,225,41,64,0,0,48,48,3,0,0,0,0,0,128,64,255,247,128,85,128,0,0,0,0,0,0,4,0,0,1,64,64,255,252,98,170,0,0,32,0,0,0,0,42,0,0,1,128,64,249,255,149,85,0,64,80,64,0,0,0,85,64,0,0,0,64,167,63,202,170,130,160,96,168,0,64,0,170,168,0,0,2,64,223,63,229,85,85,64,1,85,64,160,5,85,84,4,0,5,64,190,63,246,170,170,160,2,170,160,192,42,170,186,10,2,134,64,254,127,251,85,85,80,5,85,80,0,85,85,127,12,5,64,64,255,255,250,170,170,168,10,170,168,0,170,170,255,128,10,160,64,239,255,187,85,85,84,21,85,85,1,85,85,255,192,21,80,64,255,255,222,170,170,170,170,170,170,130,170,171,255,224,42,168,64,223,127,237,125,85,85,85,85,85,85,85,87,255,253,85,85,64,255,125,234,198,170,170,170,175,234,250,170,175,255,255,170,170,192,255,125,181,123,85,85,85,87,245,85,85,95,255,255,85,85,64,255,221,114,253,170,170,170,175,254,170,170,255,255,255,170,170,192,255,253,146,255,85,85,85,87,255,213,85,255,255,255,215,213,64,255,253,217,254,170,170,170,175,255,234,171,255,255,255,255,170,192,255,255,251,255,245,85,85,127,255,245,127,255,255,255,255,213,64,255,255,254,63,254,170,171,255,255,254,255,255,255,255,255,250,192,239,254,255,207,255,213,127,255,255,255,255,255,255,255,255,255,64,239,255,159,231,255,255,255,255,255,255,255,255,255,255,255,255,192,255,239,159,243,255,255,255,255,255,255,255,255,255,255,255,255,192,254,159,31,250,158,94,191,173,250,171,233,186,170,186,255,171,192,255,127,63,253,107,245,23,94,87,117,117,109,69,85,85,117,64,239,127,255,253,75,235,170,235,239,170,171,78,234,186,171,255,192,254,247,255,189,244,219,123,180,219,127,180,245,222,246,254,219,64,254,239,255,223,187,190,191,219,190,191,221,187,175,239,255,126,192,255,255,191,255,255,221,223,127,221,223,127,253,119,247,125,253,192,239,255,190,247,223,255,255,247,255,255,247,223,255,255,255,255,192,255,255,190,255,251,119,119,251,119,119,255,255,221,221,223,247,64,191,255,254,255,127,255,255,255,255,255,255,127,255,255,255,255,192,191,255,254,255,255,221,253,255,221,253,255,253,127,119,247,253,192,223,255,254,239,251,255,255,235,255,255,239,255,255,255,255,255,192,239,255,223,255,239,251,223,127,251,223,127,239,247,254,125,187,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,82,4,0,0,30,0,1,0,0,0,0,0,130,0,64,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,170,170,160,10,170,170,170,170,170,170,170,170,170,0,32,170,192,213,85,0,5,85,85,85,85,85,85,85,85,84,0,0,85,64,170,170,128,10,170,170,42,160,170,170,170,170,170,0,0,10,192,213,85,64,1,85,84,69,0,21,85,85,85,85,84,0,1,64,170,170,170,0,42,160,0,0,0,170,170,170,170,170,40,32,192,213,85,85,85,85,85,0,0,0,21,85,85,85,85,85,85,64,170,170,170,170,170,170,128,0,0,42,170,170,170,170,170,170,192,212,68,81,17,17,16,0,1,17,17,17,17,68,68,68,68,64,170,170,170,170,170,162,168,170,138,170,170,170,170,170,170,170,192,129,17,4,68,68,68,68,68,4,68,68,68,17,17,17,17,64,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,192,212,68,81,17,17,17,68,16,17,17,17,17,68,68,68,68,64,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,192,137,128,0,7,0,12,0,0,0,48,0,0,0,0,0,112,64,196,96,0,24,0,3,0,0,0,192,0,12,0,0,0,12,64,162,16,0,100,0,0,192,0,3,0,0,51,0,0,1,226,64,134,144,0,142,0,12,66,0,12,128,1,192,128,0,6,33,64,156,160,1,19,128,16,49,0,17,192,3,64,64,0,8,24,192,235,64,1,1,0,56,49,0,34,32,2,60,64,0,28,24,192,156,128,0,131,128,38,50,0,34,32,2,2,32,0,19,25,64,255,64,0,66,0,25,228,0,17,32,2,50,32,0,12,242,64,159,160,0,4,0,6,0,0,8,64,1,140,0,0,3,4,64,131,208,112,26,0,1,128,0,0,192,0,96,4,0,0,192,64,184,209,136,99,128,16,128,0,99,0,0,24,7,0,8,64,64,199,106,245,129,192,32,224,0,140,0,0,6,3,128,16,112,64,128,229,250,1,160,64,64,1,48,128,0,1,3,64,32,32,64,255,37,254,1,208,68,224,1,1,0,0,28,131,164,34,112,64,255,179,225,40,208,35,128,4,198,0,0,99,1,178,17,192,64,255,247,128,84,224,17,0,2,56,192,1,132,1,210,12,128,64,255,252,98,168,128,12,0,1,135,0,2,42,1,100,3,0,64,249,255,149,85,0,3,128,16,120,0,4,85,64,8,0,224,64,167,63,202,170,130,128,96,168,0,0,0,170,168,112,0,28,64,223,63,229,85,85,66,29,85,64,0,5,85,84,0,0,3,64,190,63,246,170,170,161,130,170,160,0,42,170,186,0,2,128,64,254,127,251,85,85,80,117,85,80,0,85,85,127,0,5,64,64,255,255,250,170,170,168,10,170,168,0,170,170,255,128,10,160,64,239,255,187,85,87,212,21,85,85,1,85,85,255,192,21,80,64,255,255,222,170,171,234,170,170,170,130,170,171,255,224,42,168,64,223,127,237,125,85,181,85,85,85,85,85,87,255,253,85,85,64,255,125,234,198,171,218,170,175,234,250,170,175,255,255,170,170,192,255,125,181,123,85,213,85,87,245,85,85,95,255,255,85,85,64,255,221,114,253,170,234,170,175,254,170,170,255,255,255,170,170,192,255,253,146,255,85,213,85,87,255,213,85,255,255,255,215,213,64,255,253,217,254,170,170,170,175,255,234,171,255,255,255,255,170,192,255,255,251,255,245,85,85,127,255,245,127,255,255,255,255,213,64,255,255,254,63,254,170,171,255,255,254,255,255,255,255,255,250,192,239,254,255,207,255,213,127,255,255,255,255,255,255,255,255,255,64,239,255,159,231,255,255,255,255,255,255,255,255,255,255,255,255,192,255,239,159,243,255,255,255,255,255,255,255,255,255,255,255,255,192,254,159,31,250,132,10,162,44,10,162,40,128,168,130,136,138,192,255,127,63,253,42,85,21,82,85,21,85,45,69,85,85,53,64,239,127,255,253,75,235,170,171,235,170,170,78,234,186,170,171,192,254,247,255,189,244,219,123,180,219,123,180,245,222,246,238,219,64,254,239,255,223,187,190,191,219,190,191,221,187,175,239,255,126,192,255,255,191,255,255,221,223,127,221,223,127,253,119,247,125,253,192,239,255,190,247,223,255,255,247,255,255,247,223,255,255,255,255,192,255,255,190,255,251,119,119,251,119,119,255,255,221,221,223,247,64,191,255,254,255,127,255,255,255,255,255,255,127,255,255,255,255,192,191,255,254,255,255,221,253,255,221,253,255,253,127,119,247,253,192,223,255,254,239,251,255,255,235,255,255,239,255,255,255,255,255,192,239,255,223,255,239,251,223,127,251,223,127,239,247,254,125,187,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,82,4,0,0,29,0,1,0,0,0,0,0,130,0,64,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,128,0,159,131,0,3,96,0,39,224,192,0,198,7,240,0,64,128,60,224,100,4,0,128,15,56,25,1,0,56,0,9,248,64,254,126,64,31,255,192,127,159,144,7,255,240,0,3,206,6,64,255,255,128,1,255,197,127,255,224,0,127,241,95,231,228,1,192,255,255,0,0,255,234,255,255,192,0,63,250,191,255,248,0,64,225,252,0,0,63,255,248,127,0,0,15,255,255,255,240,0,64,128,0,0,2,63,255,224,0,0,0,143,255,254,31,192,0,192,128,0,0,31,31,255,192,0,0,7,199,255,248,0,0,11,192,128,0,255,255,143,255,128,0,63,255,227,255,240,0,0,127,192,128,0,255,255,255,255,128,0,63,193,255,255,224,0,15,255,192,128,62,255,231,255,255,128,15,191,128,127,255,224,0,15,240,64,254,255,254,7,255,255,255,191,224,0,127,255,224,3,239,224,64,255,255,224,1,255,129,255,255,192,0,63,224,127,239,248,0,64,255,254,0,0,62,0,255,255,128,0,15,128,63,255,240,0,64,255,224,0,3,62,1,255,248,0,0,207,128,127,255,224,0,192,252,31,255,242,255,209,252,7,255,240,191,243,255,254,0,1,192,191,255,192,255,255,252,1,255,240,63,254,60,0,121,255,255,192,159,240,0,124,3,255,7,252,0,31,0,0,0,15,255,255,192,227,0,0,0,0,7,255,128,0,0,0,0,0,0,0,7,192,156,128,0,0,0,3,254,0,0,0,0,0,0,0,0,0,64,255,64,0,0,0,1,240,0,0,0,0,0,0,0,0,0,64,159,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,131,208,112,0,0,0,0,0,0,0,0,0,0,0,0,0,64,184,209,136,0,0,0,0,0,0,0,0,0,0,0,0,0,64,199,106,244,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,229,250,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,37,254,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,179,225,40,0,0,0,0,0,0,0,0,0,0,0,0,64,255,247,128,84,0,0,0,0,0,0,0,4,0,0,0,0,64,255,252,98,170,0,0,0,0,0,0,0,42,0,0,0,0,64,249,255,149,85,0,0,0,64,0,0,0,85,64,0,0,0,64,167,63,202,170,130,128,0,168,0,0,0,170,168,0,0,0,64,223,63,229,85,85,64,1,85,64,0,5,85,84,0,0,0,64,190,63,246,170,170,160,2,170,160,0,42,170,186,0,2,128,64,254,127,251,85,85,80,5,85,80,0,85,85,127,0,5,64,64,255,255,250,170,170,168,10,170,168,0,170,170,255,128,10,160,64,239,255,187,85,85,84,21,85,85,1,85,85,255,192,21,80,64,255,255,222,170,170,170,170,170,170,130,170,171,255,224,42,168,64,223,127,237,125,85,85,85,85,85,85,85,87,255,253,85,85,64,255,125,234,198,170,170,170,175,234,250,170,175,255,255,170,170,192,255,125,181,123,85,85,85,87,245,85,85,95,255,255,85,85,64,255,221,114,253,170,170,170,175,254,170,170,255,255,255,170,170,192,255,253,146,255,85,85,85,87,255,213,85,255,255,255,215,213,64,255,253,217,254,170,170,170,175,255,234,171,255,255,255,255,170,192,255,255,251,255,245,85,85,127,255,245,127,255,255,255,255,213,64,255,255,254,63,254,170,171,255,255,254,255,255,255,255,255,250,192,239,254,255,207,255,213,127,255,255,255,255,255,255,255,255,255,64,239,255,159,231,255,255,255,255,255,255,255,255,255,255,255,255,192,255,239,159,243,255,255,255,255,255,255,255,255,255,255,255,255,192,254,159,31,250,158,94,191,173,250,171,233,186,170,186,255,171,192,255,127,63,253,107,245,23,94,87,117,117,109,69,85,85,117,64,239,127,255,253,75,235,170,235,239,170,171,78,234,186,171,255,192,254,247,255,189,244,219,123,180,219,127,180,245,222,246,254,219,64,254,239,255,223,187,190,191,219,190,191,221,187,175,239,255,126,192,255,255,191,255,255,221,223,127,221,223,127,253,119,247,125,253,192,239,255,190,247,223,255,255,247,255,255,247,223,255,255,255,255,192,255,255,190,255,251,119,119,251,119,119,255,255,221,221,223,247,64,191,255,254,255,127,255,255,255,255,255,255,127,255,255,255,255,192,191,255,254,255,255,221,253,255,221,253,255,253,127,119,247,253,192,223,255,254,239,251,255,255,235,255,255,239,255,255,255,255,255,192,239,255,223,255,239,251,223,127,251,223,127,239,247,254,125,187,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,82,4,0,0,28,0,1,0,0,0,0,0,130,0,64,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,170,170,160,10,170,170,170,170,170,170,170,170,170,0,32,170,192,213,85,0,5,85,85,85,85,85,85,85,85,84,0,0,85,64,170,170,128,10,170,170,42,160,170,170,170,170,170,0,0,10,192,213,85,64,1,85,84,69,0,21,85,85,85,85,84,0,1,64,170,170,170,0,42,160,0,0,0,170,170,170,170,170,40,32,192,213,85,85,85,85,85,0,0,0,21,85,85,85,85,85,85,64,170,170,170,170,170,170,128,0,0,42,170,170,170,170,170,170,192,212,68,81,17,17,16,0,1,17,17,17,17,68,68,68,68,64,170,170,170,170,170,162,168,170,138,170,170,170,170,170,170,170,192,129,17,4,68,68,68,68,68,4,68,68,68,17,17,17,17,64,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,192,212,68,81,17,17,17,68,16,17,17,17,17,68,68,68,68,64,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,192,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,156,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,227,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,156,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,159,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,131,208,112,0,0,0,0,0,0,0,0,0,0,0,0,0,64,184,209,136,0,0,0,0,0,0,0,0,0,0,0,0,0,64,199,106,244,0,0,0,0,0,0,0,0,0,0,0,0,0,64,128,229,250,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,37,254,0,0,0,0,0,0,0,0,0,0,0,0,0,64,255,179,225,40,0,0,0,0,0,0,0,0,0,0,0,0,64,255,247,128,84,0,0,0,0,0,0,0,4,0,0,0,0,64,255,252,98,170,0,0,0,0,0,0,0,42,0,0,0,0,64,249,255,149,85,0,0,0,64,0,0,0,85,64,0,0,0,64,167,63,202,170,130,128,0,168,0,0,0,170,168,0,0,0,64,223,63,229,85,85,64,1,85,64,0,5,85,84,0,0,0,64,190,63,246,170,170,160,2,170,160,0,42,170,186,0,2,128,64,254,127,251,85,85,80,5,85,80,0,85,85,127,0,5,64,64,255,255,250,170,170,168,10,170,168,0,170,170,255,128,10,160,64,239,255,187,85,85,84,21,85,85,1,85,85,255,192,21,80,64,255,255,222,170,170,170,170,170,170,130,170,171,255,224,42,168,64,223,127,237,125,85,85,85,85,85,85,85,87,255,253,85,85,64,255,125,234,198,170,170,170,175,234,250,170,175,255,255,170,170,192,255,125,181,123,85,85,85,87,245,85,85,95,255,255,85,85,64,255,221,114,253,170,170,170,175,254,170,170,255,255,255,170,170,192,255,253,146,255,85,85,85,87,255,213,85,255,255,255,215,213,64,255,253,217,254,170,170,170,175,255,234,171,255,255,255,255,170,192,255,255,251,255,245,85,85,127,255,245,127,255,255,255,255,213,64,255,255,254,63,254,170,171,255,255,254,255,255,255,255,255,250,192,239,254,255,207,255,213,127,255,255,255,255,255,255,255,255,255,64,239,255,159,231,255,255,255,255,255,255,255,255,255,255,255,255,192,255,239,159,243,255,255,255,255,255,255,255,255,255,255,255,255,192,254,159,31,250,132,10,162,44,10,162,40,128,168,130,136,138,192,255,127,63,253,42,85,21,82,85,21,85,45,69,85,85,53,64,239,127,255,253,75,235,170,171,235,170,170,78,234,186,170,171,192,254,247,255,189,244,219,123,180,219,123,180,245,222,246,238,219,64,254,239,255,223,187,190,191,219,190,191,221,187,175,239,255,126,192,255,255,191,255,255,221,223,127,221,223,127,253,119,247,125,253,192,239,255,190,247,223,255,255,247,255,255,247,223,255,255,255,255,192,255,255,190,255,251,119,119,251,119,119,255,255,221,221,223,247,64,191,255,254,255,127,255,255,255,255,255,255,127,255,255,255,255,192,191,255,254,255,255,221,253,255,221,253,255,253,127,119,247,253,192,223,255,254,239,251,255,255,235,255,255,239,255,255,255,255,255,192,239,255,223,255,239,251,223,127,251,223,127,239,247,254,125,187,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,192,82,4,0,0,16,0,1,0,0,0,0,0,130,0,64,0,1,0,255,143,192,0,0,0,0,0,0,0,0,0,0,0,252,127,192,176,235,127,255,255,255,255,255,255,255,255,255,255,255,181,195,64,235,99,64,0,0,0,0,0,0,0,0,0,0,0,177,181,192,209,46,64,0,0,0,0,0,0,0,0,0,0,0,157,34,192,175,0,192,0,0,0,0,0,0,0,0,0,0,0,192,61,64,168,223,128,0,0,0,0,0,0,0,0,0,0,0,126,197,64,219,80,0,0,0,0,0,0,0,0,0,0,0,0,2,182,192,196,112,0,0,0,0,0,0,0,0,0,0,0,0,3,136,192,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,57,128,113,0,0,0,0,0,0,0,0,0,0,0,0,0,0,35,128,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,192,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,64,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,64,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,192,228], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+327746);
/* memory initializer */ allocatei8", ALLOC_NONE, Runtime.GLOBAL_BASE+337986);
/* memory initializer */ allocate([2,2,2,2,2,7,23,16,16,16,16,16,24,1,2,5,5,5,5,5,5,1,1,17,1,1,1,1,1,1,1,1,7,1,1,7,1,1,1,1,1,1,1,1,17,1,2,5,2,5,5,2,5,1,1,23,16,27,16,45,1,1,7,1,16,16,16,16,24,1,2,2,2,2,2,1,17,1,2,2,5,5,2,5,2,1,1,1,1,17,7,1,1,1,1,1,1,1,1,1,17,1,2,2,2,2,2,1,17,7,2,2,2,2,2,2,2,1,7,1,1,17,1,2,2,2,2,1,2,5,2,1,17,1,2,5,5,5,5,1,17,1,1,1,41,1,1,1,1,1,1,1,1,17,1,2,2,2,2,1,2,2,5,1,17,1,5,5,5,5,5,7,17,1,1,1,1,1,1,1,1,1,1,1,1,17,1,1,1,1,1,1,2,5,2,1,17,1,5,5,5,5,5,1,17,1,1,1,1,1,1,7,1,1,1,1,1,17,1,7,1,1,1,1,2,2,2,1,17,1,1,1,1,1,1,1,17,1,1,1,1,1,1,1,1,1,1,7,1,23,16,16,16,16,16,16,2,2,2,1,23,16,16,16,16,16,16,16,21,1,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,5,5,2,1,1,7,1,1,1,1,1,1,1,1,1,1,1,2,5,5,5,5,5,5,5,2,2,2,2,1,1,2,5,5,2,1,1,1,1,1,4,1,7,1,7,1,1,1,1,2,5,5,5,5,5,5,5,2,2,2,2,4,1,2,5,5,2,1,1,7,1,2,2,2,2,2,2,1,1,7,1,2,5,5,5,5,5,5,5,2,2,2,2,1,1,2,5,2,2,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,7,1,1,1,1,7,1,1,1,1,7,1,1,44,3,0,0,65,0,4,0,200,0,0,0,56,57,161,16,99,100,101,102,166,17,103,104,64,147,151,158,175,9,78,79,80,13,89,90,143,172,2,38,39,40,41,42,43,44,45,149,162,163,164,7,73,74,5,58,60,61,62,63,65,66,11,85,123,132,154,23,24,25,26,10,81,82,83,84,112,134,138,183,1,32,33,34,35,36,37,110,126,137,174,6,67,68,70,18,105,106,107,108,0,19,20,21,22,30,31,116,152,8,75,76,77,156,171,71,144,153,72,181,173,27,29,3,46,47,49,117,129,146,165,128,15,97,98,113,179,176,14,86,91,92,93,94,184,95,96,130,177,155,141,142,185,186,136,140,180,4,50,51,52,53,133,127,182,167,12,87,88,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,100,104,105,174,184,46,47,48,50,56,143,151,10,96,97,144,102,103,176,43,51,53,62,42,49,52,61,3,40,41,54,55,60,15,139,173,11,99,101,106,107,108,109,17,18,0,16,142,181,44,45,57,58,59,177,8,86,87,88,89,90,91,92,149,179,2,31,32,34,36,166,14,135,136,137,138,178,148,1,19,20,21,22,23,24,25,26,27,28,29,30,146,147,33,37,38,157,163,175,35,39,183,125,127,131,132,134,7,84,85,159,4,63,64,65,66,67,68,69,165,5,70,71,72,73,75,76,78,74,77,79,80,81,180,13,130,133,169,126,12,110,111,112,113,114,115,116,119,122,123,150,152,170,171,117,118,120,121,168,167,124,128,129,141,155,9,93,94,95,162,140,6,82,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,132,133,134,23,25,37,66,70,71,72,73,10,158,180,127,128,24,63,64,26,161,28,35,47,162,7,124,125,126,129,130,131,155,178,21,30,33,20,22,41,184,187,42,50,39,43,51,169,181,46,58,8,135,136,137,138,48,52,182,34,36,38,68,164,185,140,146,147,53,57,59,67,54,55,56,65,95,100,101,102,103,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,156,6,96,157,9,142,150,151,160,183,186,141,145,152,4,27,29,31,32,40,44,45,49,60,61,62,69,74,75,76,77,78,165,172,5,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,104,97,139,143,144,148,149,153,188,3,19,173,0,11,12,14,166,98,99,163,1,13,15,16,2,17,18,171,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,157,163,14,49,65,156,4,148,149,173,29,33,61,175,7,59,62,5,21,36,51,63,6,12,25,27,28,68,26,58,8,17,22,24,32,54,55,64,69,70,155,9,10,11,38,41,53,31,34,57,42,56,23,37,39,43,60,73,75,82,83,84,88,90,97,99,18,19,35,46,47,66,164,0,40,71,77,86,167,20,44,45,50,52,171,16,30,48,67,108,111,117,134,135,136,138,158,161,2,125,162,1,79,89,92,96,100,160,169,170,74,78,80,85,87,94,159,109,119,126,168,107,112,113,120,104,124,127,137,106,110,122,3,139,140,141,142,143,144,145,146,147,150,72,76,81,91,93,95,98,101,114,116,118,121,172,131,105,115,123,129,132,130,166,128,133,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,0,0,0,101,0,1,0,0,0,0,0,0,0,1,1,0,0,83,44,10,10,0,69,0,19,0,1,0,127,255,255,255,255,255,255,255,240,192,0,0,0,0,0,0,0,8,255,255,255,255,255,255,255,255,232,255,223,255,255,255,255,255,255,232,255,143,255,207,255,223,255,227,232,252,95,255,143,255,239,249,195,232,255,129,242,127,253,236,253,183,232,252,15,243,103,252,236,253,111,232,242,3,239,7,252,96,252,65,232,254,219,230,23,251,9,240,130,232,254,7,246,15,251,11,240,130,104,254,135,246,67,251,103,252,214,232,255,31,242,179,250,231,249,132,232,255,143,224,127,250,239,249,173,232,255,159,255,0,249,223,255,217,232,255,3,255,227,253,191,255,163,232,255,127,255,255,255,127,255,119,232,255,255,255,255,252,255,255,255,248,127,255,255,255,255,255,255,255,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,4,0,0,112,0,1,0,0,0,0,0,32,0,32,0,4,0,0,0,0,0,0,0,0,0,77,80,1,1,2,2,2,2,2,1,1,1,6,1,1,5,5,5,5,2,2,1,1,1,33,22,34,1,1,2,2,2,2,1,1,1,2,2,2,2,2,1,1,7,7,1,1,5,5,5,5,2,2,1,1,1,33,36,30,1,1,2,2,2,2,1,1,1,2,5,5,2,2,1,1,6,1,1,1,5,5,5,5,2,2,1,1,18,35,34,1,1,7,1,1,1,1,1,1,2,2,5,2,2,2,1,1,7,10,11,1,1,1,1,1,1,1,18,31,35,36,30,1,1,1,1,1,1,1,7,1,2,5,5,2,2,2,1,10,11,12,13,1,1,1,1,1,18,31,35,36,32,30,1,1,1,7,1,1,1,2,2,1,2,2,2,2,4,1,1,12,13,1,1,1,1,1,18,31,35,36,32,30,1,1,1,1,1,1,1,1,41,2,2,1,1,1,1,1,1,1,1,1,7,1,1,18,31,31,37,32,32,30,1,1,7,1,1,1,1,1,1,1,18,31,31,1,1,1,1,1,7,1,1,1,1,18,31,37,32,32,30,1,1,1,1,1,1,1,1,1,18,31,31,31,35,22,22,1,14,15,1,1,1,1,18,31,31,35,22,34,1,1,1,1,7,1,1,7,1,18,31,31,35,22,22,22,22,22,22,1,1,1,1,1,1,1,33,22,22,22,36,30,1,1,1,1,7,1,1,1,1,33,22,22,22,22,22,22,22,22,22,1,1,1,1,18,31,31,37,32,32,32,30,1,1,1,1,1,1,1,1,1,7,33,22,22,22,22,22,22,22,22,22,7,1,18,31,37,32,32,30,10,11,1,1,1,1,2,2,2,2,2,1,1,18,35,22,22,22,22,22,22,22,22,22,31,31,37,32,30,1,1,1,12,13,7,1,1,1,2,5,5,5,2,1,7,33,22,22,22,22,22,22,22,22,22,22,42,32,30,1,1,1,1,1,1,1,1,1,1,1,5,5,5,5,5,1,1,33,22,22,22,22,22,22,22,22,22,22,17,1,1,1,5,5,5,5,5,5,1,1,1,1,5,3,5,5,5,1,1,33,22,22,22,22,22,22,22,22,22,22,23,16,24,1,5,5,5,5,5,5,1,1,1,1,5,5,5,5,5,1,1,33,22,22,22,36,32,40,22,22,22,22,1,1,17,11,5,5,5,5,5,5,4,1,1,1,5,5,5,5,5,1,1,33,22,22,36,30,1,33,22,22,22,22,1,18,43,19,1,1,1,1,7,1,1,1,1,1,5,5,5,5,1,4,1,29,32,40,34,1,1,29,40,22,22,22,1,33,22,34,1,1,1,1,1,1,1,1,1,1,1,1,1,1,10,11,1,1,1,29,30,1,1,1,29,40,36,32,31,35,22,39,31,31,19,1,1,1,1,7,1,1,1,1,7,1,12,13,1,1,1,1,1,1,1,1,1,33,34,2,40,22,22,22,22,22,34,1,1,1,1,1,1,1,1,1,1,1,7,1,1,7,2,2,2,5,5,1,18,37,30,2,29,40,22,22,22,22,39,19,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,33,34,1,2,1,33,22,22,22,22,22,39,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,35,34,1,7,1,29,40,22,22,22,22,22,22,36,32,32,32,32,32,32,32,32,40,36,32,32,32,32,32,32,32,32,32,30,1,2,1,1,33,22,22,22,22,22,22,34,1,1,1,7,1,1,1,1,33,34,1,1,1,7,1,1,1,1,1,1,1,2,2,1,33,22,22,22,22,22,36,30,1,4,1,1,1,2,2,1,29,38,31,20,1,1,1,1,41,7,1,1,7,2,2,1,29,40,22,22,22,36,30,1,1,1,7,1,1,5,5,5,1,29,42,30,1,1,1,1,1,1,1,1,1,2,2,1,1,29,40,36,32,30,1,10,11,1,1,10,11,5,5,5,5,1,17,1,44,16,27,16,16,16,24,1,1,2,5,5,1,1,33,34,1,1,1,12,13,1,1,12,13,5,5,5,5,1,17,1,1,1,17,2,2,2,17,1,1,1,5,5,1,1,33,34,7,1,1,1,7,1,1,1,1,5,5,5,5,1,23,16,16,16,21,2,2,2,23,16,24,1,5,5,1,1,33,34,1,2,2,2,2,2,1,1,1,1,5,5,5,1,1,1,1,1,1,7,1,1,1,1,17,1,5,2,1,1,33,34,1,2,2,2,2,2,2,1,1,1,1,5,5,1,5,5,5,5,5,1,1,7,1,1,17,1,28,4,0,0,113,0,1,0,0,0,0,0,32,0,32,0,4,0,0,0,0,0,0,0,0,0,77,80,1,1,2,2,2,2,1,1,1,1,6,1,2,2,2,2,2,2,1,1,5,5,33,22,34,2,7,2,2,7,2,2,1,1,2,2,2,2,1,1,1,7,7,1,2,2,2,2,2,2,1,5,5,5,33,36,30,2,2,7,2,2,2,7,1,1,2,5,5,2,1,1,1,6,1,1,1,1,1,1,5,5,5,5,5,18,35,34,2,1,7,1,2,2,1,1,1,2,2,5,2,2,2,1,1,7,10,11,1,1,1,5,5,5,5,18,31,35,36,30,2,1,7,1,2,2,1,7,1,2,5,5,2,2,2,1,10,11,12,13,1,1,5,5,5,18,31,35,36,32,30,5,5,1,7,7,1,1,7,7,1,2,2,2,2,4,1,1,12,13,10,11,7,1,5,18,31,35,36,32,30,7,5,5,5,5,1,1,1,41,5,1,1,1,1,1,1,1,1,1,1,7,12,13,18,31,31,37,32,32,30,10,11,7,5,5,5,5,5,1,1,18,31,31,1,1,1,1,1,7,1,1,7,7,18,31,37,32,32,30,1,1,1,12,13,5,5,5,5,18,31,31,31,35,22,22,1,1,7,1,1,7,1,18,31,31,35,22,34,1,1,1,1,7,1,1,7,5,18,31,31,37,32,32,32,32,32,40,1,7,10,11,1,1,1,33,22,22,22,36,30,1,1,1,1,7,1,1,1,1,33,36,32,30,10,11,7,1,1,29,1,7,12,13,18,31,31,37,32,32,32,30,7,1,1,1,1,1,1,1,1,7,33,34,10,11,12,13,1,7,1,1,7,7,18,31,37,32,32,30,10,11,7,7,7,1,2,5,5,5,2,1,7,18,35,34,12,13,1,1,7,1,7,1,31,31,37,32,30,5,7,7,12,13,7,1,1,1,2,2,5,2,2,1,7,33,22,34,7,1,7,1,1,1,1,1,42,32,30,5,5,5,5,1,7,1,1,1,7,1,1,5,5,5,1,1,1,33,36,30,7,18,31,19,1,2,2,2,17,7,7,5,5,5,1,1,1,1,1,7,7,1,5,5,5,5,5,1,1,33,34,7,1,33,22,34,1,1,2,2,23,16,24,5,5,5,5,1,1,1,1,1,1,1,5,5,5,5,5,5,1,33,39,31,31,37,32,38,19,7,1,2,1,1,17,11,7,5,5,7,7,7,4,1,1,7,1,5,5,5,5,1,7,33,22,22,36,30,2,33,39,31,19,1,1,18,43,19,1,1,1,1,7,1,1,7,10,11,3,5,5,1,1,4,7,29,32,40,34,5,5,29,40,22,34,1,1,33,22,34,1,1,1,1,1,1,10,11,12,13,7,1,1,1,10,11,1,7,2,29,30,5,5,5,29,40,36,16,31,35,22,39,31,31,19,1,1,1,1,7,1,7,1,1,7,1,12,13,1,1,2,2,2,1,5,5,2,33,34,2,40,22,22,22,22,22,34,1,1,1,1,1,1,1,7,1,1,1,7,1,1,7,2,1,1,1,5,5,18,37,30,2,29,40,22,22,22,22,39,19,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,33,34,1,2,1,33,22,22,22,22,22,39,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,35,34,1,7,1,29,40,22,22,22,22,22,22,36,32,32,32,32,32,32,32,32,40,36,32,32,32,32,32,32,32,32,32,30,1,2,1,1,33,22,22,22,22,22,22,34,7,1,1,7,1,2,2,2,33,34,7,1,1,7,1,1,1,1,1,1,1,2,2,1,33,22,22,22,22,22,36,30,1,4,1,1,1,2,2,2,29,38,31,20,1,1,1,1,41,7,1,1,7,2,2,2,29,40,22,22,22,36,30,1,1,1,7,1,1,5,5,1,2,29,42,30,7,1,7,1,1,1,1,1,1,2,2,2,1,29,40,36,32,30,1,10,11,7,1,10,11,5,5,5,5,1,17,1,44,16,27,16,16,16,24,1,7,2,5,5,2,1,33,34,7,7,1,12,13,1,1,12,13,5,5,5,5,1,17,1,1,1,17,2,2,2,17,1,7,2,5,5,2,1,33,34,7,1,1,1,7,1,7,1,7,5,5,5,5,1,23,16,16,16,21,2,2,7,23,16,24,2,5,5,2,1,33,34,1,2,2,2,2,2,1,1,1,1,5,5,5,1,1,1,1,1,1,7,1,7,2,2,17,2,5,2,2,1,33,34,1,2,2,2,2,2,2,1,1,1,1,5,5,1,5,5,5,5,5,1,7,7,2,2,17,1,28,4,0,0,114,0,1,0,0,0,0,0,32,0,32,0,4,0,0,0,0,0,0,0,0,0,77,80,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,5,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,4,1,1,1,1,1,1,1,1,5,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,2,2,2,1,1,1,1,5,1,1,1,1,1,1,2,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,2,1,1,2,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,5,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,20,16,16,16,24,1,1,1,1,1,1,1,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,17,20,16,24,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,17,17,3,17,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,17,23,16,21,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,5,1,1,23,16,16,16,21,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,5,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,1,1,4,1,1,5,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,5,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,28,4,0,0,115,0,1,0,0,0,0,0,32,0,32,0,4,0,0,0,0,0,0,0,0,0,77,80,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,10,11,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,12,13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,14,15,13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,13,13,13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,36,32,32,32,32,32,32,32,40,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,2,2,2,2,10,11,1,33,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,2,4,5,2,12,13,1,33,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,2,2,2,2,2,1,1,33,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,2,2,2,3,2,1,1,33,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,1,1,2,2,2,1,1,33,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,5,1,1,1,1,5,1,33,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,34,1,1,5,5,1,1,18,35,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,39,31,31,31,31,31,31,35,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,10,11,10,11,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,12,13,12,13,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,28,4,0,0,116,0,1,0,0,0,0,0,32,0,32,0,4,0,0,0,0,0,0,0,0,0,77,80,12,13,10,11,12,13,1,1,1,1,7,1,2,2,7,2,7,1,7,7,1,7,17,7,1,7,7,2,2,7,2,2,12,13,12,13,12,13,1,7,1,7,7,7,2,2,2,2,1,41,1,7,7,1,17,7,7,1,7,2,2,2,2,7,7,7,12,13,14,15,14,15,1,6,1,1,1,7,1,7,1,10,11,7,1,18,34,7,10,11,7,2,14,15,2,2,1,14,15,14,15,7,1,4,1,7,10,11,1,7,7,1,1,12,13,7,18,37,30,7,12,13,7,2,2,2,2,2,5,5,5,7,44,16,27,16,16,16,16,16,24,1,1,1,18,31,31,31,37,30,7,1,1,1,7,7,1,1,2,2,5,5,5,1,1,14,17,1,1,10,11,1,17,14,15,1,33,22,36,32,30,7,1,1,7,1,1,1,14,15,2,2,5,5,5,1,1,1,17,1,7,1,1,7,17,1,14,15,33,32,30,10,11,7,1,10,11,1,7,4,1,1,2,2,5,5,5,1,1,7,17,1,7,7,1,1,23,16,16,16,21,1,1,12,13,1,1,12,13,1,7,1,1,10,11,2,5,5,7,1,1,7,17,1,1,1,14,15,5,10,11,5,5,7,1,7,7,10,11,1,1,1,7,1,1,12,13,2,1,7,10,11,1,1,23,16,16,24,14,15,5,12,13,5,5,7,1,10,11,12,13,7,1,1,7,1,7,7,2,2,1,7,12,13,1,1,7,1,1,17,1,1,5,5,5,5,5,1,1,12,13,7,1,1,10,11,1,1,1,7,7,2,16,16,16,24,7,7,1,7,1,17,7,1,5,5,5,5,5,2,2,2,7,14,15,1,12,13,1,1,7,1,2,2,7,1,1,17,1,10,11,1,1,23,16,24,5,5,5,5,5,2,2,2,7,14,15,1,7,1,7,1,1,1,2,2,1,7,1,17,7,1,1,1,7,1,1,17,7,7,2,2,2,2,7,2,1,1,1,1,7,1,1,1,5,7,5,5,14,15,1,23,16,16,16,16,16,16,16,21,7,1,7,2,7,2,2,2,14,15,1,7,1,1,7,1,7,5,5,5,7,1,7,1,7,7,1,7,7,1,1,1,1,3,2,2,2,2,2,2,1,1,1,1,14,15,1,1,5,5,5,5,1,7,1,7,7,1,7,7,7,7,1,1,1,7,2,2,2,2,2,2,7,1,1,7,1,1,7,1,5,5,5,5,11,10,11,14,15,7,7,1,7,4,1,7,10,11,2,2,2,2,2,2,7,1,1,1,1,7,1,1,5,5,5,5,15,12,13,14,15,10,11,7,7,1,10,11,12,13,7,1,7,1,10,11,10,11,1,1,1,1,1,1,5,5,5,5,10,11,7,14,15,7,1,7,7,15,1,7,1,7,1,1,7,1,12,13,12,13,2,2,2,2,2,1,7,1,1,1,12,13,7,7,7,1,7,14,5,5,5,10,11,1,7,1,1,7,10,11,10,11,2,2,7,2,2,1,1,7,1,1,10,11,10,11,1,10,11,1,5,5,5,12,13,1,1,1,1,1,12,13,12,13,2,2,2,2,7,1,1,1,1,7,7,13,7,7,7,7,1,7,5,5,5,1,1,7,1,1,1,7,10,11,10,11,2,2,2,2,2,1,1,7,1,1,10,11,7,10,11,1,7,5,5,5,5,1,1,1,1,1,7,1,12,13,12,13,1,1,1,1,10,11,10,11,1,1,11,10,11,1,14,15,5,5,5,5,5,7,1,18,31,31,31,31,31,20,7,1,1,7,1,7,12,13,12,13,1,1,13,12,13,10,11,5,5,5,5,5,5,1,1,33,36,32,32,32,32,38,31,20,1,1,7,1,41,7,12,11,7,1,2,2,2,12,13,5,5,5,5,5,5,1,7,33,34,7,1,7,1,29,42,30,7,1,7,1,7,1,12,13,1,2,2,2,2,1,7,14,15,1,1,10,11,7,1,33,34,7,1,1,1,1,17,1,44,16,27,16,16,16,24,1,7,2,5,5,2,7,10,11,7,7,1,12,13,1,1,33,34,1,1,14,15,1,17,1,1,1,17,7,2,2,17,1,7,2,5,5,2,7,12,11,7,1,4,1,7,1,7,33,34,7,1,1,7,1,23,16,16,16,21,2,2,7,23,16,24,2,5,5,2,10,11,10,11,2,2,2,2,2,2,33,34,7,1,1,1,1,14,15,1,7,1,7,1,7,2,7,17,2,5,2,2,12,11,12,11,2,2,2,2,2,2,33,34,14,15,14,15,1,1,7,1,1,7,1,7,7,7,2,17,1,28,4,0,0,110,0,1,0,0,0,0,0,32,0,32,0,4,0,0,0,0,0,0,0,0,0,77,80,2,17,1,1,2,2,2,2,2,2,5,5,2,2,2,7,1,1,2,2,29,16,27,16,30,1,7,1,1,7,2,2,2,17,1,1,2,2,2,1,4,1,5,5,2,2,2,1,1,4,2,2,1,1,17,1,1,1,1,1,1,2,2,7,2,17,1,1,2,14,15,1,1,1,5,5,2,2,2,1,1,2,2,2,1,18,34,1,1,1,1,1,1,1,2,2,2,17,1,1,1,1,1,7,1,1,1,1,1,7,1,1,1,1,1,1,18,37,30,1,4,1,1,1,1,1,2,2,2,23,16,16,16,16,16,16,16,16,16,16,24,1,1,7,18,31,31,31,37,30,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,1,1,1,1,1,1,17,1,1,1,33,22,36,32,30,1,1,2,2,2,1,7,1,1,2,2,5,5,5,5,5,2,1,1,5,5,5,1,17,1,7,1,33,32,30,1,1,1,2,10,11,2,1,1,1,1,2,2,5,5,5,5,5,2,1,1,5,5,5,1,23,16,16,16,21,1,1,1,1,2,2,12,13,2,1,1,1,1,2,2,5,5,5,5,5,4,1,1,5,5,5,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,1,1,1,7,2,2,5,5,5,5,5,1,1,1,1,1,1,7,5,5,5,2,2,2,1,1,1,2,2,2,2,2,1,1,4,2,2,2,5,5,5,5,5,1,1,1,1,1,1,1,5,5,5,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,5,2,2,2,1,1,7,1,1,1,1,1,44,16,16,16,27,16,16,16,16,24,1,14,15,1,2,2,2,1,5,5,5,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,17,2,1,1,1,17,1,1,1,1,2,2,2,1,1,1,5,2,2,2,1,1,5,5,5,5,5,5,5,5,5,7,17,2,2,2,1,23,16,16,24,1,2,2,2,1,1,1,5,2,7,1,1,1,44,16,16,27,16,16,16,16,16,16,21,2,2,2,1,1,1,1,17,1,2,2,2,1,1,1,1,3,1,1,1,1,1,1,1,17,1,1,1,1,1,1,1,2,2,2,1,1,4,1,17,1,2,2,2,1,1,1,1,2,2,2,2,2,2,1,1,17,1,2,2,2,2,2,2,2,2,2,2,2,2,1,17,1,1,1,1,1,7,1,1,2,2,2,2,2,2,1,1,17,1,2,2,2,2,2,2,2,2,2,2,2,2,1,17,14,15,1,1,1,1,1,1,2,2,2,2,2,2,1,1,17,1,2,2,2,2,2,2,2,2,2,2,2,2,1,23,16,16,16,16,16,24,1,1,2,2,2,2,2,2,1,1,17,1,1,1,1,1,1,1,1,7,1,1,7,1,1,1,1,1,1,1,1,17,1,1,2,2,2,2,2,2,1,1,23,16,27,16,45,1,1,7,1,16,16,16,16,24,1,2,2,2,2,1,1,17,1,1,2,2,2,2,2,2,1,1,1,1,17,7,1,1,1,1,1,1,1,1,1,17,1,2,2,2,2,1,1,17,1,1,2,2,2,2,2,2,1,7,1,1,17,1,2,2,2,2,1,2,2,2,1,17,1,2,5,5,5,1,1,17,1,1,1,41,1,1,1,1,1,1,1,1,17,1,2,2,2,2,1,2,2,2,1,17,1,5,5,5,5,1,1,17,1,1,1,1,1,1,1,1,1,1,1,1,17,1,1,1,1,1,1,2,2,2,1,17,1,5,5,5,5,1,1,17,1,1,1,1,1,1,7,1,1,1,1,1,17,1,7,1,1,1,1,2,2,2,1,17,1,1,1,1,1,1,1,17,1,1,1,1,1,1,1,1,1,1,7,1,23,16,16,16,16,16,16,2,2,2,1,23,16,16,16,16,16,16,16,21,1,14,15,1,1,1,1,1,1,1,1,1,1,1,1,1,7,1,2,5,5,2,1,1,7,1,1,1,1,1,1,1,1,1,1,1,2,5,5,5,5,5,5,5,2,2,2,2,1,1,2,5,5,2,1,1,1,1,1,4,1,7,1,7,1,1,1,1,2,5,5,5,5,5,5,5,2,2,2,2,4,1,2,5,5,2,1,1,7,1,2,2,2,2,2,2,1,1,7,1,2,5,5,5,5,5,5,5,2,2,2,2,1,1,2,5,2,2,1,1,1,1,2,2,2,2,2,2,1,1,1,1,1,1,7,1,1,1,1,7,1,1,1,1,7,1,1,8,4,0,0,10,0,1,0,0,0,0,0,0,0,144,1,0,0,15,100,100,100,100,0,100,100,0,50,0,0,0,0,100,100,100,100,100,100,100,0,0,100,80,100,0,100,0,0,32,3,0,0,20,100,100,100,100,100,100,100,0,50,0,0,0,0,100,100,100,100,80,80,80,0,80,100,80,100,80,100,0,0,232,3,0,0,25,100,100,100,100,0,0,0,0,0,100,100,100,0,100,100,100,100,100,100,100,0,100,100,80,100,80,100,0,1,232,3,0,0,30,80,100,100,100,100,100,100,100,100,80,100,100,0,100,100,100,100,100,100,100,0,80,100,60,100,80,100,0,0,144,1,0,0,15,100,80,100,0,0,60,60,0,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,80,100,0,0,32,3,0,0,20,100,100,100,100,0,100,100,0,60,0,0,0,0,0,0,100,0,0,100,0,0,100,100,100,100,100,100,0,0,232,3,0,0,25,100,100,100,100,0,100,100,0,60,0,0,0,100,0,0,100,0,0,100,0,0,100,100,100,100,100,100,0,0,232,3,0,0,30,100,100,100,80,0,100,100,0,60,0,0,0,0,100,100,100,100,100,100,100,0,100,90,100,100,80,100,0,0,244,1,0,0,15,100,100,100,100,0,100,100,80,60,80,80,80,100,80,80,100,100,100,100,100,100,100,80,100,100,100,100,0,0,32,3,0,0,20,100,100,100,100,0,100,100,80,60,80,80,80,100,80,80,100,100,100,100,100,100,100,80,100,100,100,100,0,0,0,0,150,0,25,100,80,100,0,0,0,0,0,0,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,32,3,0,0,20,80,80,80,100,0,0,0,0,0,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,50,100,100,0,0,232,3,0,0,30,100,100,100,100,0,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,100,100,100,100,80,100,100,0,2,0,0,0,0,15,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,80,80,80,80,80,80,0,3,0,0,0,0,20,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,80,80,80,80,80,80,0,1,0,0,0,0,20,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,80,80,80,80,80,80,1,0,32,3,0,0,15,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,176,4,0,0,30,100,80,100,0,0,80,80,0,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,0,0,176,4,0,0,30,80,80,100,100,0,0,0,0,0,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,70,100,100,1,4,0,0,0,0,20,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,1,5,0,0,0,0,30,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,1,0,0,0,0,0,10,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,0,6,0,0,0,0,20,100,100,100,100,0,80,80,100,100,0,0,0,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,1,0,32,3,0,0,10,100,100,100,100,0,100,100,100,100,0,0,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,1,1,0,0,0,0,10,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,1,7,0,0,0,0,10,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,0,0,0,0,0,0,30,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,1,0,0,0,0,0,10,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,80,80,80,80,80,80,1,0,8,7,0,0,30,100,100,100,100,0,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,1,0,0,0,0,0,10,100,100,100,100,100,0,0,0,0,0,0,0,0,100,100,100,100,100,100,100,100,0,0,0,0,0,0,226,2,0,0,27,0,1,0,0,0,0,0,0,9,18,9,12,17,0,0,23,23,2,0,0,23,23,3,0,0,25,25,4,0,0,24,24,1,0,0,23,23,0,0,0,24,24,1,0,0,23,23,2,0,0,23,23,3,0,0,25,25,4,0,0,24,24,6,0,0,24,24,5,0,0,24,24,6,0,0,24,24,7,0,0,24,24,8,0,0,24,24,7,0,0,24,24,8,0,0,24,1,7,0,0,24,24,8,16,0,16,0,1,1,252,31,255,255,254,63,252,31,236,27,196,17,134,48,128,0,128,0,0,0,0,0,128,0,140,24,136,136,136,136,223,253,3,224,0,0,1,192,2,32,18,36,42,42,73,201,70,49,68,17,200,41,202,41,78,57,82,101,85,85,87,117,32,2,16,0,16,0,1,1,253,223,241,199,227,227,198,49,132,16,132,16,132,16,130,32,128,0,0,0,0,0,128,0,128,0,204,25,232,11,248,143,2,32,14,56,20,20,41,202,74,105,74,105,75,233,69,209,66,97,196,49,200,25,74,41,78,57,50,166,20,148,7,112,16,0,16,0,1,1,255,255,254,63,252,63,248,127,240,127,192,31,128,7,0,3,0,1,0,3,0,7,128,3,128,7,192,7,224,15,252,31,0,0,1,192,2,64,4,128,8,128,48,96,64,24,128,4,96,2,144,36,128,24,64,4,64,8,36,8,28,16,3,224,16,0,16,0,1,1,255,255,255,255,255,231,252,195,248,71,252,3,224,1,192,1,128,1,128,0,192,0,192,1,128,1,128,3,192,7,240,63,0,0,0,0,0,24,3,36,4,168,2,100,28,2,32,2,64,6,68,9,56,1,32,2,64,2,64,36,48,56,15,192,16,0,16,0,1,1,255,255,207,159,143,143,145,199,240,71,248,63,240,7,192,3,128,1,0,1,0,3,128,3,128,1,192,1,224,3,252,15,0,0,48,96,80,80,106,32,9,40,0,64,8,24,48,36,80,66,136,34,128,28,64,4,64,2,36,2,28,12,3,240,16,0,16,0,1,1,255,255,156,115,8,33,8,33,0,1,128,3,128,3,0,1,0,1,32,9,112,29,56,57,121,61,179,155,227,143,195,135,0,0,99,140,183,218,212,214,191,250,111,220,77,108,231,222,242,190,223,246,143,226,199,198,134,194,76,100,28,112,60,120,16,0,16,0,1,1,255,255,252,127,248,63,248,63,240,31,192,7,128,3,0,1,0,1,32,9,48,25,24,49,120,61,185,59,225,15,193,7,0,0,3,128,7,192,4,192,15,224,63,248,79,228,231,222,243,190,219,182,207,230,231,206,135,194,70,196,30,240,62,248,16,0,16,0,1,1,255,255,255,255,255,255,231,255,227,255,241,255,248,255,252,127,254,63,255,23,255,143,255,199,255,163,255,243,255,255,255,255,0,0,0,0,0,0,24,0,20,0,10,0,5,0,2,128,1,64,0,168,0,80,0,56,0,92,0,12,0,0,0,0,16,0,16,0,1,1,255,255,255,255,255,255,255,243,255,227,255,199,255,143,255,31,254,63,244,127,248,255,241,255,226,255,231,255,255,255,255,255,0,0,0,0,0,0,0,12,0,20,0,40,0,80,0,160,1,64,10,128,5,0,14,0,29,0,24,0,0,0,0,0,210,2,0,0,47,0,1,0,0,0,0,0,84,0,64,0,1,0,255,255,255,255,255,255,255,255,255,255,240,236,58,15,193,38,195,160,252,24,124,16,248,127,122,226,255,128,247,174,127,129,240,128,72,232,79,0,0,8,3,200,1,48,232,72,36,216,0,0,32,0,72,3,48,132,124,18,40,0,1,184,0,120,5,240,176,10,16,216,0,6,22,0,0,129,16,204,21,9,152,0,0,33,0,1,64,16,130,36,141,40,56,4,52,0,240,190,16,130,8,248,80,199,128,126,63,14,251,16,129,0,153,49,4,128,18,36,1,157,144,161,192,150,98,4,134,18,100,16,150,144,231,97,243,194,7,153,159,188,40,245,16,130,33,16,2,4,32,102,0,84,27,16,128,150,72,1,4,0,24,0,16,53,240,141,212,232,25,8,0,0,4,0,98,48,146,43,21,231,207,160,30,62,120,85,80,130,92,35,34,84,208,18,37,72,170,176,129,4,147,34,84,168,18,36,72,149,80,146,95,101,227,207,160,30,60,120,162,48,226,7,161,0,8,0,0,0,96,85,80,129,34,17,4,16,0,0,1,152,106,176,130,27,41,10,16,6,0,2,6,85,80,130,7,35,245,8,25,158,60,121,242,48,134,167,83,36,132,96,114,36,200,157,80,165,22,139,40,3,128,18,229,72,150,176,134,69,35,224,0,0,31,60,120,243,80,130,137,100,0,0,0,0,0,0,1,48,227,9,164,24,0,8,0,0,14,0,208,128,36,18,37,192,20,0,0,17,1,176,137,148,250,86,160,47,30,0,120,241,80,134,71,151,185,24,9,18,0,72,145,48,149,87,154,18,70,9,18,64,200,147,80,170,43,241,98,32,15,30,163,120,242,176,201,199,225,0,0,0,1,84,0,13,80,136,37,18,0,0,3,224,72,0,10,48,237,221,238,0,3,140,30,8,0,5,80,199,45,247,224,28,127,31,252,0,242,176,160,249,157,32,224,9,18,36,0,145,80,168,96,145,35,0,9,18,36,0,145,48,208,0,241,236,0,15,30,60,0,241,80,208,24,48,48,0,0,0,0,0,81,176,144,44,88,192,12,0,0,0,0,169,80,224,74,150,0,18,224,0,0,0,33,48,189,9,33,227,235,80,30,0,120,3,80,228,8,1,34,92,140,18,0,72,2,176,164,17,193,34,73,35,18,0,72,3,80,188,6,161,227,241,16,30,0,120,6,48,208,9,24,192,0,0,0,2,0,5,80,240,114,70,48,0,0,0,5,0,10,176,176,2,32,12,0,0,0,10,128,21,80,160,0,0,3,7,131,62,18,120,34,48,227,216,240,0,204,204,210,4,72,85,80,166,113,152,0,52,176,18,0,72,106,176,233,50,76,0,7,128,31,0,120,213,80,216,86,20,0,0,0,0,192,1,34,48,161,40,74,0,0,0,0,56,3,85,80,201,154,102,0,0,0,0,6,6,170,176,176,220,50,0,224,0,0,1,29,85,80,210,44,138,1,191,128,0,0,226,34,48,132,217,54,7,17,64,0,3,213,85,80,200,74,18,58,170,190,12,62,170,170,176,177,46,83,213,85,85,247,213,85,85,80,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+348226);
/* memory initializer */ allocate([255,255,255,255,255,255,255,255,255,240,210,2,0,0,75,0,1,0,0,0,0,0,84,0,64,0,1,0,255,255,255,255,255,255,255,255,255,255,240,236,0,112,145,38,195,160,252,0,124,16,248,120,28,74,255,128,247,160,120,1,240,128,72,7,255,0,0,8,0,79,255,48,232,72,0,0,0,0,0,0,79,255,48,132,124,0,0,0,0,0,0,120,1,240,176,14,0,0,0,7,0,0,108,0,16,204,7,0,0,0,15,128,1,238,0,16,130,3,128,0,0,13,128,7,134,62,16,130,1,240,0,7,153,158,63,7,251,16,129,0,144,0,4,240,243,228,0,157,144,161,192,144,0,4,224,115,228,0,150,144,128,96,240,0,7,128,30,60,1,245,16,132,32,24,0,3,0,12,24,3,155,16,128,16,28,0,3,0,12,24,7,53,240,200,16,14,0,3,0,12,24,14,98,48,128,8,7,227,199,128,30,60,124,85,80,135,28,1,62,124,252,19,231,200,170,176,148,4,1,62,124,254,19,231,200,149,80,130,70,1,227,199,134,30,60,124,162,48,146,66,0,192,3,3,12,24,62,85,80,128,2,0,192,7,131,12,24,54,106,176,145,178,0,192,63,193,140,24,51,85,80,144,2,1,225,248,225,158,60,121,242,48,128,130,1,63,192,112,243,228,79,157,80,128,130,1,62,0,48,243,228,79,150,176,136,4,7,231,128,24,30,60,120,243,80,136,136,14,7,224,12,12,24,48,1,48,128,8,28,0,252,6,12,28,48,0,208,144,4,56,0,63,6,12,14,48,1,176,144,132,248,0,7,207,30,7,120,241,80,128,4,144,0,1,249,243,255,207,145,48,132,132,144,0,0,121,243,255,207,147,80,132,8,240,0,0,15,30,0,124,242,176,128,16,96,0,0,6,0,0,236,13,80,128,32,96,0,0,6,0,3,238,10,48,237,192,96,0,0,6,0,7,135,5,80,199,0,241,224,0,15,30,62,3,242,176,160,3,159,32,0,9,243,228,0,145,80,160,7,159,32,0,25,243,228,0,145,48,192,14,241,224,0,127,30,62,0,241,80,192,28,24,0,0,246,12,7,0,97,176,128,56,28,0,3,230,12,3,129,225,80,128,112,14,0,15,195,12,1,193,225,48,189,224,7,227,255,1,158,0,249,131,80,167,128,1,62,120,0,243,255,207,130,176,167,0,1,62,64,0,115,255,207,131,80,188,0,1,227,224,0,30,0,120,6,48,128,0,0,0,112,0,12,0,48,5,80,128,0,0,0,48,0,12,0,48,10,176,128,0,0,0,56,0,12,0,48,21,80,160,0,0,0,31,128,30,0,120,34,48,227,216,240,0,4,255,243,255,200,85,80,166,113,152,0,4,255,243,255,200,106,176,233,50,76,0,7,128,30,0,120,213,80,216,86,20,0,0,0,0,0,1,34,48,160,40,10,0,0,0,0,0,3,85,80,200,154,38,0,0,0,0,0,6,170,176,160,132,2,0,224,0,0,0,29,85,80,192,0,10,1,191,128,0,0,98,34,48,128,0,6,7,17,64,0,3,213,85,80,200,64,2,58,170,190,12,62,170,170,176,177,42,83,213,85,85,247,213,85,85,80,255,255,255,255,255,255,255,255,255,255,240,129,2,0,0,25,0,1,0,0,0,0,0,0,7,5,3,0,4,8,8,70,1,0,41,20,20,20,1,51,12,20,20,1,71,24,20,20,2,8,8,10,10,0,112,0,40,0,1,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,96,0,96,0,96,0,96,0,96,0,96,0,96,0,0,102,96,102,0,102,0,102,0,102,0,126,0,102,0,0,255,0,0,0,0,0,0,0,3,252,0,0,0,127,254,128,0,0,0,0,0,0,5,255,248,0,12,159,255,88,12,24,12,24,12,24,11,255,228,24,0,191,128,64,0,0,0,0,0,0,8,7,244,0,0,96,0,64,0,0,0,0,0,0,8,0,24,0,48,32,0,48,48,48,48,48,48,48,48,0,16,48,3,16,0,38,3,6,3,6,3,6,16,0,35,6,0,16,0,16,0,0,0,0,0,0,32,0,32,0,96,8,0,62,96,0,96,0,96,1,240,0,96,0,0,24,0,39,0,24,0,24,0,27,144,0,64,24,1,200,0,43,129,0,1,0,1,7,80,0,79,0,49,184,0,35,176,48,48,48,48,55,16,0,118,48,7,232,0,51,128,0,0,0,0,7,48,0,95,128,5,248,7,203,131,0,3,0,3,7,79,128,126,128,102,255,248,23,96,0,96,0,96,3,160,127,253,128,3,127,240,119,0,102,0,102,0,103,160,127,251,102,2,63,252,46,0,0,0,0,0,1,208,255,241,0,3,94,247,206,0,0,0,0,0,1,207,189,235,0,13,162,247,28,12,24,12,24,12,24,227,189,22,24,0,24,76,220,0,0,0,0,0,0,236,200,96,0,1,163,179,60,0,0,0,0,0,0,243,55,22,0,51,84,140,221,48,48,48,48,48,50,236,196,171,48,0,47,115,63,131,6,3,6,3,7,243,59,208,6,2,136,140,220,192,0,0,0,0,12,236,196,69,0,97,6,115,63,96,0,96,0,96,27,243,57,130,0,2,193,44,222,48,24,0,24,0,49,236,210,13,24,1,40,67,61,81,0,1,0,1,42,243,8,83,0,48,81,140,220,112,48,48,48,48,56,236,6,40,48,0,42,21,45,128,0,0,0,0,6,240,161,80,0,3,6,162,94,3,0,3,0,3,1,200,21,131,0,96,1,88,104,96,0,96,0,96,0,120,106,96,0,0,102,0,102,0,102,0,102,0,102,0,102,0,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,24,12,24,12,24,12,24,12,24,12,24,12,24,9,0,5,0,1,0,3,0,2,128,79,0,112,0,160,0,10,0,5,0,1,0,80,0,56,0,39,128,1,64,1,128,108,2,0,0,59,0,1,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,3,8,0,7,0,0,0,0,3,2,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,9,0,0,0,1,0,0,0,2,0,0,0,2,0,0,6,0,11,0,0,0,0,0,3,0,2,0,0,0,0,0,7,0,12,0,5,0,0,0,2,0,2,0,3,0,0,2,0,0,13,0,6,0,0,2,0,0,2,0,2,0,0,0,0,0,0,14,0,2,0,0,0,0,0,2,0,2,0,0,10,0,15,0,0,4,0,0,2,0,2,0,0,2,0,0,11,0,0,0,9,0,0,0,2,0,0,0,2,0,5,0,0,16,21,15,10,0,2,0,0,3,3,3,2,0,6,0,13,0,16,0,0,0,2,0,2,0,2,0,0,0,7,0,14,0,17,0,12,0,2,0,2,0,2,0,2,0,0,8,0,19,18,0,13,0,0,2,0,2,2,0,2,0,9,11,0,21,0,20,0,0,2,5,0,4,0,2,0,0,12,0,17,0,22,0,0,11,2,0,2,0,2,0,0,4,13,0,0,23,0,0,16,0,2,0,0,2,0,0,2,0,14,0,19,0,23,0,0,0,2,0,2,0,2,0,0,0,0,0,0,0,0,0,18,14,0,0,0,0,0,0,2,2,0,15,0,0,25,0,0,0,0,2,0,0,2,0,0,0,11,0,22,0,27,0,0,15,4,0,2,0,2,0,0,5,16,0,23,0,0,0,21,0,2,0,3,0,0,0,2,0,18,0,24,30,0,29,22,17,2,0,2,2,0,2,3,2,0,0,0,0,0,0,23,0,0,0,0,0,0,0,2,0,20,0,26,32,0,31,0,0,2,0,2,2,0,4,0,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,2,0,21,0,28,34,0,33,0,0,2,0,2,2,0,4,0,0,0,0,29,0,34,0,27,0,0,0,2,0,2,0,2,0,0,23,0,35,0,0,28,0,0,2,0,2,0,0,2,0,0,0,0,0,0,35,0,23,0,0,0,0,0,2,0,2,0,25,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,33,0,0,0,0,25,0,0,3,0,0,0,0,2,0,27,0,36,0,0,32,0,0,3,0,2,0,0,2,0,28,0,35,0,37,0,0,27,2,0,4,0,2,0,0,2,0,30,0,0,38,0,34,29,0,2,0,0,2,0,4,2,0,0,37,0,0,0,0,33,0,0,3,0,0,0,0,2,34,0,38,0,0,0,36,0,2,0,3,0,0,0,3,0,35,0,0,0,0,0,37,0,2,0,0,0,0,0,3,0,108,2,0,0,60,0,1,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,7,8,0,3,0,0,0,0,2,2,0,3,0,0,0,2,8,0,0,0,0,0,0,3,2,0,0,0,0,0,0,0,0,0,9,0,0,0,1,0,0,0,2,0,0,0,2,0,10,11,0,6,0,0,0,0,2,2,0,3,0,0,0,5,0,12,13,7,0,0,0,3,0,2,2,2,0,0,0,6,12,13,14,8,2,0,0,2,2,2,2,3,2,0,0,7,14,0,0,0,3,0,2,3,2,0,0,0,2,0,2,0,0,15,0,10,0,0,4,0,0,2,0,2,0,0,2,9,15,0,0,11,5,0,0,2,0,0,0,2,2,0,0,10,0,0,0,12,0,5,0,2,0,0,0,3,0,2,0,0,11,16,17,13,7,6,0,0,3,2,2,2,2,2,0,12,16,17,18,14,0,7,6,2,2,2,2,2,0,2,2,13,17,18,19,0,8,0,7,2,2,2,2,0,2,0,2,0,20,26,27,16,10,9,0,0,2,3,4,5,2,2,0,0,21,22,0,17,13,12,0,0,2,2,0,2,2,2,0,16,22,29,23,18,14,13,12,2,2,3,2,2,2,2,0,17,0,23,24,19,0,14,13,2,0,2,2,2,0,2,2,18,23,24,0,0,0,0,14,2,2,2,0,0,0,0,2,0,0,25,26,21,15,0,0,0,0,2,2,5,2,0,0,20,33,27,28,22,16,0,10,5,3,2,2,2,2,0,3,21,27,28,29,23,17,16,11,2,2,2,2,3,2,2,3,22,29,35,30,24,19,18,17,3,2,3,2,2,2,2,2,23,0,30,0,0,0,19,18,2,0,2,0,0,0,2,2,0,31,0,32,26,11,20,0,0,4,0,2,2,4,2,0,25,0,32,33,27,11,15,20,2,0,2,2,4,5,3,2,26,33,0,34,28,22,21,10,4,4,0,2,2,2,2,4,27,0,34,35,29,18,22,21,2,0,2,3,2,3,2,2,28,34,0,35,30,23,17,22,2,2,0,2,3,2,3,2,29,35,0,0,0,0,24,23,3,2,0,0,0,0,2,2,0,0,0,0,0,0,31,0,0,0,0,0,0,0,4,0,0,0,0,0,33,21,26,25,0,0,0,0,0,4,2,2,32,0,0,36,34,21,10,26,2,0,0,2,4,3,5,2,33,0,37,0,35,29,28,27,4,0,2,0,3,2,2,2,34,0,38,0,0,30,23,29,3,0,2,0,0,2,3,2,0,0,0,0,37,28,0,33,0,0,0,0,3,3,0,2,36,0,0,0,38,0,34,0,3,0,0,0,3,0,2,0,37,0,0,0,0,0,35,28,3,0,0,0,0,0,2,3,152,1,0,0,67,0,4,0,99,0,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,2,17,144,2,17,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,167,28,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,2,17,144,2,17,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,167,28,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,2,17,144,2,17,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,167,28,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,2,17,144,2,17,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,167,28,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,144,0,0,146,1,0,0,7,0,1,0,0,0,0,0,16,0,16,0,6,1,255,255,255,255,255,127,254,63,252,31,254,63,246,55,224,3,192,1,224,3,246,55,254,63,252,31,254,63,255,127,255,255,0,0,0,0,0,128,1,64,2,32,1,64,9,72,23,116,32,2,23,116,9,72,1,64,2,32,1,64,0,128,0,0,255,255,255,255,255,255,207,231,199,199,227,143,241,31,248,63,252,127,232,47,241,31,227,143,197,71,207,231,255,255,255,255,0,0,0,0,0,0,48,24,40,40,20,80,10,160,5,64,2,128,21,80,10,160,28,112,58,184,48,24,0,0,0,0,253,255,248,255,248,255,248,127,248,31,248,7,200,3,192,3,192,3,224,3,224,3,224,3,240,3,248,7,252,7,252,7,2,0,5,0,5,0,5,128,5,96,5,88,53,84,44,20,36,4,20,4,20,4,16,4,8,12,4,8,2,8,3,248,255,255,255,255,255,255,255,255,255,255,251,255,249,255,248,255,248,127,248,63,248,31,248,15,248,63,248,31,251,31,255,159,0,0,0,0,0,0,0,0,0,0,4,0,6,0,5,0,4,128,4,64,4,32,4,112,5,64,7,160,4,160,0,96,255,255,255,255,255,255,255,255,255,255,255,255,254,255,252,127,248,63,240,31,240,31,252,127,252,127,252,127,252,127,252,127,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2,128,4,64,8,32,14,224,2,128,2,128,2,128,2,128,3,128,255,255,255,255,255,255,255,255,255,255,255,255,255,255,252,31,248,15,240,7,248,15,248,15,240,7,224,7,224,15,240,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,224,4,16,3,224,2,32,4,16,8,16,8,32,7,192,146,1,0,0,34,0,1,0,0,0,0,0,16,0,16,0,6,1,255,255,255,225,255,192,255,192,255,232,255,241,255,227,255,227,255,247,255,227,255,247,255,255,255,255,255,255,255,255,255,255,0,0,0,12,0,18,0,18,0,2,0,4,0,8,0,8,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,255,63,254,31,252,15,252,71,254,71,255,229,255,240,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,192,1,32,1,16,0,144,0,8,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,231,255,195,255,129,255,0,255,0,255,129,255,195,255,231,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,24,0,36,0,90,0,129,0,255,0,102,0,60,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,231,255,195,255,129,255,0,255,0,255,129,255,195,255,231,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,24,0,52,0,114,0,213,0,213,0,114,0,52,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,193,255,128,255,193,255,193,255,128,255,0,255,1,255,131,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,62,0,65,0,62,0,34,0,65,0,129,0,130,0,124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,131,255,1,255,131,255,131,255,1,254,1,254,3,255,7,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,124,0,130,0,124,0,68,0,130,1,2,1,4,0,248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,1,0,0,58,0,43,0,10,0,192,0,142,183,129,121,192,140,140,140,140,140,113,113,134,125,192,140,140,140,140,140,143,165,134,125,192,140,140,140,140,140,112,114,118,104,192,140,140,140,140,140,125,186,145,180,192,140,140,140,140,140,134,125,148,109,192,140,140,140,140,140,132,143,134,100,192,140,140,140,140,140,113,113,122,99,192,140,140,140,140,140,140,172,139,110,192,140,140,140,140,140,122,147,132,154,192,140,140,140,140,140,115,100,112,114,192,140,140,140,140,140,154,190,192,114,192,140,140,140,140,140,165,103,145,180,192,140,140,140,140,140,144,172,150,157,192,140,140,140,140,140,122,122,150,144,192,140,140,140,140,140,130,165,145,180,192,140,140,140,140,140,144,173,114,189,192,140,140,140,140,140,144,97,133,166,192,140,140,140,140,140,143,130,154,188,192,140,140,140,140,140,168,183,164,188,192,140,140,140,140,140,141,176,115,135,192,140,140,140,140,140,138,153,116,122,192,140,140,140,140,140,125,104,146,117,192,140,140,140,140,140,142,162,192,117,192,140,140,140,140,140,115,137,118,124,192,140,140,140,140,140,131,158,150,177,192,140,140,140,140,140,143,165,145,180,192,140,140,140,140,140,125,109,143,132,192,140,140,140,140,140,130,110,125,109,192,140,140,140,140,140,123,161,123,188,192,140,140,140,140,140,148,134,132,143,192,140,140,140,140,140,112,141,127,100,192,140,140,140,140,140,142,164,129,170,192,140,140,140,140,140,115,100,137,115,192,140,140,140,140,140,114,177,137,99,192,140,140,140,140,140,129,163,129,170,192,140,140,140,140,140,121,176,145,180,192,140,140,140,140,140,125,104,132,190,192,140,140,140,140,140,122,1,0,0,26,0,1,0,0,0,0,0,120,0,24,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,127,254,120,3,255,255,255,255,255,255,255,255,255,255,255,192,62,102,254,0,0,0,0,0,0,0,0,0,0,0,126,198,106,128,0,0,0,0,0,0,0,0,0,0,0,2,182,107,128,0,0,0,0,0,0,0,0,0,0,0,3,138,80,0,0,0,0,0,0,0,0,0,0,0,0,0,58,92,0,0,0,0,0,0,0,0,0,0,0,0,0,34,68,0,0,0,0,0,0,0,0,0,0,0,0,0,62,124,0,0,0,0,0,0,0,0,0,0,0,0,0,14,112,0,0,0,0,0,0,0,0,0,0,0,0,0,10,80,0,0,0,0,0,0,0,0,0,0,0,0,0,10,80,0,0,0,0,0,0,0,0,0,0,0,0,0,10,80,0,0,0,0,0,0,0,0,0,0,0,0,0,10,80,0,0,0,0,0,0,0,0,0,0,0,0,0,62,124,0,0,0,0,0,0,0,0,0,0,0,0,0,38,100,0,0,0,0,0,0,0,0,0,0,0,0,0,58,92,0,0,0,0,0,0,0,0,0,0,0,0,0,10,81,128,0,0,0,0,0,0,0,0,0,0,0,1,214,109,64,0,0,0,0,0,0,0,0,0,0,0,1,86,99,126,0,0,0,0,0,0,0,0,0,0,0,127,102,124,3,255,255,255,255,255,255,255,255,255,255,255,192,30,127,252,0,0,0,0,0,0,0,0,0,0,0,127,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,1,0,0,106,0,1,0,0,0,0,0,0,22,2,1,0,1,81,25,10,10,0,80,24,10,10,0,78,0,33,0,1,0,127,255,255,255,255,255,255,255,255,248,128,0,28,32,0,0,0,255,255,252,128,0,16,32,0,0,62,255,255,252,128,0,16,56,0,0,67,253,255,124,128,0,24,6,0,0,64,224,63,188,128,0,96,3,0,1,192,253,248,12,128,0,192,1,62,6,1,253,255,236,128,7,192,1,67,140,0,192,31,220,128,8,112,6,64,136,0,251,127,188,128,8,24,13,192,136,0,235,63,124,128,8,0,6,1,134,0,219,94,252,128,15,4,12,0,123,1,247,125,252,128,1,131,200,0,48,0,239,122,252,128,3,12,24,0,62,2,220,127,0,128,2,12,30,0,225,60,255,255,252,128,3,6,59,1,129,131,255,255,252,128,15,255,224,0,1,131,255,255,252,128,30,128,112,2,15,6,255,255,252,128,58,128,48,60,24,63,255,253,252,128,57,128,108,131,12,96,199,125,220,128,57,128,15,131,4,64,212,28,84,128,58,124,8,6,15,96,198,189,212,128,29,3,248,63,250,124,220,29,128,128,29,1,252,120,29,2,199,112,92,128,14,135,252,72,29,0,148,23,84,128,14,125,239,112,14,135,199,119,84,128,7,29,232,160,14,124,251,247,84,128,7,102,67,0,7,29,192,112,76,128,7,153,184,176,7,102,251,247,40,128,23,102,37,88,7,153,128,63,240,128,63,153,222,128,23,102,255,255,252,128,103,102,34,40,63,152,255,255,252,127,255,255,255,255,255,255,255,255,248,108,1,0,0,104,0,1,0,0,0,0,0,0,22,2,1,0,1,1,25,10,10,0,0,24,10,10,0,78,0,33,0,1,0,127,255,255,255,255,255,255,255,255,248,128,21,123,255,162,0,0,255,255,252,128,19,143,30,36,0,0,255,255,252,128,11,56,3,148,0,0,255,255,252,128,12,98,16,204,0,0,128,56,4,128,10,129,32,60,0,0,238,255,188,128,13,62,15,220,0,0,192,124,4,128,15,97,48,252,0,0,251,255,188,128,14,223,255,124,0,0,128,56,4,128,15,255,127,254,0,0,219,126,236,128,30,225,49,46,0,0,192,126,236,128,14,139,8,15,128,0,219,120,4,128,124,13,28,15,192,0,128,62,236,129,252,15,226,15,224,0,251,253,236,143,251,31,255,31,255,224,128,59,236,151,249,127,95,207,255,156,255,255,252,163,248,127,255,131,255,163,255,255,252,199,248,60,15,143,255,96,255,255,252,139,248,56,231,139,254,224,248,59,252,139,126,185,183,163,255,64,251,251,4,147,249,161,177,167,255,192,192,112,116,150,252,252,166,207,255,192,223,123,116,147,255,51,248,159,253,32,192,123,116,135,191,56,209,191,255,208,223,113,172,172,127,187,255,127,255,80,192,114,172,159,255,255,255,255,222,216,251,251,220,139,255,255,255,255,240,72,128,59,172,134,231,255,255,255,251,198,251,251,116,136,63,255,255,255,247,6,251,248,252,147,191,255,255,255,198,18,255,255,252,142,71,255,207,255,160,74,255,255,252,132,112,255,239,126,1,18,255,255,252,127,255,255,255,255,255,255,255,255,248,108,1,0,0,107,0,1,0,0,0,0,0,0,22,2,1,0,1,81,61,10,10,0,80,60,10,10,0,78,0,33,0,1,0,127,255,255,255,255,255,255,255,255,248,129,0,0,0,128,0,0,255,255,252,129,1,0,0,136,0,0,255,255,252,128,1,0,0,176,128,0,255,255,252,128,0,0,224,16,15,128,255,252,28,128,0,1,16,64,51,224,192,61,220,128,0,2,240,0,193,192,255,252,28,128,20,35,153,49,1,130,255,245,212,128,20,32,202,71,131,4,255,244,20,128,16,0,122,91,222,32,224,119,244,224,0,0,126,227,240,0,255,240,132,128,2,184,127,131,224,0,255,254,188,144,27,194,152,3,192,0,255,240,132,136,30,69,140,3,192,0,255,246,180,128,158,165,12,3,128,0,128,22,180,129,188,26,14,3,128,0,255,255,252,128,11,20,6,3,128,0,255,255,252,128,92,8,6,3,0,0,255,255,252,128,26,48,7,7,0,0,128,30,252,129,227,32,7,14,0,0,191,223,124,254,32,64,6,28,0,0,160,80,4,254,92,192,6,120,0,127,187,223,252,255,37,128,134,240,8,255,160,91,236,255,191,0,135,192,31,228,187,219,236,255,90,1,143,192,31,255,186,221,220,255,102,1,15,240,127,255,187,93,220,247,236,3,30,184,112,8,128,29,188,215,248,78,63,140,112,253,191,223,188,231,255,248,228,7,254,80,128,16,4,206,255,255,196,111,115,186,255,255,252,200,255,255,196,63,254,255,255,255,252,191,193,255,255,247,224,96,255,255,252,127,255,255,255,255,255,255,255,255,248,108,1,0,0,105,0,1,0,0,0,0,0,0,22,2,1,0,1,1,61,10,10,0,0,60,10,10,0,78,0,33,0,1,0,127,255,255,255,255,255,255,255,255,248,254,0,31,224,0,0,0,255,255,252,254,48,63,128,32,0,192,255,255,252,159,51,126,0,190,3,128,255,255,252,135,123,248,15,224,6,0,245,250,4,131,255,224,0,188,0,0,128,58,244,129,255,0,7,228,0,0,213,96,4,128,0,0,4,188,0,2,192,122,220,128,0,0,7,228,0,30,213,122,84,128,2,0,4,188,0,224,192,120,84,128,3,224,7,248,7,128,224,226,4,128,0,60,3,200,12,0,238,250,220,128,0,2,2,56,24,0,224,250,84,128,124,3,3,200,0,3,238,249,84,134,6,0,2,56,0,63,224,227,4,137,195,128,3,200,3,255,255,255,252,183,240,48,0,3,255,127,255,255,252,199,248,255,255,255,253,255,255,255,252,255,254,127,227,254,126,30,220,125,252,252,31,243,254,251,252,60,221,120,140,128,7,243,252,121,252,120,140,125,236,128,0,0,0,0,0,240,209,29,236,128,0,24,0,12,1,224,213,80,12,184,0,124,0,60,3,193,193,29,188,207,192,103,224,103,227,131,158,245,180,251,32,189,144,125,151,5,208,20,52,142,33,71,16,167,22,3,220,245,132,141,226,134,241,70,254,7,218,177,252,191,103,31,179,159,190,11,134,214,4,242,42,57,21,57,28,22,255,255,252,230,74,115,37,115,60,44,255,255,252,255,148,127,202,127,248,28,255,255,252,127,255,255,255,255,255,255,255,255,248,82,1,0,0,8,0,1,0,0,0,0,0,159,0,16,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,128,0,0,0,128,0,0,8,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,0,128,0,0,11,252,0,0,0,0,0,0,0,0,0,0,2,136,64,0,0,159,240,0,10,6,0,0,0,0,0,0,0,0,0,0,2,169,240,0,0,129,0,0,10,5,0,0,0,0,0,0,0,0,0,0,2,157,16,0,0,129,0,0,10,115,128,0,0,0,0,0,0,0,0,0,2,137,240,0,0,129,0,0,10,152,128,0,0,0,0,0,0,0,0,0,2,191,16,0,0,191,248,0,10,24,128,0,0,0,0,0,0,0,0,0,2,137,240,0,0,129,0,0,10,48,128,0,0,0,0,0,0,0,0,0,2,157,88,0,0,130,128,0,10,96,128,0,0,0,0,0,0,0,0,0,2,153,80,0,0,130,128,0,10,0,128,0,0,0,0,0,0,0,0,0,2,169,32,0,0,132,64,0,10,96,128,0,0,0,0,0,0,0,0,0,2,137,80,0,0,136,32,0,10,0,128,0,0,0,0,0,0,0,0,0,2,137,136,0,0,176,24,0,11,255,128,0,0,0,0,0,0,0,0,0,2,128,0,0,0,128,0,0,8,0,0,0,0,0,0,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,82,1,0,0,15,0,1,0,0,0,0,0,12,0,16,0,10,0,15,0,25,128,48,192,48,192,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,48,192,48,192,25,128,15,0,2,0,6,0,62,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,6,0,63,192,31,0,33,128,64,192,96,192,96,192,0,192,1,128,1,128,3,0,4,0,8,0,16,64,32,64,64,64,127,192,127,192,30,0,35,0,97,128,97,128,97,128,1,128,3,0,14,0,1,128,0,128,0,192,96,192,96,192,96,192,33,128,31,0,1,128,3,128,3,128,5,128,9,128,9,128,17,128,33,128,33,128,65,128,127,224,1,128,1,128,1,128,1,128,7,224,63,192,63,192,32,0,32,0,32,0,32,0,47,0,49,128,32,192,0,192,0,192,96,192,96,192,65,128,33,128,31,0,7,128,24,192,48,192,48,0,32,0,96,0,103,128,104,192,112,96,96,96,96,96,96,96,32,96,48,64,24,192,15,0,31,224,63,224,48,64,32,128,32,128,0,128,1,0,1,0,2,0,2,0,2,0,6,0,6,0,6,0,6,0,6,0,31,128,48,192,96,96,96,96,96,96,112,64,60,192,15,0,51,128,32,192,96,96,96,96,96,96,96,96,48,192,15,128,15,0,48,128,48,192,96,64,96,96,96,96,96,96,96,224,49,96,30,96,0,96,0,192,0,192,48,128,49,128,30,0,200,0,0,0,103,0,1,0,0,0,0,0,0,0,1,1,0,0,83,69,10,10,0,69,0,19,0,1,0,127,255,255,255,255,255,255,255,240,192,0,0,0,0,0,0,0,8,255,255,255,255,255,255,255,255,232,255,191,255,255,255,255,255,255,232,255,31,255,192,255,255,255,255,232,255,15,252,14,127,255,255,255,232,255,27,252,198,127,191,255,193,232,255,40,126,4,255,176,255,28,232,254,1,190,140,254,135,120,196,232,252,65,190,129,252,186,124,4,232,240,197,190,15,252,160,252,29,232,254,197,191,207,253,178,252,217,232,254,220,127,207,253,116,254,129,232,254,61,255,207,255,96,254,49,232,255,125,255,207,254,111,255,255,232,255,253,255,207,254,127,255,255,232,255,253,255,255,255,255,255,255,232,255,255,255,255,255,255,255,255,248,127,255,255,255,255,255,255,255,240,200,0,0,0,100,0,1,0,0,0,0,0,0,0,1,1,0,0,6,44,10,10,0,69,0,19,0,1,0,127,255,255,255,255,255,255,255,240,192,0,0,0,0,0,0,0,8,255,255,255,255,255,255,255,255,232,255,255,255,255,255,255,255,207,232,255,63,255,255,255,247,255,103,232,255,19,255,131,255,55,255,15,232,252,39,255,51,254,11,254,47,232,248,15,254,1,255,99,255,15,232,252,172,121,135,252,7,255,15,232,253,33,255,47,254,153,255,39,232,248,5,248,19,253,68,254,15,232,252,77,250,127,249,39,56,119,232,249,13,254,1,251,15,254,27,232,224,45,252,113,255,111,254,137,232,253,125,253,115,255,79,253,12,104,255,125,251,131,255,3,251,223,40,255,253,247,191,252,125,255,7,232,255,255,255,255,255,255,255,127,248,127,255,255,255,255,255,255,255,240,182,0,0,0,55,0,1,0,0,0,0,0,8,0,8,0,10,0,0,24,36,60,231,153,165,231,0,24,36,60,231,189,165,231,0,36,60,231,189,153,165,231,0,24,36,189,231,153,165,231,24,36,60,66,255,153,165,231,0,24,36,255,165,189,165,231,0,24,36,231,189,231,165,231,0,24,36,189,231,189,129,255,24,36,126,165,153,165,165,255,24,36,102,189,231,189,165,231,8,0,8,0,1,0,231,231,255,36,36,255,231,231,8,0,8,0,1,0,16,40,56,68,254,146,170,238,8,0,8,0,1,0,60,36,36,231,129,129,129,255,8,0,8,0,1,0,24,36,66,255,66,90,90,126,8,0,8,0,1,0,24,36,60,66,126,129,129,255,8,0,8,0,1,0,60,66,193,161,161,161,98,60,144,0,0,0,68,0,5,0,33,0,0,0,31,32,17,30,16,20,19,7,8,12,11,15,28,23,29,21,27,24,14,18,25,26,0,0,0,0,0,0,0,0,0,0,0,19,10,28,1,16,20,25,21,12,26,17,27,31,14,18,24,32,23,11,15,29,13,30,0,0,0,0,0,0,0,0,0,0,11,13,18,19,27,32,31,16,5,8,14,0,25,21,6,30,10,20,12,1,15,17,0,0,0,0,0,0,0,0,0,0,0,12,18,19,32,25,1,7,13,0,5,4,26,10,27,6,11,31,23,30,15,14,17,21,16,20,0,0,0,0,0,0,0,0,132,0,0,0,11,0,43,0,4,0,192,0,124,185,140,100,115,165,119,166,141,123,123,183,141,123,143,110,123,176,121,101,121,182,132,126,130,164,138,111,119,156,149,125,119,137,138,120,124,189,147,170,123,176,124,189,139,110,145,141,151,114,123,183,150,164,119,162,118,104,137,173,129,183,145,148,148,110,113,184,129,146,123,176,122,99,144,101,134,166,131,133,118,157,124,151,140,172,113,164,138,111,149,179,143,157,154,165,140,172,180,101,135,113,151,153,142,103,121,101,124,113,144,144,148,110,126,188,117,189,113,104,0,0,0,0,0,144,0,0,0,33,0,1,0,0,0,0,0,44,0,21,0,1,0,0,0,0,0,0,0,127,255,255,255,255,224,64,0,0,0,0,32,64,32,0,0,0,32,70,120,0,0,96,32,71,96,0,1,224,32,79,32,0,1,192,32,75,224,0,0,128,32,67,176,0,1,240,32,64,224,0,1,224,32,71,192,0,15,128,32,68,248,0,15,192,32,79,200,0,1,32,32,77,200,0,3,24,32,66,176,0,6,14,32,68,128,0,8,7,32,64,128,0,0,0,32,64,128,0,0,0,32,64,0,0,0,0,32,127,255,255,255,255,224,0,0,0,0,0,0,138,0,0,0,9,0,1,0,0,0,0,0,12,0,12,0,5,0,0,0,4,0,68,64,32,128,14,0,17,0,209,96,17,0,14,0,32,128,68,64,4,0,0,0,0,0,0,0,14,0,17,0,32,192,116,160,135,32,128,16,128,16,127,224,0,0,0,0,0,0,63,192,32,0,32,0,63,192,32,0,32,0,63,192,32,0,32,0,32,0,0,0,14,0,17,0,32,192,116,160,135,32,128,16,128,16,127,224,0,0,18,64,36,128,0,0,4,0,14,0,14,0,31,0,31,0,63,128,63,128,127,192,127,192,255,224,255,224,47,114,111,109,47,100,97,116,46,108,105,98,0,47,114,111,109,47,102,111,110,116,46,98,105,110,0,47,100,97,116,97,47,100,97,116,46,108,105,98,0,47,100,97,116,97,47,0,123,32,103,111,72,111,109,101,40,41,59,32,125,0,123,32,108,99,100,70,108,117,115,104,66,117,102,102,101,114,40,36,48,41,59,32,125], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+358466);
/* memory initializer */ allocate([32,32,0,35,35,0,37,115,32,0,10,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,37,100,120,37,100,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+381785);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+385037);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}

var EMTSTACKTOP = getMemory(1048576);
var EMT_STACK_MAX = EMTSTACKTOP + 1048576;

var eb = getMemory(91104);
//assert(eb % 8 === 0);
__ATPRERUN__.push(function() {
  HEAPU8.set([140,6,201,0,0,0,0,0,2,193,0,0,255,0,0,0,2,194,0,0,255,255,0,0,2,195,0,0,16,1,0,0,1,191,0,0,136,196,0,0,0,192,196,0,136,196,0,0,25,196,196,64,137,196,0,0,1,180,0,0,1,177,1,0,1,184,1,0,1,196,0,1,82,167,196,0,1,196,1,0,135,173,0,0,0,196,167,0,0,186,173,0,0,7,186,0,1,196,0,0,45,196,196,7,136,0,0,0,19,197,0,194,135,196,1,0,197,0,0,0,1,6,255,255,0,159,6,0,137,192,0,0,139,159,0,0,0,23,186,0,102,27,23,2,0,32,186,0,102,37,32,3,0,40,186,0,25,186,40,6,1,196,128,1,82,45,196,0,1,196,128,1,82,50,196,0,1,196,128,1,82,59,196,0,1,196,200,0,3,196,59,196,25,185,196,100,0,71,186,0,19,196,27,193,0,180,196,0,0,79,180,0,0,88,186,0,19,196,79,194,27,196,196,5,3,186,88,196,1,179,0,0,0,91,179,0,19,196,91,193,19,197,2,193,19,198,1,193,4,197,197,198,56,196,196,197,8,1,0,0,119,0,29,0,0,117,179,0,19,196,117,193,19,197,1,193,3,196,196,197,27,196,196,5,3,196,71,196,102,141,196,3,0,143,179,0,1,196,200,0,3,196,50,196,19,197,143,193,95,196,197,141,0,153,179,0,19,197,153,193,19,196,1,193,3,197,197,196,27,197,197,5,3,197,71,197,102,161,197,2,0,162,179,0,19,197,162,193,95,185,197,161,0,163,179,0,25,197,163,1,41,197,197,24,42,197,197,24,0,179,197,0,119,0,221,255,1,179,0,0,0,164,179,0,19,197,164,193,19,196,37,193,54,197,197,196,148,1,0,0,119,0,65,0,0,165,186,0,78,166,165,0,19,197,166,193,0,187,197,0,0,168,186,0,102,169,168,2,19,197,169,193,0,178,197,0,0,170,186,0,102,171,170,5,19,197,171,193,0,182,197,0,0,172,187,0,19,197,172,194,28,197,197,8,38,197,197,255,19,197,197,194,0,183,197,0,0,174,187,0,19,197,174,194,30,197,197,8,38,197,197,255,33,197,197,0,121,197,6,0,0,175,183,0,25,197,175,1,41,197,197,16,42,197,197,16,0,183,197,0,0,176,178,0,0,8,183,0,19,197,8,194,19,196,176,194,5,9,197,196,19,196,9,194,0,183,196,0,0,10,182,0,0,11,183,0,19,196,11,194,19,197,10,194,25,197,197,1,5,12,196,197,19,197,12,194,0,183,197,0,0,13,183,0,19,197,13,194,25,197,197,6,19,197,197,194,0,183,197,0,0,14,186,0,0,15,179,0,19,197,15,193,41,197,197,2,97,45,197,14,0,16,183,0,0,17,186,0,19,197,16,194,3,186,17,197,0,18,179,0,25,197,18,1,41,197,197,24,42,197,197,24,0,179,197,0,119,0,187,255,1,181,0,0,0,19,181,0,0,190,19,0,19,197,3,193,38,197,197,1,32,197,197,1,121,197,7,0,135,20,2,0,19,197,20,193,46,197,197,193,200,2,0,0,1,191,14,0,119,0,6,2,1,179,0,0,0,21,179,0,0,22,181,0,19,197,21,193,19,196,22,193,56,197,197,196,232,2,0,0,119,0,148,0,0,24,179,0,19,197,24,193,90,25,185,197,19,197,25,193,32,197,197,1,121,197,121,0,19,197,3,193,38,197,197,2,33,197,197,2,121,197,116,0,0,26,179,0,19,197,26,193,19,196,1,193,3,197,197,196,27,197,197,5,3,197,71,197,102,28,197,4,19,197,28,193,41,197,197,2,94,29,45,197,78,30,29,0,19,197,30,193,0,187,197,0,0,31,179,0,19,197,31,193,19,196,1,193,3,197,197,196,27,197,197,5,3,197,71,197,102,33,197,4,19,197,33,193,41,197,197,2,94,34,45,197,102,35,34,2,19,197,35,193,0,178,197,0,0,36,179,0,19,197,36,193,19,196,1,193,3,197,197,196,27,197,197,5,90,38,71,197,19,197,4,193,19,196,38,193,3,197,197,196,19,197,197,193,0,188,197,0,0,39,179,0,19,197,39,193,19,196,1,193,3,197,197,196,27,197,197,5,3,197,71,197,102,41,197,1,19,197,5,193,19,196,41,193,3,197,197,196,19,197,197,193,0,189,197,0,0,42,189,0,1,197,128,0,19,196,42,193,49,197,197,196,16,4,0,0,0,43,178,0,0,44,189,0,19,197,43,194,19,196,44,193,21,196,193,196,25,196,196,1,4,197,197,196,19,197,197,194,0,178,197,0,1,189,0,0,0,46,189,0,0,47,178,0,19,197,46,193,19,196,47,194,3,197,197,196,36,197,197,96,121,197,5,0,0,48,178,0,19,197,48,194,0,52,197,0,119,0,5,0,0,49,189,0,1,197,96,0,19,196,49,193,4,52,197,196,19,196,52,194,0,51,196,0,0,178,51,0,0,53,178,0,19,196,53,194,1,197,128,0,47,196,196,197,220,4,0,0,0,54,178,0,1,196,1,0,19,197,54,194,25,197,197,1,47,196,196,197,220,4,0,0,0,55,188,0,0,56,189,0,0,57,188,0,0,58,187,0,0,60,189,0,0,61,178,0,82,62,195,0,19,197,57,193,19,198,58,194,3,197,197,198,26,197,197,1,19,197,197,193,19,198,60,193,19,199,61,194,3,198,198,199,26,198,198,1,19,198,198,193,1,199,0,0,1,200,4,0,135,196,3,0,55,56,197,198,199,62,200,0,1,177,1,0,0,63,179,0,19,196,63,193,90,64,185,196,19,196,64,193,25,196,196,1,33,196,196,1,121,196,9,0,0,65,179,0,19,196,65,193,90,66,185,196,19,196,65,193,26,200,66,1,41,200,200,24,42,200,200,24,95,185,196,200,0,67,179,0,25,200,67,1,41,200,200,24,42,200,200,24,0,179,200,0,119,0,103,255,0,68,177,0,19,200,68,193,32,200,200,1,121,200,117,0,1,179,0,0,0,69,179,0,0,70,190,0,19,200,69,193,19,196,70,193,56,200,200,196,100,5,0,0,119,0,109,0,0,72,179,0,19,200,72,193,90,73,185,200,19,200,73,193,25,200,200,1,33,200,200,1,121,200,96,0,0,74,179,0,19,200,74,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,75,200,4,19,200,75,193,41,200,200,2,94,76,45,200,78,77,76,0,19,200,77,193,0,187,200,0,0,78,179,0,19,200,78,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,80,200,4,19,200,80,193,41,200,200,2,94,81,45,200,102,82,81,2,19,200,82,193,0,178,200,0,0,83,179,0,19,200,83,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,84,200,4,19,200,84,193,41,200,200,2,94,85,45,200,102,86,85,5,19,200,86,193,0,182,200,0,0,87,179,0,19,200,87,193,19,196,1,193,3,200,200,196,27,200,200,5,90,89,71,200,19,200,4,193,19,196,89,193,3,200,200,196,19,200,200,193,0,188,200,0,0,90,179,0,19,200,90,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,92,200,1,19,200,5,193,19,196,92,193,3,200,200,196,19,200,200,193,0,189,200,0,0,93,182,0,0,94,188,0,0,95,189,0,0,96,187,0,0,97,178,0,0,98,179,0,19,200,98,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,99,200,4,19,200,99,193,41,200,200,2,94,100,45,200,82,101,195,0,19,200,93,194,32,200,200,1,121,200,8,0,19,196,96,193,19,199,97,193,25,198,100,6,135,200,4,0,94,95,196,199,198,101,0,0,119,0,8,0,19,198,96,193,19,199,97,193,25,196,100,6,135,200,5,0,94,95,198,199,196,101,0,0,119,0,1,0,0,102,179,0,25,200,102,1,41,200,200,24,42,200,200,24,0,179,200,0,119,0,142,255,0,103,184,0,19,200,103,193,32,200,200,1,121,200,123,0,0,104,190,0,19,200,104,193,25,200,200,1,19,200,200,193,0,179,200,0,0,105,179,0,0,106,181,0,19,200,105,193,19,196,106,193,56,200,200,196,84,7,0,0,119,0,109,0,0,107,179,0,19,200,107,193,90,108,185,200,19,200,108,193,25,200,200,1,33,200,200,1,121,200,96,0,0,109,179,0,19,200,109,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,110,200,4,19,200,110,193,41,200,200,2,94,111,45,200,78,112,111,0,19,200,112,193,0,187,200,0,0,113,179,0,19,200,113,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,114,200,4,19,200,114,193,41,200,200,2,94,115,45,200,102,116,115,2,19,200,116,193,0,178,200,0,0,118,179,0,19,200,118,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,119,200,4,19,200,119,193,41,200,200,2,94,120,45,200,102,121,120,5,19,200,121,193,0,182,200,0,0,122,179,0,19,200,122,193,19,196,1,193,3,200,200,196,27,200,200,5,90,123,71,200,19,200,4,193,19,196,123,193,3,200,200,196,19,200,200,193,0,188,200,0,0,124,179,0,19,200,124,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,125,200,1,19,200,5,193,19,196,125,193,3,200,200,196,19,200,200,193,0,189,200,0,0,126,182,0,0,127,188,0,0,128,189,0,0,129,187,0,0,130,178,0,0,131,179,0,19,200,131,193,19,196,1,193,3,200,200,196,27,200,200,5,3,200,71,200,102,132,200,4,19,200,132,193,41,200,200,2,94,133,45,200,82,134,195,0,19,200,126,194,32,200,200,1,121,200,8,0,19,196,129,193,19,199,130,193,25,198,133,6,135,200,4,0,127,128,196,199,198,134,0,0,119,0,8,0,19,198,129,193,19,199,130,193,25,196,133,6,135,200,5,0,127,128,198,199,196,134,0,0,119,0,1,0,0,135,179,0,25,200,135,1,41,200,200,24,42,200,200,24,0,179,200,0,119,0,142,255,0,136,181,0,0,190,136,0,0,137,184,0,19,200,137,193,32,200,200,1,121,200,3,0,1,191,50,0,119,0,20,0,0,138,177,0,19,200,138,193,32,200,200,1,121,200,3,0,1,191,50,0,119,0,14,0,1,200,1,0,134,140,0,0,204,62,1,0,200,3,0,0,19,200,140,193,33,200,200,0,121,200,7,0,19,200,3,193,38,200,200,1,33,200,200,0,121,200,3,0,1,191,53,0,119,0,92,0,32,200,191,50,121,200,7,0,1,191,0,0,82,139,195,0,135,200,6,0,139,0,0,0,1,184,0,0,1,177,0,0,0,142,181,0,1,200,200,0,3,200,50,200,19,196,142,193,90,144,200,196,1,200,1,0,19,196,144,193,49,200,200,196,228,9,0,0,0,145,181,0,1,200,200,0,3,200,50,200,19,196,145,193,90,146,200,196,1,200,200,0,3,200,50,200,19,196,145,193,26,199,146,1,41,199,199,24,42,199,199,24,95,200,196,199,0,147,181,0,1,199,200,0,3,199,50,199,19,196,147,193,90,148,199,196,19,199,148,193,36,199,199,1,121,199,8,0,0,149,181,0,19,199,149,193,19,196,1,193,3,199,199,196,19,196,2,193,15,160,199,196,119,0,2,0,1,160,0,0,0,150,181,0,120,160,2,0,119,0,7,0,25,196,150,1,41,196,196,24,42,196,196,24,0,181,196,0,1,184,1,0,119,0,232,255,19,196,2,193,19,199,150,193,19,200,1,193,3,199,199,200,56,196,196,199,100,10,0,0,119,0,16,254,1,179,0,0,0,151,179,0,0,152,181,0,19,196,151,193,19,199,152,193,56,196,196,199,132,10,0,0,119,0,14,0,0,154,179,0,19,196,154,193,90,155,185,196,1,196,1,0,19,199,155,193,54,196,196,199,184,10,0,0,0,156,179,0,25,196,156,1,41,196,196,24,42,196,196,24,0,179,196,0,119,0,237,255,0,157,179,0,0,158,181,0,19,196,158,193,19,199,157,193,47,196,196,199,216,10,0,0,1,191,66,0,119,0,2,0,119,0,242,253,32,196,191,14,121,196,6,0,0,6,20,0,0,159,6,0,137,192,0,0,139,159,0,0,119,0,14,0,32,196,191,53,121,196,6,0,0,6,140,0,0,159,6,0,137,192,0,0,139,159,0,0,119,0,7,0,32,196,191,66,121,196,5,0,1,6,255,255,0,159,6,0,137,192,0,0,139,159,0,0,1,196,0,0,139,196,0,0,140,1,181,0,0,0,0,0,2,174,0,0,255,0,0,0,2,175,0,0,76,1,0,0,2,176,0,0,255,255,0,0,1,170,0,0,136,177,0,0,0,171,177,0,136,177,0,0,25,177,177,32,137,177,0,0,1,177,128,1,82,1,177,0,1,177,128,1,82,36,177,0,1,177,132,1,82,75,177,0,0,165,75,0,102,150,0,1,0,157,165,0,19,177,150,174,1,178,0,0,95,157,177,178,1,178,136,1,82,2,178,0,0,165,2,0,1,163,10,0,102,10,0,1,0,19,163,0,19,178,19,176,19,177,10,174,5,24,178,177,19,177,24,176,0,163,177,0,1,177,136,1,82,33,177,0,0,165,33,0,0,37,163,0,0,46,165,0,19,177,37,176,3,165,46,177,1,169,152,13,25,173,169,20,1,177,0,0,83,169,177,0,25,169,169,1,54,177,169,173,236,11,0,0,102,64,0,3,1,177,61,14,19,178,64,174,27,178,178,31,3,177,177,178,102,81,177,1,0,86,165,0,78,91,86,0,82,100,175,0,19,177,91,174,26,177,177,1,27,177,177,15,3,177,100,177,102,111,177,1,1,178,2,0,1,179,15,0,135,177,7,0,178,179,36,0,19,177,64,174,90,133,36,177,1,177,146,13,19,179,133,174,25,179,179,110,19,179,179,176,19,179,179,174,83,177,179,0,1,179,146,13,19,177,133,174,25,177,177,110,19,177,177,176,42,177,177,8,107,179,1,177,102,148,0,2,135,149,8,0,64,148,0,0,1,177,145,13,83,177,149,0,19,179,111,174,26,179,179,1,19,179,179,174,134,177,0,0,36,72,1,0,179,64,0,0,1,177,56,14,78,151,177,0,1,177,56,14,78,152,177,0,19,177,81,174,19,179,151,174,25,179,179,1,45,177,177,179,224,14,0,0,19,177,111,174,19,179,152,174,25,179,179,1,52,177,177,179,80,14,0,0,1,177,144,13,1,179,0,0,83,177,179,0,1,179,61,14,19,177,64,174,27,177,177,31,3,179,179,177,103,179,179,23,1,177,61,14,19,178,64,174,27,178,178,31,3,177,177,178,25,177,177,23,103,177,177,1,41,177,177,8,20,179,179,177,0,162,179,0,1,179,148,13,19,177,162,174,83,179,177,0,1,177,148,13,42,179,162,8,107,177,1,179,103,179,0,6,25,177,0,6,103,177,177,1,41,177,177,8,20,179,179,177,0,3,179,0,1,179,150,13,19,177,3,174,83,179,177,0,1,177,150,13,42,179,3,8,107,177,1,179,1,166,0,0,0,4,166,0,19,179,4,174,34,179,179,10,120,179,2,0,119,0,37,0,135,5,9,0,64,1,0,0,0,167,5,0,135,179,10,0,0,6,167,0,1,179,4,0,1,177,2,0,1,178,155,255,1,180,93,0,134,7,0,0,160,32,0,0,1,6,179,177,178,180,0,0,19,180,7,174,53,180,174,180,204,13,0,0,119,0,20,0,19,180,7,174,90,8,1,180,0,9,166,0,1,180,152,13,19,178,9,174,19,177,8,174,25,177,177,1,19,177,177,174,95,180,178,177,19,177,7,174,90,11,1,177,135,177,11,0,64,11,0,0,0,12,166,0,25,177,12,1,41,177,177,24,42,177,177,24,0,166,177,0,119,0,216,255,0,13,165,0,1,177,152,13,25,169,177,10,0,172,13,0,25,173,169,10,78,177,172,0,83,169,177,0,25,169,169,1,25,172,172,1,54,177,169,173,44,14,0,0,134,177,0,0,44,98,1,0,119,0,136,2,1,166,0,0,0,153,166,0,19,177,153,174,34,177,177,10,120,177,2,0,119,0,24,0,0,154,166,0,0,155,165,0,19,177,154,174,90,156,155,177,41,177,156,24,42,177,177,24,33,177,177,0,121,177,10,0,0,158,166,0,0,159,165,0,19,177,158,174,90,160,159,177,19,178,160,174,26,178,178,1,19,178,178,174,135,177,12,0,64,178,0,0,0,161,166,0,25,177,161,1,41,177,177,24,42,177,177,24,0,166,177,0,119,0,229,255,134,177,0,0,24,77,1,0,111,0,0,0,137,171,0,0,1,177,1,0,139,177,0,0,119,0,100,2,19,177,111,174,19,178,152,174,25,178,178,1,45,177,177,178,172,19,0,0,41,177,81,24,42,177,177,24,33,177,177,0,120,177,41,0,1,166,0,0,0,14,166,0,19,177,14,174,34,177,177,10,120,177,2,0,119,0,24,0,0,15,166,0,0,16,165,0,19,177,15,174,90,17,16,177,41,177,17,24,42,177,177,24,33,177,177,0,121,177,10,0,0,18,166,0,0,20,165,0,19,177,18,174,90,21,20,177,19,178,21,174,26,178,178,1,19,178,178,174,135,177,12,0,64,178,0,0,0,22,166,0,25,177,22,1,41,177,177,24,42,177,177,24,0,166,177,0,119,0,229,255,1,177,61,14,19,178,64,174,27,178,178,31,3,177,177,178,107,177,1,111,134,177,0,0,24,77,1,0,111,0,0,0,137,171,0,0,1,177,1,0,139,177,0,0,1,177,56,14,78,23,177,0,19,177,81,174,19,178,23,174,25,178,178,1,45,177,177,178,76,16,0,0,1,166,0,0,0,25,166,0,19,177,25,174,34,177,177,10,120,177,2,0,119,0,27,0,0,26,166,0,0,27,165,0,19,177,26,174,90,28,27,177,41,177,28,24,42,177,177,24,33,177,177,0,121,177,10,0,0,29,166,0,0,30,165,0,19,177,29,174,90,31,30,177,19,178,31,174,26,178,178,1,19,178,178,174,135,177,12,0,64,178,0,0,134,177,0,0,24,77,1,0,111,0,0,0,0,32,166,0,25,177,32,1,41,177,177,24,42,177,177,24,0,166,177,0,119,0,226,255,137,171,0,0,1,177,1,0,139,177,0,0,1,177,144,13,1,178,1,0,83,177,178,0,103,178,0,6,25,177,0,6,103,177,177,1,41,177,177,8,20,178,178,177,0,34,178,0,1,178,148,13,19,177,34,174,83,178,177,0,1,177,148,13,42,178,34,8,107,177,1,178,1,178,61,14,19,177,64,174,27,177,177,31,3,178,178,177,103,178,178,23,1,177,61,14,19,180,64,174,27,180,180,31,3,177,177,180,25,177,177,23,103,177,177,1,41,177,177,8,20,178,178,177,0,35,178,0,1,178,150,13,19,177,35,174,83,178,177,0,1,177,150,13,42,178,35,8,107,177,1,178,0,38,165,0,1,169,152,13,0,172,38,0,25,173,169,10,78,178,172,0,83,169,178,0,25,169,169,1,25,172,172,1,54,178,169,173,232,16,0,0,135,39,9,0,64,1,0,0,0,167,39,0,0,40,167,0,41,178,40,24,42,178,178,24,33,178,178,0,121,178,161,0,1,164,0,0,1,164,0,0,0,41,164,0,0,42,167,0,19,178,41,174,19,177,42,174,26,177,177,1,54,178,178,177,72,17,0,0,119,0,100,0,0,43,164,0,19,178,43,174,25,178,178,1,19,178,178,174,0,166,178,0,0,44,166,0,0,45,167,0,0,47,164,0,19,178,44,174,19,177,45,174,54,178,178,177,124,17,0,0,119,0,82,0,19,178,47,174,90,48,1,178,82,49,175,0,19,178,48,174,27,178,178,15,3,178,49,178,103,178,178,10,19,177,48,174,27,177,177,15,3,177,49,177,25,177,177,10,103,177,177,1,41,177,177,8,20,178,178,177,0,50,178,0,0,51,166,0,19,178,51,174,90,52,1,178,82,53,175,0,19,178,52,174,27,178,178,15,3,178,53,178,103,178,178,10,19,177,52,174,27,177,177,15,3,177,53,177,25,177,177,10,103,177,177,1,41,177,177,8,20,178,178,177,0,54,178,0,19,178,50,176,19,177,54,176,47,178,178,177,64,18,0,0,0,55,166,0,19,178,55,174,90,56,1,178,0,168,56,0,0,57,164,0,19,178,57,174,90,58,1,178,0,59,166,0,19,178,59,174,95,1,178,58,0,60,168,0,0,61,164,0,19,178,61,174,95,1,178,60,0,62,167,0,19,178,62,174,26,178,178,1,90,63,1,178,82,65,175,0,19,178,63,174,27,178,178,15,3,178,65,178,103,178,178,10,19,177,63,174,27,177,177,15,3,177,65,177,25,177,177,10,103,177,177,1,41,177,177,8,20,178,178,177,0,66,178,0,41,178,66,16,42,178,178,16,33,178,178,0,120,178,6,0,0,67,167,0,19,178,67,174,26,178,178,1,19,178,178,174,0,167,178,0,0,68,166,0,25,178,68,1,41,178,178,24,42,178,178,24,0,166,178,0,119,0,168,255,25,178,47,1,41,178,178,24,42,178,178,24,0,164,178,0,119,0,150,255,0,69,167,0,41,178,69,24,42,178,178,24,33,178,178,0,120,178,11,0,78,70,1,0,1,178,152,13,19,177,70,174,25,177,177,1,19,177,177,174,107,178,10,177,78,71,1,0,135,177,11,0,64,71,0,0,119,0,37,0,0,72,167,0,1,177,10,0,19,178,72,174,47,177,177,178,40,19,0,0,1,167,10,0,1,166,0,0,0,73,166,0,0,74,167,0,19,177,73,174,19,178,74,174,54,177,177,178,72,19,0,0,119,0,23,0,0,76,166,0,19,177,76,174,90,77,1,177,135,177,11,0,64,77,0,0,0,78,166,0,19,177,78,174,90,79,1,177,0,80,166,0,1,177,152,13,19,178,80,174,25,178,178,10,19,180,79,174,25,180,180,1,19,180,180,174,95,177,178,180,0,82,166,0,25,180,82,1,41,180,180,24,42,180,180,24,0,166,180,0,119,0,228,255,134,180,0,0,44,98,1,0,119,0,49,1,41,180,81,24,42,180,180,24,33,180,180,0,120,180,41,0,1,166,0,0,0,83,166,0,19,180,83,174,34,180,180,10,120,180,2,0,119,0,24,0,0,84,166,0,0,85,165,0,19,180,84,174,90,87,85,180,41,180,87,24,42,180,180,24,33,180,180,0,121,180,10,0,0,88,166,0,0,89,165,0,19,180,88,174,90,90,89,180,19,178,90,174,26,178,178,1,19,178,178,174,135,180,12,0,64,178,0,0,0,92,166,0,25,180,92,1,41,180,180,24,42,180,180,24,0,166,180,0,119,0,229,255,1,180,61,14,19,178,64,174,27,178,178,31,3,180,180,178,107,180,1,111,134,180,0,0,24,77,1,0,111,0,0,0,137,171,0,0,1,180,1,0,139,180,0,0,19,180,81,174,19,178,111,174,45,180,180,178,248,20,0,0,1,166,0,0,0,93,166,0,19,180,93,174,34,180,180,10,120,180,2,0,119,0,24,0,0,94,166,0,0,95,165,0,19,180,94,174,90,96,95,180,41,180,96,24,42,180,180,24,33,180,180,0,121,180,10,0,0,97,166,0,0,98,165,0,19,180,97,174,90,99,98,180,19,178,99,174,26,178,178,1,19,178,178,174,135,180,12,0,64,178,0,0,0,101,166,0,25,180,101,1,41,180,180,24,42,180,180,24,0,166,180,0,119,0,229,255,134,180,0,0,24,77,1,0,111,0,0,0,137,171,0,0,1,180,1,0,139,180,0,0,0,102,165,0,1,169,152,13,0,172,102,0,25,173,169,10,78,180,172,0,83,169,180,0,25,169,169,1,25,172,172,1,54,180,169,173,8,21,0,0,135,103,9,0,64,1,0,0,0,167,103,0,0,104,167,0,41,180,104,24,42,180,180,24,33,180,180,0,121,180,158,0,1,164,0,0,1,164,0,0,0,105,164,0,0,106,167,0,19,180,105,174,19,178,106,174,26,178,178,1,54,180,180,178,104,21,0,0,119,0,100,0,0,107,164,0,19,180,107,174,25,180,180,1,19,180,180,174,0,166,180,0,0,108,166,0,0,109,167,0,0,110,164,0,19,180,108,174,19,178,109,174,54,180,180,178,156,21,0,0,119,0,82,0,19,180,110,174,90,112,1,180,82,113,175,0,19,180,112,174,27,180,180,15,3,180,113,180,103,180,180,10,19,178,112,174,27,178,178,15,3,178,113,178,25,178,178,10,103,178,178,1,41,178,178,8,20,180,180,178,0,114,180,0,0,115,166,0,19,180,115,174,90,116,1,180,82,117,175,0,19,180,116,174,27,180,180,15,3,180,117,180,103,180,180,10,19,178,116,174,27,178,178,15,3,178,117,178,25,178,178,10,103,178,178,1,41,178,178,8,20,180,180,178,0,118,180,0,19,180,114,176,19,178,118,176,47,180,180,178,96,22,0,0,0,119,166,0,19,180,119,174,90,120,1,180,0,168,120,0,0,121,164,0,19,180,121,174,90,122,1,180,0,123,166,0,19,180,123,174,95,1,180,122,0,124,168,0,0,125,164,0,19,180,125,174,95,1,180,124,0,126,167,0,19,180,126,174,26,180,180,1,90,127,1,180,82,128,175,0,19,180,127,174,27,180,180,15,3,180,128,180,103,180,180,10,19,178,127,174,27,178,178,15,3,178,128,178,25,178,178,10,103,178,178,1,41,178,178,8,20,180,180,178,0,129,180,0,41,180,129,16,42,180,180,16,33,180,180,0,120,180,6,0,0,130,167,0,19,180,130,174,26,180,180,1,19,180,180,174,0,167,180,0,0,131,166,0,25,180,131,1,41,180,180,24,42,180,180,24,0,166,180,0,119,0,168,255,25,180,110,1,41,180,180,24,42,180,180,24,0,164,180,0,119,0,150,255,0,132,167,0,41,180,132,24,42,180,180,24,33,180,180,0,120,180,8,0,78,134,1,0,1,180,152,13,107,180,10,134,78,135,1,0,135,180,11,0,64,135,0,0,119,0,37,0,0,136,167,0,1,180,10,0,19,178,136,174,47,180,180,178,60,23,0,0,1,167,10,0,1,166,0,0,0,137,166,0,0,138,167,0,19,180,137,174,19,178,138,174,54,180,180,178,92,23,0,0,119,0,23,0,0,139,166,0,19,180,139,174,90,140,1,180,135,180,11,0,64,140,0,0,0,141,166,0,19,180,141,174,90,142,1,180,0,143,166,0,1,180,152,13,19,178,143,174,25,178,178,10,19,177,142,174,25,177,177,1,19,177,177,174,95,180,178,177,0,144,166,0,25,177,144,1,41,177,177,24,42,177,177,24,0,166,177,0,119,0,228,255,1,177,144,13,1,178,2,0,83,177,178,0,103,178,0,6,25,177,0,6,103,177,177,1,41,177,177,8,20,178,178,177,0,145,178,0,1,178,148,13,19,177,145,174,83,178,177,0,1,177,148,13,42,178,145,8,107,177,1,178,1,178,61,14,19,177,64,174,27,177,177,31,3,178,178,177,103,178,178,23,1,177,61,14,19,180,64,174,27,180,180,31,3,177,177,180,25,177,177,23,103,177,177,1,41,177,177,8,20,178,178,177,0,146,178,0,1,178,150,13,19,177,146,174,83,178,177,0,1,177,150,13,42,178,146,8,107,177,1,178,19,177,111,174,26,177,177,1,19,177,177,174,19,180,81,174,26,180,180,1,19,180,180,174,134,178,0,0,52,74,1,0,177,180,0,0,134,178,0,0,44,98,1,0,1,178,137,13,78,147,178,0,134,178,0,0,152,62,0,0,64,147,0,0,137,171,0,0,1,178,1,0,139,178,0,0,140,3,125,0,0,0,0,0,2,116,0,0,255,0,0,0,2,117,0,0,255,255,0,0,2,118,0,0,114,13,0,0,2,119,0,0,113,13,0,0,1,114,0,0,136,120,0,0,0,115,120,0,136,120,0,0,25,120,120,32,137,120,0,0,0,3,1,0,1,120,111,13,1,121,0,0,83,120,121,0,78,88,0,0,1,121,112,13,83,121,88,0,102,97,0,2,83,118,97,0,102,4,0,1,83,119,4,0,102,12,0,3,1,121,115,13,83,121,12,0,78,14,118,0,1,121,112,13,78,23,121,0,19,121,14,116,19,120,23,116,4,121,121,120,28,121,121,6,38,121,121,255,19,121,121,116,0,107,121,0,1,121,115,13,78,41,121,0,78,47,119,0,19,121,41,116,19,120,47,116,4,121,121,120,28,121,121,12,38,121,121,255,19,121,121,116,0,105,121,0,135,66,13,0,2,0,0,0,19,121,107,116,7,121,66,121,38,121,121,255,19,121,121,116,0,106,121,0,1,108,0,0,19,121,105,116,19,120,106,116,47,121,121,120,140,25,0,0,0,87,3,0,0,108,87,0,1,121,112,13,78,89,121,0,78,90,119,0,78,91,118,0,1,121,115,13,78,92,121,0,19,120,89,116,26,120,120,3,19,120,120,116,19,122,90,116,26,122,122,3,19,122,122,116,19,123,91,116,25,123,123,2,19,123,123,116,19,124,92,116,25,124,124,2,19,124,124,116,135,121,14,0,120,122,123,124,1,121,112,13,78,93,121,0,78,94,119,0,78,95,118,0,1,121,115,13,78,96,121,0,19,124,93,116,26,124,124,3,19,124,124,116,19,123,94,116,26,123,123,3,19,123,123,116,19,122,95,116,25,122,122,2,19,122,122,116,19,120,96,116,25,120,120,2,19,120,120,116,135,121,15,0,124,123,122,120,19,121,105,116,19,120,106,116,47,121,121,120,68,27,0,0,78,98,118,0,78,99,119,0,78,100,118,0,1,121,115,13,78,101,121,0,19,120,98,116,25,120,120,2,19,120,120,116,19,122,99,116,26,122,122,3,19,122,122,116,19,123,100,116,25,123,123,6,19,123,123,116,19,124,101,116,25,124,124,2,19,124,124,116,135,121,14,0,120,122,123,124,78,102,118,0,78,103,119,0,78,5,118,0,1,121,115,13,78,6,121,0,19,124,102,116,25,124,124,2,19,124,124,116,19,123,103,116,26,123,123,3,19,123,123,116,19,122,5,116,25,122,122,6,19,122,122,116,19,120,6,116,25,120,120,2,19,120,120,116,135,121,15,0,124,123,122,120,78,7,118,0,78,8,119,0,78,9,118,0,1,121,115,13,78,10,121,0,19,120,7,116,25,120,120,2,19,120,120,116,19,122,8,116,26,122,122,1,19,122,122,116,19,123,9,116,25,123,123,6,19,123,123,116,135,121,15,0,120,122,123,10,0,11,108,0,19,121,106,116,19,123,11,116,19,122,105,116,3,123,123,122,47,121,121,123,68,27,0,0,19,121,106,116,19,123,105,116,4,121,121,123,19,121,121,116,0,108,121,0,0,13,108,0,19,121,13,116,0,109,121,0,0,15,109,0,19,121,15,117,19,123,107,116,5,16,121,123,19,123,16,117,0,109,123,0,1,123,112,13,78,17,123,0,78,18,119,0,0,19,109,0,19,121,19,117,3,121,2,121,135,123,16,0,17,18,121,0,78,20,119,0,0,21,3,0,0,22,108,0,19,123,20,116,19,121,21,116,19,122,22,116,4,121,121,122,27,121,121,12,3,123,123,121,19,123,123,116,0,110,123,0,1,123,112,13,78,24,123,0,0,25,110,0,78,26,118,0,0,27,110,0,19,121,27,116,25,121,121,12,19,121,121,116,135,123,17,0,24,25,26,121,78,28,119,0,0,113,28,0,1,104,1,0,19,123,105,116,19,121,106,116,47,123,123,121,88,29,0,0,0,29,104,0,41,123,29,24,42,123,123,24,33,123,123,0,121,123,69,0,78,30,118,0,0,31,113,0,78,32,118,0,0,33,113,0,19,121,30,116,25,121,121,3,19,121,121,116,19,122,32,116,25,122,122,5,19,122,122,116,19,120,33,116,25,120,120,2,19,120,120,116,135,123,18,0,121,31,122,120,78,34,118,0,0,35,113,0,19,120,34,116,25,120,120,4,19,120,120,116,19,122,35,116,25,122,122,1,19,122,122,116,1,121,0,0,135,123,19,0,120,122,121,0,0,36,3,0,19,123,36,116,76,123,123,0,58,111,123,0,58,37,111,0,19,123,106,116,26,123,123,1,76,123,123,0,66,111,37,123,58,38,111,0,1,123,115,13,78,39,123,0,78,40,119,0,78,42,119,0,19,123,39,116,19,121,40,116,4,123,123,121,26,123,123,3,76,123,123,0,65,123,38,123,19,121,42,116,76,121,121,0,63,123,123,121,75,123,123,0,19,123,123,116,0,113,123,0,78,43,118,0,0,44,113,0,78,45,118,0,0,46,113,0,19,121,43,116,25,121,121,3,19,121,121,116,19,122,45,116,25,122,122,5,19,122,122,116,19,120,46,116,25,120,120,2,19,120,120,116,135,123,15,0,121,44,122,120,1,104,0,0,78,48,118,0,0,49,113,0,78,50,118,0,0,51,113,0,19,120,48,116,25,120,120,3,19,120,120,116,19,122,50,116,25,122,122,5,19,122,122,116,19,121,51,116,25,121,121,2,19,121,121,116,135,123,17,0,120,49,122,121,1,112,0,0,25,121,115,14,134,123,0,0,224,95,1,0,121,0,0,0,102,52,115,14,19,123,52,116,33,123,123,5,120,123,156,255,1,123,112,13,78,53,123,0,0,54,110,0,78,55,118,0,0,56,110,0,19,121,56,116,25,121,121,12,19,121,121,116,135,123,17,0,53,54,55,121,25,123,115,14,103,123,123,1,25,121,115,14,25,121,121,1,103,121,121,1,41,121,121,8,20,123,123,121,0,57,123,0,19,123,57,117,1,122,34,0,1,121,7,0,138,123,122,121,244,29,0,0,200,30,0,0,240,29,0,0,240,29,0,0,240,29,0,0,124,31,0,0,132,31,0,0,119,0,102,0,0,58,3,0,41,121,58,24,42,121,121,24,33,121,121,0,120,121,19,0,19,121,106,116,26,121,121,1,19,121,121,116,0,3,121,0,19,121,106,116,19,122,105,116,4,121,121,122,19,121,121,116,0,108,121,0,0,59,108,0,19,121,59,116,19,122,107,116,5,60,121,122,19,122,60,117,0,109,122,0,1,112,1,0,1,104,1,0,119,0,79,0,0,61,3,0,41,122,61,24,42,122,122,24,33,122,122,0,121,122,7,0,0,62,3,0,19,122,62,116,26,122,122,1,19,122,122,116,0,3,122,0,1,104,1,0,0,63,3,0,0,64,108,0,19,122,63,116,19,121,64,116,47,122,122,121,196,30,0,0,0,65,108,0,19,122,65,116,26,122,122,1,19,122,122,116,0,108,122,0,0,67,109,0,19,122,67,117,19,121,107,116,4,122,122,121,19,122,122,117,0,109,122,0,1,112,1,0,119,0,49,0,0,68,3,0,19,122,68,116,19,121,106,116,26,121,121,1,45,122,122,121,248,30,0,0,1,3,0,0,1,108,0,0,1,109,0,0,1,112,1,0,1,104,1,0,119,0,37,0,0,69,3,0,19,122,69,116,19,121,106,116,26,121,121,1,47,122,122,121,40,31,0,0,0,70,3,0,19,122,70,116,25,122,122,1,19,122,122,116,0,3,122,0,1,104,1,0,0,71,3,0,0,72,108,0,19,122,105,116,19,121,71,116,19,120,72,116,4,121,121,120,49,122,122,121,120,31,0,0,0,73,108,0,19,122,73,116,25,122,122,1,19,122,122,116,0,108,122,0,0,74,109,0,19,122,74,117,19,121,107,116,3,122,122,121,19,122,122,117,0,109,122,0,1,112,1,0,119,0,4,0,1,114,26,0,119,0,37,0,119,0,36,0,0,76,112,0,41,123,76,24,42,123,123,24,33,123,123,0,121,123,9,0,1,123,112,13,78,77,123,0,78,78,119,0,0,79,109,0,19,122,79,117,3,122,2,122,135,123,16,0,77,78,122,0,78,80,119,0,0,81,3,0,0,82,108,0,19,123,80,116,19,122,81,116,19,121,82,116,4,122,122,121,27,122,122,12,3,123,123,122,19,123,123,116,0,110,123,0,1,123,112,13,78,83,123,0,0,84,110,0,78,85,118,0,0,86,110,0,19,122,86,116,25,122,122,12,19,122,122,116,135,123,17,0,83,84,85,122,119,0,246,254,32,123,114,26,121,123,17,0,1,123,111,13,1,122,1,0,83,123,122,0,1,122,112,13,1,123,0,0,83,122,123,0,1,123,0,0,83,119,123,0,1,123,159,255,83,118,123,0,1,123,115,13,1,122,95,0,83,123,122,0,0,75,3,0,137,115,0,0,139,75,0,0,1,3,255,255,1,122,111,13,1,123,1,0,83,122,123,0,1,123,112,13,1,122,0,0,83,123,122,0,1,122,0,0,83,119,122,0,1,122,159,255,83,118,122,0,1,122,115,13,1,123,95,0,83,122,123,0,0,75,3,0,137,115,0,0,139,75,0,0,140,6,135,0,0,0,0,0,2,128,0,0,255,0,0,0,1,126,0,0,136,129,0,0,0,127,129,0,136,129,0,0,25,129,129,32,137,129,0,0,0,67,2,0,0,89,3,0,0,95,4,0,0,98,5,0,41,129,1,24,42,129,129,24,33,129,129,0,120,129,5,0,1,6,255,255,0,88,6,0,137,127,0,0,139,88,0,0,0,114,95,0,0,10,67,0,19,129,114,128,19,130,10,128,4,129,129,130,25,129,129,1,26,129,129,2,19,129,129,128,0,125,129,0,0,32,98,0,0,37,89,0,19,129,32,128,19,130,37,128,4,129,129,130,25,129,129,1,26,129,129,2,28,129,129,12,38,129,129,255,26,129,129,1,19,129,129,128,0,119,129,0,0,59,119,0,19,129,1,128,19,130,59,128,47,129,129,130,100,33,0,0,0,119,1,0,0,77,89,0,0,83,119,0,19,129,77,128,19,130,83,128,27,130,130,12,3,129,129,130,25,129,129,12,19,129,129,128,0,98,129,0,0,90,67,0,0,91,89,0,0,92,95,0,0,93,98,0,19,130,93,128,25,130,130,1,19,130,130,128,135,129,15,0,90,91,92,130,0,94,67,0,19,129,94,128,25,129,129,1,19,129,129,128,0,67,129,0,0,96,89,0,19,129,96,128,25,129,129,1,19,129,129,128,0,89,129,0,0,97,95,0,19,129,97,128,26,129,129,1,19,129,129,128,0,95,129,0,1,124,0,0,1,121,0,0,1,123,0,0,1,130,0,0,107,127,8,130,1,122,1,0,0,99,122,0,41,130,99,24,42,130,130,24,33,130,130,0,121,130,94,0,0,100,67,0,0,101,89,0,0,102,95,0,0,103,98,0,135,130,14,0,100,101,102,103,0,104,123,0,25,130,127,8,19,129,104,128,90,105,130,129,0,106,67,0,0,107,89,0,135,108,20,0,105,106,107,125,0,109,123,0,25,130,127,8,19,129,109,128,25,129,129,1,95,130,129,108,1,120,0,0,0,110,120,0,0,111,119,0,19,129,110,128,19,130,111,128,54,129,129,130,128,34,0,0,119,0,34,0,0,112,120,0,19,129,1,128,19,130,112,128,56,129,129,130,4,35,0,0,0,113,124,0,0,115,120,0,19,129,113,128,19,130,115,128,3,129,129,130,90,116,0,129,0,117,123,0,25,129,127,8,19,130,117,128,90,118,129,130,0,7,67,0,0,8,89,0,0,9,120,0,19,130,8,128,19,131,9,128,27,131,131,12,3,130,130,131,25,130,130,12,19,130,130,128,135,129,21,0,116,118,7,130,125,0,0,0,0,11,120,0,25,129,11,1,41,129,129,24,42,129,129,24,0,120,129,0,119,0,217,255,0,12,67,0,0,13,89,0,0,14,121,0,0,15,124,0,0,16,67,0,0,17,89,0,0,18,121,0,0,19,124,0,19,130,13,128,19,131,14,128,19,132,15,128,4,131,131,132,25,131,131,1,27,131,131,12,3,130,130,131,19,130,130,128,19,131,16,128,25,131,131,48,26,131,131,1,19,131,131,128,19,132,17,128,19,133,18,128,19,134,19,128,4,133,133,134,25,133,133,1,27,133,133,12,3,132,132,133,25,132,132,12,26,132,132,1,19,132,132,128,135,129,17,0,12,130,131,132,1,122,0,0,25,132,127,4,134,129,0,0,224,95,1,0,132,0,0,0,102,20,127,4,19,129,20,128,32,129,129,5,120,129,2,0,119,0,150,255,25,129,127,4,103,129,129,1,25,132,127,4,25,132,132,1,103,132,132,1,41,132,132,8,20,129,129,132,0,21,129,0,2,129,0,0,255,255,0,0,19,129,21,129,1,132,32,0,1,131,9,0,138,129,132,131,12,36,0,0,116,36,0,0,232,36,0,0,240,36,0,0,248,36,0,0,56,37,0,0,8,36,0,0,120,37,0,0,128,37,0,0,119,0,126,255,0,22,121,0,41,132,22,24,42,132,132,24,33,132,132,0,121,132,20,0,0,23,121,0,0,24,119,0,19,132,23,128,19,131,24,128,47,132,132,131,64,36,0,0,1,121,1,0,119,0,9,0,0,25,119,0,0,26,121,0,19,132,26,128,19,131,25,128,26,131,131,1,4,132,132,131,19,132,132,128,0,121,132,0,1,122,1,0,1,126,19,0,119,0,72,0,1,126,19,0,119,0,70,0,0,50,121,0,19,132,50,128,19,131,1,128,26,131,131,2,47,132,132,131,224,36,0,0,0,51,119,0,0,52,121,0,19,132,52,128,19,131,51,128,26,131,131,1,3,132,132,131,19,132,132,128,0,121,132,0,0,53,121,0,19,132,1,128,26,132,132,1,19,131,53,128,49,132,132,131,212,36,0,0,19,132,1,128,26,132,132,2,19,132,132,128,0,121,132,0,1,122,1,0,1,126,27,0,119,0,43,0,1,126,27,0,119,0,41,0,1,126,19,0,119,0,39,0,1,126,27,0,119,0,37,0,0,80,123,0,25,132,127,8,19,131,80,128,90,81,132,131,41,132,81,24,42,132,132,24,33,132,132,0,120,132,2,0,119,0,58,255,0,82,123,0,19,132,82,128,26,132,132,1,19,132,132,128,0,123,132,0,1,122,1,0,119,0,51,255,0,84,123,0,25,132,127,8,19,131,84,128,25,131,131,1,90,85,132,131,19,132,85,128,34,132,132,13,120,132,2,0,119,0,42,255,0,86,123,0,19,132,86,128,25,132,132,1,19,132,132,128,0,123,132,0,1,122,1,0,119,0,35,255,1,126,35,0,119,0,191,0,1,126,36,0,119,0,189,0,32,129,126,19,121,129,88,0,1,126,0,0,0,27,121,0,41,129,27,24,42,129,129,24,33,129,129,0,120,129,2,0,119,0,22,255,0,28,67,0,0,29,89,0,0,30,121,0,0,31,124,0,0,33,67,0,0,34,89,0,0,35,121,0,0,36,124,0,19,132,29,128,19,131,30,128,19,130,31,128,4,131,131,130,25,131,131,1,27,131,131,12,3,132,132,131,19,132,132,128,19,131,33,128,25,131,131,48,26,131,131,1,19,131,131,128,19,130,34,128,19,133,35,128,19,134,36,128,4,133,133,134,25,133,133,1,27,133,133,12,3,130,130,133,25,130,130,12,26,130,130,1,19,130,130,128,135,129,17,0,28,132,131,130,0,38,121,0,19,129,38,128,26,129,129,1,19,129,129,128,0,121,129,0,0,39,121,0,0,40,124,0,19,129,39,128,19,130,40,128,47,129,129,130,104,38,0,0,0,41,121,0,0,124,41,0,1,122,1,0,119,0,231,254,0,42,67,0,0,43,89,0,0,44,121,0,0,45,124,0,0,46,67,0,0,47,89,0,0,48,121,0,0,49,124,0,19,130,43,128,19,131,44,128,19,132,45,128,4,131,131,132,25,131,131,1,27,131,131,12,3,130,130,131,19,130,130,128,19,131,46,128,25,131,131,48,26,131,131,1,19,131,131,128,19,132,47,128,19,133,48,128,19,134,49,128,4,133,133,134,25,133,133,1,27,133,133,12,3,132,132,133,25,132,132,12,26,132,132,1,19,132,132,128,135,129,17,0,42,130,131,132,119,0,198,254,32,129,126,27,121,129,196,254,1,126,0,0,0,54,121,0,19,129,54,128,19,132,1,128,26,132,132,1,54,129,129,132,20,39,0,0,119,0,188,254,0,55,67,0,0,56,89,0,0,57,121,0,0,58,124,0,0,60,67,0,0,61,89,0,0,62,121,0,0,63,124,0,19,132,56,128,19,131,57,128,19,130,58,128,4,131,131,130,25,131,131,1,27,131,131,12,3,132,132,131,19,132,132,128,19,131,60,128,25,131,131,48,26,131,131,1,19,131,131,128,19,130,61,128,19,133,62,128,19,134,63,128,4,133,133,134,25,133,133,1,27,133,133,12,3,130,130,133,25,130,130,12,26,130,130,1,19,130,130,128,135,129,17,0,55,132,131,130,0,64,121,0,19,129,64,128,25,129,129,1,19,129,129,128,0,121,129,0,0,65,121,0,0,66,124,0,0,68,119,0,19,129,66,128,19,130,68,128,3,129,129,130,19,130,65,128,49,129,129,130,244,39,0,0,0,69,121,0,0,70,119,0,19,129,69,128,25,129,129,1,19,130,70,128,4,129,129,130,19,129,129,128,0,124,129,0,1,122,1,0,119,0,132,254,0,71,67,0,0,72,89,0,0,73,121,0], eb + 0);
  HEAPU8.set([0,74,124,0,0,75,67,0,0,76,89,0,0,78,121,0,0,79,124,0,19,130,72,128,19,131,73,128,19,132,74,128,4,131,131,132,25,131,131,1,27,131,131,12,3,130,130,131,19,130,130,128,19,131,75,128,25,131,131,48,26,131,131,1,19,131,131,128,19,132,76,128,19,133,78,128,19,134,79,128,4,133,133,134,25,133,133,1,27,133,133,12,3,132,132,133,25,132,132,12,26,132,132,1,19,132,132,128,135,129,17,0,71,130,131,132,119,0,99,254,32,129,126,35,121,129,7,0,0,87,121,0,0,6,87,0,0,88,6,0,137,127,0,0,139,88,0,0,119,0,7,0,32,129,126,36,121,129,5,0,1,6,255,255,0,88,6,0,137,127,0,0,139,88,0,0,1,129,0,0,139,129,0,0,140,1,116,0,0,0,0,0,2,104,0,0,255,0,0,0,2,105,0,0,76,1,0,0,2,106,0,0,255,255,0,0,2,107,0,0,56,14,0,0,2,108,0,0,61,14,0,0,2,109,0,0,0,1,0,0,2,110,0,0,60,14,0,0,1,102,0,0,136,111,0,0,0,103,111,0,136,111,0,0,25,111,111,32,137,111,0,0,1,100,0,0,135,111,10,0,1,111,128,1,82,1,111,0,1,111,128,1,82,39,111,0,1,111,128,1,82,65,111,0,25,93,65,40,135,73,22,0,30,111,73,4,38,111,111,255,19,111,111,104,0,99,111,0,102,2,0,1,82,11,105,0,19,111,2,104,27,111,111,15,3,111,11,111,102,22,111,1,82,37,105,0,19,111,2,104,27,111,111,15,3,111,37,111,102,44,111,4,0,49,99,0,19,111,49,104,1,112,1,0,1,113,3,0,138,111,112,113,152,41,0,0,220,45,0,0,92,46,0,0,119,0,82,1,1,99,0,0,135,55,22,0,1,113,150,0,8,113,55,113,38,113,113,255,19,113,113,104,0,100,113,0,0,64,100,0,19,113,64,104,19,112,44,104,47,113,113,112,216,45,0,0,0,66,100,0,19,113,66,104,30,113,113,2,38,113,113,255,1,112,0,0,1,115,2,0,138,113,112,115,240,41,0,0,244,41,0,0,119,0,60,1,119,0,81,0,102,18,0,2,135,19,23,0,18,1,0,0,0,98,19,0,0,20,98,0,41,112,20,24,42,112,112,24,33,112,112,0,120,112,2,0,119,0,49,1,135,21,22,0,0,23,98,0,19,112,23,104,8,112,21,112,38,112,112,255,19,112,112,104,0,101,112,0,0,24,101,0,19,112,24,104,90,25,1,112,0,97,25,0,0,26,97,0,19,112,26,104,0,94,112,0,0,27,94,0,19,112,27,106,27,112,112,3,19,112,112,106,0,94,112,0,0,28,94,0,19,112,28,106,25,112,112,1,19,112,112,106,0,94,112,0,78,29,110,0,82,30,109,0,1,112,67,0,135,31,0,0,112,29,30,0,0,96,31,0,0,32,94,0,0,33,96,0,19,112,32,106,90,34,33,112,0,95,34,0,0,35,95,0,41,112,35,24,42,112,112,24,33,112,112,0,121,112,8,0,0,36,95,0,19,112,36,104,26,112,112,1,19,114,2,104,52,112,112,114,216,42,0,0,119,0,2,1,78,38,107,0,19,112,22,104,19,114,38,104,25,114,114,1,45,112,112,114,36,43,0,0,1,114,64,0,1,115,99,0,135,112,24,0,114,115,39,0,0,40,97,0,135,112,25,0,40,93,0,0,135,112,26,0,39,93,0,0,134,112,0,0,24,78,1,0,2,39,0,0,1,99,1,0,0,41,97,0,135,112,27,0,41,0,0,0,119,0,235,0,102,67,0,2,135,68,28,0,67,1,0,0,0,98,68,0,0,69,98,0,41,113,69,24,42,113,113,24,33,113,113,0,121,113,226,0,135,70,22,0,0,71,98,0,19,113,71,104,8,113,70,113,38,113,113,255,19,113,113,104,0,101,113,0,0,72,101,0,19,113,72,104,90,74,1,113,0,97,74,0,0,75,97,0,19,113,75,104,0,94,113,0,0,76,94,0,19,113,76,106,27,113,113,3,19,113,113,106,0,94,113,0,0,77,94,0,19,113,77,106,25,113,113,1,19,113,113,106,0,94,113,0,78,78,110,0,82,79,109,0,1,113,63,0,135,80,0,0,113,78,79,0,0,96,80,0,0,81,94,0,0,82,96,0,19,113,81,106,90,83,82,113,0,95,83,0,1,100,0,0,0,84,95,0,19,113,84,104,26,113,113,1,19,112,2,104,45,113,113,112,76,44,0,0,1,100,1,0,0,85,97,0,82,86,105,0,19,113,85,104,27,113,113,15,3,113,86,113,107,113,1,22,135,87,22,0,0,88,97,0,82,89,105,0,19,113,88,104,27,113,113,15,3,113,89,113,30,112,87,30,38,112,112,255,25,112,112,70,19,112,112,104,107,113,5,112,119,0,37,0,0,90,95,0,41,112,90,24,42,112,112,24,33,112,112,0,120,112,32,0,135,91,22,0,30,112,91,110,38,112,112,255,19,112,112,104,0,100,112,0,0,92,100,0,19,112,92,104,19,113,44,104,47,112,112,113,212,44,0,0,1,100,1,0,0,3,97,0,82,4,105,0,19,112,3,104,27,112,112,15,3,112,4,112,107,112,1,22,135,5,22,0,0,6,97,0,82,7,105,0,19,112,6,104,27,112,112,15,3,112,7,112,30,113,5,30,38,113,113,255,25,113,113,70,19,113,113,104,107,112,5,113,119,0,3,0,1,100,2,0,119,0,1,0,78,8,107,0,19,113,22,104,19,112,8,104,25,112,112,1,45,113,113,112,216,45,0,0,1,99,1,0,0,9,100,0,41,113,9,24,42,113,113,24,33,113,113,0,120,113,9,0,1,112,64,0,1,115,100,0,135,113,24,0,112,115,39,0,134,113,0,0,24,78,1,0,2,39,0,0,119,0,109,0,1,115,64,0,1,112,99,0,135,113,24,0,115,112,39,0,0,10,97,0,135,113,29,0,10,93,0,0,135,113,26,0,39,93,0,0,134,113,0,0,24,78,1,0,2,39,0,0,0,12,100,0,19,113,12,104,32,113,113,1,121,113,9,0,135,13,22,0,1,113,134,0,30,112,13,4,38,112,112,255,3,113,113,112,19,113,113,104,0,100,113,0,119,0,12,0,0,14,100,0,19,113,14,104,32,113,113,2,121,113,8,0,135,15,22,0,1,113,138,0,30,112,15,4,38,112,112,255,3,113,113,112,19,113,113,104,0,100,113,0,0,16,100,0,1,112,64,0,135,113,24,0,112,16,39,0,0,17,97,0,134,113,0,0,24,78,1,0,17,39,0,0,119,0,65,0,135,42,22,0,19,113,44,104,41,113,113,1,8,113,42,113,38,113,113,255,25,113,113,10,19,113,113,104,0,100,113,0,0,43,100,0,102,45,0,2,19,113,45,104,27,113,113,31,3,113,108,113,25,46,113,21,79,113,46,0,103,112,46,1,41,112,112,8,20,113,113,112,0,47,113,0,19,113,47,106,19,112,43,104,3,113,113,112,19,113,113,106,19,113,113,104,83,46,113,0,19,112,47,106,19,115,43,104,3,112,112,115,19,112,112,106,42,112,112,8,107,46,1,112,119,0,33,0,135,48,22,0,19,112,44,104,41,112,112,1,8,112,48,112,38,112,112,255,25,112,112,10,19,112,112,104,0,100,112,0,0,50,100,0,102,51,0,2,19,112,51,104,27,112,112,31,3,112,108,112,25,52,112,23,79,112,52,0,103,113,52,1,41,113,113,8,20,112,112,113,0,53,112,0,19,112,53,106,19,113,50,104,3,112,112,113,19,112,112,106,19,112,112,104,83,52,112,0,19,113,53,106,19,114,50,104,3,113,113,114,19,113,113,106,42,113,113,8,107,52,1,113,119,0,1,0,78,54,107,0,19,111,22,104,19,112,54,104,25,112,112,1,52,111,111,112,24,47,0,0,0,60,0,0,25,61,60,2,78,62,61,0,0,63,2,0,135,111,12,0,62,63,0,0,137,103,0,0,1,111,1,0,139,111,0,0,0,56,99,0,19,111,56,104,32,111,111,1,121,111,10,0,0,60,0,0,25,61,60,2,78,62,61,0,0,63,2,0,135,111,12,0,62,63,0,0,137,103,0,0,1,111,1,0,139,111,0,0,0,57,99,0,41,111,57,24,42,111,111,24,33,111,111,0,121,111,16,0,0,58,99,0,1,112,64,0,19,113,58,104,25,113,113,100,19,113,113,104,135,111,24,0,112,113,39,0,0,59,100,0,19,113,59,104,1,112,10,0,135,111,30,0,113,93,112,0,135,111,26,0,39,93,0,0,119,0,5,0,1,112,64,0,1,113,101,0,135,111,24,0,112,113,39,0,134,111,0,0,24,78,1,0,2,39,0,0,0,60,0,0,25,61,60,2,78,62,61,0,0,63,2,0,135,111,12,0,62,63,0,0,137,103,0,0,1,111,1,0,139,111,0,0,140,6,128,0,0,0,0,0,2,120,0,0,255,0,0,0,1,118,0,0,136,121,0,0,0,119,121,0,136,121,0,0,25,121,121,32,137,121,0,0,0,70,2,0,0,84,3,0,0,89,4,0,0,93,5,0,41,121,1,24,42,121,121,24,33,121,121,0,120,121,5,0,1,6,255,255,0,82,6,0,137,119,0,0,139,82,0,0,0,108,89,0,0,13,70,0,19,121,108,120,19,122,13,120,4,121,121,122,25,121,121,1,19,121,121,120,0,117,121,0,0,29,93,0,0,35,84,0,19,121,29,120,19,122,35,120,4,121,121,122,25,121,121,1,28,121,121,12,38,121,121,255,26,121,121,1,19,121,121,120,0,111,121,0,0,55,111,0,19,121,1,120,19,122,55,120,47,121,121,122,152,48,0,0,0,111,1,0,0,73,84,0,0,80,111,0,19,121,73,120,19,122,80,120,27,122,122,12,3,121,121,122,25,121,121,12,19,121,121,120,0,93,121,0,0,83,70,0,0,85,84,0,0,86,89,0,0,87,93,0,19,122,87,120,25,122,122,1,19,122,122,120,135,121,15,0,83,85,86,122,0,88,70,0,19,121,88,120,25,121,121,1,19,121,121,120,0,70,121,0,0,90,84,0,19,121,90,120,25,121,121,1,19,121,121,120,0,84,121,0,0,91,89,0,19,121,91,120,26,121,121,1,19,121,121,120,0,89,121,0,1,116,0,0,1,113,0,0,1,115,0,0,1,122,0,0,107,119,8,122,1,114,1,0,0,92,114,0,41,122,92,24,42,122,122,24,33,122,122,0,121,122,102,0,0,94,70,0,0,95,84,0,0,96,89,0,0,97,84,0,0,98,111,0,19,121,97,120,19,123,98,120,27,123,123,12,3,121,121,123,25,121,121,12,26,121,121,1,19,121,121,120,135,122,14,0,94,95,96,121,0,99,115,0,25,122,119,8,19,121,99,120,90,100,122,121,0,101,70,0,0,102,84,0,135,103,31,0,100,101,102,117,0,104,115,0,25,122,119,8,19,121,104,120,25,121,121,1,95,122,121,103,1,112,0,0,0,105,112,0,0,106,111,0,19,121,105,120,19,122,106,120,54,121,121,122,212,49,0,0,119,0,34,0,0,107,112,0,19,121,1,120,19,122,107,120,56,121,121,122,88,50,0,0,0,109,116,0,0,110,112,0,19,121,109,120,19,122,110,120,3,121,121,122,90,7,0,121,0,8,115,0,25,121,119,8,19,122,8,120,90,9,121,122,0,10,70,0,0,11,84,0,0,12,112,0,19,122,11,120,19,123,12,120,27,123,123,12,3,122,122,123,25,122,122,12,19,122,122,120,135,121,32,0,7,9,10,122,117,0,0,0,0,14,112,0,25,121,14,1,41,121,121,24,42,121,121,24,0,112,121,0,119,0,217,255,0,15,70,0,0,16,84,0,0,17,113,0,0,18,116,0,0,19,70,0,0,20,84,0,0,21,113,0,0,22,116,0,19,122,16,120,19,123,17,120,19,124,18,120,4,123,123,124,25,123,123,1,27,123,123,12,3,122,122,123,19,122,122,120,19,123,19,120,25,123,123,60,26,123,123,1,19,123,123,120,19,124,20,120,19,125,21,120,19,126,22,120,4,125,125,126,25,125,125,1,27,125,125,12,3,124,124,125,25,124,124,12,26,124,124,1,19,124,124,120,135,121,17,0,15,122,123,124,1,114,0,0,25,124,119,4,134,121,0,0,224,95,1,0,124,0,0,0,102,23,119,4,19,121,23,120,32,121,121,5,120,121,2,0,119,0,142,255,25,121,119,4,103,121,121,1,25,124,119,4,25,124,124,1,103,124,124,1,41,124,124,8,20,121,121,124,0,24,121,0,2,121,0,0,255,255,0,0,19,121,24,121,1,124,34,0,1,123,7,0,138,121,124,123,88,51,0,0,176,52,0,0,48,54,0,0,112,54,0,0,84,51,0,0,176,54,0,0,184,54,0,0,119,0,120,255,0,25,113,0,41,124,25,24,42,124,124,24,33,124,124,0,120,124,2,0,119,0,114,255,0,26,70,0,0,27,84,0,0,28,113,0,0,30,116,0,0,31,70,0,0,32,84,0,0,33,113,0,0,34,116,0,19,123,27,120,19,122,28,120,19,125,30,120,4,122,122,125,25,122,122,1,27,122,122,12,3,123,123,122,19,123,123,120,19,122,31,120,25,122,122,60,26,122,122,1,19,122,122,120,19,125,32,120,19,126,33,120,19,127,34,120,4,126,126,127,25,126,126,1,27,126,126,12,3,125,125,126,25,125,125,12,26,125,125,1,19,125,125,120,135,124,17,0,26,123,122,125,0,36,113,0,19,124,36,120,26,124,124,1,19,124,124,120,0,113,124,0,0,37,113,0,0,38,116,0,19,124,37,120,19,125,38,120,47,124,124,125,44,52,0,0,0,39,113,0,0,116,39,0,1,114,1,0,119,0,67,255,0,40,70,0,0,41,84,0,0,42,113,0,0,43,116,0,0,44,70,0,0,45,84,0,0,46,113,0,0,47,116,0,19,125,41,120,19,122,42,120,19,123,43,120,4,122,122,123,25,122,122,1,27,122,122,12,3,125,125,122,19,125,125,120,19,122,44,120,25,122,122,60,26,122,122,1,19,122,122,120,19,123,45,120,19,126,46,120,19,127,47,120,4,126,126,127,25,126,126,1,27,126,126,12,3,123,123,126,25,123,123,12,26,123,123,1,19,123,123,120,135,124,17,0,40,125,122,123,119,0,34,255,0,48,113,0,19,124,48,120,19,123,1,120,26,123,123,1,54,124,124,123,204,52,0,0,119,0,27,255,0,49,70,0,0,50,84,0,0,51,113,0,0,52,116,0,0,53,70,0,0,54,84,0,0,56,113,0,0,57,116,0,19,123,50,120,19,122,51,120,19,125,52,120,4,122,122,125,25,122,122,1,27,122,122,12,3,123,123,122,19,123,123,120,19,122,53,120,25,122,122,60,26,122,122,1,19,122,122,120,19,125,54,120,19,126,56,120,19,127,57,120,4,126,126,127,25,126,126,1,27,126,126,12,3,125,125,126,25,125,125,12,26,125,125,1,19,125,125,120,135,124,17,0,49,123,122,125,0,58,113,0,19,124,58,120,25,124,124,1,19,124,124,120,0,113,124,0,0,59,113,0,0,60,116,0,0,61,111,0,19,124,60,120,19,125,61,120,3,124,124,125,19,125,59,120,49,124,124,125,172,53,0,0,0,62,113,0,0,63,111,0,19,124,62,120,25,124,124,1,19,125,63,120,4,124,124,125,19,124,124,120,0,116,124,0,1,114,1,0,119,0,227,254,0,64,70,0,0,65,84,0,0,66,113,0,0,67,116,0,0,68,70,0,0,69,84,0,0,71,113,0,0,72,116,0,19,125,65,120,19,122,66,120,19,123,67,120,4,122,122,123,25,122,122,1,27,122,122,12,3,125,125,122,19,125,125,120,19,122,68,120,25,122,122,60,26,122,122,1,19,122,122,120,19,123,69,120,19,126,71,120,19,127,72,120,4,126,126,127,25,126,126,1,27,126,126,12,3,123,123,126,25,123,123,12,26,123,123,1,19,123,123,120,135,124,17,0,64,125,122,123,119,0,194,254,0,74,115,0,25,124,119,8,19,123,74,120,90,75,124,123,41,124,75,24,42,124,124,24,33,124,124,0,120,124,2,0,119,0,185,254,0,76,115,0,19,124,76,120,26,124,124,1,19,124,124,120,0,115,124,0,1,114,1,0,119,0,178,254,0,77,115,0,25,124,119,8,19,123,77,120,25,123,123,1,90,78,124,123,19,124,78,120,34,124,124,5,120,124,2,0,119,0,169,254,0,79,115,0,19,124,79,120,25,124,124,1,19,124,124,120,0,115,124,0,1,114,1,0,119,0,162,254,1,118,26,0,119,0,3,0,1,118,27,0,119,0,1,0,32,121,118,26,121,121,7,0,0,81,113,0,0,6,81,0,0,82,6,0,137,119,0,0,139,82,0,0,119,0,7,0,32,121,118,27,121,121,5,0,1,6,255,255,0,82,6,0,137,119,0,0,139,82,0,0,1,121,0,0,139,121,0,0,140,0,104,0,0,0,0,0,2,94,0,0,255,0,0,0,2,95,0,0,255,255,0,0,2,96,0,0,76,1,0,0,2,97,0,0,61,14,0,0,2,98,0,0,48,117,0,0,2,99,0,0,59,14,0,0,2,100,0,0,56,14,0,0,1,92,0,0,136,101,0,0,0,93,101,0,136,101,0,0,25,101,101,32,137,101,0,0,78,0,99,0,19,101,0,94,32,101,101,6,121,101,3,0,1,92,3,0,119,0,6,0,78,63,99,0,19,101,63,94,32,101,101,10,121,101,2,0,1,92,3,0,32,101,92,3,121,101,2,0,135,101,33,0,78,75,99,0,19,101,75,94,30,101,101,3,38,101,101,255,33,101,101,0,120,101,2,0,135,101,34,0,1,101,211,18,78,1,101,0,1,101,212,18,78,10,101,0,19,101,1,94,19,102,10,94,3,101,101,102,19,101,101,94,0,90,101,0,1,89,0,0,0,25,89,0,0,32,90,0,19,101,25,94,19,102,32,94,54,101,101,102,240,55,0,0,119,0,37,0,0,42,89,0,82,51,96,0,19,101,42,94,27,101,101,15,3,101,51,101,102,62,101,8,19,101,42,94,27,101,101,15,3,101,51,101,19,102,62,94,25,102,102,4,19,102,102,94,107,101,8,102,0,64,89,0,82,65,96,0,19,102,64,94,27,102,102,15,3,102,65,102,102,66,102,8,1,102,100,0,19,101,66,94,47,102,102,101,104,56,0,0,0,67,89,0,82,68,96,0,19,102,67,94,27,102,102,15,3,102,68,102,1,101,100,0,107,102,8,101,0,69,89,0,25,101,69,1,41,101,101,24,42,101,101,24,0,89,101,0,119,0,214,255,1,101,128,1,82,70,101,0,1,89,0,0,0,71,89,0,19,101,71,94,34,101,101,38,120,101,2,0,119,0,124,1,0,72,89,0,19,101,72,94,27,101,101,31,3,87,97,101,102,73,87,1,41,101,73,24,42,101,101,24,33,101,101,0,121,101,109,1,78,74,99,0,19,101,74,94,30,101,101,3,38,101,101,255,33,101,101,0,120,101,18,0,135,76,22,0,30,101,76,4,38,101,101,255,25,101,101,1,19,101,101,94,0,91,101,0,102,77,87,12,19,101,91,94,19,102,77,94,47,101,101,102,32,57,0,0,102,78,87,12,19,102,78,94,19,103,91,94,4,102,102,103,19,102,102,94,107,87,12,102,103,102,87,21,25,101,87,21,103,101,101,1,41,101,101,8,20,102,102,101,0,79,102,0,19,102,79,95,47,102,98,102,88,57,0,0,19,101,98,94,107,87,21,101,25,101,87,21,42,102,98,8,107,101,1,102,25,80,87,17,79,102,80,0,103,101,80,1,41,101,101,8,20,102,102,101,103,101,80,2,41,101,101,16,20,102,102,101,103,101,80,3,41,101,101,24,20,102,102,101,0,81,102,0,25,102,81,50,19,102,102,94,83,80,102,0,25,101,81,50,42,101,101,8,19,101,101,94,107,80,1,101,25,102,81,50,42,102,102,16,19,102,102,94,107,80,2,102,25,101,81,50,42,101,101,24,107,80,3,101,103,101,87,17,25,102,87,17,103,102,102,1,41,102,102,8,20,101,101,102,25,102,87,17,103,102,102,2,41,102,102,16,20,101,101,102,25,102,87,17,103,102,102,3,41,102,102,24,20,101,101,102,0,82,101,0,103,101,87,13,25,102,87,13,103,102,102,1,41,102,102,8,20,101,101,102,25,102,87,13,103,102,102,2,41,102,102,16,20,101,101,102,25,102,87,13,103,102,102,3,41,102,102,24,20,101,101,102,0,83,101,0,48,101,83,82,164,58,0,0,103,101,87,13,25,102,87,13,103,102,102,1,41,102,102,8,20,101,101,102,25,102,87,13,103,102,102,2,41,102,102,16,20,101,101,102,25,102,87,13,103,102,102,3,41,102,102,24,20,101,101,102,0,84,101,0,19,102,84,94,107,87,17,102,25,102,87,17,42,101,84,8,19,101,101,94,107,102,1,101,25,101,87,17,42,102,84,16,19,102,102,94,107,101,2,102,25,102,87,17,42,101,84,24,107,102,3,101,103,101,87,25,25,102,87,25,103,102,102,1,41,102,102,8,20,101,101,102,0,2,101,0,0,88,2,0,0,3,89,0,135,4,9,0,3,70,0,0,0,86,4,0,1,90,0,0,0,5,90,0,0,6,86,0,19,101,5,94,19,102,6,94,54,101,101,102,240,58,0,0,119,0,86,0,0,7,90,0,19,101,7,94,90,8,70,101,82,9,96,0,19,101,8,94,27,101,101,15,3,101,9,101,103,101,101,10,19,102,8,94,27,102,102,15,3,102,9,102,25,102,102,10,103,102,102,1,41,102,102,8,20,101,101,102,0,11,101,0,0,85,11,0,0,12,89,0,19,101,12,94,27,101,101,31,90,13,97,101,19,101,13,94,1,102,2,0,1,103,3,0,138,101,102,103,100,59,0,0,140,59,0,0,180,59,0,0,119,0,28,0,0,14,85,0,0,15,85,0,19,102,14,95,19,103,15,95,28,103,103,4,38,103,103,255,4,102,102,103,19,102,102,95,0,85,102,0,119,0,18,0,0,16,85,0,0,17,85,0,19,102,16,95,19,103,17,95,28,103,103,4,38,103,103,255,4,102,102,103,19,102,102,95,0,85,102,0,119,0,8,0,0,18,85,0,19,102,18,95,28,102,102,2,38,102,102,255,19,102,102,95,0,85,102,0,119,0,1,0,0,19,85,0,0,20,88,0,19,101,20,95,19,102,19,95,3,101,101,102,19,101,101,95,0,88,101,0,0,21,85,0,0,22,90,0,19,101,22,94,90,23,70,101,82,24,96,0,19,101,23,94,27,101,101,15,3,101,24,101,19,102,21,94,107,101,10,102,19,102,23,94,27,102,102,15,3,102,24,102,25,102,102,10,42,101,21,8,107,102,1,101,0,26,90,0,25,101,26,1,41,101,101,24,42,101,101,24,0,90,101,0,119,0,165,255,0,27,88,0,19,101,27,95,28,101,101,50,38,101,101,255,19,101,101,95,0,88,101,0,103,101,87,23,25,102,87,23,103,102,102,1,41,102,102,8,20,101,101,102,0,28,101,0,0,29,88,0,19,101,29,95,19,102,28,95,47,101,101,102,220,60,0,0,0,30,88,0,103,101,87,23,25,102,87,23,103,102,102,1,41,102,102,8,20,101,101,102,0,31,101,0,19,102,31,95,19,103,30,95,4,102,102,103,19,102,102,95,19,102,102,94,107,87,23,102,25,102,87,23,19,101,31,95,19,103,30,95,4,101,101,103,19,101,101,95,42,101,101,8,107,102,1,101,119,0,64,0,1,90,0,0,0,33,90,0,0,34,86,0,19,101,33,94,19,102,34,94,54,101,101,102,252,60,0,0,119,0,32,0,0,35,90,0,19,101,35,94,90,36,70,101,82,37,96,0,19,101,36,94,27,101,101,15,3,101,37,101,25,38,101,10,79,101,38,0,103,102,38,1,41,102,102,8,20,101,101,102,0,39,101,0,19,101,39,95,28,101,101,2,38,101,101,255,19,101,101,95,19,101,101,94,83,38,101,0,19,102,39,95,28,102,102,2,38,102,102,255,19,102,102,95,42,102,102,8,107,38,1,102,0,40,90,0,25,102,40,1,41,102,102,24,42,102,102,24,0,90,102,0,119,0,219,255,1,101,0,0,19,101,101,94,107,87,23,101,25,101,87,23,1,102,0,0,42,102,102,8,107,101,1,102,78,41,87,0,1,102,1,0,83,87,102,0,19,102,41,94,33,102,102,1,121,102,12,0,102,43,87,1,78,44,100,0,19,102,43,94,19,101,44,94,25,101,101,1,45,102,102,101,216,61,0,0,0,45,89,0,134,102,0,0,136,69,1,0,45,0,0,0,0,46,89,0,135,47,35,0,46,70,0,0,0,86,47,0,1,90,0,0,0,48,90,0,0,49,86,0,19,102,48,94,19,101,49,94,54,102,102,101,8,62,0,0,119,0,28,0,0,50,90,0,19,102,50,94,90,52,70,102,82,53,96,0,19,102,52,94,27,102,102,15,90,54,53,102,102,55,87,1,19,102,54,94,19,101,55,94,45,102,102,101,92,62,0,0,102,56,87,1,0,57,90,0,19,102,57,94,90,58,70,102,82,59,96,0,19,102,58,94,27,102,102,15,3,102,59,102,107,102,1,56,0,60,90,0,25,102,60,1,41,102,102,24,42,102,102,24,0,90,102,0,119,0,223,255,0,61,89,0,25,102,61,1,41,102,102,24,42,102,102,24,0,89,102,0,119,0,129,254,137,93,0,0,1,102,1,0,139,102,0,0,140,2,79,0,0,0,0,0,2,67,0,0,255,0,0,0,2,68,0,0,152,13,0,0,2,69,0,0,156,20,0,0,2,70,0,0,144,13,0,0,2,71,0,0,255,255,0,0,2,72,0,0,128,1,0,0,2,73,0,0,76,1,0,0,1,65,0,0,136,74,0,0,0,66,74,0,136,74,0,0,25,74,74,32,137,74,0,0,82,34,72,0,1,62,255,255,1,74,0,0,83,69,74,0,19,74,1,67,1,75,1,0,1,78,2,0,138,74,75,78,28,63,0,0,60,64,0,0,119,0,176,0,1,64,0,0,0,43,64,0,19,75,43,67,34,75,75,10,120,75,2,0,119,0,22,0,0,54,64,0,19,75,54,67,90,8,68,75,41,75,8,24,42,75,75,24,33,75,75,0,121,75,9,0,0,15,64,0,19,75,15,67,90,27,68,75,19,76,27,67,26,76,76,1,19,76,76,67,135,75,12,0,0,76,0,0,0,35,64,0,25,75,35,1,41,75,75,24,42,75,75,24,0,64,75,0,119,0,231,255,78,36,68,0,82,37,73,0,19,75,36,67,26,75,75,1,27,75,75,15,3,75,37,75,102,38,75,1,19,76,38,67,26,76,76,1,19,76,76,67,134,75,0,0,24,77,1,0,76,0,0,0,78,39,70,0,19,75,39,67,32,75,75,1,121,75,3,0,1,65,9,0,119,0,6,0,78,40,70,0,19,75,40,67,32,75,75,2,121,75,2,0,1,65,9,0,32,75,65,9,121,75,8,0,78,41,68,0,19,75,41,67,26,75,75,1,19,75,75,67,135,42,36,0,75,0,0,0,0,62,42,0,25,75,68,10,134,44,0,0,76,152,0,0,0,75,0,0,0,64,44,0,0,45,64,0,19,75,45,67,46,75,67,75,56,64,0,0,0,46,64,0,0,62,46,0,119,0,104,0,1,64,10,0,0,47,64,0,19,75,47,67,34,75,75,20,120,75,2,0,119,0,22,0,0,48,64,0,19,75,48,67,90,49,68,75,41,75,49,24,42,75,75,24,33,75,75,0,121,75,9,0,0,50,64,0,19,75,50,67,90,51,68,75,19,76,51,67,26,76,76,1,19,76,76,67,135,75,12,0,0,76,0,0,0,52,64,0,25,75,52,1,41,75,75,24,42,75,75,24,0,64,75,0,119,0,231,255,78,53,70,0,19,75,53,67,32,75,75,0,121,75,8,0,102,55,68,10,19,75,55,67,26,75,75,1,19,75,75,67,135,56,36,0,75,0,0,0,0,62,56,0,134,57,0,0,76,152,0,0,0,68,0,0,0,64,57,0,0,58,64,0,19,75,58,67,46,75,67,75,252,64,0,0,0,59,64,0,0,62,59,0,78,60,70,0,19,75,60,67,33,75,75,2,120,75,15,0,102,7,68,10,82,9,73,0,19,75,7,67,26,75,75,1,27,75,75,15,3,75,9,75,102,10,75,1,19,76,10,67,26,76,76,1,19,76,76,67,134,75,0,0,24,77,1,0,76,0,0,0,119,0,38,0,134,75,0,0,88,88,1,0,78,61,69,0,41,75,61,24,42,75,75,24,33,75,75,0,121,75,31,0,82,2,72,0,82,3,72,0,78,4,69,0,1,75,1,0,19,76,4,67,47,75,75,76,132,65,0,0,1,75,2,0,83,69,75,0,1,75,155,20,78,5,75,0,135,75,29,0,5,2,0,0,78,6,69,0,1,76,64,0,19,77,6,67,25,77,77,106,26,77,77,1,19,77,77,67,25,78,3,40,135,75,24,0,76,77,78,0,25,78,3,40,135,75,26,0,2,78,0,0,1,78,2,0,134,75,0,0,96,242,0,0,2,78,0,0,119,0,1,0,1,74,61,14,19,75,0,67,27,75,75,31,3,63,74,75,103,75,63,5,25,74,63,5,103,74,74,1,41,74,74,8,20,75,75,74,0,11,75,0,103,75,63,5,25,74,63,5,103,74,74,1,41,74,74,8,20,75,75,74,0,12,75,0,19,75,11,71,19,74,12,71,28,74,74,20,38,74,74,255,4,75,75,74,19,75,75,71,0,13,75,0,19,74,13,67,107,63,5,74,25,74,63,5,42,75,13,8,107,74,1,75,103,75,63,9,25,74,63,9,103,74,74,1,41,74,74,8,20,75,75,74,0,14,75,0,103,75,63,9,25,74,63,9,103,74,74,1,41,74,74,8,20,75,75,74,0,16,75,0,19,75,14,71,19,74,16,71,28,74,74,20,38,74,74,255,4,75,75,74,19,75,75,71,0,17,75,0,19,74,17,67,107,63,9,74,25,74,63,9,42,75,17,8,107,74,1,75,103,75,63,21,25,74,63,21,103,74,74,1,41,74,74,8,20,75,75,74,0,18,75,0,103,75,63,21,25,74,63,21,103,74,74,1,41,74,74,8,20,75,75,74,0,19,75,0,19,75,18,71,19,74,19,71,28,74,74,20,38,74,74,255,4,75,75,74,19,75,75,71,0,20,75,0,19,74,20,67,107,63,21,74,25,74,63,21,42,75,20,8,107,74,1,75,102,21,63,11,102,22,63,11,19,74,21,67,19,78,22,67,28,78,78,10,38,78,78,255,4,74,74,78,19,74,74,67,107,63,11,74,0,23,62,0,19,74,23,67,53,74,67,74,180,67,0,0,1,74,148,13,79,74,74,0,1,75,148,13,103,75,75,1,41,75,75,8,20,74,74,75,0,25,74,0,19,74,25,71,0,26,74,0,1,74,150,13,79,74,74,0,1,75,150,13,103,75,75,1,41,75,75,8,20,74,74,75,0,28,74,0,19,74,28,71,0,29,74,0,3,30,26,29,19,74,30,71,0,31,74,0,0,32,63,0,25,33,32,23,19,74,31,67,83,33,74,0,42,75,31,8,107,33,1,75,137,66,0,0,1,75,0,0,139,75,0,0,0,24,62,0,134,75,0,0,240,130,0,0,24,0,0,0,1,75,148,13,79,75,75,0,1,74,148,13,103,74,74,1,41,74,74,8,20,75,75,74,0,25,75,0,19,75,25,71,0,26,75,0,1,75,150,13,79,75,75,0,1,74,150,13,103,74,74,1,41,74,74,8,20,75,75,74,0,28,75,0,19,75,28,71,0,29,75,0,3,30,26,29,19,75,30,71,0,31,75,0,0,32,63,0,25,33,32,23,19,75,31,67,83,33,75,0,42,74,31,8,107,33,1,74,137,66,0,0,1,74,0,0,139,74,0,0,140,1,200,0,0,0,0,0,2,192,0,0,255,0,0,0,2,193,0,0,68,1,0,0,1,189,0,0,136,194,0,0,0,190,194,0,136,194,0,0,25,194,194,64,137,194,0,0,25,178,190,23,25,176,190,20,25,181,190,18,0,2,0,0,0,86,2,0,25,97,86,1,78,108,97,0,0,180,108,0,0,119,2,0,25,130,119,2,78,141,130,0,0,184,141,0,0,152,2,0,25,163,152,3,78,3,163,0,0,174,3,0,0,14,180,0,135,25,37,0,14,0,0,0,0,185,25,0,0,36,185,0,25,47,36,6,78,58,47,0,19,194,58,192,0,69,194,0,0,80,184,0,19,194,80,192,0,84,194,0,1,194,172,13,27,195,84,7,3,85,194,195,25,87,85,3,78,88,87,0,19,195,88,192,0,89,195,0,4,90,89,69,19,195,90,192,0,91,195,0,83,87,91,0,0,188,178,0,25,191,188,10,1,195,32,0,83,188,195,0,25,188,188,1,54,195,188,191,16,69,0,0,135,92,22,0,1,195,60,1,78,93,195,0,19,195,93,192,0,94,195,0,25,95,94,20,8,195,92,95,38,195,195,255,0,96,195,0,19,195,96,192,0,98,195,0,0,186,98,0,0,99,186,0,19,195,99,192,0,100,195,0,1,195,40,1,78,101,195,0,19,195,101,192,0,102,195,0,42,195,102,1,0,103,195,0,15,104,103,100,121,104,22,0,0,105,180,0,25,106,178,1,1,194,11,0,135,195,24,0,194,105,106,0,25,107,178,5,1,195,32,0,83,107,195,0,25,109,178,7,1,194,26,0,135,195,38,0,194,109,0,0,1,194,1,0,1,196,255,255,134,195,0,0,60,40,1,0,178,194,196,0,1,1,0,0,0,83,1,0,137,190,0,0,139,83,0,0,1,195,142,13,78,110,195,0,41,195,110,24,42,195,195,24,33,111,195,0,120,111,11,0,0,112,180,0,25,113,178,6,1,196,11,0,135,195,24,0,196,112,113,0,1,196,1,0,1,194,0,0,134,195,0,0,60,40,1,0,178,196,194,0,0,114,185,0,25,115,114,1,78,116,115,0,0,186,116,0,0,117,186,0,0,118,174,0,19,195,118,192,0,120,195,0,1,195,172,13,27,194,120,7,3,121,195,194,25,122,121,6,83,122,117,0,0,123,186,0,19,194,123,192,0,124,194,0,32,125,124,3,121,125,10,0,0,126,174,0,19,194,126,192,0,127,194,0,1,194,172,13,27,195,127,7,3,128,194,195,25,129,128,4,1,195,1,0,83,129,195,0,0,131,185,0,78,132,131,0,0,175,132,0,0,133,180,0,19,195,133,192,0,134,195,0,32,135,134,22,121,135,7,0,134,195,0,0,200,89,1,0,1,1,8,0,0,83,1,0,137,190,0,0,139,83,0,0,0,136,180,0,19,195,136,192,0,137,195,0,32,138,137,27,121,138,15,0,0,139,174,0,134,140,0,0,188,226,0,0,139,0,0,0,0,180,140,0,0,142,184,0,1,194,0,0,135,195,39,0,194,142,0,0,0,143,180,0,0,1,143,0,0,83,1,0,137,190,0,0,139,83,0,0,0,144,180,0,19,195,144,192,0,145,195,0,32,146,145,30,121,146,35,0,1,195,150,13,79,195,195,0,1,194,150,13,103,194,194,1,41,194,194,8,20,195,195,194,0,147,195,0,1,195,121,13,19,194,147,192,83,195,194,0,1,194,121,13,42,195,147,8,107,194,1,195,1,195,128,1,82,148,195,0,1,194,55,0,135,195,38,0,194,148,0,0,0,149,184,0,135,150,40,0,149,0,0,0,1,195,128,1,82,151,195,0,134,195,0,0,24,78,1,0,150,151,0,0,1,195,16,1,82,153,195,0,135,195,6,0,153,0,0,0,1,1,8,0,0,83,1,0,137,190,0,0,139,83,0,0,0,154,185,0,135,195,41,0,154,176,181,0,0,155,180,0,19,195,155,192,0,156,195,0,26,157,156,1,19,195,157,192,0,158,195,0,0,180,158,0,0,159,180,0,19,195,159,192,0,160,195,0,1,195,240,11,41,194,160,1,3,161,195,194,79,194,161,0,103,195,161,1,41,195,195,8,20,194,194,195,0,162,194,0,41,194,162,16,42,194,194,16,33,164,194,0,1,194,142,13,78,165,194,0,41,194,165,24,42,194,194,24,33,166,194,0,19,194,164,166,0,179,194,0,121,179,59,0,0,167,180,0,19,194,167,192,0,168,194,0,1,194,129,12,3,169,194,168,78,170,169,0,41,194,170,24,42,194,194,24,33,171,194,0,121,171,9,0,1,195,16,0,1,196,1,0,1,197,15,0,1,198,16,0,1,199,0,0,135,194,42,0,195,196,197,198,199,0,0,0,0,172,180,0,19,194,172,192,0,173,194,0,1,194,240,11,41,199,173,1,3,4,194,199,79,199,4,0,103,194,4,1,41,194,194,8,20,199,199,194,0,5,199,0,0,6,180,0,19,199,6,192,0,7,199,0,1,199,42,12,3,8,199,7,78,9,8,0,0,10,180,0,19,199,10,192,0,11,199,0,1,199,71,12,3,12,199,11,78,13,12,0,0,15,180,0,19,199,15,192,0,16,199,0,1,199,100,12,3,17,199,16,78,18,17,0,19,199,18,192,0,19,199,0,25,20,19,15,19,199,20,192,0,21,199,0,1,194,0,0,1,198,16,0,134,199,0,0,0,0,0,0,5,9,13,194,21,198,0,0,79,199,176,0,103,198,176,1,41,198,198,8,20,199,199,198,0,22,199,0,41,199,22,16,42,199,199,16,33,23,199,0,121,23,43,0,0,24,175,0,41,199,24,24,42,199,199,24,33,26,199,0,121,26,24,0,0,27,174,0,135,28,40,0,27,0,0,0,0,177,28,0,0,29,177,0,135,30,43,0,29,0,0,0,0,187,30,0,1,177,24,0,82,31,193,0,79,199,176,0,103,198,176,1,41,198,198,8,20,199,199,198,0,32,199,0,0,33,187,0,135,34,44,0,31,32,33,0,19,199,34,192,83,176,199,0,42,198,34,8,107,176,1,198,119,0,45,0,1,177,23,0,82,35,193,0,79,198,176,0,103,199,176,1,41,199,199,8,20,198,198,199,0,37,198,0,135,38,45,0,35,37,0,0,19,198,38,192,83,176,198,0,42,199,38,8,107,176,1,199,119,0,31,0,1,177,25,0,79,199,181,0,103,198,181,1,41,198,198,8,20,199,199,198,0,39,199,0,19,199,39,192,83,176,199,0,42,198,39,8,107,176,1,198,0,40,184,0,19,198,40,192,0,41,198,0,34,42,41,10,121,42,3,0,1,182,150,13,119,0,2,0,1,182,148,13,0,43,182,0,79,198,181,0,103,199,181,1,41,199,199,8,20,198,198,199,0,44,198,0,135,45,45,0,43,44,0,0,19,198,45,192,83,181,198,0,42,199,45,8,107,181,1,199,79,199,176,0,103,198,176,1,41,198,198,8,20,199,199,198,0,46,199,0,41,199,46,16,42,199,199,16,33,48,199,0,121,48,39,0,1,199,142,13,78,49,199,0,41,199,49,24,42,199,199,24,33,50,199,0,121,50,19,0,0,51,177,0,135,199,38,0,51,178,0,0,1,198,55,0,1,194,18,0,135,199,16,0,198,194,178,0,79,199,176,0,103,194,176,1,41,194,194,8,20,199,199,194,0,52,199,0,1,194,55,0,1,198,56,0,134,199,0,0,236,30,1,0,194,198,52,0,119,0,10,0,0,53,174,0,79,199,176,0,103,198,176,1,41,198,198,8,20,199,199,198,0,54,199,0,1,198,45,0,135,199,46,0,198,53,54,0,1,198,50,0,1,194,0,0,134,199,0,0,204,62,1,0,198,194,0,0,0,55,186,0,19,199,55,192,0,56,199,0,33,57,56,0,121,57,50,0,0,59,174,0,135,60,40,0,59,0,0,0,19,199,60,192,0,61,199,0,0,187,61,0,0,62,187,0,19,199,62,192,0,63,199,0,135,199,29,0,63,178,0,0,135,64,13,0,178,0,0,0,2,199,0,0,255,255,0,0,19,199,64,199,0,65,199,0,0,187,65,0,0,66,187,0,2,199,0,0,255,255,0,0,19,199,66,199,0,67,199,0,3,68,178,67,0,183,68,0,0,70,183,0,1,194,27,0,135,199,38,0,194,70,0,0,0,71,186,0,19,199,71,192,0,72,199,0,25,73,72,28,19,199,73,192,0,74,199,0,0,75,183,0,25,76,75,8,135,199,38,0,74,76,0,0,0,77,183,0,25,78,77,8,25,79,78,4,1,194,36,0,135,199,38,0,194,79,0,0,1,194,1,0,134,199,0,0,96,242,0,0,178,194,0,0,79,199,176,0,103,194,176,1,41,194,194,8,20,199,199,194,0,81,199,0,135,82,47,0,81,0,0,0,0,1,82,0,0,83,1,0,137,190,0,0,139,83,0,0,140,1,185,0,0,0,0,0,2,178,0,0,255,0,0,0,2,179,0,0,255,255,0,0,2,180,0,0,61,14,0,0,1,176,0,0,136,181,0,0,0,177,181,0,136,181,0,0,25,181,181,32,137,181,0,0,25,168,177,8,0,1,0,0,1,169,0,0,1,181,128,1,82,2,181,0,1,181,44,1,3,78,2,181,0,173,78,0,1,181,128,1,82,89,181,0,0,172,89,0,1,171,0,0,0,100,171,0,19,181,100,178,0,111,181,0,32,122,111,0,121,122,54,0,0,133,1,0,0,144,172,0,135,155,9,0,133,144,0,0,0,171,155,0,0,3,171,0,41,181,3,24,42,181,181,24,33,14,181,0,120,14,3,0,1,176,4,0,119,0,17,1,0,25,172,0,0,36,171,0,1,181,4,0,1,182,2,0,1,183,155,255,1,184,93,0,134,47,0,0,160,32,0,0,25,36,181,182,183,184,0,0,0,170,47,0,0,58,170,0,19,184,58,178,0,69,184,0,13,75,178,69,121,75,3,0,1,176,33,0,119,0,255,0,0,76,170,0,19,184,76,178,0,77,184,0,0,79,172,0,3,80,79,77,78,81,80,0,0,169,81,0,0,82,169,0,1,184,13,0,135,83,48,0,82,184,0,0,41,184,83,24,42,184,184,24,33,84,184,0,121,84,3,0,1,171,1,0,119,0,205,255,1,183,60,0,134,184,0,0,148,98,1,0,183,0,0,0,1,171,0,0,119,0,199,255,0,85,171,0,19,184,85,178,0,86,184,0,32,87,86,1,121,87,35,0,0,88,1,0,19,184,88,178,0,90,184,0,27,184,90,31,3,91,180,184,25,92,91,23,79,184,92,0,103,183,92,1,41,183,183,8,20,184,184,183,0,93,184,0,1,184,0,0,134,94,0,0,28,94,1,0,184,93,0,0,25,95,168,6,19,184,94,178,83,95,184,0,42,183,94,8,107,95,1,183,25,96,168,6,79,183,96,0,103,184,96,1,41,184,184,8,20,183,183,184,0,97,183,0,19,183,97,179,0,98,183,0,13,99,179,98,121,99,3,0,1,171,0,0,119,0,162,255,1,171,2,0,119,0,160,255,0,101,171,0,19,183,101,178,0,102,183,0,32,103,102,2,121,103,35,0,0,104,1,0,19,183,104,178,0,105,183,0,27,183,105,31,3,106,180,183,25,107,106,21,79,183,107,0,103,184,107,1,41,184,184,8,20,183,183,184,0,108,183,0,1,183,0,0,134,109,0,0,132,93,1,0,183,108,0,0,25,110,168,8,19,183,109,178,83,110,183,0,42,184,109,8,107,110,1,184,25,112,168,8,79,184,112,0,103,183,112,1,41,183,183,8,20,184,184,183,0,113,184,0,19,184,113,179,0,114,184,0,13,115,179,114,121,115,3,0,1,171,1,0,119,0,123,255,1,171,3,0,119,0,121,255,0,116,171,0,19,184,116,178,0,117,184,0,32,118,117,3,121,118,35,0,0,119,1,0,19,184,119,178,0,120,184,0,27,184,120,31,3,121,180,184,25,123,121,25,79,184,123,0,103,183,123,1,41,183,183,8,20,184,184,183,0,124,184,0,1,184,0,0,134,125,0,0,180,94,1,0,184,124,0,0,25,126,168,4,19,184,125,178,83,126,184,0,42,183,125,8,107,126,1,183,25,127,168,4,79,183,127,0,103,184,127,1,41,184,184,8,20,183,183,184,0,128,183,0,19,183,128,179,0,129,183,0,13,130,179,129,121,130,3,0,1,171,2,0,119,0,84,255,1,171,4,0,119,0,82,255,0,131,171,0,19,183,131,178,0,132,183,0,32,134,132,4,120,134,2,0,119,0,76,255,1,183,105,20,78,135,183,0,0,174,135,0,1,183,106,20,78,136,183,0,0,175,136,0,1,183,128,1,82,137,183,0,1,183,44,1,3,138,137,183,0,173,138,0,0,139,173,0,1,184,64,0,1,182,93,0,135,183,24,0,184,182,139,0,135,183,10,0,0,140,169,0,0,141,173,0,134,183,0,0,24,78,1,0,140,141,0,0,1,183,103,20,134,142,0,0,92,101,0,0,183,0,0,0,0,166,142,0,0,143,166,0,19,183,143,178,0,145,183,0,13,146,178,145,121,146,3,0,1,171,3,0,119,0,42,255,0,147,166,0,19,183,147,178,0,148,183,0,0,149,1,0,19,183,149,178,0,150,183,0,14,151,148,150,120,151,2,0,119,0,33,255,0,152,166,0,19,183,152,178,0,153,183,0], eb + 10240);
  HEAPU8.set([27,183,153,31,3,154,180,183,25,156,154,1,78,157,156,0,41,183,157,24,42,183,183,24,33,158,183,0,120,158,6,0,1,182,56,0,134,183,0,0,148,98,1,0,182,0,0,0,119,0,17,255,0,159,166,0,19,183,159,178,0,160,183,0,27,183,160,31,3,161,180,183,25,162,161,1,78,163,162,0,19,183,163,178,0,164,183,0,0,165,1,0,19,183,165,178,0,4,183,0,27,183,4,31,3,5,180,183,25,6,5,1,78,7,6,0,19,183,7,178,0,8,183,0,14,9,164,8,121,9,6,0,1,182,54,0,134,183,0,0,148,98,1,0,182,0,0,0,119,0,248,254,0,10,1,0,0,11,174,0,0,12,175,0,0,13,166,0,1,183,105,20,78,15,183,0,1,183,106,20,78,16,183,0,135,17,49,0,10,11,12,13,15,16,0,0,0,167,17,0,0,18,167,0,19,183,18,178,0,19,183,0,14,20,178,19,121,20,3,0,1,176,30,0,119,0,6,0,1,182,55,0,134,183,0,0,148,98,1,0,182,0,0,0,119,0,224,254,32,183,176,4,121,183,9,0,1,182,84,0,134,183,0,0,148,98,1,0,182,0,0,0,137,177,0,0,1,183,1,0,139,183,0,0,119,0,137,0,32,183,176,30,121,183,130,0,0,21,169,0,1,182,13,0,135,183,50,0,21,182,0,0,25,22,168,6,79,183,22,0,103,182,22,1,41,182,182,8,20,183,183,182,0,23,183,0,19,183,23,179,0,24,183,0,0,26,1,0,19,183,26,178,0,27,183,0,27,183,27,31,3,28,180,183,25,29,28,23,79,183,29,0,103,182,29,1,41,182,182,8,20,183,183,182,0,30,183,0,19,183,30,179,0,31,183,0,4,32,31,24,19,183,32,179,0,33,183,0,19,183,33,178,83,29,183,0,42,182,33,8,107,29,1,182,25,34,168,8,79,182,34,0,103,183,34,1,41,183,183,8,20,182,182,183,0,35,182,0,19,182,35,179,0,37,182,0,0,38,1,0,19,182,38,178,0,39,182,0,27,182,39,31,3,40,180,182,25,41,40,21,79,182,41,0,103,183,41,1,41,183,183,8,20,182,182,183,0,42,182,0,19,182,42,179,0,43,182,0,4,44,43,37,19,182,44,179,0,45,182,0,19,182,45,178,83,41,182,0,42,183,45,8,107,41,1,183,25,46,168,4,79,183,46,0,103,182,46,1,41,182,182,8,20,183,183,182,0,48,183,0,19,183,48,179,0,49,183,0,0,50,1,0,19,183,50,178,0,51,183,0,27,183,51,31,3,52,180,183,25,53,52,25,79,183,53,0,103,182,53,1,41,182,182,8,20,183,183,182,0,54,183,0,19,183,54,179,0,55,183,0,4,56,55,49,19,183,56,179,0,57,183,0,19,183,57,178,83,53,183,0,42,182,57,8,107,53,1,182,0,59,173,0,1,183,64,0,1,184,152,255,135,182,24,0,183,184,59,0,0,60,169,0,0,61,173,0,134,182,0,0,24,78,1,0,60,61,0,0,1,182,13,0,83,168,182,0,0,62,169,0,25,63,168,1,83,63,62,0,0,64,1,0,25,65,168,2,83,65,64,0,0,66,166,0,25,67,168,3,83,67,66,0,0,68,167,0,25,70,168,11,83,70,68,0,135,71,51,0,168,0,0,0,41,182,71,24,42,182,182,24,33,72,182,0,120,72,4,0,137,177,0,0,1,182,1,0,139,182,0,0,0,73,1,0,0,74,169,0,135,182,11,0,73,74,0,0,137,177,0,0,1,182,1,0,139,182,0,0,119,0,6,0,32,182,176,33,121,182,4,0,137,177,0,0,1,182,1,0,139,182,0,0,1,182,0,0,139,182,0,0,140,1,194,0,0,0,0,0,2,187,0,0,255,0,0,0,2,188,0,0,61,14,0,0,2,189,0,0,128,1,0,0,1,184,0,0,136,190,0,0,0,185,190,0,136,190,0,0,25,190,190,48,137,190,0,0,25,172,185,28,25,176,185,8,0,2,0,0,0,84,2,0,1,190,27,0,135,95,52,0,84,190,0,0,41,190,95,24,42,190,190,24,33,106,190,0,120,106,9,0,1,191,59,0,134,190,0,0,148,98,1,0,191,0,0,0,1,1,1,0,0,81,1,0,137,185,0,0,139,81,0,0,1,190,105,20,78,117,190,0,0,181,117,0,1,190,106,20,78,128,190,0,0,182,128,0,82,139,189,0,0,179,139,0,0,150,2,0,0,161,179,0,135,3,9,0,150,161,0,0,0,178,3,0,0,14,178,0,41,190,14,24,42,190,190,24,33,25,190,0,120,25,9,0,1,191,96,0,134,190,0,0,148,98,1,0,191,0,0,0,1,1,1,0,0,81,1,0,137,185,0,0,139,81,0,0,0,183,172,0,25,186,183,10,1,190,0,0,83,183,190,0,25,183,183,1,54,190,183,186,60,84,0,0,1,173,0,0,0,36,173,0,19,190,36,187,0,47,190,0,34,58,47,10,120,58,2,0,119,0,56,0,135,190,10,0,0,69,179,0,0,80,178,0,1,190,4,0,1,191,2,0,1,192,155,255,1,193,93,0,134,82,0,0,160,32,0,0,69,80,190,191,192,193,0,0,0,177,82,0,0,83,177,0,19,193,83,187,0,85,193,0,14,86,187,85,120,86,2,0,119,0,38,0,0,87,177,0,19,193,87,187,0,88,193,0,0,89,179,0,3,90,89,88,78,91,90,0,19,193,91,187,0,92,193,0,25,93,92,1,19,193,93,187,0,94,193,0,0,96,173,0,19,193,96,187,0,97,193,0,3,98,172,97,83,98,94,0,0,99,2,0,0,100,177,0,19,193,100,187,0,101,193,0,0,102,179,0,3,103,102,101,78,104,103,0,135,193,11,0,99,104,0,0,0,105,2,0,0,107,179,0,135,108,9,0,105,107,0,0,0,178,108,0,0,109,173,0,25,193,109,1,41,193,193,24,42,193,193,24,0,110,193,0,0,173,110,0,119,0,196,255,0,111,173,0,41,193,111,24,42,193,193,24,33,112,193,0,121,112,41,1,135,193,10,0,0,113,2,0,19,193,113,187,0,114,193,0,27,193,114,31,3,115,188,193,25,116,115,23,79,193,116,0,103,192,116,1,41,192,192,8,20,193,193,192,0,118,193,0,1,193,1,0,134,119,0,0,28,94,1,0,193,118,0,0,25,120,176,6,19,193,119,187,83,120,193,0,42,192,119,8,107,120,1,192,25,121,176,6,79,192,121,0,103,193,121,1,41,193,193,8,20,192,192,193,0,122,192,0,2,192,0,0,255,255,0,0,19,192,122,192,0,123,192,0,2,192,0,0,255,255,0,0,13,124,192,123,121,124,39,0,0,125,173,0,26,192,125,1,41,192,192,24,42,192,192,24,0,126,192,0,0,173,126,0,0,127,173,0,19,192,127,187,0,129,192,0,25,130,129,1,19,192,130,187,0,131,192,0,19,192,131,187,0,132,192,0,1,192,1,0,17,133,192,132,120,133,2,0,119,0,244,0,0,134,2,0,0,135,173,0,19,192,135,187,0,136,192,0,3,137,172,136,78,138,137,0,19,192,138,187,0,140,192,0,26,141,140,1,19,192,141,187,0,142,192,0,135,192,12,0,134,142,0,0,0,143,173,0,26,192,143,1,41,192,192,24,42,192,192,24,0,144,192,0,0,173,144,0,119,0,225,255,82,145,189,0,0,180,145,0,0,146,180,0,1,193,64,0,1,191,93,0,135,192,24,0,193,191,146,0,135,192,10,0,78,147,172,0,19,192,147,187,0,148,192,0,26,149,148,1,19,192,149,187,0,151,192,0,0,152,180,0,134,192,0,0,24,78,1,0,151,152,0,0,1,192,103,20,134,153,0,0,92,101,0,0,192,0,0,0,0,174,153,0,0,154,174,0,19,192,154,187,0,155,192,0,13,156,187,155,121,156,3,0,1,184,15,0,119,0,57,0,0,8,174,0,19,192,8,187,0,9,192,0,0,10,2,0,19,192,10,187,0,11,192,0,14,12,9,11,120,12,2,0,119,0,218,255,0,13,174,0,19,192,13,187,0,15,192,0,27,192,15,31,3,16,188,192,25,17,16,1,78,18,17,0,19,192,18,187,0,19,192,0,0,20,2,0,19,192,20,187,0,21,192,0,27,192,21,31,3,22,188,192,25,23,22,1,78,24,23,0,19,192,24,187,0,26,192,0,13,27,19,26,121,27,6,0,1,191,58,0,134,192,0,0,148,98,1,0,191,0,0,0,119,0,193,255,0,28,2,0,0,29,181,0,0,30,182,0,0,31,174,0,1,192,105,20,78,32,192,0,1,192,106,20,78,33,192,0,135,34,53,0,28,29,30,31,32,33,0,0,0,175,34,0,0,35,175,0,19,192,35,187,0,37,192,0,14,38,187,37,120,38,6,0,1,191,55,0,134,192,0,0,148,98,1,0,191,0,0,0,119,0,171,255,32,192,184,15,121,192,39,0,0,157,173,0,26,192,157,1,41,192,192,24,42,192,192,24,0,158,192,0,0,173,158,0,0,159,173,0,19,192,159,187,0,160,192,0,25,162,160,1,19,192,162,187,0,163,192,0,19,192,163,187,0,164,192,0,1,192,1,0,17,165,192,164,120,165,2,0,119,0,118,0,0,166,2,0,0,167,173,0,19,192,167,187,0,168,192,0,3,169,172,168,78,170,169,0,19,192,170,187,0,171,192,0,26,4,171,1,19,192,4,187,0,5,192,0,135,192,12,0,166,5,0,0,0,6,173,0,26,192,6,1,41,192,192,24,42,192,192,24,0,7,192,0,0,173,7,0,119,0,225,255,1,191,94,0,134,192,0,0,148,98,1,0,191,0,0,0,25,39,176,6,79,192,39,0,103,191,39,1,41,191,191,8,20,192,192,191,0,40,192,0,2,192,0,0,255,255,0,0,19,192,40,192,0,41,192,0,0,42,2,0,19,192,42,187,0,43,192,0,27,192,43,31,3,44,188,192,25,45,44,23,79,192,45,0,103,191,45,1,41,191,191,8,20,192,192,191,0,46,192,0,2,192,0,0,255,255,0,0,19,192,46,192,0,48,192,0,4,49,48,41,2,192,0,0,255,255,0,0,19,192,49,192,0,50,192,0,19,192,50,187,83,45,192,0,42,191,50,8,107,45,1,191,0,51,2,0,1,192,27,0,135,191,54,0,51,192,0,0,1,191,27,0,83,176,191,0,0,52,2,0,25,53,176,2,83,53,52,0,0,54,174,0,25,55,176,3,83,55,54,0,0,56,175,0,25,57,176,11,83,57,56,0,135,59,55,0,176,172,0,0,41,191,59,24,42,191,191,24,33,60,191,0,120,60,39,0,0,61,173,0,26,191,61,1,41,191,191,24,42,191,191,24,0,62,191,0,0,173,62,0,0,63,173,0,19,191,63,187,0,64,191,0,25,65,64,1,19,191,65,187,0,66,191,0,19,191,66,187,0,67,191,0,1,191,1,0,17,68,191,67,120,68,2,0,119,0,21,0,0,70,2,0,0,71,173,0,19,191,71,187,0,72,191,0,3,73,172,72,78,74,73,0,19,191,74,187,0,75,191,0,26,76,75,1,19,191,76,187,0,77,191,0,135,191,12,0,70,77,0,0,0,78,173,0,26,191,78,1,41,191,191,24,42,191,191,24,0,79,191,0,0,173,79,0,119,0,225,255,1,1,1,0,0,81,1,0,137,185,0,0,139,81,0,0,140,1,188,0,0,0,0,0,2,183,0,0,255,0,0,0,2,184,0,0,76,1,0,0,1,181,0,0,136,185,0,0,0,182,185,0,136,185,0,0,25,185,185,32,137,185,0,0,0,1,0,0,0,2,1,0,25,79,2,1,78,90,79,0,0,173,90,0,0,101,1,0,25,112,101,3,78,123,112,0,0,172,123,0,1,180,0,0,1,185,128,1,82,134,185,0,0,169,134,0,0,145,172,0,19,185,145,183,0,156,185,0,1,185,56,14,78,3,185,0,19,185,3,183,0,14,185,0,13,25,156,14,120,25,215,0,0,36,173,0,19,185,36,183,0,47,185,0,82,58,184,0,27,185,47,15,3,69,58,185,25,76,69,1,78,77,76,0,0,174,77,0,0,78,174,0,19,185,78,183,0,80,185,0,26,81,80,1,19,185,81,183,0,82,185,0,0,83,169,0,135,84,56,0,82,83,0,0,19,185,84,183,0,85,185,0,0,86,172,0,19,185,86,183,0,87,185,0,82,88,184,0,27,185,87,15,3,89,88,185,25,91,89,1,78,92,91,0,19,185,92,183,0,93,185,0,26,94,93,1,19,185,94,183,0,95,185,0,0,96,169,0,135,97,56,0,95,96,0,0,19,185,97,183,0,98,185,0,41,185,98,1,0,99,185,0,15,100,85,99,120,100,173,0,0,102,173,0,19,185,102,183,0,103,185,0,82,104,184,0,27,185,103,15,3,105,104,185,25,106,105,4,78,107,106,0,19,185,107,183,0,108,185,0,0,109,172,0,19,185,109,183,0,110,185,0,82,111,184,0,27,185,110,15,3,113,111,185,25,114,113,4,78,115,114,0,19,185,115,183,0,116,185,0,4,117,108,116,19,185,117,183,0,118,185,0,0,177,118,0,0,119,177,0,19,185,119,183,0,120,185,0,25,121,120,50,19,185,121,183,0,122,185,0,0,177,122,0,135,124,22,0,30,185,124,100,38,185,185,255,0,125,185,0,19,185,125,183,0,126,185,0,0,178,126,0,0,127,178,0,19,185,127,183,0,128,185,0,0,129,177,0,19,185,129,183,0,130,185,0,15,131,130,128,120,131,127,0,0,132,172,0,19,185,132,183,0,133,185,0,82,135,184,0,27,185,133,15,3,136,135,185,25,137,136,6,78,138,137,0,19,185,138,183,0,139,185,0,1,185,0,0,1,186,5,0,138,139,185,186,64,92,0,0,72,92,0,0,80,92,0,0,88,92,0,0,96,92,0,0,119,0,11,0,1,177,10,0,119,0,9,0,1,177,1,0,119,0,7,0,1,177,20,0,119,0,5,0,1,177,5,0,119,0,3,0,1,177,15,0,119,0,1,0,135,140,22,0,30,185,140,100,38,185,185,255,0,141,185,0,19,185,141,183,0,142,185,0,0,178,142,0,0,143,178,0,19,185,143,183,0,144,185,0,0,146,177,0,19,185,146,183,0,147,185,0,15,148,147,144,120,148,83,0,1,185,128,1,82,149,185,0,25,150,149,38,0,176,150,0,0,151,172,0,0,152,169,0,135,153,56,0,151,152,0,0,0,168,153,0,1,170,0,0,0,154,170,0,19,185,154,183,0,155,185,0,0,157,168,0,19,185,157,183,0,158,185,0,15,159,155,158,120,159,2,0,119,0,63,0,0,160,170,0,19,185,160,183,0,161,185,0,0,162,169,0,3,163,162,161,78,164,163,0,0,165,176,0,135,166,9,0,164,165,0,0,0,175,166,0,0,4,174,0,0,5,170,0,19,185,5,183,0,6,185,0,0,7,169,0,3,8,7,6,78,9,8,0,19,185,9,183,0,10,185,0,1,185,61,14,27,186,10,31,3,11,185,186,25,12,11,1,83,12,4,0,1,171,0,0,0,13,171,0,19,186,13,183,0,15,186,0,0,16,175,0,19,186,16,183,0,17,186,0,15,18,15,17,120,18,2,0,119,0,22,0,0,19,174,0,0,20,170,0,19,186,20,183,0,21,186,0,0,22,176,0,3,23,22,21,78,24,23,0,19,186,24,183,0,26,186,0,82,27,184,0,27,186,26,15,3,28,27,186,25,29,28,1,83,29,19,0,0,30,171,0,25,186,30,1,41,186,186,24,42,186,186,24,0,31,186,0,0,171,31,0,119,0,227,255,0,32,170,0,25,186,32,1,41,186,186,24,42,186,186,24,0,33,186,0,0,170,33,0,119,0,186,255,1,180,1,0,1,186,128,1,82,34,186,0,1,186,44,1,3,35,34,186,0,179,35,0,1,186,128,1,82,37,186,0,1,186,84,1,3,38,37,186,0,167,38,0,0,39,174,0,19,186,39,183,0,40,186,0,1,186,56,14,78,41,186,0,19,186,41,183,0,42,186,0,25,43,42,1,13,44,40,43,0,45,180,0,41,186,45,24,42,186,186,24,33,46,186,0,120,44,51,0,120,46,10,0,0,72,1,0,25,73,72,2,78,74,73,0,0,75,173,0,135,186,12,0,74,75,0,0,137,182,0,0,1,186,1,0,139,186,0,0,0,57,172,0,0,59,179,0,135,186,29,0,57,59,0,0,0,60,167,0,1,185,64,0,1,187,110,0,135,186,24,0,185,187,60,0,0,61,179,0,0,62,167,0,135,186,26,0,61,62,0,0,0,63,174,0,19,186,63,183,0,64,186,0,26,65,64,1,19,186,65,183,0,66,186,0,0,67,167,0,135,186,29,0,66,67,0,0,0,68,179,0,0,70,167,0,135,186,26,0,68,70,0,0,0,71,179,0,1,187,2,0,134,186,0,0,96,242,0,0,71,187,0,0,0,72,1,0,25,73,72,2,78,74,73,0,0,75,173,0,135,186,12,0,74,75,0,0,137,182,0,0,1,186,1,0,139,186,0,0,121,46,3,0,1,180,157,255,119,0,2,0,1,180,153,255,0,48,180,0,19,186,48,183,0,49,186,0,135,50,22,0,30,186,50,4,38,186,186,255,0,51,186,0,3,52,49,51,19,186,52,183,0,53,186,0,0,54,179,0,1,187,64,0,135,186,24,0,187,53,54,0,135,186,10,0,0,55,172,0,0,56,179,0,134,186,0,0,24,78,1,0,55,56,0,0,0,72,1,0,25,73,72,2,78,74,73,0,0,75,173,0,135,186,12,0,74,75,0,0,137,182,0,0,1,186,1,0,139,186,0,0,140,0,172,0,0,0,0,0,2,166,0,0,255,0,0,0,1,164,0,0,136,167,0,0,0,165,167,0,136,167,0,0,25,167,167,80,137,167,0,0,25,159,165,54,25,160,165,24,25,151,165,20,25,158,165,16,1,168,5,0,1,169,5,0,1,170,153,255,1,171,89,0,135,167,14,0,168,169,170,171,1,171,4,0,1,170,4,0,1,169,154,255,1,168,90,0,135,167,15,0,171,170,169,168,1,167,1,0,1,168,150,0,135,0,57,0,167,168,0,0,0,154,0,0,0,1,154,0,1,168,0,0,13,63,1,168,121,63,3,0,137,165,0,0,139,0,0,0,1,168,125,13,78,74,168,0,1,168,126,13,78,85,168,0,135,96,58,0,74,85,0,0,0,153,96,0,0,107,153,0,19,168,107,166,0,118,168,0,14,129,166,118,121,129,15,1,0,140,153,0,19,168,140,166,0,2,168,0,1,168,172,13,27,167,2,7,3,13,168,167,0,157,13,0,1,162,102,0,1,163,8,0,0,24,162,0,0,35,163,0,0,46,162,0,19,167,46,166,0,57,167,0,25,59,57,50,19,167,59,166,0,60,167,0,0,61,163,0,19,167,61,166,0,62,167,0,25,64,62,40,19,167,64,166,0,65,167,0,135,167,15,0,24,35,60,65,1,167,8,0,83,151,167,0,25,66,151,1,1,167,6,0,83,66,167,0,25,67,151,2,1,167,152,255,83,67,167,0,25,68,151,3,1,167,88,0,83,68,167,0,0,69,162,0,19,167,69,166,0,70,167,0,26,71,70,2,19,167,71,166,0,72,167,0,83,158,72,0,0,73,163,0,25,75,158,1,83,75,73,0,0,76,162,0,19,167,76,166,0,77,167,0,25,78,77,50,19,167,78,166,0,79,167,0,25,80,158,2,83,80,79,0,0,81,163,0,19,167,81,166,0,82,167,0,25,83,82,42,19,167,83,166,0,84,167,0,25,86,158,3,83,86,84,0,0,87,153,0,1,168,0,0,135,167,39,0,168,87,0,0,0,88,153,0,135,89,40,0,88,0,0,0,0,152,89,0,0,90,152,0,135,167,29,0,90,159,0,0,0,91,162,0,19,167,91,166,0,92,167,0,25,93,92,26,19,167,93,166,0,94,167,0,0,95,163,0,19,167,95,166,0,97,167,0,25,98,97,28,19,167,98,166,0,99,167,0,135,167,59,0,94,99,159,0,1,167,60,14,78,100,167,0,19,167,100,166,0,101,167,0,25,102,101,47,2,167,0,0,255,255,0,0,19,167,102,167,0,103,167,0,1,167,0,1,82,104,167,0,1,167,1,0,135,105,0,0,103,167,104,0,0,156,105,0,0,106,162,0,19,167,106,166,0,108,167,0,25,109,108,13,19,167,109,166,0,110,167,0,0,111,163,0,19,167,111,166,0,112,167,0,25,113,112,2,19,167,113,166,0,114,167,0,0,115,152,0,0,116,156,0,1,168,24,0,1,169,24,0,135,167,60,0,110,114,168,169,115,116,0,0,0,117,154,0,1,169,13,0,135,167,38,0,169,117,0,0,0,119,152,0,19,167,119,166,0,120,167,0,1,167,76,1,82,121,167,0,27,167,120,15,3,122,121,167,0,155,122,0,0,123,155,0,25,124,123,2,78,125,124,0,19,167,125,166,0,126,167,0,34,127,126,20,0,128,154,0,121,127,9,0,0,130,155,0,25,131,130,2,78,132,131,0,19,167,132,166,0,133,167,0,135,167,61,0,128,133,0,0,119,0,8,0,25,134,128,5,1,167,77,0,83,134,167,0,0,135,154,0,25,136,135,6,1,167,88,0,83,136,167,0,1,169,12,0,135,167,38,0,169,160,0,0,0,137,155,0,25,138,137,9,78,139,138,0,19,167,139,166,0,141,167,0,41,167,141,2,0,142,167,0,19,167,142,166,0,143,167,0,0,161,143,0,0,144,154,0,25,145,144,13,0,146,161,0,19,167,146,166,0,147,167,0,3,148,160,147,78,167,148,0,83,145,167,0,102,169,148,1,107,145,1,169,102,167,148,2,107,145,2,167,102,169,148,3,107,145,3,169,0,149,154,0,0,150,155,0,25,3,150,3,78,4,3,0,19,169,4,166,0,5,169,0,135,169,61,0,149,5,0,0,0,6,154,0,0,7,155,0,25,8,7,4,78,9,8,0,19,169,9,166,0,10,169,0,135,169,61,0,6,10,0,0,0,11,154,0,0,12,155,0,25,14,12,7,78,15,14,0,19,169,15,166,0,16,169,0,135,169,61,0,11,16,0,0,0,17,154,0,0,18,157,0,25,19,18,2,78,20,19,0,19,169,20,166,0,21,169,0,135,169,61,0,17,21,0,0,0,22,154,0,0,23,157,0,25,25,23,3,78,26,25,0,19,169,26,166,0,27,169,0,135,169,61,0,22,27,0,0,0,28,154,0,1,169,52,1,79,169,169,0,1,167,52,1,103,167,167,1,41,167,167,8,20,169,169,167,0,29,169,0,135,169,61,0,28,29,0,0,0,30,154,0,1,169,54,1,79,169,169,0,1,167,54,1,103,167,167,1,41,167,167,8,20,169,169,167,0,31,169,0,135,169,61,0,30,31,0,0,0,32,154,0,0,33,155,0,25,34,33,10,79,169,34,0,103,167,34,1,41,167,167,8,20,169,169,167,0,36,169,0,135,169,61,0,32,36,0,0,0,37,157,0,25,38,37,6,78,39,38,0,19,169,39,166,0,40,169,0,25,41,40,28,19,169,41,166,0,42,169,0,135,169,38,0,42,159,0,0,0,43,154,0,135,169,26,0,43,159,0,0,0,44,154,0,135,169,62,0,151,158,44,0,119,0,36,0,1,169,125,13,78,45,169,0,1,169,126,13,78,47,169,0,135,48,63,0,45,47,0,0,0,152,48,0,0,49,152,0,19,169,49,166,0,50,169,0,25,51,50,14,19,169,51,166,0,52,169,0,0,53,154,0,135,169,38,0,52,53,0,0,1,169,112,13,1,167,8,0,83,169,167,0,1,167,113,13,1,169,8,0,83,167,169,0,1,169,114,13,1,167,150,255,83,169,167,0,1,167,115,13,1,169,86,0,83,167,169,0,1,169,112,13,78,54,169,0,1,169,113,13,78,55,169,0,0,56,154,0,135,169,16,0,54,55,56,0,1,167,0,0,1,168,1,0,134,169,0,0,204,62,1,0,167,168,0,0,1,168,0,0,1,167,1,0,134,169,0,0,204,62,1,0,168,167,0,0,0,58,154,0,135,169,64,0,58,0,0,0,137,165,0,0,139,0,0,0,140,1,151,0,0,0,0,0,2,143,0,0,255,0,0,0,1,141,0,0,136,144,0,0,0,142,144,0,136,144,0,0,25,144,144,16,137,144,0,0,25,134,142,8,0,2,0,0,1,135,0,0,1,139,1,0,1,138,0,0,1,140,0,0,1,144,16,1,82,46,144,0,1,145,0,0,1,146,0,0,1,147,159,255,1,148,95,0,1,149,0,0,1,150,4,0,135,144,3,0,145,146,147,148,149,46,150,0,0,57,139,0,19,144,57,143,0,68,144,0,32,79,68,0,0,90,140,0,41,144,90,24,42,144,144,24,33,101,144,0,20,144,79,101,0,137,144,0,120,137,8,0,0,112,2,0,0,123,138,0,135,3,65,0,112,123,0,0,0,135,3,0,1,139,0,0,1,138,0,0,134,144,0,0,224,95,1,0,134,0,0,0,78,14,134,0,19,144,14,143,0,25,144,0,32,36,25,5,120,36,2,0,119,0,230,255,0,40,140,0,41,144,40,24,42,144,144,24,33,41,144,0,121,41,4,0,1,140,0,0,1,139,1,0,119,0,222,255,25,42,134,1,79,144,42,0,103,150,42,1,41,150,150,8,20,144,144,150,0,43,144,0,2,144,0,0,255,255,0,0,19,144,43,144,0,44,144,0,1,147,34,0,1,146,18,0,138,44,147,146,212,102,0,0,112,103,0,0,40,104,0,0,188,104,0,0,208,102,0,0,108,105,0,0,136,105,0,0,208,102,0,0,208,102,0,0,208,102,0,0,208,102,0,0,208,102,0,0,208,102,0,0,208,102,0,0,208,102,0,0,208,102,0,0,208,102,0,0,144,105,0,0,119,0,190,255,0,45,2,0,25,47,45,3,78,48,47,0,41,144,48,24,42,144,144,24,33,49,144,0,120,49,2,0,119,0,182,255,1,138,1,0,0,50,2,0,25,51,50,3,78,52,51,0,19,144,52,143,0,53,144,0,26,54,53,1,19,144,54,143,0,55,144,0,83,51,55,0,0,56,2,0,25,58,56,3,78,59,58,0,19,144,59,143,0,60,144,0,0,61,2,0,25,62,61,1,78,63,62,0,19,144,63,143,0,64,144,0,15,65,60,64,121,65,8,0,0,66,2,0,25,67,66,3,78,69,67,0,0,70,2,0,25,71,70,1,83,71,69,0,1,138,0,0,1,139,1,0,119,0,151,255,0,96,2,0,25,97,96,3,78,98,97,0,19,144,98,143,0,99,144,0,34,100,99,8,120,100,2,0,119,0,143,255,1,138,3,0,0,102,2,0,25,103,102,3,78,104,103,0,19,144,104,143,0,105,144,0,25,106,105,1,19,144,106,143,0,107,144,0,83,103,107,0,0,108,2,0,25,109,108,3,78,110,109,0,19,144,110,143,0,111,144,0,0,113,2,0,25,114,113,1,78,115,114,0,19,144,115,143,0,116,144,0,25,117,116,6,17,118,117,111,121,118,14,0,0,119,2,0,25,120,119,3,78,121,120,0,19,144,121,143,0,122,144,0,26,124,122,6,25,125,124,1,19,144,125,143,0,126,144,0,0,127,2,0,25,128,127,1,83,128,126,0,1,138,0,0,1,139,1,0,119,0,105,255,0,72,2,0,25,73,72,2,78,74,73,0,41,144,74,24,42,144,144,24,33,75,144,0,120,75,2,0,119,0,97,255,1,138,2,0,0,76,2,0,25,77,76,2,78,78,77,0,19,144,78,143,0,80,144,0,26,81,80,1,19,144,81,143,0,82,144,0,83,77,82,0,0,83,2,0,25,84,83,2,78,85,84,0,19,144,85,143,0,86,144,0,0,87,2,0,78,88,87,0,19,144,88,143,0,89,144,0,15,91,86,89,121,91,7,0,0,92,2,0,25,93,92,2,78,94,93,0,0,95,2,0,83,95,94,0,1,138,0,0,1,139,1,0,119,0,68,255,0,129,2,0,25,130,129,2,78,131,130,0,19,144,131,143,0,132,144,0,34,133,132,11,120,133,2,0,119,0,60,255,1,138,4,0,0,4,2,0,25,5,4,2,78,6,5,0,19,144,6,143,0,7,144,0,25,8,7,1,19,144,8,143,0,9,144,0,83,5,9,0,0,10,2,0,25,11,10,2,78,12,11,0,19,144,12,143,0,13,144,0,0,15,2,0,78,16,15,0,19,144,16,143,0,17,144,0,25,18,17,8,17,19,18,13,121,19,13,0,0,20,2,0,25,21,20,2,78,22,21,0,19,144,22,143,0,23,144,0,26,24,23,8,25,26,24,1,19,144,26,143,0,27,144,0,0,28,2,0,83,28,27,0,1,138,0,0,1,139,1,0,119,0,24,255,0,29,135,0,41,144,29,24,42,144,144,24,33,30,144,0,121,30,19,255,1,141,25,0,119,0,27,0,1,141,26,0,119,0,25,0,1,150,0,0,1,149,0,0,1,148,159,255,1,147,95,0,135,144,14,0,150,149,148,147,1,144,0,1,82,35,144,0,1,144,75,0,1,147,1,0,135,37,0,0,144,147,35,0,0,136,37,0,0,38,136,0,1,144,37,0,1,148,15,0,1,149,84,0,1,150,64,0,1,146,0,0,135,147,60,0,144,148,149,150,146,38,0,0,1,140,1,0,119,0,247,254,32,147,141,25,121,147,12,0,0,31,135,0,19,147,31,143,0,32,147,0,26,33,32,1,19,147,33,143,0,34,147,0,0,1,34,0,0,39,1,0,137,142,0,0,139,39,0,0,119,0,7,0,32,147,141,26,121,147,5,0,1,1,255,255,0,39,1,0,137,142,0,0,139,39,0,0,1,147,0,0,139,147,0,0,140,1,171,0,0,0,0,0,2,162,0,0,255,0,0,0,2,163,0,0,28,1,0,0,2,164,0,0,32,1,0,0,1,160,0,0,136,165,0,0,0,161,165,0,136,165,0,0,25,165,165,64,137,165,0,0,25,159,161,14,25,153,161,4,0,2,0,0,1,166,0,0,1,167,0,0,1,168,159,255,1,169,95,0,135,165,14,0,166,167,168,169,1,152,0,0,0,63,152,0,19,165,63,162,0,74,165,0,0,85,2,0,19,165,85,162,0,96,165,0,15,107,74,96,120,107,2,0,119,0,60,0,0,118,152,0,19,165,118,162,0,129,165,0,27,140,129,6,19,165,140,162,0,3,165,0,0,155,3,0,0,14,152,0,19,165,14,162,0,25,165,0,82,36,164,0,3,47,36,25,78,58,47,0,82,59,163,0,0,60,155,0,19,165,60,162,0,61,165,0,3,62,59,61,135,165,29,0,58,62,0,0,82,64,163,0,135,65,13,0,64,0,0,0,19,165,65,162,0,66,165,0,0,154,66,0,0,67,154,0,19,165,67,162,0,68,165,0,0,69,155,0,19,165,69,162,0,70,165,0,25,71,70,6,15,72,68,71,121,72,17,0,82,73,163,0,0,75,154,0,19,165,75,162,0,76,165,0,3,77,73,76,0,78,155,0,19,165,78,162,0,79,165,0,25,80,79,6,0,81,154,0,19,165,81,162,0,82,165,0,4,83,80,82,1,169,32,0,135,165,66,0,77,169,83,0,0,84,152,0,19,165,84,162,0,86,165,0,25,87,86,1,19,165,87,162,0,88,165,0,0,152,88,0,119,0,189,255,1,169,0,0,1,168,0,0,1,167,159,255,1,166,95,0,135,165,15,0,169,168,167,166,1,166,1,0,1,167,45,0,135,165,24,0,166,167,159,0,1,167,72,0,1,166,4,0,135,165,16,0,167,166,159,0,1,166,47,0,1,167,1,0,1,168,60,0,1,169,20,0,1,170,1,0,135,165,42,0,166,167,168,169,170,0,0,0,1,170,13,0,1,169,10,0,1,168,54,0,1,167,87,0,135,165,15,0,170,169,168,167,1,165,0,1,82,89,165,0,1,165,2,0,1,167,6,0,135,90,0,0,165,167,89,0,0,156,90,0,1,155,0,0,1,152,0,0,1,157,0,0,0,91,155,0,135,167,67,0,91,0,0,0,0,92,152,0,19,167,92,162,0,93,167,0,0,94,155,0,19,167,94,162,0,95,167,0,4,97,93,95,27,98,97,12,25,99,98,0,25,100,99,13,19,167,100,162,0,101,167,0,0,158,101,0,0,102,158,0,0,103,158,0,19,167,103,162,0,104,167,0,25,105,104,12,19,167,105,162,0,106,167,0,1,165,16,0,1,168,52,0,135,167,17,0,165,102,168,106,0,108,152,0,19,167,108,162,0,109,167,0,82,110,164,0,3,111,110,109,78,112,111,0,135,113,56,0,112,159,0,0,0,151,113,0,134,167,0,0,224,95,1,0,153,0,0,0,78,114,153,0,19,167,114,162,0,115,167,0,32,116,115,5,120,116,17,0,0,50,157,0,41,167,50,24,42,167,167,24,33,51,167,0,40,167,51,1,0,52,167,0,38,167,52,1,0,53,167,0,19,167,53,162,0,54,167,0,0,157,54,0,0,55,151,0,0,56,156,0,135,167,68,0,55,159,56,0,119,0,233,255,0,117,158,0,0,119,158,0,19,167,119,162,0,120,167,0,25,121,120,12,19,167,121,162,0,122,167,0,1,168,16,0,1,165,52,0,135,167,17,0,168,117,165,122,0,123,157,0,41,167,123,24,42,167,167,24,33,124,167,0,121,124,6,0,0,125,151,0,0,126,156,0,135,167,68,0,125,159,126,0,1,157,0,0,25,127,153,1,79,167,127,0,103,165,127,1,41,165,165,8,20,167,167,165,0,128,167,0,2,167,0,0,255,255,0,0,19,167,128,167,0,130,167,0,1,167,34,0,1,165,7,0,138,130,167,165,228,109,0,0,84,110,0,0,224,109,0,0,224,109,0,0,224,109,0,0,220,110,0,0,228,110,0,0,119,0,67,0,0,131,152,0,41,167,131,24,42,167,167,24,33,132,167,0,121,132,62,0,0,133,152,0,19,167,133,162,0,134,167,0,0,135,155,0,19,167,135,162,0,136,167,0,13,137,134,136,121,137,8,0,0,138,155,0,19,167,138,162,0,139,167,0,26,141,139,1,19,167,141,162,0,142,167,0,0,155,142,0,0,143,152,0,19,167,143,162,0,144,167,0,26,145,144,1,19,167,145,162,0,146,167,0,0,152,146,0,119,0,39,0,0,147,152,0,19,167,147,162,0,148,167,0,0,149,2,0,19,167,149,162,0,150,167,0,26,4,150,1,15,5,148,4,121,5,30,0,0,6,152,0,19,167,6,162,0,7,167,0,25,8,7,1,19,167,8,162,0,9,167,0,0,152,9,0,0,10,152,0,19,167,10,162,0,11,167,0,0,12,155,0,19,167,12,162,0,13,167,0,4,15,11,13,1,167,5,0,15,16,167,15,121,16,13,0,0,17,155,0,19,167,17,162,0,18,167,0,25,19,18,1,19,167,19,162,0,20,167,0,0,155,20,0,119,0,5,0,1,160,19,0,119,0,40,0,1,160,18,0,119,0,38,0,0,27,155,0,135,167,67,0,27,0,0,0,0,28,152,0,19,167,28,162,0,29,167,0,0,30,155,0,19,167,30,162,0,31,167,0,4,32,29,31,27,33,32,12,25,34,33,0,25,35,34,13,19,167,35,162,0,37,167,0,0,158,37,0,0,38,158,0,0,39,158,0,19,167,39,162,0,40,167,0,25,41,40,12,19,167,41,162,0,42,167,0,1,165,16,0,1,168,52,0,135,167,17,0,165,38,168,42,0,43,152,0,19,167,43,162,0,44,167,0,82,45,164,0,3,46,45,44,78,48,46,0,135,49,56,0,48,159,0,0,0,151,49,0,119,0,88,255,32,167,160,18,121,167,6,0,1,1,255,255,0,57,1,0,137,161,0,0,139,57,0,0,119,0,13,0,32,167,160,19,121,167,11,0,0,21,152,0,19,167,21,162,0,22,167,0,82,23,164,0,3,24,23,22,78,26,24,0,0,1,26,0,0,57,1,0,137,161,0,0,139,57,0,0,1,167,0,0,139,167,0,0,140,0,132,0,0,0,0,0,2,127,0,0,255,0,0,0,2,128,0,0,103,20,0,0,2,129,0,0,105,20,0,0,1,125,0,0,136,130,0,0,0,126,130,0,136,130,0,0,25,130,130,16,137,130,0,0,1,130,44,0,1,131,100,0,134,1,0,0,44,33,1,0,130,131,0,0,0,121,1,0,0,32,121,0,19,131,32,127,0,43,131,0,1,130,0,0,1,131,0,1,138,43,130,131,64,116,0,0,200,116,0,0,248,116,0,0,4,117,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,60,116,0,0,12,117,0,0,119,0,244,254,1,131,45,0,1,130,104,0,134,54,0,0,44,33,1,0,131,130,0,0,0,123,54,0,0,65,123,0,19,130,65,127,0,76,130,0,13,87,76,127,120,87,233,254,0,98,123,0,19,130,98,127,0,109,130,0,25,2,109,1,19,130,2,127,0,13,130,0,1,130,32,1,82,24,130,0,135,25,69,0,13,24,0,0,0,123,25,0,0,26,123,0,134,27,0,0,68,106,0,0,26,0,0,0,0,123,27,0,0,28,123,0,19,130,28,127,0,29,130,0,13,30,29,127,120,30,212,254,1,125,5,0,119,0,19,0,1,130,1,0,134,19,0,0,56,23,1,0,130,0,0,0,0,123,19,0,0,20,123,0,19,130,20,127,0,21,130,0,13,22,21,127,120,22,200,254,1,125,29,0,119,0,7,0,134,130,0,0,48,99,1,0,119,0,195,254,1,125,31,0,119,0,2,0,119,0,254,255,32,130,125,5,121,130,230,0,0,31,123,0,1,130,56,14,83,130,31,0,1,123,0,0,0,33,123,0,19,130,33,127,0,34,130,0,34,35,34,38,120,35,2,0,119,0,27,0,0,36,123,0,19,130,36,127,0,37,130,0,1,130,61,14,27,131,37,31,3,38,130,131,25,39,38,1,78,40,39,0,19,131,40,127,0,41,131,0,1,131,56,14,78,42,131,0,19,131,42,127,0,44,131,0,25,45,44,1,13,46,41,45,121,46,3,0,1,125,8,0,119,0,8,0,0,88,123,0,25,131,88,1,41,131,131,24,42,131,131,24,0,89,131,0,0,123,89,0,119,0,225,255,32,131,125,8,121,131,86,0,1,131,0,1,82,47,131,0,1,131,2,0,1,130,6,0,135,48,0,0,131,130,47,0,0,124,48,0,0,49,123,0,19,130,49,127,0,50,130,0,41,130,50,1,0,51,130,0,0,52,124,0,3,53,52,51,78,55,53,0,83,129,55,0,0,56,123,0,19,130,56,127,0,57,130,0,41,130,57,1,0,58,130,0,25,59,58,1,0,60,124,0,3,61,60,59,78,62,61,0,1,130,106,20,83,130,62,0,78,63,129,0,19,130,63,127,0,64,130,0,25,66,64,4,1,130,12,0,17,67,130,66,121,67,4,0,1,130,4,0,83,128,130,0,119,0,17,0,78,68,129,0,19,130,68,127,0,69,130,0,34,70,69,4,121,70,4,0,1,130,0,0,83,128,130,0,119,0,9,0,78,71,129,0,19,130,71,127,0,72,130,0,26,73,72,4,19,130,73,127,0,74,130,0,83,128,74,0,119,0,1,0,1,130,106,20,78,75,130,0,19,130,75,127,0,77,130,0,25,78,77,3,1,130,9,0,17,79,130,78,121,79,5,0,1,130,104,20,1,131,3,0,83,130,131,0,119,0,21,0,1,131,106,20,78,80,131,0,19,131,80,127,0,81,131,0,34,82,81,3,121,82,5,0,1,131,104,20,1,130,0,0,83,131,130,0,119,0,11,0,1,130,106,20,78,83,130,0,19,130,83,127,0,84,130,0,26,85,84,3,19,130,85,127,0,86,130,0,1,130,104,20,83,130,86,0,119,0,1,0,1,130,128,1,82,90,130,0,0,124,90,0,1,123,0,0,0,91,123,0,19,130,91,127,0,92,130,0,34,93,92,38,120,93,2,0,119,0,92,0,0,94,123,0,19,130,94,127,0,95,130,0,1,130,61,14,27,131,95,31,3,96,130,131,25,97,96,1,78,99,97,0,19,131,99,127,0,100,131,0,1,131,56,14,78,101,131,0,19,131,101,127,0,102,131,0,25,103,102,1,14,104,100,103,121,104,68,0,0,105,123,0,0,106,124,0,135,107,9,0,105,106,0,0,0,120,107,0,1,122,0,0,0,108,122,0,19,131,108,127,0,110,131,0,0,111,120,0,19,131,111,127,0,112,131,0,15,113,110,112,120,113,2,0,119,0,27,0,0,114,122,0,19,131,114,127,0,115,131,0,0,116,124,0,3,117,116,115,78,118,117,0,19,131,118,127,0,119,131,0,1,131,76,1,82,3,131,0,27,131,119,15,3,4,3,131,25,5,4,10,1,131,32,3,19,131,131,127,83,5,131,0,1,130,32,3,42,130,130,8,107,5,1,130,0,6,122,0,25,130,6,1], eb + 20480);
  HEAPU8.set([41,130,130,24,42,130,130,24,0,7,130,0,0,122,7,0,119,0,222,255,0,8,123,0,19,130,8,127,0,9,130,0,1,130,61,14,27,131,9,31,3,10,130,131,25,11,10,23,79,131,11,0,103,130,11,1,41,130,130,8,20,131,131,130,0,12,131,0,2,131,0,0,255,255,0,0,19,131,12,131,0,14,131,0,1,131,232,3,3,15,14,131,2,131,0,0,255,255,0,0,19,131,15,131,0,16,131,0,19,131,16,127,83,11,131,0,42,130,16,8,107,11,1,130,0,17,123,0,25,130,17,1,41,130,130,24,42,130,130,24,0,18,130,0,0,123,18,0,119,0,160,255,1,0,1,0,0,23,0,0,137,126,0,0,139,23,0,0,119,0,14,0,32,130,125,29,121,130,6,0,1,0,1,0,0,23,0,0,137,126,0,0,139,23,0,0,119,0,7,0,32,130,125,31,121,130,5,0,1,0,0,0,0,23,0,0,137,126,0,0,139,23,0,0,1,130,0,0,139,130,0,0,140,1,139,0,0,0,0,0,2,133,0,0,255,0,0,0,2,134,0,0,255,255,0,0,1,131,0,0,136,135,0,0,0,132,135,0,136,135,0,0,25,135,135,48,137,135,0,0,25,124,132,28,25,125,132,16,25,127,132,12,0,1,0,0,1,135,128,1,82,2,135,0,0,130,2,0,0,34,1,0,0,45,130,0,135,56,9,0,34,45,0,0,0,129,56,0,0,67,129,0,41,135,67,24,42,135,135,24,33,78,135,0,120,78,3,0,1,131,3,0,119,0,73,0,0,89,130,0,0,100,129,0,1,135,4,0,1,136,2,0,1,137,155,255,1,138,93,0,134,111,0,0,160,32,0,0,89,100,135,136,137,138,0,0,0,128,111,0,0,3,128,0,19,138,3,133,0,14,138,0,14,25,133,14,120,25,3,0,1,131,19,0,119,0,55,0,0,27,128,0,19,138,27,133,0,28,138,0,0,29,130,0,3,30,29,28,78,31,30,0,0,126,31,0,0,32,126,0,1,138,11,0,135,33,48,0,32,138,0,0,41,138,33,24,42,138,138,24,33,35,138,0,121,35,35,0,0,36,1,0,19,138,36,133,0,37,138,0,1,138,61,14,27,137,37,31,3,38,138,137,0,122,38,0,1,138,64,0,1,136,46,0,135,137,24,0,138,136,124,0,1,137,79,0,83,127,137,0,25,39,127,2,1,137,103,0,83,39,137,0,25,40,127,1,1,137,14,0,83,40,137,0,25,41,127,3,1,137,38,0,83,41,137,0,1,137,0,0,134,42,0,0,140,24,0,0,127,137,124,0,0,129,42,0,0,43,129,0,19,137,43,133,0,44,137,0,13,46,133,44,120,46,180,255,1,131,8,0,119,0,6,0,1,136,60,0,134,137,0,0,148,98,1,0,136,0,0,0,119,0,173,255,32,137,131,3,121,137,9,0,1,136,84,0,134,137,0,0,148,98,1,0,136,0,0,0,137,132,0,0,1,137,1,0,139,137,0,0,119,0,228,0,32,137,131,8,121,137,221,0,0,47,129,0,19,137,47,133,0,48,137,0,32,49,48,0,121,49,85,0,0,50,122,0,25,51,50,21,79,137,51,0,103,136,51,1,41,136,136,8,20,137,137,136,0,52,137,0,19,137,52,134,0,53,137,0,28,137,53,5,38,137,137,255,0,54,137,0,33,55,54,0,121,55,170,0,0,57,122,0,25,58,57,21,79,137,58,0,103,136,58,1,41,136,136,8,20,137,137,136,0,59,137,0,19,137,59,134,0,60,137,0,28,137,60,5,38,137,137,255,0,61,137,0,19,137,61,134,0,62,137,0,1,137,1,0,134,63,0,0,28,94,1,0,137,62,0,0,0,123,63,0,0,64,123,0,19,137,64,134,0,65,137,0,14,66,134,65,121,66,146,0,0,68,123,0,19,137,68,134,0,69,137,0,0,70,122,0,25,71,70,23,79,137,71,0,103,136,71,1,41,136,136,8,20,137,137,136,0,72,137,0,19,137,72,134,0,73,137,0,3,74,73,69,19,137,74,134,0,75,137,0,19,137,75,133,83,71,137,0,42,136,75,8,107,71,1,136,0,76,123,0,19,136,76,134,0,77,136,0,27,79,77,5,19,136,79,134,0,80,136,0,0,123,80,0,0,81,123,0,19,136,81,134,0,82,136,0,0,83,122,0,25,84,83,21,79,136,84,0,103,137,84,1,41,137,137,8,20,136,136,137,0,85,136,0,19,136,85,134,0,86,136,0,4,87,86,82,19,136,87,134,0,88,136,0,19,136,88,133,83,84,136,0,42,137,88,8,107,84,1,137,119,0,100,0,0,90,129,0,19,137,90,133,0,91,137,0,32,92,91,1,121,92,95,0,0,93,122,0,25,94,93,23,79,137,94,0,103,136,94,1,41,136,136,8,20,137,137,136,0,95,137,0,41,137,95,16,42,137,137,16,33,96,137,0,121,96,84,0,0,97,122,0,25,98,97,23,79,137,98,0,103,136,98,1,41,136,136,8,20,137,137,136,0,99,137,0,1,137,1,0,134,101,0,0,28,94,1,0,137,99,0,0,0,123,101,0,0,102,123,0,19,137,102,134,0,103,137,0,14,104,134,103,121,104,67,0,0,105,123,0,19,137,105,134,0,106,137,0,0,107,122,0,25,108,107,23,79,137,108,0,103,136,108,1,41,136,136,8,20,137,137,136,0,109,137,0,19,137,109,134,0,110,137,0,4,112,110,106,19,137,112,134,0,113,137,0,19,137,113,133,83,108,137,0,42,136,113,8,107,108,1,136,0,114,123,0,19,136,114,134,0,115,136,0,41,136,115,1,0,116,136,0,19,136,116,134,0,117,136,0,0,123,117,0,0,118,123,0,19,136,118,134,0,119,136,0,0,120,122,0,25,121,120,21,79,136,121,0,103,137,121,1,41,137,137,8,20,136,136,137,0,4,136,0,19,136,4,134,0,5,136,0,3,6,5,119,19,136,6,134,0,7,136,0,19,136,7,133,83,121,136,0,42,137,7,8,107,121,1,137,0,8,122,0,25,9,8,21,79,137,9,0,103,136,9,1,41,136,136,8,20,137,137,136,0,10,137,0,19,137,10,134,0,11,137,0,1,137,48,117,15,12,137,11,121,12,9,0,0,13,122,0,25,15,13,21,1,137,48,117,19,137,137,133,83,15,137,0,1,136,48,117,42,136,136,8,107,15,1,136,0,16,126,0,1,137,11,0,135,136,50,0,16,137,0,0,1,136,11,0,83,125,136,0,0,17,126,0,25,18,125,1,83,18,17,0,0,19,1,0,25,20,125,2,83,20,19,0,25,21,125,11,1,136,0,0,83,21,136,0,135,22,51,0,125,0,0,0,41,136,22,24,42,136,136,24,33,23,136,0,120,23,4,0,137,132,0,0,1,136,1,0,139,136,0,0,0,24,1,0,0,26,126,0,135,136,11,0,24,26,0,0,137,132,0,0,1,136,1,0,139,136,0,0,119,0,6,0,32,136,131,19,121,136,4,0,137,132,0,0,1,136,1,0,139,136,0,0,1,136,0,0,139,136,0,0,140,2,139,0,0,0,0,0,2,134,0,0,255,0,0,0,2,135,0,0,255,255,0,0,1,132,0,0,136,136,0,0,0,133,136,0,136,136,0,0,25,136,136,48,137,136,0,0,25,130,133,20,25,123,133,12,0,3,0,0,0,35,1,0,0,46,3,0,0,125,46,0,1,128,1,0,1,129,1,0,1,137,64,0,1,138,44,0,135,136,24,0,137,138,130,0,1,138,43,0,1,137,41,0,135,136,16,0,138,137,130,0,1,137,64,0,1,138,45,0,135,136,24,0,137,138,130,0,0,57,35,0,19,136,57,135,0,68,136,0,25,79,130,7,1,138,10,0,135,136,70,0,68,79,138,0,1,138,43,0,1,137,53,0,135,136,16,0,138,137,130,0,25,90,130,7,135,101,13,0,90,0,0,0,26,112,101,1,19,136,112,134,0,4,136,0,0,127,4,0,0,15,127,0,0,124,15,0,0,26,129,0,41,136,26,24,42,136,136,24,33,28,136,0,121,28,73,0,0,29,125,0,0,131,29,0,0,30,127,0,0,126,30,0,0,31,126,0,19,136,31,134,0,32,136,0,25,33,32,1,19,136,33,134,0,34,136,0,19,136,34,134,0,36,136,0,1,136,1,0,17,37,136,36,120,37,2,0,119,0,36,0,0,38,126,0,19,136,38,134,0,39,136,0,27,40,39,6,25,41,40,85,19,136,41,134,0,42,136,0,0,43,131,0,19,136,43,135,0,44,136,0,30,136,44,10,38,136,136,255,0,45,136,0,25,47,45,48,19,136,47,134,0,48,136,0,1,137,41,0,135,136,71,0,42,137,48,0,0,49,131,0,19,136,49,135,0,50,136,0,28,136,50,10,38,136,136,255,0,51,136,0,19,136,51,135,0,52,136,0,0,131,52,0,0,53,126,0,26,136,53,1,41,136,136,24,42,136,136,24,0,54,136,0,0,126,54,0,119,0,210,255,0,55,124,0,19,136,55,134,0,56,136,0,27,58,56,6,25,59,58,85,19,136,59,134,0,60,136,0,0,61,124,0,19,136,61,134,0,62,136,0,27,63,62,6,25,64,63,85,25,65,64,6,26,66,65,1,19,136,66,134,0,67,136,0,1,137,41,0,1,138,52,0,135,136,17,0,60,137,67,138,1,129,0,0,134,136,0,0,224,95,1,0,123,0,0,0,78,69,123,0,19,136,69,134,0,70,136,0,32,71,70,5,120,71,2,0,119,0,171,255,25,72,123,1,79,136,72,0,103,138,72,1,41,138,138,8,20,136,136,138,0,73,136,0,19,136,73,135,0,74,136,0,1,136,34,0,1,138,7,0,138,74,136,138,180,128,0,0,24,129,0,0,160,129,0,0,248,129,0,0,100,130,0,0,160,130,0,0,168,130,0,0,119,0,152,255,0,75,125,0,19,136,75,135,0,76,136,0,0,77,128,0,19,136,77,135,0,78,136,0,3,80,76,78,0,81,35,0,19,136,81,135,0,82,136,0,17,83,80,82,120,83,2,0,119,0,139,255,0,84,128,0,19,136,84,135,0,85,136,0,0,86,125,0,19,136,86,135,0,87,136,0,3,88,87,85,19,136,88,135,0,89,136,0,0,125,89,0,1,129,1,0,119,0,127,255,0,91,125,0,19,136,91,135,0,92,136,0,0,93,128,0,19,136,93,135,0,94,136,0,17,95,94,92,120,95,2,0,119,0,118,255,0,96,125,0,19,136,96,135,0,97,136,0,0,98,128,0,19,136,98,135,0,99,136,0,4,100,97,99,0,102,3,0,19,136,102,135,0,103,136,0,17,104,103,100,120,104,2,0,119,0,105,255,0,105,128,0,19,136,105,135,0,106,136,0,0,107,125,0,19,136,107,135,0,108,136,0,4,109,108,106,19,136,109,135,0,110,136,0,0,125,110,0,1,129,1,0,119,0,93,255,0,111,124,0,41,136,111,24,42,136,136,24,33,113,136,0,120,113,2,0,119,0,87,255,0,114,124,0,19,136,114,134,0,115,136,0,26,116,115,1,19,136,116,134,0,117,136,0,0,124,117,0,0,118,128,0,19,136,118,135,0,119,136,0,27,120,119,10,19,136,120,135,0,121,136,0,0,128,121,0,1,129,1,0,119,0,71,255,0,122,124,0,19,136,122,134,0,5,136,0,0,6,127,0,19,136,6,134,0,7,136,0,15,8,5,7,120,8,2,0,119,0,62,255,0,9,124,0,19,136,9,134,0,10,136,0,25,11,10,1,19,136,11,134,0,12,136,0,0,124,12,0,0,13,128,0,19,136,13,135,0,14,136,0,28,136,14,10,38,136,136,255,0,16,136,0,19,136,16,135,0,17,136,0,0,128,17,0,1,129,1,0,119,0,44,255,0,19,125,0,19,136,19,135,0,20,136,0,0,21,35,0,19,136,21,135,0,22,136,0,14,23,20,22,121,23,4,0,0,24,35,0,0,125,24,0,119,0,3,0,0,25,3,0,0,125,25,0,1,129,1,0,119,0,29,255,1,132,18,0,119,0,3,0,1,132,23,0,119,0,1,0,32,136,132,18,121,136,7,0,0,18,125,0,0,2,18,0,0,27,2,0,137,133,0,0,139,27,0,0,119,0,7,0,32,136,132,23,121,136,5,0,1,2,255,255,0,27,2,0,137,133,0,0,139,27,0,0,1,136,0,0,139,136,0,0,140,1,154,0,0,0,0,0,2,147,0,0,255,0,0,0,2,148,0,0,76,1,0,0,2,149,0,0,61,14,0,0,1,145,0,0,136,150,0,0,0,146,150,0,136,150,0,0,25,150,150,16,137,150,0,0,0,1,0,0,0,2,1,0,134,150,0,0,196,85,1,0,2,0,0,0,1,150,128,1,82,51,150,0,0,140,51,0,0,62,140,0,25,73,62,38,0,144,73,0,0,84,1,0,0,95,140,0,135,106,56,0,84,95,0,0,0,139,106,0,0,117,139,0,41,150,117,24,42,150,150,24,33,128,150,0,0,3,1,0,120,128,6,0,134,150,0,0,132,86,1,0,3,0,0,0,137,146,0,0,139,0,0,0,0,14,144,0,135,25,72,0,3,14,0,0,0,143,25,0,0,36,143,0,41,150,36,24,42,150,150,24,33,45,150,0,0,46,1,0,120,45,36,0,134,150,0,0,132,86,1,0,46,0,0,0,1,141,0,0,0,29,141,0,19,150,29,147,0,30,150,0,0,31,139,0,19,150,31,147,0,32,150,0,15,33,30,32,120,33,2,0,119,0,21,0,0,34,141,0,19,150,34,147,0,35,150,0,0,37,140,0,3,38,37,35,78,39,38,0,19,150,39,147,0,40,150,0,27,150,40,31,3,41,149,150,25,42,41,1,1,150,0,0,83,42,150,0,0,43,141,0,25,150,43,1,41,150,150,24,42,150,150,24,0,44,150,0,0,141,44,0,119,0,228,255,137,146,0,0,139,0,0,0,19,150,46,147,0,47,150,0,1,150,56,14,78,48,150,0,19,150,48,147,0,49,150,0,13,50,47,49,121,50,31,0,1,151,80,0,134,150,0,0,148,98,1,0,151,0,0,0,0,52,144,0,0,53,143,0,1,150,4,0,1,151,2,0,1,152,155,255,1,153,93,0,134,54,0,0,160,32,0,0,52,53,150,151,152,153,0,0,0,142,54,0,0,55,142,0,19,153,55,147,0,56,153,0,13,57,147,56,120,57,241,255,119,0,1,0,0,58,142,0,19,153,58,147,0,59,153,0,0,60,144,0,3,61,60,59,78,63,61,0,1,153,56,14,83,153,63,0,119,0,53,0,1,142,0,0,1,141,1,0,0,64,141,0,19,153,64,147,0,65,153,0,0,66,143,0,19,153,66,147,0,67,153,0,15,68,65,67,120,68,2,0,119,0,42,0,0,69,142,0,19,153,69,147,0,70,153,0,0,71,144,0,3,72,71,70,78,74,72,0,19,153,74,147,0,75,153,0,82,76,148,0,27,153,75,15,3,77,76,153,25,78,77,4,78,79,78,0,19,153,79,147,0,80,153,0,0,81,141,0,19,153,81,147,0,82,153,0,0,83,144,0,3,85,83,82,78,86,85,0,19,153,86,147,0,87,153,0,82,88,148,0,27,153,87,15,3,89,88,153,25,90,89,4,78,91,90,0,19,153,91,147,0,92,153,0,15,93,80,92,121,93,3,0,0,94,141,0,0,142,94,0,0,96,141,0,25,153,96,1,41,153,153,24,42,153,153,24,0,97,153,0,0,141,97,0,119,0,207,255,0,98,142,0,19,153,98,147,0,99,153,0,0,100,144,0,3,101,100,99,78,102,101,0,134,153,0,0,188,87,1,0,102,0,0,0,0,103,142,0,19,153,103,147,0,104,153,0,0,105,144,0,3,107,105,104,78,108,107,0,19,153,108,147,0,109,153,0,82,110,148,0,27,153,109,15,3,111,110,153,25,112,111,5,1,153,100,0,83,112,153,0,1,141,0,0,0,113,141,0,19,153,113,147,0,114,153,0,0,115,139,0,19,153,115,147,0,116,153,0,15,118,114,116,120,118,2,0,119,0,31,0,0,119,142,0,19,153,119,147,0,120,153,0,0,121,144,0,3,122,121,120,78,123,122,0,19,153,123,147,0,124,153,0,25,125,124,1,19,153,125,147,0,126,153,0,0,127,141,0,19,153,127,147,0,129,153,0,0,130,140,0,3,131,130,129,78,132,131,0,19,153,132,147,0,133,153,0,27,153,133,31,3,134,149,153,25,135,134,1,83,135,126,0,0,136,141,0,25,153,136,1,41,153,153,24,42,153,153,24,0,137,153,0,0,141,137,0,119,0,218,255,1,141,0,0,0,138,141,0,19,153,138,147,0,4,153,0,0,5,143,0,19,153,5,147,0,6,153,0,15,7,4,6,120,7,2,0,119,0,32,0,0,8,142,0,19,153,8,147,0,9,153,0,0,10,144,0,3,11,10,9,78,12,11,0,19,153,12,147,0,13,153,0,25,15,13,1,19,153,15,147,0,16,153,0,0,17,141,0,19,153,17,147,0,18,153,0,0,19,144,0,3,20,19,18,78,21,20,0,19,153,21,147,0,22,153,0,82,23,148,0,27,153,22,15,3,24,23,153,25,26,24,1,83,26,16,0,0,27,141,0,25,153,27,1,41,153,153,24,42,153,153,24,0,28,153,0,0,141,28,0,119,0,217,255,137,146,0,0,139,0,0,0,140,1,145,0,0,0,0,0,2,138,0,0,255,0,0,0,2,139,0,0,255,255,0,0,2,140,0,0,76,1,0,0,1,136,0,0,136,141,0,0,0,137,141,0,136,141,0,0,25,141,141,16,137,141,0,0,0,2,0,0,1,133,0,0,1,141,128,1,82,43,141,0,0,135,43,0,0,54,2,0,0,65,135,0,135,76,9,0,54,65,0,0,0,134,76,0,0,87,134,0,41,141,87,24,42,141,141,24,33,98,141,0,120,98,9,0,1,142,84,0,134,141,0,0,148,98,1,0,142,0,0,0,1,1,1,0,0,35,1,0,137,137,0,0,139,35,0,0,1,134,0,0,0,109,134,0,19,141,109,138,0,120,141,0,32,3,120,0,121,3,38,0,0,14,2,0,0,25,135,0,135,36,9,0,14,25,0,0,0,134,36,0,0,37,134,0,41,141,37,24,42,141,141,24,33,38,141,0,120,38,2,0,119,0,227,0,135,141,10,0,0,39,135,0,0,40,134,0,1,141,4,0,1,142,2,0,1,143,155,255,1,144,93,0,134,41,0,0,160,32,0,0,39,40,141,142,143,144,0,0,0,133,41,0,0,42,133,0,19,144,42,138,0,44,144,0,13,45,138,44,120,45,210,0,0,46,133,0,19,144,46,138,0,47,144,0,0,48,135,0,3,49,48,47,78,50,49,0,0,132,50,0,1,134,1,0,119,0,215,255,0,51,134,0,19,144,51,138,0,52,144,0,32,53,52,1,120,53,2,0,119,0,209,255,0,55,133,0,19,144,55,138,0,56,144,0,0,57,135,0,3,58,57,56,78,59,58,0,0,132,59,0,0,60,132,0,19,144,60,138,0,61,144,0,82,62,140,0,27,144,61,15,3,63,62,144,25,64,63,2,78,66,64,0,19,144,66,138,0,67,144,0,0,131,67,0,0,68,131,0,27,69,68,10,0,131,69,0,0,70,132,0,19,144,70,138,0,71,144,0,82,72,140,0,27,144,71,15,3,73,72,144,25,74,73,3,78,75,74,0,19,144,75,138,0,77,144,0,0,78,132,0,19,144,78,138,0,79,144,0,82,80,140,0,27,144,79,15,3,81,80,144,25,82,81,4,78,83,82,0,19,144,83,138,0,84,144,0,3,85,77,84,0,86,131,0,3,88,86,85,0,131,88,0,0,89,131,0,27,90,89,10,0,131,90,0,0,91,131,0,0,92,2,0,19,144,92,138,0,93,144,0,1,144,61,14,27,143,93,31,3,94,144,143,25,95,94,25,79,143,95,0,103,144,95,1,41,144,144,8,20,143,143,144,0,96,143,0,19,143,96,139,0,97,143,0,0,99,132,0,19,143,99,138,0,100,143,0,82,101,140,0,27,143,100,15,3,102,101,143,25,103,102,10,79,143,103,0,103,144,103,1,41,144,144,8,20,143,143,144,0,104,143,0,19,143,104,139,0,105,143,0,3,106,97,105,16,107,106,91,121,107,31,0,0,108,2,0,19,143,108,138,0,110,143,0,1,143,61,14,27,144,110,31,3,111,143,144,25,112,111,25,79,144,112,0,103,143,112,1,41,143,143,8,20,144,144,143,0,113,144,0,19,144,113,139,0,114,144,0,0,115,132,0,19,144,115,138,0,116,144,0,82,117,140,0,27,144,116,15,3,118,117,144,25,119,118,10,79,144,119,0,103,143,119,1,41,143,143,8,20,144,144,143,0,121,144,0,19,144,121,139,0,122,144,0,3,123,114,122,0,131,123,0,0,124,131,0,33,125,124,0,120,125,7,0,1,143,57,0,134,144,0,0,148,98,1,0,143,0,0,0,1,134,0,0,119,0,90,255,0,126,131,0,19,144,126,139,0,127,144,0,1,144,0,0,134,128,0,0,180,94,1,0,144,127,0,0,19,144,128,139,0,129,144,0,0,131,129,0,0,130,131,0,13,4,139,130,121,4,3,0,1,134,0,0,119,0,59,0,0,5,2,0,19,144,5,138,0,6,144,0,1,144,61,14,27,143,6,31,3,7,144,143,25,8,7,25,79,143,8,0,103,144,8,1,41,144,144,8,20,143,143,144,0,9,143,0,19,143,9,139,0,10,143,0,0,11,132,0,19,143,11,138,0,12,143,0,82,13,140,0,27,143,12,15,3,15,13,143,25,16,15,10,79,143,16,0,103,144,16,1,41,144,144,8,20,143,143,144,0,17,143,0,19,143,17,139,0,18,143,0,3,19,10,18,0,20,131,0,4,21,19,20,19,143,21,139,0,22,143,0,0,23,2,0,19,143,23,138,0,24,143,0,1,143,61,14,27,144,24,31,3,26,143,144,25,27,26,25,19,144,22,138,83,27,144,0,42,143,22,8,107,27,1,143,0,28,131,0,19,143,28,139,0,29,143,0,0,30,132,0,19,143,30,138,0,31,143,0,82,32,140,0,27,143,31,15,3,33,32,143,25,34,33,10,19,143,29,138,83,34,143,0,42,144,29,8,107,34,1,144,1,134,0,0,119,0,15,255,1,1,1,0,0,35,1,0,137,137,0,0,139,35,0,0,140,1,142,0,0,0,0,0,2,139,0,0,255,0,0,0,1,137,0,0,136,140,0,0,0,138,140,0,136,140,0,0,25,140,140,32,137,140,0,0,0,2,0,0,0,41,2,0,25,52,41,1,78,63,52,0,0,132,63,0,0,74,2,0,25,85,74,3,78,96,85,0,0,131,96,0,0,107,131,0,19,140,107,139,0,118,140,0,1,140,76,1,82,3,140,0,27,140,118,15,3,14,3,140,0,133,14,0,1,130,0,0,0,25,133,0,25,34,25,1,78,35,34,0,19,140,35,139,0,36,140,0,0,37,132,0,19,140,37,139,0,38,140,0,1,140,76,1,82,39,140,0,27,140,38,15,3,40,39,140,25,42,40,1,78,43,42,0,19,140,43,139,0,44,140,0,13,45,36,44,121,45,11,0,0,46,2,0,25,47,46,2,78,48,47,0,0,49,132,0,135,140,12,0,48,49,0,0,1,1,1,0,0,33,1,0,137,138,0,0,139,33,0,0,0,50,132,0,19,140,50,139,0,51,140,0,1,140,76,1,82,53,140,0,27,140,51,15,3,54,53,140,25,55,54,4,78,56,55,0,19,140,56,139,0,57,140,0,0,58,133,0,25,59,58,4,78,60,59,0,19,140,60,139,0,61,140,0,4,62,57,61,19,140,62,139,0,64,140,0,0,134,64,0,0,65,134,0,19,140,65,139,0,66,140,0,25,67,66,50,19,140,67,139,0,68,140,0,0,134,68,0,135,69,22,0,30,140,69,100,38,140,140,255,0,70,140,0,19,140,70,139,0,71,140,0,0,135,71,0,0,72,135,0,19,140,72,139,0,73,140,0,0,75,134,0,19,140,75,139,0,76,140,0,15,77,76,73,120,77,100,0,0,78,133,0,25,79,78,6,78,80,79,0,19,140,80,139,0,81,140,0,1,140,0,0,1,141,5,0,138,81,140,141,136,141,0,0,144,141,0,0,152,141,0,0,160,141,0,0,168,141,0,0,119,0,11,0,1,134,2,0,119,0,9,0,1,134,5,0,119,0,7,0,1,134,4,0,119,0,5,0,1,134,3,0,119,0,3,0,1,134,1,0,119,0,1,0,0,82,133,0,25,83,82,5,78,84,83,0,0,129,84,0,0,86,129,0,19,140,86,139,0,87,140,0,0,88,129,0,19,140,88,139,0,89,140,0,28,140,89,10,38,140,140,255,0,90,140,0,4,91,87,90,19,140,91,139,0,92,140,0,0,93,133,0,25,94,93,5,83,94,92,0,0,95,129,0,19,140,95,139,0,97,140,0,1,140,60,0,15,98,140,97,120,98,51,0,0,99,129,0,19,140,99,139,0,100,140,0,0,101,134,0,19,140,101,139,0,102,140,0,6,140,100,102,38,140,140,255,0,103,140,0,19,140,103,139,0,104,140,0,0,134,104,0,135,105,22,0,30,140,105,100,38,140,140,255,0,106,140,0,19,140,106,139,0,108,140,0,0,135,108,0,0,109,135,0,19,140,109,139,0,110,140,0,0,111,134,0,19,140,111,139,0,112,140,0,15,113,110,112,120,113,24,0,0,114,132,0,19,140,114,139,0,115,140,0,1,140,76,1,82,116,140,0,27,140,115,15,3,117,116,140,25,119,117,1,78,120,119,0,0,121,133,0,25,122,121,1,83,122,120,0,135,123,22,0,30,140,123,40,38,140,140,255,0,124,140,0,25,125,124,40,19,140,125,139,0,126,140,0,0,127,133,0,25,128,127,5,83,128,126,0,1,130,1,0,0,4,132,0,19,140,4,139,0,5,140,0,1,140,76,1,82,6,140,0,27,140,5,15,3,7,6,140,25,8,7,1,78,9,8,0,19,140,9,139,0,10,140,0,1,140,56,14,78,11,140,0,19,140,11,139,0,12,140,0,25,13,12,1,13,15,10,13,121,15,34,0,0,16,130,0,41,140,16,24,42,140,140,24,33,17,140,0,121,17,6,0,0,18,131,0,134,140,0,0,224,96,1,0,18,0,0,0,119,0,24,0,1,140,128,1,82,19,140,0,1,140,44,1,3,20,19,140,0,136,20,0,135,21,22,0,30,140,21,3,38,140,140,255,0,22,140,0,25,23,22,122,19,140,23,139,0,24,140,0,0,26,136,0,1,141,64,0,135,140,24,0,141,24,26,0,135,140,10,0,0,27,131,0,0,28,136,0,134,140,0,0,24,78,1,0,27,28,0,0,119,0,1,0,0,29,2,0,25,30,29,2,78,31,30,0,0,32,132,0,135,140,12,0,31,32,0,0,1,1,1,0,0,33,1,0,137,138,0,0,139,33,0,0,140,0,136,0,0,0,0,0,2,129,0,0,255,0,0,0,2,130,0,0,172,13,0,0,1,127,0,0,136,131,0,0,0,128,131,0,136,131,0,0,25,131,131,32,137,131,0,0,25,126,128,4,1,132,0,0,1,133,0,0,1,134,159,255,1,135,95,0,135,131,14,0,132,133,134,135,1,131,123,13,78,0,131,0,19,131,0,129,0,1,131,0,1,131,80,0,4,29,131,1,28,131,29,2,38,131,131,255,0,40,131,0,25,51,40,0,19,131,51,129,0,62,131,0,0,124,62,0,1,131,124,13,78,73,131,0,19,131,73,129,0,84,131,0,1,131,96,0,4,95,131,84,28,131,95,2,38,131,131,255,0,106,131,0,25,2,106,0,25,13,2,20,19,131,13,129,0,21,131,0,0,125,21,0,1,135,49,0,135,131,73,0,135,126,0,0,1,135,5,0,1,134,3,0,135,131,16,0,135,134,126,0,1,134,48,0,135,131,73,0,134,126,0,0,1,131,139,13,78,22,131,0,19,131,22,129,0,23,131,0,25,24,126,3,1,134,10,0,135,131,70,0,23,24,134,0,135,25,13,0,126,0,0,0,3,26,126,25,1,131,32,0,83,26,131,0,1,134,5,0,1,135,17,0,135,131,16,0,134,135,126,0,1,135,54,0,135,131,73,0,135,126,0,0,0,27,125,0,19,131,27,129,0,28,131,0,26,30,28,15,19,131,30,129,0,31,131,0,1,135,16,0,135,131,16,0,135,31,126,0,1,120,5,0,1,135,1,0,1,134,0,0,135,131,74,0,135,134,0,0,0,32,124,0,19,131,32,129,0,33,131,0,26,34,33,1,19,131,34,129,0,35,131,0,0,36,125,0,19,131,36,129,0,37,131,0,26,38,37,1,19,131,38,129,0,39,131,0,0,41,124,0,19,131,41,129,0,42,131,0,1,131,123,13,78,43,131,0,19,131,43,129,0,44,131,0,3,45,42,44,19,131,45,129,0,46,131,0,0,47,125,0,19,131,47,129,0,48,131,0,1,131,124,13,78,49,131,0,19,131,49,129,0,50,131,0,3,52,48,50,19,131,52,129,0,53,131,0,135,131,15,0,35,39,46,53,1,122,1,0,1,119,1,0,1,121,0,0,1,117,0,0,0,54,117,0,19,131,54,129,0,55,131,0,34,56,55,20,120,56,2,0,119,0,46,0,0,57,117,0,19,131,57,129,0,58,131,0,27,131,58,7,3,59,130,131,0,123,59,0,0,60,123,0,25,61,60,6,78,63,61,0,19,131,63,129,0,64,131,0,32,65,64,8,120,65,25,0,0,66,124,0,19,131,66,129,0,67,131,0,0,68,123,0,78,69,68,0,19,131,69,129,0,70,131,0,3,71,67,70,19,131,71,129,0,72,131,0,0,74,125,0,19,131,74,129,0,75,131,0,0,76,123,0,25,77,76,1,78,78,77,0,19,131,78,129,0,79,131,0,3,80,75,79,19,131,80,129,0,81,131,0,0,82,122,0,135,131,19,0,72,81,82,0,0,83,117,0,19,131,83,129,0,85,131,0,25,86,85,1,19,131,86,129,0,87,131,0,0,117,87,0,119,0,206,255,0,88,122,0,19,131,88,129,0,89,131,0,32,90,89,1,121,90,3,0,1,122,0,0,119,0,2,0,1,122,1,0,1,131,50,0,1,134,1,0,134,91,0,0,204,62,1,0,131,134,0,0,0,118,91,0,0,92,118,0,41,134,92,24,42,134,134,24,33,93,134,0,120,93,2,0,119,0,185,255,0,94,118,0,19,134,94,129,0,96,134,0,1,134,34,0,1,131,7,0,138,96,134,131,36,147,0,0,100,147,0,0,240,147,0,0,36,148,0,0,32,147,0,0,40,148,0,0,44,148,0,0,119,0,68,0,0,102,121,0,41,134,102,24,42,134,134,24,33,103,134,0,121,103,63,0,0,104,120,0,19,134,104,129,0,105,134,0,0,107,121,0,19,134,107,129,0,108,134,0,4,109,108,105,19,134,109,129,0,110,134,0,0,121,110,0,119,0,52,0,0,111,119,0,135,112,75,0,111,0,0,0,19,134,112,129,0,113,134,0,0,114,120,0,19,134,114,129,0,115,134,0,15,116,113,115,120,116,42,0,0,3,121,0,19,134,3,129,0,4,134,0,0,5,119,0,135,6,75,0,5,0,0,0,19,134,6,129,0,7,134,0,0,8,120,0,19,134,8,129,0,9,134,0,4,10,7,9,15,11,4,10,121,11,28,0,0,12,120,0,19,134,12,129,0,14,134,0,0,15,121,0,19,134,15,129,0,16,134,0,3,17,16,14,19,134,17,129,0,18,134,0,0,121,18,0,119,0,17,0,0,97,119,0,41,134,97,24,42,134,134,24,33,98,134,0,40,134,98,1,0,99,134,0,38,134,99,1,0,100,134,0,19,134,100,129,0,101,134,0,0,119,101,0,1,121,0,0,119,0,4,0,119,0,243,255,119,0,7,0,119,0,6,0,0,19,119,0,0,20,121,0,135,134,74,0,19,20,0,0,119,0,99,255,137,128,0,0,139,0,0,0,140,1,133,0,0,0,0,0,2,126,0,0,255,0,0,0,2,127,0,0,76,1,0,0,2,128,0,0,128,1,0,0,1,124,0,0,136,129,0,0,0,125,129,0,136,129,0,0,25,129,129,32,137,129,0,0,25,117,125,13,0,2,0,0,82,26,128,0,0,122,26,0,0,37,2,0,0,48,122,0,135,59,9,0,37,48,0,0,0,121,59,0,0,70,121,0,41,129,70,24,42,129,129,24,33,81,129,0,120,81,3,0,1,124,3,0,119,0,208,0,135,129,10,0,0,92,122,0,0,103,121,0,1,129,4,0,1,130,2,0,1,131,155,255,1,132,93,0,134,3,0,0,160,32,0,0,92,103,129,130,131,132,0,0,0,120,3,0,0,14,120,0,19,132,14,126,0,18,132,0,14,19,126,18,120,19,3,0,1,124,18,0,119,0,189,0,0,20,120,0,19,132,20,126,0,21,132,0,0,22,122,0,3,23,22,21,78,24,23,0,0,119,24,0,1,114,0,0,0,25,119,0,19,132,25,126,0,27,132,0,82,28,127,0,27,132,27,15,3,29,28,132,25,30,29,12,0,116,30,0,0,31,116,0,78,32,31,0,41,132,32,24,42,132,132,24,33,33,132,0,121,33,3,0,1,114,1,0,119,0,10,0,0,34,116,0,25,35,34,1,78,36,35,0,0,38,116,0,83,38,36,0,0,39,116,0,25,40,39,1,1,132,0,0,83,40,132,0,0,41,114,0,19,132,41,126,0,42,132,0,0,43,116,0,3,44,43,42,78,45,44,0,41,132,45,24,42,132,132,24,33,46,132,0,121,46,8,0,0,47,114,0,19,132,47,126,0,49,132,0,25,50,49,1,19,132,50,126,0,51,132,0,0,114,51,0,0,52,116,0,78,53,52,0,19,132,53,126,0,54,132,0,26,55,54,1,19,132,55,126,0,56,132,0,83,117,56,0,0,57,116,0,25,58,57,1,78,60,58,0,19,132,60,126,0,61,132,0,26,62,61,1,19,132,62,126,0,63,132,0,25,64,117,1,83,64,63,0,0,65,114,0,41,132,65,24,42,132,132,24,33,66,132,0,120,66,6,0,1,131,85,0,134,132,0,0,148,98,1,0,131,0,0,0,119,0,148,255,135,132,10,0,0,67,114,0,1,132,4,0,1,131,2,0,1,130,155,255,1,129,93,0,134,68,0,0,220,47,0,0,117,67,132,131,130,129,0,0,0,115,68,0,0,69,115,0,19,129,69,126,0,71,129,0,13,72,126,71,120,72,132,255,0,73,119,0,19,129,73,126,0,74,129,0,1,129,56,14,78,75,129,0,19,129,75,126,0,76,129,0,14,77,74,76,121,77,53,0,82,78,128,0,1,129,44,1,3,79,78,129,0,123,79,0,135,80,22,0,30,129,80,3,38,129,129,255,0,82,129,0,1,129,128,0,3,83,129,82,19,129,83,126,0,84,129,0,0,85,123,0,1,130,64,0,135,129,24,0,130,84,85,0,135,129,10,0,0,86,119,0,0,87,123,0,134,129,0,0,24,78,1,0,86,87,0,0,0,88,119,0,19,129,88,126,0,89,129,0,82,90,127,0,27,129,89,15,3,91,90,129,25,93,91,5,78,94,93,0,19,129,94,126,0,95,129,0,34,96,95,20,0,97,119,0,19,129,97,126,0,98,129,0,82,99,127,0,27,129,98,15,3,100,99,129,25,101,100,5,121,96,4,0,1,129,0,0,83,101,129,0,119,0,9,0,78,102,101,0,19,129,102,126,0,104,129,0,26,105,104,20,19,129,105,126,0,106,129,0,83,101,106,0,119,0,1,0,0,107,2,0,0,108,115,0,19,129,108,126,0,109,129,0,3,110,117,109,78,111,110,0,135,112,76,0,107,111,0,0,0,118,112,0,0,113,118,0,19,129,113,126,0,4,129,0,26,5,4,1,19,129,5,126,0,6,129,0,135,129,77,0,6,0,0,0,0,7,115,0,19,129,7,126,0,8,129,0,3,9,117,8,78,10,9,0,0,11,119,0,135,129,78,0,10,11,0,0,0,12,115,0,19,129,12,126,0,13,129,0,0,15,116,0,3,16,15,13,1,129,0,0,83,16,129,0,119,0,38,255,32,129,124,3,121,129,10,0,1,130,84,0,134,129,0,0,148,98,1,0,130,0,0,0,1,1,1,0,0,17,1,0,137,125,0,0,139,17,0,0,119,0,7,0,32,129,124,18,121,129,5,0,1,1,1,0,0,17,1,0,137,125,0,0,139,17,0,0,1,129,0,0,139,129,0,0,140,2,135,0,0,0,0,0,2,129,0,0,255,0,0,0,2,130,0,0,144,13,0,0,2,131,0,0,76,1,0,0,1,127,0,0,136,132,0,0,0,128,132,0,136,132,0,0,25,132,132,32,137,132,0,0,0,2,0,0,0,3,1,0,1,118,255,255,1,132,128,1,82,29,132,0,1,132,44,1,3,40,29,132,0,126,40,0,1,132,128,1,82,51,132,0,1,132,84,1,3,62,51,132,0,117,62,0,1,120,0,0,0,73,120,0,19,132,73,129,0,84,132,0,34,95,84,10,120,95,2,0,119,0,189,0,0,106,120,0,19,132,106,129,0,4,132,0,0,15,3,0,3,21,15,4,78,22,21,0,41,132,22,24,42,132,132,24,33,23,132,0,121,23,172,0,0,24,120,0,19,132,24,129,0,25,132,0,0,26,3,0,3,27,26,25,78,28,27,0,19,132,28,129,0,30,132,0,26,31,30,1,19,132,31,129,0,32,132,0,0,123,32,0,0,33,123,0,19,132,33,129,0,34,132,0,82,35,131,0,27,132,34,15,3,36,35,132,0,124,36,0,135,37,22,0,30,132,37,100,38,132,132,255,0,38,132,0,19,132,38,129,0,39,132,0,0,125,39,0,0,41,125,0,19,132,41,129,0,42,132,0,0,43,124,0,25,44,43,4,78,45,44,0,19,132,45,129,0,46,132,0,15,47,46,42,121,47,23,0,0,48,124,0,25,49,48,1,78,50,49,0,19,132,50,129,0,52,132,0,0,53,120,0,19,132,53,129,0,54,132,0,0,55,3,0,3,56,55,54,78,57,56,0,19,132,57,129,0,58,132,0,13,59,52,58,121,59,3,0,0,60,123,0,0,118,60,0,0,61,123,0,0,63,2,0,135,132,79,0,61,63,0,0,119,0,114,0,0,64,123,0,0,65,2,0,135,66,80,0,64,65,0,0,41,132,66,24,42,132,132,24,33,67,132,0,120,67,106,0,0,68,124,0,25,69,68,1,78,70,69,0,19,132,70,129,0,71,132,0,0,72,120,0,19,132,72,129,0,74,132,0,0,75,3,0,3,76,75,74,78,77,76,0,19,132,77,129,0,78,132,0,13,79,71,78,121,79,3,0,0,80,123,0,0,118,80,0,0,81,125,0,41,132,81,24,42,132,132,24,33,82,132,0,121,82,6,0,0,83,123,0,0,85,2,0,135,132,79,0,83,85,0,0,119,0,79,0,0,86,124,0,25,87,86,12,0,119,87,0,0,88,119,0,78,89,88,0,41,132,89,24,42,132,132,24,33,90,132,0,121,90,20,0,0,91,2,0,0,92,119,0,78,93,92,0,19,132,93,129,0,94,132,0,26,96,94,1,19,132,96,129,0,97,132,0,135,98,76,0,91,97,0,0,0,121,98,0,0,99,121,0,19,132,99,129,0,100,132,0,26,101,100,1,19,132,101,129,0,102,132,0,135,132,77,0,102,0,0,0,0,103,119,0,25,104,103,1,78,105,104,0,41,132,105,24,42,132,132,24,33,107,132,0,121,107,21,0,0,108,2,0,0,109,119,0,25,110,109,1,78,111,110,0,19,132,111,129,0,112,132,0,26,113,112,1,19,132,113,129,0,114,132,0,135,115,76,0,108,114,0,0,0,122,115,0,0,116,122,0,19,132,116,129,0,5,132,0,26,6,5,1,19,132,6,129,0,7,132,0,135,132,77,0,7,0,0,0,78,8,130,0,19,132,8,129,0,9,132,0,33,10,9,2,121,10,19,0,0,11,123,0,0,12,126,0,135,132,29,0,11,12,0,0,0,13,117,0,1,133,64,0,1,134,108,0,135,132,24,0,133,134,13,0,0,14,126,0,0,16,117,0,135,132,26,0,14,16,0,0,0,17,126,0,1,134,2,0,134,132,0,0,96,242,0,0,17,134,0,0,0,18,120,0,25,132,18,1,41,132,132,24,42,132,132,24,0,19,132,0,0,120,19,0,119,0,63,255,0,20,118,0,137,128,0,0,139,20,0,0,140,1,121,0,0,0,0,0,2,114,0,0,255,0,0,0,2,115,0,0,76,1,0,0,2,116,0,0,128,1,0,0,1,112,0,0,136,117,0,0,0,113,117,0,136,117,0,0,25,117,117,32,137,117,0,0,0,2,0,0,82,13,116,0,1,117,200,0,3,24,13,117,0,106,24,0,0,35,2,0,0,46,106,0,135,57,81,0,35,46,0,0,0,104,57,0,0,68,104,0,41,117,68,24,42,117,117,24,33,79,117,0,121,79,206,1,0,90,106,0,0,3,104,0,1,117,4,0,1,118,2,0,1,119,155,255,1,120,93,0,134,4,0,0,220,47,0,0,90,3,117,118,119,120,0,0,0,103,4,0,0,5,103,0,19,120,5,114,0,6,120,0,13,7,114,6,121,7,5,0,1,1,1,0,0,100,1,0,137,113,0,0,139,100,0,0,82,8,116,0,0,110,8,0,0,9,2,0,0,10,110,0,135,11,9,0,9,10,0,0,0,109,11,0,0,12,109,0,41,120,12,24,42,120,120,24,33,14,120,0,120,14,3,0,1,112,5,0,119,0,79,1,0,15,110,0,0,16,109,0,1,120,4,0,1,119,2,0,1,118,155,255,1,117,93,0,134,17,0,0,160,32,0,0,15,16,120,119,118,117,0,0,0,108,17,0,0,18,108,0,19,117,18,114,0,19,117,0,14,20,114,19,120,20,2,0,119,0,159,1,0,21,103,0,19,117,21,114,0,22,117,0,0,23,106,0,3,25,23,22,78,26,25,0,0,102,26,0,0,27,108,0,19,117,27,114,0,28,117,0,0,29,110,0,3,30,29,28,78,31,30,0,0,107,31,0,0,32,107,0,19,117,32,114,0,33,117,0,82,34,115,0,27,117,33,15,3,36,34,117,25,37,36,12,0,101,37,0,0,38,101,0,78,39,38,0,41,117,39,24,42,117,117,24,33,40,117,0,121,40,15,0,0,41,101,0,25,42,41,1,78,43,42,0,41,117,43,24,42,117,117,24,33,44,117,0,121,44,6,0,1,118,87,0,134,117,0,0,148,98,1,0,118,0,0,0,119,0,186,255,1,105,1,0,119,0,2,0,1,105,0,0,0,45,102,0,0,47,107,0,135,48,82,0,45,47,0,0,19,117,48,114,0,49,117,0,1,117,0,0,1,118,0,1,138,49,117,118,228,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0,224,161,0,0], eb + 30720);
  HEAPU8.seteb + 40960);
  HEAPU8.set([119,0,165,0,0,4,2,0,19,97,4,95,0,5,97,0,27,97,5,31,3,6,96,97,78,7,6,0,19,97,7,95,0,8,97,0,32,9,8,0,121,9,15,0,0,10,2,0,19,97,10,95,0,11,97,0,27,97,11,31,3,12,96,97,25,14,12,12,78,15,14,0,19,97,15,95,0,16,97,0,1,97,100,0,17,17,97,16,121,17,3,0,1,93,7,0,119,0,141,0,0,18,2,0,0,19,91,0,135,20,9,0,18,19,0,0,0,90,20,0,0,21,90,0,41,97,21,24,42,97,97,24,33,22,97,0,120,22,3,0,1,93,17,0,119,0,129,0,135,97,10,0,0,23,91,0,0,25,90,0,1,97,4,0,1,98,2,0,1,99,155,255,1,100,93,0,134,26,0,0,160,32,0,0,23,25,97,98,99,100,0,0,0,89,26,0,0,27,89,0,19,100,27,95,0,28,100,0,14,29,95,28,120,29,3,0,1,93,16,0,119,0,110,0,0,30,89,0,19,100,30,95,0,31,100,0,0,32,91,0,3,33,32,31,78,34,33,0,0,88,34,0,0,36,88,0,1,100,0,0,135,37,48,0,36,100,0,0,41,100,37,24,42,100,100,24,33,38,100,0,120,38,6,0,1,99,60,0,134,100,0,0,148,98,1,0,99,0,0,0,119,0,218,255,0,39,88,0,1,99,0,0,135,100,50,0,39,99,0,0,0,40,2,0,1,99,0,0,135,100,54,0,40,99,0,0,135,41,22,0,30,100,41,4,38,100,100,255,0,42,100,0,25,43,42,1,19,100,43,95,0,44,100,0,0,92,44,0,0,45,2,0,19,100,45,95,0,47,100,0,27,100,47,31,3,48,96,100,1,100,0,0,83,48,100,0,0,49,92,0,19,100,49,95,0,50,100,0,0,51,2,0,19,100,51,95,0,52,100,0,27,100,52,31,3,53,96,100,25,54,53,12,78,55,54,0,19,100,55,95,0,56,100,0,3,58,56,50,19,100,58,95,0,59,100,0,83,54,59,0,0,60,2,0,19,100,60,95,0,61,100,0,27,100,61,31,3,62,96,100,25,63,62,12,78,64,63,0,19,100,64,95,0,65,100,0,1,100,100,0,15,66,100,65,121,66,9,0,0,67,2,0,19,100,67,95,0,69,100,0,27,100,69,31,3,70,96,100,25,71,70,12,1,100,100,0,83,71,100,0,0,72,2,0,0,73,88,0,0,74,92,0,1,99,3,0,134,100,0,0,92,17,1,0,72,73,74,99,1,100,4,0,83,87,100,0,0,75,88,0,25,76,87,1,83,76,75,0,0,77,2,0,25,78,87,2,83,78,77,0,25,80,87,11,1,100,0,0,83,80,100,0,135,81,51,0,87,0,0,0,41,100,81,24,42,100,100,24,33,82,100,0,120,82,2,0,119,0,88,255,0,83,2,0,0,84,88,0,135,100,11,0,83,84,0,0,119,0,83,255,32,100,93,4,121,100,10,0,1,99,59,0,134,100,0,0,148,98,1,0,99,0,0,0,1,1,1,0,0,85,1,0,137,94,0,0,139,85,0,0,119,0,25,0,32,100,93,7,121,100,10,0,1,99,61,0,134,100,0,0,148,98,1,0,99,0,0,0,1,1,1,0,0,85,1,0,137,94,0,0,139,85,0,0,119,0,14,0,32,100,93,16,121,100,6,0,1,1,1,0,0,85,1,0,137,94,0,0,139,85,0,0,119,0,7,0,32,100,93,17,121,100,5,0,1,1,1,0,0,85,1,0,137,94,0,0,139,85,0,0,1,100,0,0,139,100,0,0,140,1,73,0,0,0,0,0,2,67,0,0,255,0,0,0,2,68,0,0,125,13,0,0,2,69,0,0,126,13,0,0,2,70,0,0,255,255,0,0,1,65,0,0,136,71,0,0,0,66,71,0,136,71,0,0,25,71,71,16,137,71,0,0,25,64,66,7,25,63,66,4,0,2,0,0,1,62,0,0,134,71,0,0,224,95,1,0,63,0,0,0,78,13,63,0,19,71,13,67,0,24,71,0,32,35,24,5,121,35,30,0,25,46,63,1,79,71,46,0,103,72,46,1,41,72,72,8,20,71,71,72,0,57,71,0,19,71,57,70,0,59,71,0,32,60,59,39,121,60,3,0,1,65,4,0,119,0,156,0,25,61,63,1,79,71,61,0,103,72,61,1,41,72,72,8,20,71,71,72,0,3,71,0,19,71,3,70,0,4,71,0,32,5,4,40,121,5,3,0,1,65,6,0,119,0,144,0,78,6,68,0,78,7,69,0,1,72,0,0,135,71,85,0,6,7,72,0,78,8,63,0,19,71,8,67,0,9,71,0,1,71,5,0,1,72,2,0,138,9,71,72,48,204,0,0,212,205,0,0,119,0,118,0,25,10,63,1,79,71,10,0,103,72,10,1,41,72,72,8,20,71,71,72,0,11,71,0,19,71,11,70,0,12,71,0,1,71,34,0,1,72,18,0,138,12,71,72,168,204,0,0,220,204,0,0,36,205,0,0,88,205,0,0,160,205,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,164,204,0,0,172,205,0,0,119,0,69,0,78,14,69,0,41,71,14,24,42,71,71,24,33,15,71,0,121,15,64,0,78,16,69,0,19,71,16,67,0,17,71,0,26,18,17,1,19,71,18,67,0,19,71,0,83,69,19,0,119,0,56,0,78,20,69,0,19,71,20,67,0,21,71,0,1,71,124,13,78,22,71,0,19,71,22,67,0,23,71,0,26,25,23,1,15,26,21,25,121,26,46,0,78,27,69,0,19,71,27,67,0,28,71,0,25,29,28,1,19,71,29,67,0,30,71,0,83,69,30,0,119,0,38,0,78,31,68,0,41,71,31,24,42,71,71,24,33,32,71,0,121,32,33,0,78,33,68,0,19,71,33,67,0,34,71,0,26,36,34,1,19,71,36,67,0,37,71,0,83,68,37,0,119,0,25,0,78,38,68,0,19,71,38,67,0,39,71,0,1,71,123,13,78,40,71,0,19,71,40,67,0,41,71,0,26,42,41,1,15,43,39,42,121,43,15,0,78,44,68,0,19,71,44,67,0,45,71,0,25,47,45,1,19,71,47,67,0,48,71,0,83,68,48,0,119,0,7,0,134,71,0,0,152,95,0,0,119,0,4,0,134,71,0,0,208,143,0,0,119,0,1,0,1,71,0,0,83,64,71,0,0,49,2,0,38,72,49,31,135,71,86,0,72,64,0,0,119,0,13,0,0,50,62,0,41,71,50,24,42,71,71,24,33,51,71,0,40,71,51,1,0,52,71,0,38,71,52,1,0,53,71,0,19,71,53,67,0,54,71,0,0,62,54,0,119,0,1,0,0,55,62,0,135,71,87,0,55,0,0,0,1,71,1,0,83,64,71,0,0,56,2,0,38,72,56,31,135,71,86,0,72,64,0,0,135,71,88,0,135,71,89,0,119,0,82,255,32,71,65,4,121,71,6,0,1,1,0,0,0,58,1,0,137,66,0,0,139,58,0,0,119,0,7,0,32,71,65,6,121,71,5,0,1,1,255,255,0,58,1,0,137,66,0,0,139,58,0,0,1,71,0,0,139,71,0,0,140,1,89,0,0,0,0,0,2,83,0,0,255,0,0,0,2,84,0,0,61,14,0,0,1,81,0,0,136,85,0,0,0,82,85,0,136,85,0,0,25,85,85,32,137,85,0,0,25,75,82,8,0,2,0,0,1,76,0,0,0,13,2,0,1,85,23,0,135,24,52,0,13,85,0,0,41,85,24,24,42,85,85,24,33,35,85,0,120,35,9,0,1,86,59,0,134,85,0,0,148,98,1,0,86,0,0,0,1,1,1,0,0,71,1,0,137,82,0,0,139,71,0,0,1,85,128,1,82,46,85,0,0,79,46,0,1,78,0,0,0,57,78,0,19,85,57,83,0,68,85,0,32,72,68,0,121,72,52,0,0,73,2,0,0,3,79,0,135,4,9,0,73,3,0,0,0,78,4,0,0,5,78,0,41,85,5,24,42,85,85,24,33,6,85,0,120,6,3,0,1,81,6,0,119,0,110,0,0,7,79,0,0,8,78,0,1,85,4,0,1,86,2,0,1,87,155,255,1,88,93,0,134,9,0,0,160,32,0,0,7,8,85,86,87,88,0,0,0,77,9,0,0,10,77,0,19,88,10,83,0,11,88,0,13,12,83,11,120,12,94,0,0,14,77,0,19,88,14,83,0,15,88,0,0,16,79,0,3,17,16,15,78,18,17,0,0,76,18,0,0,19,76,0,1,88,23,0,135,20,48,0,19,88,0,0,41,88,20,24,42,88,88,24,33,21,88,0,121,21,3,0,1,78,1,0,119,0,207,255,1,87,60,0,134,88,0,0,148,98,1,0,87,0,0,0,1,78,0,0,119,0,201,255,0,22,78,0,19,88,22,83,0,23,88,0,32,25,23,1,120,25,2,0,119,0,195,255,1,88,128,1,82,26,88,0,1,88,44,1,3,27,26,88,0,80,27,0,0,28,80,0,1,87,64,0,1,86,93,0,135,88,24,0,87,86,28,0,135,88,10,0,0,29,76,0,0,30,80,0,134,88,0,0,24,78,1,0,29,30,0,0,1,88,103,20,134,31,0,0,92,101,0,0,88,0,0,0,0,74,31,0,0,32,74,0,19,88,32,83,0,33,88,0,13,34,83,33,121,34,3,0,1,78,0,0,119,0,167,255,0,36,74,0,19,88,36,83,0,37,88,0,0,38,2,0,19,88,38,83,0,39,88,0,14,40,37,39,120,40,2,0,119,0,158,255,0,41,74,0,19,88,41,83,0,42,88,0,27,88,42,31,3,43,84,88,25,44,43,1,78,45,44,0,19,88,45,83,0,47,88,0,0,48,2,0,19,88,48,83,0,49,88,0,27,88,49,31,3,50,84,88,25,51,50,1,78,52,51,0,19,88,52,83,0,53,88,0,13,54,47,53,120,54,3,0,1,81,17,0,119,0,6,0,1,86,58,0,134,88,0,0,148,98,1,0,86,0,0,0,119,0,131,255,32,88,81,6,121,88,6,0,1,86,84,0,134,88,0,0,148,98,1,0,86,0,0,0,119,0,39,0,32,88,81,17,121,88,37,0,0,55,74,0,134,88,0,0,120,12,1,0,55,0,0,0,0,56,76,0,1,86,23,0,135,88,50,0,56,86,0,0,0,58,2,0,1,86,23,0,135,88,54,0,58,86,0,0,1,88,23,0,83,75,88,0,0,59,76,0,25,60,75,1,83,60,59,0,0,61,2,0,25,62,75,2,83,62,61,0,0,63,74,0,25,64,75,3,83,64,63,0,25,65,75,11,1,88,1,0,83,65,88,0,135,66,51,0,75,0,0,0,41,88,66,24,42,88,88,24,33,67,88,0,121,67,5,0,0,69,2,0,0,70,76,0,135,88,11,0,69,70,0,0,1,1,1,0,0,71,1,0,137,82,0,0,139,71,0,0,140,0,99,0,0,0,0,0,2,94,0,0,255,0,0,0,2,95,0,0,76,1,0,0,1,92,0,0,136,96,0,0,0,93,96,0,136,96,0,0,25,96,96,32,137,96,0,0,1,96,128,1,82,0,96,0,0,84,0,0,1,85,0,0,0,1,85,0,19,96,1,94,0,12,96,0,34,23,12,20,120,23,2,0,119,0,156,0,0,34,85,0,19,96,34,94,0,45,96,0,1,96,172,13,27,97,45,7,3,56,96,97,0,88,56,0,0,67,88,0,25,78,67,6,78,83,78,0,19,97,83,94,0,2,97,0,32,3,2,8,120,3,134,0,0,4,85,0,135,5,90,0,4,0,0,0,0,89,5,0,0,6,89,0,19,97,6,94,0,7,97,0,82,8,95,0,27,97,7,15,3,9,8,97,0,87,9,0,0,10,88,0,78,11,10,0,0,90,11,0,0,13,88,0,25,14,13,1,78,15,14,0,0,91,15,0,135,16,22,0,30,97,16,3,38,97,97,255,0,17,97,0,19,97,17,94,0,18,97,0,0,86,18,0,0,19,87,0,25,20,19,7,78,21,20,0,19,97,21,94,0,22,97,0,1,97,99,0,15,24,97,22,121,24,55,0,0,25,85,0,135,97,91,0,25,0,0,0,0,26,87,0,25,27,26,7,78,28,27,0,19,97,28,94,0,29,97,0,26,30,29,100,19,97,30,94,0,31,97,0,83,27,31,0,0,32,87,0,25,33,32,2,78,35,33,0,19,97,35,94,0,36,97,0,25,37,36,1,19,97,37,94,0,38,97,0,83,33,38,0,0,39,87,0,25,40,39,2,78,41,40,0,19,97,41,94,0,42,97,0,1,97,20,0,15,43,97,42,121,43,5,0,0,44,87,0,25,46,44,2,1,97,20,0,83,46,97,0,0,47,90,0,0,48,91,0,1,96,0,0,1,98,5,0,134,97,0,0,188,56,1,0,96,98,47,48,0,49,86,0,19,97,49,94,0,50,97,0,25,51,50,39,19,97,51,94,0,52,97,0,0,53,84,0,135,97,92,0,52,53,0,0,0,54,89,0,0,55,84,0,134,97,0,0,24,78,1,0,54,55,0,0,0,57,88,0,25,58,57,2,78,59,58,0,41,97,59,24,42,97,97,24,33,60,97,0,121,60,12,0,0,61,87,0,25,62,61,10,79,97,62,0,103,98,62,1,41,98,98,8,20,97,97,98,0,63,97,0,41,97,63,16,42,97,97,16,33,64,97,0,120,64,29,0,0,65,85,0,135,97,91,0,65,0,0,0,0,66,88,0,25,68,66,6,1,97,8,0,83,68,97,0,0,69,90,0,0,70,91,0,1,98,6,0,1,96,11,0,134,97,0,0,188,56,1,0,98,96,69,70,0,71,86,0,19,97,71,94,0,72,97,0,25,73,72,42,19,97,73,94,0,74,97,0,0,75,84,0,135,97,92,0,74,75,0,0,0,76,89,0,0,77,84,0,134,97,0,0,24,78,1,0,76,77,0,0,0,79,85,0,19,97,79,94,0,80,97,0,25,81,80,1,19,97,81,94,0,82,97,0,0,85,82,0,119,0,96,255,137,93,0,0,139,0,0,0,140,1,97,0,0,0,0,0,2,92,0,0,255,0,0,0,1,90,0,0,136,93,0,0,0,91,93,0,136,93,0,0,25,93,93,16,137,93,0,0,0,2,0,0,1,93,128,1,82,13,93,0,0,88,13,0,0,24,2,0,0,35,88,0,135,46,9,0,24,35,0,0,0,87,46,0,0,57,2,0,0,68,87,0,19,93,68,92,0,79,93,0,0,84,88,0,3,3,84,79,135,4,35,0,57,3,0,0,19,93,4,92,0,5,93,0,0,6,87,0,19,93,6,92,0,7,93,0,3,8,7,5,19,93,8,92,0,9,93,0,0,87,9,0,0,10,87,0,41,93,10,24,42,93,93,24,33,11,93,0,120,11,9,0,1,94,84,0,134,93,0,0,148,98,1,0,94,0,0,0,1,1,1,0,0,83,1,0,137,91,0,0,139,83,0,0,0,12,88,0,0,14,87,0,1,93,4,0,1,94,2,0,1,95,155,255,1,96,93,0,134,15,0,0,160,32,0,0,12,14,93,94,95,96,0,0,0,86,15,0,0,16,86,0,19,96,16,92,0,17,96,0,14,18,92,17,121,18,107,0,0,19,86,0,19,96,19,92,0,20,96,0,0,21,88,0,3,22,21,20,78,23,22,0,0,85,23,0,0,25,85,0,19,96,25,92,0,26,96,0,1,96,76,1,82,27,96,0,27,96,26,15,3,28,27,96,25,29,28,1,1,96,0,0,83,29,96,0,135,30,22,0,30,96,30,38,38,96,96,255,0,31,96,0,19,96,31,92,0,32,96,0,0,89,32,0,0,33,85,0,19,96,33,92,0,34,96,0,1,96,76,1,82,36,96,0,27,96,34,15,3,37,36,96,25,38,37,1,78,39,38,0,19,96,39,92,0,40,96,0,13,41,92,40,121,41,62,0,0,42,85,0,19,96,42,92,0,43,96,0,1,96,76,1,82,44,96,0,27,96,43,15,3,45,44,96,78,47,45,0,41,96,47,24,42,96,96,24,33,48,96,0,121,48,50,0,0,49,85,0,19,96,49,92,0,50,96,0,1,96,76,1,82,51,96,0,27,96,50,15,3,52,51,96,78,53,52,0,19,96,53,92,0,54,96,0,26,55,54,1,19,96,55,92,0,56,96,0,0,58,88,0,135,59,56,0,56,58,0,0,0,87,59,0,0,60,87,0,41,96,60,24,42,96,96,24,33,61,96,0,121,61,28,0,0,62,85,0,19,96,62,92,0,63,96,0,1,96,76,1,82,64,96,0,27,96,63,15,3,65,64,96,78,66,65,0,0,67,85,0,19,96,67,92,0,69,96,0,1,96,76,1,82,70,96,0,27,96,69,15,3,71,70,96,25,72,71,1,83,72,66,0,135,73,22,0,0,74,87,0,19,96,74,92,0,75,96,0,8,96,73,75,38,96,96,255,0,76,96,0,19,96,76,92,0,77,96,0,0,89,77,0,0,78,2,0,0,80,85,0,135,96,11,0,78,80,0,0,0,81,89,0,0,82,85,0,135,96,12,0,81,82,0,0,1,1,1,0,0,83,1,0,137,91,0,0,139,83,0,0,140,0,85,0,0,0,0,0,2,80,0,0,255,0,0,0,2,81,0,0,255,255,0,0,2,82,0,0,172,13,0,0,1,78,0,0,136,83,0,0,0,79,83,0,136,83,0,0,25,83,83,16,137,83,0,0,1,83,137,13,78,0,83,0,41,83,0,24,42,83,83,24,33,1,83,0,121,1,3,0,137,79,0,0,139,0,0,0,1,72,0,0,0,12,72,0,19,83,12,80,0,23,83,0,34,34,23,20,120,34,2,0,119,0,163,0,0,45,72,0,19,83,45,80,0,56,83,0,27,83,56,7,3,67,82,83,25,68,67,6,78,69,68,0,0,75,69,0,0,2,75,0,19,83,2,80,0,3,83,0,32,4,3,8,120,4,142,0,0,5,72,0,135,6,90,0,5,0,0,0,0,76,6,0,0,7,76,0,19,83,7,80,0,8,83,0,1,83,76,1,82,9,83,0,27,83,8,15,3,10,9,83,0,73,10,0,135,11,22,0,30,83,11,60,38,83,83,255,0,13,83,0,0,14,73,0,25,15,14,4,78,16,15,0,19,83,16,80,0,17,83,0,42,83,17,1,0,18,83,0,15,19,13,18,38,83,19,1,0,20,83,0,19,83,20,80,0,21,83,0,0,74,21,0,0,22,73,0,25,24,22,10,79,83,24,0,103,84,24,1,41,84,84,8,20,83,83,84,0,25,83,0,0,70,25,0,1,71,0,0,1,77,0,0,0,26,75,0,19,83,26,80,0,27,83,0,1,83,1,0,1,84,7,0,138,27,83,84,188,216,0,0,196,216,0,0,200,216,0,0,204,216,0,0,184,216,0,0,208,216,0,0,32,217,0,0,119,0,34,0,1,78,7,0,119,0,32,0,119,0,254,255,119,0,253,255,119,0,21,0,0,28,70,0,19,83,28,81,0,29,83,0,42,83,29,3,0,30,83,0,19,83,30,81,0,31,83,0,0,71,31,0,0,32,71,0,19,83,32,81,0,33,83,0,0,35,70,0,19,83,35,81,0,36,83,0,4,37,36,33,19,83,37,81,0,38,83,0,0,70,38,0,1,78,7,0,119,0,9,0,0,42,74,0,41,83,42,24,42,83,83,24,33,43,83,0,120,43,4,0,1,75,0,0,1,77,1,0,119,0,1,0,32,83,78,7,121,83,12,0,1,78,0,0,0,39,74,0,41,83,39,24,42,83,83,24,33,40,83,0,121,40,6,0,0,41,72,0,135,83,93,0,41,0,0,0,1,75,0,0,1,77,1,0,0,44,71,0,41,83,44,16,42,83,83,16,33,46,83,0,121,46,17,0,0,47,72,0,135,83,91,0,47,0,0,0,0,48,72,0,0,49,71,0,1,84,45,0,134,83,0,0,212,66,1,0,84,48,49,0,0,50,70,0,0,51,73,0,25,52,51,10,19,83,50,80,83,52,83,0,42,84,50,8,107,52,1,84,0,53,77,0,41,84,53,24,42,84,84,24,33,54,84,0,121,54,17,0,0,55,75,0,0,57,72,0,19,84,57,80,0,58,84,0,27,84,58,7,3,59,82,84,25,60,59,6,83,60,55,0,0,61,72,0,135,84,91,0,61,0,0,0,0,62,72,0,1,83,4,0,134,84,0,0,56,75,1,0,62,83,0,0,0,63,72,0,19,84,63,80,0,64,84,0,25,65,64,1,19,84,65,80,0,66,84,0,0,72,66,0,119,0,89,255,137,79,0,0,139,0,0,0,140,3,98,0,0,0,0,0,2,94,0,0,255,0,0,0,1,92,0,0,136,95,0,0,0,93,95,0,136,95,0,0,25,95,95,32,137,95,0,0,25,89,93,8,0,3,0,0,0,4,1,0,0,15,2,0,0,26,3,0,135,37,94,0,26,0,0,0,0,48,15,0,135,95,95,0,37,48,0,0,0,59,15,0,135,95,96,0,59,0,0,0,0,70,15,0,25,81,70,10,25,88,81,1,135,5,13,0,88,0,0,0,29,95,5,4,38,95,95,255,0,6,95,0,19,95,6,94,0,7,95,0,0,91,7,0,0,8,4,0,78,9,8,0,19,95,9,94,0,10,95,0,25,11,10,4,19,95,11,94,0,12,95,0,83,8,12,0,0,13,4,0,25,14,13,2,78,16,14,0,19,95,16,94,0,17,95,0,25,18,17,4,19,95,18,94,0,19,95,0,83,14,19,0,0,20,4,0,25,21,20,2,78,22,21,0,19,95,22,94,0,23,95,0,1,95,131,0,15,24,95,23,121,24,18,0,0,25,4,0,78,27,25,0,19,95,27,94,0,28,95,0,26,29,28,24,19,95,29,94,0,30,95,0,83,25,30,0,0,31,4,0,25,32,31,2,78,33,32,0,19,95,33,94,0,34,95,0,26,35,34,24,19,95,35,94,0,36,95,0,83,32,36,0,0,38,4,0,25,39,38,1,78,40,39,0,19,95,40,94,0,41,95,0,25,42,41,6,19,95,42,94,0,43,95,0,83,39,43,0,0,44,4,0,25,45,44,3,78,46,45,0,19,95,46,94,0,47,95,0,26,49,47,6,19,95,49,94,0,50,95,0,83,45,50,0,0,51,91,0,19,95,51,94,0,52,95,0,34,53,52,3,121,53,16,0,0,54,4,0,25,55,54,1,78,56,55,0,19,95,56,94,0,57,95,0,0,58,91,0,19,95,58,94,0,60,95,0,27,61,60,12,3,62,57,61,19,95,62,94,0,63,95,0,0,64,4,0,25,65,64,3,83,65,63,0,1,91,0,0,0,66,4,0,0,67,15,0,25,68,67,10,25,69,68,1,1,95,0,0,134,71,0,0,140,24,0,0,66,95,69,0,0,90,71,0,0,72,90,0,19,95,72,94,0,73,95,0,13,74,94,73,121,74,3,0,1,92,8,0,119,0,28,0,0,75,90,0,19,95,75,94,0,76,95,0,0,77,15,0,3,78,77,76,78,79,78,0,0,90,79,0,0,80,90,0,0,82,3,0,135,83,97,0,80,82,0,0,0,91,83,0,0,84,91,0,41,95,84,24,42,95,95,24,33,85,95,0,120,85,3,0,1,92,8,0,119,0,9,0,0,86,91,0,135,95,73,0,86,89,0,0,1,96,74,0,1,97,82,0,135,95,16,0,96,97,89,0,119,0,213,255,32,95,92,8,121,95,4,0,0,87,90,0,137,93,0,0,139,87,0,0,1,95,0,0,139,95,0,0,140,1,77,0,0,0,0,0,2,72,0,0,255,0,0,0,1,70,0,0,136,73,0,0,0,71,73,0,136,73,0,0,25,73,73,32,137,73,0,0,25,63,71,8,0,2,0,0,1,73,128,1,82,13,73,0,0,67,13,0,0,24,2,0,0,35,67,0,135,46,9,0,24,35,0,0,0,66,46,0,0,57,66,0,41,73,57,24,42,73,73,24,33,60,73,0,120,60,9,0,1,74,84,0,134,73,0,0,148,98,1,0,74,0,0,0,1,1,1,0,0,59,1,0,137,71,0,0,139,59,0,0,0,61,2,0,1,73,3,0,135,62,52,0,61,73,0,0,41,73,62,24,42,73,73,24,33,3,73,0,120,3,3,0,1,70,4,0,119,0,128,0,0,4,2,0,0,5,67,0,135,6,9,0,4,5,0,0,0,66,6,0,0,7,66,0,41,73,7,24,42,73,73,24,33,8,73,0,120,8,3,0,1,70,15,0,119,0,116,0,135,73,10,0,0,9,67,0,0,10,66,0,1,73,4,0,1,74,2,0,1,75,155,255,1,76,93,0,134,11,0,0,160,32,0,0,9,10,73,74,75,76,0,0,0,65,11,0,0,12,65,0,19,76,12,72,0,14,76,0,14,15,72,14,120,15,3,0,1,70,14,0,119,0,97,0,0,16,65,0,19,76,16,72,0,17,76,0,0,18,67,0,3,19,18,17,78,20,19,0,0,64,20,0,0,21,64,0,1,76,3,0,135,22,48,0,21,76,0,0,41,76,22,24,42,76,76,24,33,23,76,0,120,23,6,0,1,75,60,0,134,76,0,0,148,98,1,0,75,0,0,0,119,0,218,255,0,25,64,0,1,75,3,0,135,76,50,0,25,75,0,0,0,26,2,0,1,75,3,0,135,76,54,0,26,75,0,0,135,27,22,0,30,76,27,3,38,76,76,255,0,28,76,0,19,76,28,72,0,29,76,0,0,68,29,0,0,30,64,0,19,76,30,72,0,31,76,0,1,76,56,14,78,32,76,0,19,76,32,72,0,33,76,0,13,34,31,33,0,36,68,0,19,76,36,72,0,37,76,0,121,34,7,0,1,76,145,0,3,38,37,76,19,76,38,72,0,39,76,0,0,68,39,0,119,0,6,0,1,76,142,0,3,40,37,76,19,76,40,72,0,41,76,0,0,68,41,0,1,76,128,1,82,42,76,0,1,76,44,1,3,43,42,76,0,69,43,0,0,44,68,0,0,45,69,0,1,75,64,0,135,76,24,0,75,44,45,0,0,47,64,0,0,48,69,0,134,76,0,0,24,78,1,0,47,48,0,0,1,76,3,0,83,63,76,0,0,49,64,0,25,50,63,1,83,50,49,0,0,51,2,0,25,52,63,2,83,52,51,0,25,53,63,11,1,76,0,0,83,53,76,0,135,54,51,0,63,0,0,0,41,76,54,24,42,76,76,24,33,55,76,0,120,55,2,0,119,0,125,255,0,56,2,0,0,58,64,0,135,76,11,0,56,58,0,0,119,0,120,255,32,76,70,4,121,76,10,0,1,75,59,0,134,76,0,0,148,98,1,0,75,0,0,0,1,1,1,0,0,59,1,0,137,71,0,0,139,59,0,0,119,0,14,0,32,76,70,14,121,76,6,0,1,1,1,0,0,59,1,0,137,71,0,0,139,59,0,0,119,0,7,0,32,76,70,15,121,76,5,0,1,1,1,0,0,59,1,0,137,71,0,0,139,59,0,0,1,76,0,0,139,76,0,0,140,1,80,0,0,0,0,0,2,75,0,0,255,0,0,0,1,73,0,0,136,76,0,0,0,74,76,0,136,76,0,0,25,76,76,32,137,76,0,0,0,2,0,0,1,76,128,1,82,13,76,0,0,71,13,0,0,24,2,0,0,35,71,0,135,46,9,0,24,35,0,0,0,69,46,0,0,57,69,0,41,76,57,24,42,76,76,24,33,64,76,0,120,64,9,0,1,77,84,0,134,76,0,0,148,98,1,0,77,0,0,0,1,1,1,0,0,63,1,0,137,74,0,0,139,63,0,0,0,65,2,0,1,76,12,0,135,66,52,0,65,76,0,0,41,76,66,24,42,76,76,24,33,3,76,0,120,3,3,0,1,73,4,0,119,0,114,0,135,76,10,0,0,4,2,0,0,5,71,0,135,6,9,0,4,5,0,0,0,69,6,0,0,7,69,0,41,76,7,24,42,76,76,24,33,8,76,0,120,8,3,0,1,73,6,0,119,0,101,0,0,9,71,0,0,10,69,0,1,76,4,0,1,77,2,0,1,78,155,255,1,79,93,0,134,11,0,0,160,32,0,0,9,10,76,77,78,79,0,0,0,68,11,0,0,12,68,0,19,79,12,75,0,14,79,0,14,15,75,14,120,15,3,0,1,73,13,0,119,0,83,0,0,16,68,0,19,79,16,75,0,17,79,0,0,18,71,0,3,19,18,17,78,20,19,0,0,67,20,0,0,21,67,0,19,79,21,75,0,22,79,0,1,79,76,1,82,23,79,0,27,79,22,15,3,25,23,79,0,70,25,0,0,26,2,0,1,78,12,0,135,79,54,0,26,78,0,0,0,27,70,0,25,28,27,8,78,29,28,0,19,79,29,75,0,30,79,0,25,31,30,50,19,79,31,75,0,32,79,0,83,28,32,0,0,33,70,0,25,34,33,8,78,36,34,0,19,79,36,75,0,37,79,0,1,79,100,0,15,38,79,37,121,38,5,0,0,39,70,0,25,40,39,8,1,79,100,0,83,40,79,0,0,41,67,0,19,79,41,75,0,42,79,0,1,79,56,14,78,43,79,0,19,79,43,75,0,44,79,0,14,45,42,44,120,45,2,0,119,0,166,255,1,79,128,1,82,47,79,0,0,72,47,0,0,48,72,0,1,78,64,0,1,77,161,255,135,79,24,0,78,77,48,0,135,79,10,0,0,49,67,0,0,50,72,0,134,79,0,0,24,78,1,0,49,50,0,0,0,51,70,0,25,52,51,5,78,53,52,0,19,79,53,75,0,54,79,0,34,55,54,100,120,55,2,0,119,0,144,255,0,56,70,0,25,58,56,5,78,59,58,0,19,79,59,75,0,60,79,0,25,61,60,1,19,79,61,75,0,62,79,0,83,58,62,0,119,0,134,255,32,79,73,4,121,79,10,0,1,77,59,0,134,79,0,0,148,98,1,0,77,0,0,0,1,1,1,0,0,63,1,0,137,74,0,0,139,63,0,0,119,0,14,0,32,79,73,6,121,79,6,0,1,1,1,0,0,63,1,0,137,74,0,0,139,63,0,0,119,0,7,0,32,79,73,13,121,79,5,0,1,1,1,0,0,63,1,0,137,74,0,0,139,63,0,0,1,79,0,0,139,79,0,0,140,1,96,0,0,0,0,0,2,90,0,0,255,0,0,0,2,91,0,0,158,12,0,0,2,92,0,0,172,13,0,0,2,93,0,0,128,0,0,0,1,88,0,0,136,94,0,0,0,89,94,0,136,94,0,0,25,94,94,16,137,94,0,0,0,1,0,0,1,85,0,0,1,84,0,0,0,2,85,0,19,94,2,90,0,13,94,0,1,94,3,0,15,24,94,13,120,24,135,0,0,35,1,0,19,94,35,90,0,46,94,0,27,94,46,7,3,57,92,94,78,68,57,0,0,86,68,0,0,79,1,0,19,94,79,90,0,81,94,0,27,94,81,7,3,3,92,94,25,4,3,1,78,5,4,0,0,87,5,0,0,6,85,0,19,94,6,90,0,7,94,0,41,94,7,1,0,8,94,0,3,9,91,8,78,10,9,0,0,82,10,0,0,11,85,0,19,94,11,90,0,12,94,0,41,94,12,1,0,14,94,0,25,15,14,1,3,16,91,15,78,17,16,0,0,83,17,0,0,18,85,0,19,94,18,90,0,19,94,0,25,20,19,1,19,94,20,90,0,21,94,0,0,85,21,0,0,22,86,0,41,94,22,24,42,94,94,24,33,23,94,0,120,23,6,0,0,25,82,0,19,94,25,90,0,26,94,0,15,27,93,26,120,27,202,255,0,28,87,0,41,94,28,24,42,94,94,24,33,29,94,0,120,29,6,0,0,30,83,0,19,94,30,90,0,31,94,0,15,32,93,31,120,32,192,255,0,33,82,0,19,94,33,90,0,34,94,0,0,36,86,0,19,94,36,90,0,37,94,0,3,38,37,34,19,94,38,90,0,39,94,0,0,86,39,0,0,40,83,0,19,94,40,90,0,41,94,0,0,42,87,0,19,94,42,90,0,43,94,0,3,44,43,41,19,94,44,90,0,45,94,0,0,87,45,0,0,47,86,0,0,48,87,0,135,49,58,0,47,48,0,0,0,82,49,0,0,50,82,0,19,94,50,90,0,51,94,0,13,52,51,90,120,52,162,255,0,53,1,0,19,94,53,90,0,54,94,0,34,55,54,10,121,55,6,0,0,56,82,0,19,94,56,90,0,58,94,0,34,59,58,10,120,59,152,255,0,60,1,0,19,94,60,90,0,61,94,0,1,94,10,0,15,62,94,61,121,62,7,0,0,63,82,0,19,94,63,90,0,64,94,0,1,94,10,0,15,65,94,64,120,65,140,255,0,66,82,0,1,95,2,0,134,94,0,0,56,75,1,0,66,95,0,0,0,67,82,0,1,95,0,0,135,94,39,0,95,67,0,0,0,69,1,0,134,70,0,0,112,234,0,0,69,0,0,0,19,94,70,90,0,71,94,0,0,72,84,0,19,94,72,90,0,73,94,0,3,74,73,71,19,94,74,90,0,75,94,0,0,84,75,0,119,0,117,255,0,76,84,0,19,94,76,90,0,77,94,0,42,94,77,1,0,78,94,0,19,94,78,90,0,80,94,0,137,89,0,0,139,80,0,0,140,3,63,0,0,0,0,0,2,59,0,0,255,0,0,0,1,57,0,0,136,60,0,0,0,58,60,0,136,60,0,0,25,60,60,32,137,60,0,0,25,54,58,10,0,53,58,0,0,4,0,0,0,15,1,0,0,26,2,0,0,37,15,0,19,60,37,59,0,48,60,0,32,49,48,22,120,49,128,0,0,50,15,0,19,60,50,59,0,51,60,0,32,52,51,30,120,52,123,0,1,61,2,0,135,60,92,0,61,54,0,0,1,61,3,0,135,60,92,0,61,53,0,0,135,60,98,0,135,60,89,0,1,60,7,0,134,6,0,0,40,203,0,0,60,0,0,0,19,60,6,59,0,7,60,0,13,8,7,59,121,8,3,0,1,57,6,0,119,0,88,0,1,60,125,13,78,10,60,0,1,60,126,13,78,11,60,0,135,12,58,0,10,11,0,0,0,55,12,0,0,13,55,0,19,60,13,59,0,14,60,0,13,16,59,14,121,16,6,0,1,61,74,0,1,62,82,0,135,60,99,0,61,62,54,0,119,0,229,255,135,17,100,0,41,60,17,24,42,60,60,24,33,18,60,0,121,18,61,0,0,19,26,0,19,60,19,59,0,20,60,0,34,21,20,10,121,21,10,0,0,22,55,0,19,60,22,59,0,23,60,0,34,24,23,10,121,24,3,0,1,33,1,0,119,0,4,0,1,57,12,0,119,0,2,0,1,57,12,0,32,60,57,12,121,60,16,0,1,57,0,0,0,25,26,0,19,60,25,59,0,27,60,0,1,60,10,0,15,28,60,27,121,28,8,0,0,29,55,0,19,60,29,59,0,30,60,0,1,60,10,0,15,31,60,30,0,33,31,0,119,0,2,0,1,33,0,0,38,60,33,1,0,32,60,0,19,60,32,59,0,34,60,0,0,56,34,0,0,35,4,0,19,60,35,59,0,36,60,0,32,38,36,1,121,38,12,0,0,39,15,0,0,40,56,0,0,41,55,0,135,42,101,0,39,40,41,0,41,60,42,24,42,60,60,24,33,43,60,0,121,43,10,0,1,57,18,0,119,0,13,0,0,44,56,0,41,60,44,24,42,60,60,24,33,45,60,0,120,45,3,0,1,57,18,0,119,0,6,0,1,62,74,0,1,61,82,0,135,60,99,0,62,61,53,0,119,0,159,255,32,60,57,6,121,60,9,0,0,9,26,0,135,60,91,0,9,0,0,0,1,3,255,255,0,47,3,0,137,58,0,0,139,47,0,0,119,0,8,0,32,60,57,18,121,60,6,0,0,46,55,0,0,3,46,0,0,47,3,0,137,58,0,0,139,47,0,0,0,5,26,0,0,3,5,0,0,47,3,0,137,58,0,0,139,47,0,0,140,1,75,0,0,0,0,0,2,70,0,0,255,0,0,0,1,68,0,0,136,71,0,0,0,69,71,0,136,71,0,0,25,71,71,32,137,71,0,0,25,61,69,8,0,2,0,0,1,71,128,1,82,13,71,0,0,66,13,0,0,24,2,0,0,35,66,0,135,46,9,0,24,35,0,0,0,64,46,0,0,57,64,0,41,71,57,24,42,71,71,24,33,58,71,0,120,58,9,0,1,72,84,0,134,71,0,0,148,98,1,0,72,0,0,0,1,1,1,0,0,56,1,0,137,69,0,0,139,56,0,0,0,59,2,0,0,60,66,0,135,3,35,0,59,60,0,0,0,64,3,0,0,4,64,0,41,71,4,24,42,71,71,24,33,5,71,0,120,5,3,0,1,68,4,0,119,0,119,0,135,71,10,0,0,6,66,0,0,7,64,0,1,71,4,0,1,72,2,0,1,73,155,255,1,74,93,0,134,8,0,0,160,32,0,0,6,7,71,72,73,74,0,0,0,63,8,0,0,9,63,0,19,74,9,70,0,10,74,0,14,11,70,10,120,11,2,0,119,0,101,0,0,12,63,0,19,74,12,70,0,14,74,0,0,15,66,0,3,16,15,14,78,17,16,0,0,65,17,0,0,18,2,0,0,19,66,0,135,20,9,0,18,19,0,0,0,64,20,0,0,21,64,0,41,74,21,24,42,74,74,24,33,22,74,0,120,22,2,0,119,0,83,0,135,74,10,0,0,23,66,0,0,25,64,0,1,74,4,0,1,73,2,0,1,72,155,255,1,71,93,0,134,26,0,0,160,32,0,0,23,25,74,73,72,71,0,0,0,63,26,0,0,27,63,0,19,71,27,70,0,28,71,0,14,29,70,28,120,29,2,0,119,0,191,255,0,30,63,0,19,71,30,70,0,31,71,0,0,32,66,0,3,33,32,31,78,34,33,0,0,62,34,0,0,36,62,0,1,71,6,0,135,37,48,0,36,71,0,0,41,71,37,24,42,71,71,24,33,38,71,0,120,38,6,0,1,72,60,0,134,71,0,0,148,98,1,0,72,0,0,0,119,0,219,255,0,39,62,0,1,72,6,0,135,71,50,0,39,72,0,0,1,71,6,0,83,61,71,0,0,40,62,0,25,41,61,1,83,41,40,0,0,42,2,0,25,43,61,2,83,43,42,0,0,44,65,0,25,45,61,3,83,45,44,0,25,47,61,11,1,71,0,0,83,47,71,0,135,48,51,0,61,0,0,0,41,71,48,24,42,71,71,24,33,49,71,0,120,49,2,0,119,0,146,255,0,50,2,0,0,51,62,0,135,71,11,0,50,51,0,0,1,71,128,1,82,52,71,0,0,67,52,0,0,53,67,0,1,72,64,0,1,73,162,255,135,71,24,0,72,73,53,0,135,71,10,0,0,54,62,0,0,55,67,0,134,71,0,0,24,78,1,0,54,55,0,0,119,0,127,255,32,71,68,4,121,71,5,0,1,73,88,0,134,71,0,0,148,98,1,0,73,0,0,0,1,1,1,0,0,56,1,0,137,69,0,0,139,56,0,0,140,1,87,0,0,0,0,0,2,80,0,0,255,0,0,0,1,78,0,0,136,81,0,0,0,79,81,0,136,81,0,0,25,81,81,16,137,81,0,0,0,1,0,0,135,2,102,0,0,74,2,0,1,81,68,1,82,13,81,0,0,24,74,0,135,35,45,0,13,24,0,0,0,77,35,0,0,46,74,0,2,81,0,0,255,255,0,0,19,81,46,81,0,57,81,0,0,68,77,0,2,81,0,0,255,255,0,0,19,81,68,81,0,70,81,0,14,71,57,70,38,81,71,1,0,3,81,0,19,81,3,80,0,4,81,0,0,72,4,0,0,5,77,0,0,74,5,0,1,81,142,13,78,6,81,0,41,81,6,24,42,81,81,24,33,7,81,0,121,7,80,0,1,82,16,0,1,83,1,0,1,84,15,0,1,85,16,0,1,86,0,0,135,81,42,0,82,83,84,85,86,0,0,0,1,81,61,1,78,8,81,0,19,81,8,80,0,9,81,0,32,10,9,7,121,10,5,0,1,77,25,0,1,75,0,0,1,73,4,0,119,0,45,0,1,81,43,1,78,11,81,0,0,76,11,0,0,12,76,0,19,81,12,80,0,14,81,0,1,81,166,12,3,15,81,14,78,16,15,0,19,81,16,80,0,17,81,0,1,81,63,1,78,18,81,0,19,81,18,80,0,19,81,0,5,20,17,19,19,81,20,80,0,21,81,0,0,75,21,0,0,22,75,0,19,81,22,80,0,23,81,0,0,25,76,0,19,81,25,80,0,26,81,0,1,81,166,12,3,27,81,26,78,28,27,0,19,81,28,80,0,29,81,0,3,30,23,29,26,31,30,1,19,81,31,80,0,32,81,0,0,73,32,0,0,33,76,0,19,81,33,80,0,34,81,0,25,36,34,19,2,81,0,0,255,255,0,0,19,81,36,81,0,37,81,0,0,77,37,0,0,38,77,0,0,39,75,0,0,40,73,0,1,86,0,0,1,85,15,0,1,84,16,0,134,81,0,0,0,0,0,0,38,39,40,86,85,84,0,0,0,41,74,0,1,84,55,0,1,85,56,0,134,81,0,0,236,30,1,0,84,85,41,0,119,0,6,0,0,42,1,0,0,43,74,0,1,85,45,0,135,81,46,0,85,42,43,0,1,85,50,0,1,84,0,0,134,81,0,0,204,62,1,0,85,84,0,0,1,81,36,1,82,44,81,0,78,45,44,0,19,81,45,80,0,47,81,0,1,81,56,1,82,48,81,0,78,49,48,0,19,81,49,80,0,50,81,0,4,51,47,50,19,81,51,80,0,52,81,0,0,76,52,0,0,53,76,0,19,81,53,80,0,54,81,0,1,81,224,0,15,55,81,54,121,55,3,0,1,76,24,0,119,0,10,0,0,56,76,0,41,81,56,24,42,81,81,24,33,58,81,0,121,58,3,0,1,76,8,0,119,0,3,0,1,76,16,0,119,0,1,0,0,59,74,0,135,60,47,0,59,0,0,0,19,81,60,80,0,61,81,0,0,62,72,0,19,81,62,80,0,63,81,0,0,64,76,0,19,81,64,80,0,65,81,0,5,66,63,65,3,67,61,66,19,81,67,80,0,69,81,0,137,79,0,0,139,69,0,0,140,1,75,0,0,0,0,0,2,71,0,0,255,0,0,0,1,68,0,0,136,72,0,0,0,69,72,0,136,72,0,0,25,72,72,32,137,72,0,0,25,63,69,4,0,2,0,0,0,13,2,0,19,72,13,71,0,24,72,0,1,72,172,13,27,73,24,7,3,35,72,73,0,64,35,0,0,46,64,0,25,57,46,4,78,60,57,0,19,73,60,71,0,61,73,0,32,62,61,1,121,62,5,0,1,1,1,0,0,59,1,0,137,69,0,0,139,59,0,0,0,3,2,0,135,73,103,0,3,0,0,0,0,67,63,0,25,70,67,20,1,73,0,0,83,67,73,0,25,67,67,1,54,73,67,70,204,237,0,0,1,72,1,0,135,73,92,0,72,63,0,0,135,73,104,0,135,73,89,0,1,73,6,0,134,4,0,0,40,203,0,0,73,0,0,0,19,73,4,71,0,5,73,0,13,6,5,71,121,6,3,0,1,68,5,0,119,0,71,0,1,73,125,13,78,8,73,0,19,73,8,71,0,9,73,0,1,73,129,13,78,10,73,0,19,73,10,71,0,11,73,0,4,12,9,11,1,73,131,13,78,14,73,0,19,73,14,71,0,15,73,0,3,16,12,15,19,73,16,71,0,17,73,0,0,65,17,0,1,73,126,13,78,18,73,0,19,73,18,71,0,19,73,0,1,73,130,13,78,20,73,0,19,73,20,71,0,21,73,0,4,22,19,21,1,73,132,13,78,23,73,0,19,73,23,71,0,25,73,0,3,26,22,25,19,73,26,71,0,27,73,0,0,66,27,0,0,28,65,0,19,73,28,71,0,29,73,0,1,73,15,0,15,30,73,29,120,30,26,0,0,31,66,0,19,73,31,71,0,32,73,0,1,73,15,0,15,33,73,32,120,33,20,0,0,34,66,0,19,73,34,71,0,36,73,0,27,37,36,15,0,38,65,0,19,73,38,71,0,39,73,0,3,40,37,39,1,73,28,1,82,41,73,0,3,42,41,40,78,43,42,0,19,73,43,71,0,44,73,0,1,73,128,0,15,45,73,44,120,45,3,0,1,68,10,0,119,0,6,0,1,72,74,0,1,74,82,0,135,73,99,0,72,74,63,0,119,0,176,255,32,73,68,5,121,73,9,0,0,7,2,0,135,73,91,0,7,0,0,0,1,1,1,0,0,59,1,0,137,69,0,0,139,59,0,0,119,0,28,0,32,73,68,10,121,73,26,0,0,47,64,0,78,48,47,0,1,73,133,13,83,73,48,0,0,49,64,0,25,50,49,1,78,51,50,0,1,73,134,13,83,73,51,0,1,73,125,13,78,52,73,0,0,53,64,0,83,53,52,0,1,73,126,13,78,54,73,0,0,55,64,0,25,56,55,1,83,56,54,0,0,58,2,0,135,73,91,0,58,0,0,0,1,1,0,0,0,59,1,0,137,69,0,0,139,59,0,0,1,73,0,0,139,73,0,0,140,1,73,0,0,0,0,0,2,68,0,0,255,0,0,0,1,66,0,0,136,69,0,0,0,67,69,0,136,69,0,0,25,69,69,32,137,69,0,0,25,61,67,4,0,2,0,0], eb + 51200);
  HEAPU8.set([0,13,2,0,1,69,15,0,135,24,52,0,13,69,0,0,41,69,24,24,42,69,69,24,33,35,69,0,120,35,9,0,1,70,59,0,134,69,0,0,148,98,1,0,70,0,0,0,1,1,1,0,0,56,1,0,137,67,0,0,139,56,0,0,1,69,128,1,82,46,69,0,0,65,46,0,0,57,2,0,0,58,65,0,135,59,9,0,57,58,0,0,0,63,59,0,0,60,63,0,41,69,60,24,42,69,69,24,33,3,69,0,120,3,3,0,1,66,5,0,119,0,67,0,0,4,65,0,0,5,63,0,1,69,4,0,1,70,2,0,1,71,155,255,1,72,93,0,134,6,0,0,160,32,0,0,4,5,69,70,71,72,0,0,0,62,6,0,0,7,62,0,19,72,7,68,0,8,72,0,14,9,68,8,120,9,2,0,119,0,50,0,0,10,62,0,19,72,10,68,0,11,72,0,0,12,65,0,3,14,12,11,78,15,14,0,1,72,15,0,135,16,48,0,15,72,0,0,41,72,16,24,42,72,72,24,33,17,72,0,121,17,32,0,0,18,62,0,19,72,18,68,0,19,72,0,0,20,65,0,3,21,20,19,78,22,21,0,0,64,22,0,1,72,56,14,78,23,72,0,0,25,65,0,135,26,105,0,23,25,0,0,0,63,26,0,0,27,65,0,0,28,63,0,1,72,4,0,1,71,2,0,1,70,155,255,1,69,93,0,134,29,0,0,160,32,0,0,27,28,72,71,70,69,0,0,0,62,29,0,0,30,62,0,19,69,30,68,0,31,69,0,14,32,68,31,121,32,186,255,1,66,10,0,119,0,6,0,1,70,60,0,134,69,0,0,148,98,1,0,70,0,0,0,119,0,179,255,32,69,66,5,121,69,6,0,1,70,84,0,134,69,0,0,148,98,1,0,70,0,0,0,119,0,45,0,32,69,66,10,121,69,43,0,0,33,62,0,19,69,33,68,0,34,69,0,0,36,65,0,3,37,36,34,78,38,37,0,1,70,15,0,135,69,50,0,38,70,0,0,0,39,2,0,1,70,15,0,135,69,54,0,39,70,0,0,1,69,15,0,83,61,69,0,0,40,64,0,25,41,61,1,83,41,40,0,0,42,2,0,25,43,61,2,83,43,42,0,0,44,62,0,19,69,44,68,0,45,69,0,0,47,65,0,3,48,47,45,78,49,48,0,25,50,61,3,83,50,49,0,25,51,61,11,1,69,10,0,83,51,69,0,135,52,51,0,61,0,0,0,41,69,52,24,42,69,69,24,33,53,69,0,121,53,5,0,0,54,2,0,0,55,64,0,135,69,11,0,54,55,0,0,1,1,1,0,0,56,1,0,137,67,0,0,139,56,0,0,140,2,86,0,0,0,0,0,2,83,0,0,255,0,0,0,1,81,0,0,136,84,0,0,0,82,84,0,136,84,0,0,25,84,84,16,137,84,0,0,0,2,0,0,0,3,1,0,1,84,112,13,1,85,5,0,83,84,85,0,1,85,114,13,1,84,155,255,83,85,84,0,0,14,2,0,135,25,13,0,14,0,0,0,19,84,25,83,0,36,84,0,0,80,36,0,1,78,24,0,0,47,80,0,19,84,47,83,0,58,84,0,0,69,78,0,19,84,69,83,0,76,84,0,6,84,58,76,38,84,84,255,0,77,84,0,25,4,77,1,19,84,4,83,0,5,84,0,0,79,5,0,0,6,79,0,19,84,6,83,0,7,84,0,1,84,6,0,15,8,84,7,121,8,8,0,1,84,113,13,1,85,5,0,83,84,85,0,1,85,115,13,1,84,90,0,83,85,84,0,119,0,40,0,0,9,79,0,19,84,9,83,0,10,84,0,27,11,10,12,19,84,11,83,0,12,84,0,0,79,12,0,0,13,79,0,19,84,13,83,0,15,84,0,1,84,95,0,4,16,84,15,42,84,16,1,0,17,84,0,19,84,17,83,0,18,84,0,1,84,113,13,83,84,18,0,1,84,113,13,78,19,84,0,19,84,19,83,0,20,84,0,25,21,20,0,19,84,21,83,0,22,84,0,1,84,113,13,83,84,22,0,1,84,113,13,78,23,84,0,19,84,23,83,0,24,84,0,0,26,79,0,19,84,26,83,0,27,84,0,3,28,24,27,19,84,28,83,0,29,84,0,1,84,115,13,83,84,29,0,1,84,112,13,78,30,84,0,19,84,30,83,0,31,84,0,26,32,31,3,19,84,32,83,0,33,84,0,1,84,113,13,78,34,84,0,19,84,34,83,0,35,84,0,26,37,35,3,19,84,37,83,0,38,84,0,1,84,114,13,78,39,84,0,19,84,39,83,0,40,84,0,25,41,40,3,19,84,41,83,0,42,84,0,1,84,115,13,78,43,84,0,19,84,43,83,0,44,84,0,25,45,44,2,19,84,45,83,0,46,84,0,135,84,14,0,33,38,42,46,1,84,112,13,78,48,84,0,19,84,48,83,0,49,84,0,26,50,49,3,19,84,50,83,0,51,84,0,1,84,113,13,78,52,84,0,19,84,52,83,0,53,84,0,26,54,53,3,19,84,54,83,0,55,84,0,1,84,114,13,78,56,84,0,19,84,56,83,0,57,84,0,25,59,57,3,19,84,59,83,0,60,84,0,1,84,115,13,78,61,84,0,19,84,61,83,0,62,84,0,25,63,62,2,19,84,63,83,0,64,84,0,135,84,15,0,51,55,60,64,1,84,112,13,78,65,84,0,1,84,113,13,78,66,84,0,0,67,2,0,135,84,16,0,65,66,67,0,0,68,3,0,19,84,68,83,0,70,84,0,32,71,70,0,121,71,3,0,137,82,0,0,139,0,0,0,0,72,3,0,19,84,72,83,0,73,84,0,27,74,73,100,2,84,0,0,255,255,0,0,19,84,74,84,0,75,84,0,1,85,1,0,134,84,0,0,204,62,1,0,75,85,0,0,137,82,0,0,139,0,0,0,140,1,88,0,0,0,0,0,2,83,0,0,255,0,0,0,1,81,0,0,136,84,0,0,0,82,84,0,136,84,0,0,25,84,84,32,137,84,0,0,0,1,0,0,1,84,128,1,82,2,84,0,0,79,2,0,0,13,1,0,0,24,79,0,135,35,35,0,13,24,0,0,0,78,35,0,0,46,78,0,41,84,46,24,42,84,84,24,33,57,84,0,120,57,5,0,1,85,88,0,134,84,0,0,148,98,1,0,85,0,0,0,0,68,79,0,0,72,78,0,1,84,4,0,1,85,2,0,1,86,155,255,1,87,93,0,134,73,0,0,160,32,0,0,68,72,84,85,86,87,0,0,0,77,73,0,0,3,77,0,19,87,3,83,0,4,87,0,14,5,83,4,120,5,4,0,137,82,0,0,1,87,1,0,139,87,0,0,0,6,77,0,19,87,6,83,0,7,87,0,0,8,79,0,3,9,8,7,78,10,9,0,19,87,10,83,0,11,87,0,1,87,76,1,82,12,87,0,27,87,11,15,3,14,12,87,25,15,14,12,0,74,15,0,0,16,74,0,78,17,16,0,41,87,17,24,42,87,87,24,33,18,87,0,121,18,24,0,0,19,1,0,0,20,74,0,78,21,20,0,19,87,21,83,0,22,87,0,26,23,22,1,19,87,23,83,0,25,87,0,135,26,76,0,19,25,0,0,19,87,26,83,0,27,87,0,0,75,27,0,0,28,75,0,2,87,0,0,255,255,0,0,19,87,28,87,0,29,87,0,26,30,29,1,19,87,30,83,0,31,87,0,135,87,77,0,31,0,0,0,0,32,74,0,25,33,32,1,78,34,33,0,41,87,34,24,42,87,87,24,33,36,87,0,121,36,25,0,0,37,1,0,0,38,74,0,25,39,38,1,78,40,39,0,19,87,40,83,0,41,87,0,26,42,41,1,19,87,42,83,0,43,87,0,135,44,76,0,37,43,0,0,19,87,44,83,0,45,87,0,0,76,45,0,0,47,76,0,2,87,0,0,255,255,0,0,19,87,47,87,0,48,87,0,26,49,48,1,19,87,49,83,0,50,87,0,135,87,77,0,50,0,0,0,1,87,128,1,82,51,87,0,1,87,44,1,3,52,51,87,0,80,52,0,135,53,22,0,30,87,53,3,38,87,87,255,0,54,87,0,25,55,54,125,19,87,55,83,0,56,87,0,0,58,80,0,1,86,64,0,135,87,24,0,86,56,58,0,135,87,10,0,0,59,77,0,19,87,59,83,0,60,87,0,0,61,79,0,3,62,61,60,78,63,62,0,0,64,80,0,134,87,0,0,24,78,1,0,63,64,0,0,0,65,1,0,0,66,77,0,19,87,66,83,0,67,87,0,0,69,79,0,3,70,69,67,78,71,70,0,135,87,11,0,65,71,0,0,137,82,0,0,1,87,1,0,139,87,0,0,140,1,60,0,0,0,0,0,1,54,0,0,136,56,0,0,0,55,56,0,136,56,0,0,25,56,56,32,137,56,0,0,25,52,55,8,25,53,55,6,0,2,0,0,1,56,0,0,83,53,56,0,1,57,1,0,1,58,68,0,135,56,24,0,57,58,52,0,1,58,0,0,134,56,0,0,96,242,0,0,52,58,0,0,1,58,1,0,1,57,64,0,135,56,24,0,58,57,52,0,0,13,2,0,1,56,255,0,19,56,13,56,0,24,56,0,41,56,24,1,0,35,56,0,25,45,35,48,1,56,255,0,19,56,45,56,0,46,56,0,25,47,52,5,83,47,46,0,1,56,114,0,135,48,106,0,52,56,0,0,0,50,48,0,0,49,50,0,1,56,0,0,13,3,56,49,121,3,13,0,1,57,1,0,1,58,70,0,135,56,24,0,57,58,52,0,1,58,2,0,134,56,0,0,96,242,0,0,52,58,0,0,1,1,0,0,0,44,1,0,137,55,0,0,139,44,0,0,0,4,50,0,1,58,1,0,1,57,1,0,135,56,107,0,53,58,57,4,78,5,53,0,1,56,255,0,19,56,5,56,0,6,56,0,1,56,128,0,19,56,6,56,0,7,56,0,33,8,7,0,121,8,9,0,1,51,200,0,0,9,50,0,1,57,60,14,1,58,1,0,1,59,1,0,135,56,107,0,57,58,59,9,119,0,5,0,1,51,33,0,78,10,53,0,1,56,60,14,83,56,10,0,0,11,50,0,1,59,56,14,1,58,1,0,1,57,1,0,135,56,107,0,59,58,57,11,0,12,50,0,1,57,57,14,1,58,2,0,1,59,1,0,135,56,107,0,57,58,59,12,0,14,50,0,1,59,141,13,1,58,1,0,1,57,1,0,135,56,107,0,59,58,57,14,0,15,50,0,1,57,142,13,1,58,1,0,1,59,1,0,135,56,107,0,57,58,59,15,0,16,50,0,1,59,143,13,1,58,1,0,1,57,1,0,135,56,107,0,59,58,57,16,0,17,50,0,1,57,59,14,1,58,1,0,1,59,1,0,135,56,107,0,57,58,59,17,0,18,50,0,1,59,103,20,1,58,4,0,1,57,1,0,135,56,107,0,59,58,57,18,1,56,76,1,82,19,56,0,0,20,50,0,1,57,15,0,1,58,200,0,135,56,107,0,19,57,58,20,0,21,50,0,1,58,215,18,1,57,1,0,1,59,200,0,135,56,107,0,58,57,59,21,0,22,51,0,0,23,50,0,1,59,159,19,1,57,1,0,135,56,107,0,59,57,22,23,0,25,50,0,135,56,108,0,25,0,0,0,0,26,2,0,1,56,255,0,19,56,26,56,0,27,56,0,41,56,27,1,0,28,56,0,25,29,28,49,1,56,255,0,19,56,29,56,0,30,56,0,25,31,52,5,83,31,30,0,1,56,114,0,135,32,106,0,52,56,0,0,0,50,32,0,0,33,50,0,1,56,0,0,13,34,56,33,121,34,14,0,1,57,1,0,1,59,70,0,135,56,24,0,57,59,52,0,1,59,2,0,134,56,0,0,96,242,0,0,52,59,0,0,1,1,0,0,0,44,1,0,137,55,0,0,139,44,0,0,119,0,35,0,1,56,132,1,82,36,56,0,0,37,50,0,1,59,1,0,1,57,30,0,135,56,107,0,36,59,57,37,1,56,136,1,82,38,56,0,0,39,50,0,1,57,10,0,1,59,30,0,135,56,107,0,38,57,59,39,1,56,140,1,82,40,56,0,0,41,50,0,1,59,12,0,1,57,100,0,135,56,107,0,40,59,57,41,0,42,50,0,1,57,61,14,1,59,31,0,1,58,38,0,135,56,107,0,57,59,58,42,0,43,50,0,135,56,108,0,43,0,0,0,1,1,1,0,0,44,1,0,137,55,0,0,139,44,0,0,1,56,0,0,139,56,0,0,140,0,58,0,0,0,0,0,2,55,0,0,255,0,0,0,1,53,0,0,136,56,0,0,0,54,56,0,136,56,0,0,25,56,56,64,137,56,0,0,25,48,54,12,25,49,54,8,25,50,54,4,1,52,0,0,1,47,68,0,1,56,8,0,83,49,56,0,25,1,49,2,1,56,56,0,83,1,56,0,25,12,49,1,1,56,8,0,83,12,56,0,1,51,75,0,0,23,47,0,19,56,23,55,0,34,56,0,34,42,34,75,121,42,3,0,0,43,47,0,0,51,43,0,0,44,51,0,25,45,49,3,83,45,44,0,1,51,79,0,0,46,51,0,19,56,46,55,0,2,56,0,26,3,2,12,19,56,3,55,0,4,56,0,83,50,4,0,0,5,51,0,19,56,5,55,0,6,56,0,25,7,6,12,19,56,7,55,0,8,56,0,25,9,50,2,83,9,8,0,1,51,47,0,0,10,51,0,19,56,10,55,0,11,56,0,26,13,11,12,19,56,13,55,0,14,56,0,25,15,50,1,83,15,14,0,0,16,51,0,19,56,16,55,0,17,56,0,25,18,17,12,19,56,18,55,0,19,56,0,25,20,50,3,83,20,19,0,1,47,0,0,1,57,9,0,135,56,38,0,57,48,0,0,0,21,47,0,134,22,0,0,140,24,0,0,49,21,48,0,0,47,22,0,0,24,47,0,19,56,24,55,0,25,56,0,1,56,0,0,1,57,0,1,138,25,56,57,84,0,1,0,88,0,1,0,96,0,1,0,108,0,1,0,120,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,80,0,1,0,132,0,1,0,119,0,15,0,119,0,41,0,1,53,5,0,119,0,39,0,1,52,142,13,1,51,10,0,119,0,9,0,1,52,143,13,1,51,11,0,119,0,6,0,1,52,141,13,1,51,10,0,119,0,3,0,1,53,7,0,119,0,28,0,0,28,52,0,1,56,0,0,14,29,28,56,120,29,2,0,119,0,223,254,0,30,51,0,135,56,38,0,30,48,0,0,0,31,52,0,78,32,31,0,134,33,0,0,140,24,0,0,50,32,48,0,0,51,33,0,0,35,51,0,19,56,35,55,0,36,56,0,14,37,36,55,121,37,4,0,0,38,51,0,0,39,52,0,83,39,38,0,1,56,16,1,82,40,56,0,135,56,6,0,40,0,0,0,119,0,201,254,32,56,53,5,121,56,5,0,1,56,137,13,1,57,2,0,83,56,57,0,119,0,11,0,32,57,53,7,121,57,9,0,1,57,16,1,82,27,57,0,135,57,6,0,27,0,0,0,1,0,1,0,0,41,0,0,137,54,0,0,139,41,0,0,1,57,16,1,82,26,57,0,135,57,6,0,26,0,0,0,1,0,255,255,0,41,0,0,137,54,0,0,139,41,0,0,140,1,67,0,0,0,0,0,2,62,0,0,255,0,0,0,1,60,0,0,136,63,0,0,0,61,63,0,136,63,0,0,25,63,63,32,137,63,0,0,25,55,61,4,0,2,0,0,0,13,2,0,1,63,17,0,135,24,52,0,13,63,0,0,41,63,24,24,42,63,63,24,33,35,63,0,120,35,9,0,1,64,59,0,134,63,0,0,148,98,1,0,64,0,0,0,1,1,1,0,0,50,1,0,137,61,0,0,139,50,0,0,1,63,128,1,82,46,63,0,0,59,46,0,0,51,2,0,0,52,59,0,135,53,9,0,51,52,0,0,0,57,53,0,0,54,57,0,41,63,54,24,42,63,63,24,33,3,63,0,120,3,3,0,1,60,5,0,119,0,70,0,135,63,10,0,0,4,59,0,0,5,57,0,1,63,4,0,1,64,2,0,1,65,155,255,1,66,93,0,134,6,0,0,160,32,0,0,4,5,63,64,65,66,0,0,0,56,6,0,0,7,56,0,19,66,7,62,0,8,66,0,14,9,62,8,120,9,2,0,119,0,52,0,0,10,56,0,19,66,10,62,0,11,66,0,0,12,59,0,3,14,12,11,78,15,14,0,0,58,15,0,0,16,58,0,1,66,17,0,135,17,48,0,16,66,0,0,41,66,17,24,42,66,66,24,33,18,66,0,120,18,6,0,1,65,60,0,134,66,0,0,148,98,1,0,65,0,0,0,119,0,207,255,1,66,56,14,78,19,66,0,0,20,59,0,135,21,109,0,19,20,0,0,0,57,21,0,0,22,57,0,41,66,22,24,42,66,66,24,33,23,66,0,120,23,2,0,119,0,20,0,135,66,10,0,0,25,59,0,0,26,57,0,1,66,4,0,1,65,2,0,1,64,155,255,1,63,93,0,134,27,0,0,160,32,0,0,25,26,66,65,64,63,0,0,0,56,27,0,0,28,56,0,19,63,28,62,0,29,63,0,14,30,62,29,121,30,178,255,1,60,11,0,119,0,1,0,32,63,60,5,121,63,6,0,1,64,84,0,134,63,0,0,148,98,1,0,64,0,0,0,119,0,40,0,32,63,60,11,121,63,38,0,0,31,58,0,1,64,17,0,135,63,50,0,31,64,0,0,0,32,2,0,1,64,17,0,135,63,54,0,32,64,0,0,1,63,17,0,83,55,63,0,0,33,58,0,25,34,55,1,83,34,33,0,0,36,2,0,25,37,55,2,83,37,36,0,0,38,56,0,19,63,38,62,0,39,63,0,0,40,59,0,3,41,40,39,78,42,41,0,25,43,55,3,83,43,42,0,25,44,55,11,1,63,10,0,83,44,63,0,135,45,51,0,55,0,0,0,41,63,45,24,42,63,63,24,33,47,63,0,121,47,5,0,0,48,2,0,0,49,58,0,135,63,11,0,48,49,0,0,1,1,1,0,0,50,1,0,137,61,0,0,139,50,0,0,140,1,64,0,0,0,0,0,2,60,0,0,255,0,0,0,2,61,0,0,172,13,0,0,1,58,0,0,136,62,0,0,0,59,62,0,136,62,0,0,25,62,62,32,137,62,0,0,25,54,59,8,0,1,0,0,1,50,0,0,1,55,0,0,1,53,1,0,0,2,1,0,25,13,2,2,78,24,13,0,0,52,24,0,0,35,52,0,135,45,90,0,35,0,0,0,0,56,45,0,1,57,0,0,1,62,1,0,1,63,100,0,135,46,57,0,62,63,0,0,0,51,46,0,0,47,53,0,41,63,47,24,42,63,63,24,33,48,63,0,120,48,3,0,1,58,12,0,119,0,78,1,135,63,89,0,0,49,52,0,135,63,110,0,49,54,0,0,0,3,51,0,1,62,8,0,135,63,92,0,62,3,0,0,0,4,57,0,0,5,51,0,134,6,0,0,140,24,0,0,54,4,5,0,0,57,6,0,0,7,57,0,0,8,1,0,83,8,7,0,1,55,0,0,0,9,57,0,19,63,9,60,0,10,63,0,1,63,1,0,1,62,255,0,138,10,63,62,216,8,1,0,40,9,1,0,56,9,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,212,8,1,0,64,9,1,0,119,0,28,0,0,11,52,0,19,63,11,60,0,12,63,0,27,63,12,7,3,14,61,63,25,15,14,6,78,16,15,0,19,63,16,60,0,17,63,0,32,18,17,2,121,18,3,0,1,55,255,255,119,0,15,0,0,19,52,0,0,20,51,0,134,21,0,0,68,218,0,0,19,54,20,0,0,55,21,0,119,0,8,0,134,63,0,0,152,95,0,0,1,55,255,255,119,0,4,0,1,58,8,0,119,0,28,0,119,0,254,255,0,23,55,0,19,63,23,60,0,25,63,0,14,26,25,60,120,26,2,0,119,0,193,254,0,27,57,0,0,28,55,0,0,29,52,0,135,63,111,0,27,28,29,0,0,30,57,0,0,31,55,0,0,32,52,0,134,33,0,0,92,229,0,0,30,31,32,0,0,50,33,0,0,34,50,0,19,63,34,60,0,36,63,0,14,37,36,60,120,37,2,0,119,0,175,254,1,53,0,0,119,0,173,254,32,63,58,8,121,63,7,0,0,22,51,0,135,63,64,0,22,0,0,0,137,59,0,0,139,0,0,0,119,0,16,0,32,63,58,12,121,63,14,0,0,38,55,0,0,39,1,0,25,40,39,1,83,40,38,0,0,41,50,0,0,42,1,0,25,43,42,3,83,43,41,0,0,44,51,0,135,63,64,0,44,0,0,0,137,59,0,0,139,0,0,0,139,0,0,0,140,1,65,0,0,0,0,0,2,60,0,0,255,0,0,0,1,58,0,0,136,61,0,0,0,59,61,0,136,61,0,0,25,61,61,32,137,61,0,0,25,53,59,4,0,2,0,0,0,13,2,0,1,61,16,0,135,24,52,0,13,61,0,0,41,61,24,24,42,61,61,24,33,35,61,0,120,35,9,0,1,62,59,0,134,61,0,0,148,98,1,0,62,0,0,0,1,1,1,0,0,48,1,0,137,59,0,0,139,48,0,0,1,61,128,1,82,46,61,0,0,57,46,0,0,49,2,0,0,50,57,0,135,51,9,0,49,50,0,0,0,55,51,0,0,52,55,0,41,61,52,24,42,61,61,24,33,3,61,0,120,3,3,0,1,58,5,0,119,0,63,0,0,4,57,0,0,5,55,0,1,61,4,0,1,62,2,0,1,63,155,255,1,64,93,0,134,6,0,0,160,32,0,0,4,5,61,62,63,64,0,0,0,54,6,0,0,7,54,0,19,64,7,60,0,8,64,0,14,9,60,8,120,9,2,0,119,0,46,0,0,10,54,0,19,64,10,60,0,11,64,0,0,12,57,0,3,14,12,11,78,15,14,0,0,56,15,0,0,16,56,0,1,64,16,0,135,17,48,0,16,64,0,0,41,64,17,24,42,64,64,24,33,18,64,0,121,18,26,0,1,64,56,14,78,19,64,0,0,20,57,0,135,21,105,0,19,20,0,0,0,55,21,0,135,64,10,0,0,22,57,0,0,23,55,0,1,64,4,0,1,63,2,0,1,62,155,255,1,61,93,0,134,25,0,0,160,32,0,0,22,23,64,63,62,61,0,0,0,54,25,0,0,26,54,0,19,61,26,60,0,27,61,0,14,28,60,27,121,28,190,255,1,58,10,0,119,0,6,0,1,62,60,0,134,61,0,0,148,98,1,0,62,0,0,0,119,0,183,255,32,61,58,5,121,61,6,0,1,62,84,0,134,61,0,0,148,98,1,0,62,0,0,0,119,0,40,0,32,61,58,10,121,61,38,0,0,29,56,0,1,62,16,0,135,61,50,0,29,62,0,0,0,30,2,0,1,62,16,0,135,61,54,0,30,62,0,0,1,61,16,0,83,53,61,0,0,31,56,0,25,32,53,1,83,32,31,0,0,33,2,0,25,34,53,2,83,34,33,0,0,36,54,0,19,61,36,60,0,37,61,0,0,38,57,0,3,39,38,37,78,40,39,0,25,41,53,3,83,41,40,0,25,42,53,11,1,61,10,0,83,42,61,0,135,43,51,0,53,0,0,0,41,61,43,24,42,61,61,24,33,44,61,0,121,44,5,0,0,45,2,0,0,47,56,0,135,61,11,0,45,47,0,0,1,1,1,0,0,48,1,0,137,59,0,0,139,48,0,0,140,1,58,0,0,0,0,0,2,52,0,0,255,0,0,0,1,50,0,0,136,53,0,0,0,51,53,0,136,53,0,0,25,53,53,48,137,53,0,0,25,49,51,4,0,45,51,0,0,2,0,0,1,48,0,0,1,47,1,0,0,13,47,0,41,53,13,24,42,53,53,24,33,24,53,0,121,24,57,0,1,54,29,0,1,55,2,0,1,56,129,255,1,57,80,0,135,53,14,0,54,55,56,57,1,57,28,0,1,56,1,0,1,55,130,255,1,54,81,0,135,53,15,0,57,56,55,54,0,35,2,0,135,53,112,0,35,49,0,0,1,54,34,0,1,55,2,0,135,53,16,0,54,55,49,0,1,46,0,0,0,40,46,0,19,53,40,52,0,41,53,0,34,42,41,5,120,42,2,0,119,0,30,0,0,43,2,0,0,44,48,0,19,53,44,52,0,3,53,0,0,4,46,0,19,53,4,52,0,5,53,0,3,6,3,5,19,53,6,52,0,7,53,0,135,53,113,0,43,7,49,0,0,8,46,0,19,53,8,52,0,9,53,0,27,10,9,13,25,11,10,14,19,53,11,52,0,12,53,0,1,55,34,0,135,53,16,0,55,12,49,0,0,14,46,0,25,53,14,1,41,53,53,24,42,53,53,24,0,15,53,0,0,46,15,0,119,0,222,255,1,47,0,0,134,53,0,0,224,95,1,0,45,0,0,0,78,16,45,0,19,53,16,52,0,17,53,0,32,18,17,5,120,18,2,0,119,0,187,255,25,19,45,1,79,53,19,0,103,55,19,1,41,55,55,8,20,53,53,55,0,20,53,0,2,53,0,0,255,255,0,0,19,53,20,53,0,21,53,0,1,53,34,0,1,55,7,0,138,21,53,55,32,14,1,0,92,14,1,0,160,14,1,0,164,14,1,0,28,14,1,0,168,14,1,0,176,14,1,0,119,0,166,255,0,22,48,0,41,53,22,24,42,53,53,24,33,23,53,0,120,23,2,0,119,0,160,255,0,25,48,0,19,53,25,52,0,26,53,0,26,27,26,5,19,53,27,52,0,28,53,0,0,48,28,0,1,47,1,0,119,0,151,255,0,29,48,0,19,53,29,52,0,30,53,0,25,31,30,6,26,32,31,1,34,33,32,11,120,33,2,0,119,0,143,255,0,34,48,0,19,53,34,52,0,36,53,0,25,37,36,5,19,53,37,52,0,38,53,0,0,48,38,0,1,47,1,0,119,0,134,255,119,0,224,255,119,0,238,255,1,50,13,0,119,0,3,0,1,50,14,0,119,0,1,0,32,53,50,13,121,53,6,0,1,1,1,0,0,39,1,0,137,51,0,0,139,39,0,0,119,0,7,0,32,53,50,14,121,53,5,0,1,1,0,0,0,39,1,0,137,51,0,0,139,39,0,0,1,53,0,0,139,53,0,0,140,1,65,0,0,0,0,0,2,60,0,0,255,0,0,0,1,58,0,0,136,61,0,0,0,59,61,0,136,61,0,0,25,61,61,32,137,61,0,0,25,53,59,4,0,2,0,0,0,13,2,0,1,61,19,0,135,24,52,0,13,61,0,0,41,61,24,24,42,61,61,24,33,35,61,0,120,35,9,0,1,62,59,0,134,61,0,0,148,98,1,0,62,0,0,0,1,1,1,0,0,48,1,0,137,59,0,0,139,48,0,0,1,61,128,1,82,46,61,0,0,57,46,0,0,49,2,0,0,50,57,0,135,51,9,0,49,50,0,0,0,55,51,0,0,52,55,0,41,61,52,24,42,61,61,24,33,3,61,0,120,3,3,0,1,58,5,0,119,0,62,0,0,4,57,0,0,5,55,0,1,61,4,0,1,62,2,0,1,63,155,255,1,64,93,0,134,6,0,0,160,32,0,0,4,5,61,62,63,64,0,0,0,54,6,0,0,7,54,0,19,64,7,60,0,8,64,0,14,9,60,8,120,9,2,0,119,0,45,0,0,10,54,0,19,64,10,60,0,11,64,0,0,12,57,0,3,14,12,11,78,15,14,0,0,56,15,0,0,16,56,0,1,64,19,0,135,17,48,0,16,64,0,0,41,64,17,24,42,64,64,24,33,18,64,0,121,18,25,0,1,64,56,14,78,19,64,0,0,20,57,0,135,21,114,0,19,20,0,0,0,55,21,0,0,22,57,0,0,23,55,0,1,64,4,0,1,63,2,0,1,62,155,255,1,61,93,0,134,25,0,0,160,32,0,0,22,23,64,63,62,61,0,0,0,54,25,0,0,26,54,0,19,61,26,60,0,27,61,0,14,28,60,27,121,28,191,255,1,58,10,0,119,0,6,0,1,62,60,0,134,61,0,0,148,98,1,0,62,0,0,0,119,0,184,255,32,61,58,5,121,61,6,0,1,62,84,0,134,61,0,0,148,98,1,0,62,0,0,0,119,0,40,0,32,61,58,10,121,61,38,0,0,29,56,0,1,62,19,0,135,61,50,0,29,62,0,0,0,30,2,0,1,62,19,0,135,61,54,0,30,62,0,0,1,61,17,0,83,53,61,0,0,31,56,0,25,32,53,1,83,32,31,0,0,33,2,0,25,34,53,2,83,34,33,0,0,36,54,0,19,61,36,60,0,37,61,0,0,38,57,0,3,39,38,37,78,40,39,0,25,41,53,3,83,41,40,0,25,42,53,11,1,61,10,0,83,42,61,0,135,43,51,0,53,0,0,0,41,61,43,24,42,61,61,24,33,44,61,0,121,44,5,0,0,45,2,0,0,47,56,0,135,61,11,0,45,47,0,0,1,1,1,0,0,48,1,0,137,59,0,0,139,48,0,0,140,4,68,0,0,0,0,0,1,63,0,0,136,65,0,0,0,64,65,0,136,65,0,0,25,65,65,16,137,65,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,1,65,128,1,82,38,65,0,1,65,44,1,3,49,38,65,0,62,49,0,1,65,128,1,82,57,65,0,1,65,94,1,3,58,57,65,0,61,58,0,0,59,27,0,1,65,255,0,19,65,59,65,0,60,65,0,1,67,0,0,1,65,4,0,138,60,67,65,228,17,1,0,80,18,1,0,188,18,1,0,20,19,1,0,119,0,99,0,0,6,62,0,1,66,64,0,1,67,113,0,135,65,24,0,66,67,6,0,0,7,4,0,1,65,255,0,19,65,7,65,0,8,65,0,1,65,61,14,27,67,8,31,3,9,65,67,25,10,9,5,79,67,10,0,103,65,10,1,41,65,65,8,20,67,67,65,0,11,67,0,2,67,0,0,255,255,0,0,19,67,11,67,0,12,67,0,0,13,61,0,1,65,10,0,135,67,30,0,12,13,65,0,119,0,72,0,0,14,62,0,1,65,64,0,1,66,116,0,135,67,24,0,65,66,14,0,0,15,4,0,1,67,255,0,19,67,15,67,0,17,67,0,1,67,61,14,27,66,17,31,3,18,67,66,25,19,18,9,79,66,19,0,103,67,19,1,41,67,67,8,20,66,66,67,0,20,66,0,2,66,0,0,255,255,0,0,19,66,20,66,0,21,66,0,0,22,61,0,1,67,10,0,135,66,30,0,21,22,67,0,119,0,45,0,0,23,62,0,1,67,64,0,1,65,117,0,135,66,24,0,67,65,23,0,0,24,4,0,1,66,255,0,19,66,24,66,0,25,66,0,1,66,61,14,27,65,25,31,3,26,66,65,25,28,26,11,78,29,28,0,1,65,255,0,19,65,29,65,0,30,65,0,0,31,61,0,1,66,10,0,135,65,30,0,30,31,66,0,119,0,23,0,0,32,62,0,1,66,64,0,1,67,118,0,135,65,24,0,66,67,32,0,0,33,4,0,1,65,255,0,19,65,33,65,0,34,65,0,1,65,61,14,27,67,34,31,3,35,65,67,25,36,35,12,78,37,36,0,1,67,255,0,19,67,37,67,0,39,67,0,0,40,61,0,1,65,10,0,135,67,30,0,39,40,65,0,119,0,1,0,0,41,62,0,0,42,61,0,135,67,26,0,41,42,0,0,0,43,61,0,1,65,64,0,1,66,114,0,135,67,24,0,65,66,43,0,0,44,62,0,0,45,61,0,135,67,26,0,44,45,0,0,0,46,16,0,1,67,255,0,19,67,46,67,0,47,67,0,0,48,61,0,1,66,10,0,135,67,30,0,47,48,66,0,0,50,62,0,0,51,61,0,135,67,26,0,50,51,0,0,0,52,61,0,1,66,64,0,1,65,115,0,135,67,24,0,66,65,52,0,0,53,62,0,0,54,61,0,135,67,26,0,53,54,0,0,135,67,10,0,0,55,5,0,0,56,62,0,134,67,0,0,24,78,1,0,55,56,0,0,137,64,0,0,139,0,0,0,140,1,53,0,0,0,0,0,1,47,0,0,136,49,0,0,0,48,49,0,136,49,0,0,25,49,49,32,137,49,0,0,25,45,48,8,25,46,48,4,0,2,0,0,1,50,1,0,1,51,67,0,135,49,24,0,50,51,45,0,1,51,0,0,134,49,0,0,96,242,0,0,45,51,0,0,1,51,1,0,1,50,64,0,135,49,24,0,51,50,45,0,0,13,2,0,1,49,255,0,19,49,13,49,0,24,49,0,41,49,24,1,0,35,49,0,25,39,35,48,1,49,255,0,19,49,39,49,0,40,49,0,25,41,45,5,83,41,40,0,1,49,119,0,135,42,106,0,45,49,0,0,0,44,42,0,0,43,44,0,1,49,0,0,13,3,49,43,121,3,13,0,1,50,1,0,1,51,69,0,135,49,24,0,50,51,45,0,1,51,2,0,134,49,0,0,96,242,0,0,45,51,0,0,1,1,0,0,0,38,1,0,137,48,0,0,139,38,0,0,1,49,128,255,83,46,49,0,0,4,44,0,1,51,1,0,1,50,1,0,135,49,115,0,46,51,50,4,0,5,44,0,1,50,60,14,1,51,1,0,1,52,1,0,135,49,115,0,50,51,52,5,0,6,44,0,1,52,56,14,1,51,1,0,1,50,1,0,135,49,115,0,52,51,50,6,0,7,44,0,1,50,57,14,1,51,2,0,1,52,1,0,135,49,115,0,50,51,52,7,0,8,44,0,1,52,141,13,1,51,1,0,1,50,1,0,135,49,115,0,52,51,50,8,0,9,44,0,1,50,142,13,1,51,1,0,1,52,1,0,135,49,115,0,50,51,52,9,0,10,44,0,1,52,143,13,1,51,1,0,1,50,1,0,135,49,115,0,52,51,50,10,0,11,44,0,1,50,59,14,1,51,1,0,1,52,1,0,135,49,115,0,50,51,52,11,0,12,44,0,1,52,103,20,1,51,4,0,1,50,1,0,135,49,115,0,52,51,50,12,1,49,76,1,82,14,49,0,0,15,44,0,1,50,15,0,1,51,200,0,135,49,115,0,14,50,51,15,0,16,44,0,1,51,215,18,1,50,1,0,1,52,200,0,135,49,115,0,51,50,52,16,0,17,44,0,1,52,159,19,1,50,1,0,1,51,200,0,135,49,115,0,52,50,51,17,0,18,44,0,135,49,108,0,18,0,0,0,0,19,2,0,1,49,255,0,19,49,19,49,0,20,49,0,41,49,20,1,0,21,49,0,25,22,21,49,1,49,255,0,19,49,22,49,0,23,49,0,25,25,45,5,83,25,23,0,1,49,119,0,135,26,106,0,45,49,0,0,0,44,26,0,0,27,44,0,1,49,0,0,13,28,49,27,121,28,14,0,1,51,1,0,1,50,69,0,135,49,24,0,51,50,45,0,1,50,2,0,134,49,0,0,96,242,0,0,45,50,0,0,1,1,0,0,0,38,1,0,137,48,0,0,139,38,0,0,119,0,35,0,1,49,132,1,82,29,49,0,0,30,44,0,1,50,1,0,1,51,30,0,135,49,115,0,29,50,51,30,1,49,136,1,82,31,49,0,0,32,44,0,1,51,10,0,1,50,30,0,135,49,115,0,31,51,50,32,1,49,140,1,82,33,49,0,0,34,44,0,1,50,12,0,1,51,100,0,135,49,115,0,33,50,51,34,0,36,44,0,1,51,61,14,1,50,31,0,1,52,38,0,135,49,115,0,51,50,52,36,0,37,44,0,135,49,108,0,37,0,0,0,1,1,1,0,0,38,1,0,137,48,0,0,139,38,0,0,1,49,0,0,139,49,0,0,140,1,61,0,0,0,0,0,2,57,0,0,255,0,0,0,1,55,0,0,136,58,0,0,0,56,58,0,136,58,0,0,25,58,58,16,137,58,0,0,0,52,56,0,0,2,0,0,135,58,116,0,1,51,0,0,1,54,34,0,0,13,54,0,0,24,54,0,19,58,24,57,0,35,58,0,25,46,35,12,19,58,46,57,0,47,58,0,1,59,31,0,1,60,127,0,135,58,17,0,59,13,60,47,134,58,0,0,224,95,1,0,52,0,0,0,78,48,52,0,19,58,48,57,0,49,58,0,32,50,49,5,120,50,2,0,119,0,248,255,0,3,54,0,0,4,54,0,19,58,4,57,0,5,58,0,25,6,5,12,19,58,6,57,0,7,58,0,1,60,31,0,1,59,127,0,135,58,17,0,60,3,59,7,25,8,52,1,79,58,8,0,103,59,8,1,41,59,59,8], eb + 61440);
  HEAPU8.set([20,58,58,59,0,9,58,0,2,58,0,0,255,255,0,0,19,58,9,58,0,10,58,0,1,58,34,0,1,59,7,0,138,10,58,59,68,24,1,0,100,24,1,0,64,24,1,0,64,24,1,0,64,24,1,0,132,24,1,0,228,24,1,0,119,0,43,0,0,11,51,0,19,58,11,57,0,12,58,0,26,14,12,1,19,58,14,57,0,15,58,0,0,51,15,0,119,0,35,0,0,16,51,0,19,58,16,57,0,17,58,0,25,18,17,1,19,58,18,57,0,19,58,0,0,51,19,0,119,0,27,0,0,20,2,0,41,58,20,24,42,58,58,24,33,21,58,0,0,22,51,0,121,21,6,0,134,23,0,0,168,247,0,0,22,0,0,0,0,53,23,0,119,0,5,0,134,25,0,0,20,20,1,0,22,0,0,0,0,53,25,0,0,26,53,0,41,58,26,24,42,58,58,24,33,27,58,0,121,27,3,0,1,55,10,0,119,0,35,0,135,58,116,0,119,0,3,0,1,55,12,0,119,0,31,0,0,29,51,0,19,58,29,57,0,30,58,0,30,58,30,3,38,58,58,255,0,31,58,0,19,58,31,57,0,32,58,0,0,51,32,0,0,33,51,0,19,58,33,57,0,34,58,0,27,36,34,14,25,37,36,0,25,38,37,34,19,58,38,57,0,39,58,0,0,54,39,0,0,40,54,0,0,41,54,0,19,58,41,57,0,42,58,0,25,43,42,12,19,58,43,57,0,44,58,0,1,59,31,0,1,60,127,0,135,58,17,0,59,40,60,44,119,0,144,255,32,58,55,10,121,58,7,0,0,28,51,0,0,1,28,0,0,45,1,0,137,56,0,0,139,45,0,0,119,0,7,0,32,58,55,12,121,58,5,0,1,1,255,255,0,45,1,0,137,56,0,0,139,45,0,0,1,58,0,0,139,58,0,0,140,2,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,16,137,36,0,0,0,3,0,0,0,14,1,0,0,25,3,0,1,36,255,0,19,36,25,36,0,28,36,0,1,36,38,0,17,29,36,28,121,29,5,0,1,2,0,0,0,27,2,0,137,35,0,0,139,27,0,0,0,30,14,0,1,36,255,0,19,36,30,36,0,31,36,0,1,36,1,0,1,37,27,0,138,31,36,37,132,26,1,0,152,26,1,0,172,26,1,0,192,26,1,0,212,26,1,0,232,26,1,0,252,26,1,0,16,27,1,0,36,27,1,0,56,27,1,0,76,27,1,0,96,27,1,0,116,27,1,0,136,27,1,0,156,27,1,0,176,27,1,0,196,27,1,0,128,26,1,0,216,27,1,0,128,26,1,0,128,26,1,0,128,26,1,0,236,27,1,0,0,28,1,0,20,28,1,0,40,28,1,0,60,28,1,0,119,0,116,0,0,32,3,0,134,36,0,0,0,176,0,0,32,0,0,0,119,0,111,0,0,33,3,0,134,36,0,0,148,171,0,0,33,0,0,0,119,0,106,0,0,4,3,0,134,36,0,0,216,220,0,0,4,0,0,0,119,0,101,0,0,5,3,0,134,36,0,0,80,199,0,0,5,0,0,0,119,0,96,0,0,6,3,0,134,36,0,0,152,163,0,0,6,0,0,0,119,0,91,0,0,7,3,0,134,36,0,0,188,231,0,0,7,0,0,0,119,0,86,0,0,8,3,0,134,36,0,0,40,245,0,0,8,0,0,0,119,0,81,0,0,9,3,0,134,36,0,0,132,212,0,0,9,0,0,0,119,0,76,0,0,10,3,0,134,36,0,0,208,155,0,0,10,0,0,0,119,0,71,0,0,11,3,0,134,36,0,0,76,148,0,0,11,0,0,0,119,0,66,0,0,12,3,0,134,36,0,0,232,120,0,0,12,0,0,0,119,0,61,0,0,13,3,0,134,36,0,0,232,223,0,0,13,0,0,0,119,0,56,0,0,15,3,0,134,36,0,0,12,76,0,0,15,0,0,0,119,0,51,0,0,16,3,0,134,36,0,0,68,195,0,0,16,0,0,0,119,0,46,0,0,17,3,0,134,36,0,0,208,239,0,0,17,0,0,0,119,0,41,0,0,18,3,0,134,36,0,0,12,10,1,0,18,0,0,0,119,0,36,0,0,19,3,0,134,36,0,0,88,1,1,0,19,0,0,0,119,0,31,0,0,20,3,0,134,36,0,0,244,14,1,0,20,0,0,0,119,0,26,0,0,21,3,0,134,36,0,0,112,206,0,0,21,0,0,0,119,0,21,0,0,22,3,0,134,36,0,0,44,191,0,0,22,0,0,0,119,0,16,0,0,23,3,0,134,36,0,0,88,135,0,0,23,0,0,0,119,0,11,0,0,24,3,0,134,36,0,0,40,38,1,0,24,0,0,0,119,0,6,0,0,26,3,0,134,36,0,0,72,83,0,0,26,0,0,0,119,0,1,0,1,2,1,0,0,27,2,0,137,35,0,0,139,27,0,0,140,1,64,0,0,0,0,0,1,60,0,0,136,62,0,0,0,61,62,0,136,62,0,0,25,62,62,16,137,62,0,0,0,1,0,0,135,2,22,0,30,62,2,100,38,62,62,255,0,13,62,0,1,62,20,0,15,24,62,13,121,24,121,0,0,35,1,0,25,46,35,3,78,53,46,0,0,57,53,0,0,54,1,0,25,55,54,6,79,62,55,0,103,63,55,1,41,63,63,8,20,62,62,63,0,56,62,0,2,62,0,0,255,255,0,0,19,62,56,62,0,3,62,0,0,4,57,0,1,62,255,0,19,62,4,62,0,5,62,0,1,62,61,14,27,63,5,31,3,6,62,63,25,7,6,23,79,63,7,0,103,62,7,1,41,62,62,8,20,63,63,62,0,8,63,0,2,63,0,0,255,255,0,0,19,63,8,63,0,9,63,0,3,10,9,3,2,63,0,0,255,255,0,0,19,63,10,63,0,11,63,0,1,63,255,0,19,63,11,63,83,7,63,0,42,62,11,8,107,7,1,62,0,12,1,0,25,14,12,8,79,62,14,0,103,63,14,1,41,63,63,8,20,62,62,63,0,15,62,0,2,62,0,0,255,255,0,0,19,62,15,62,0,16,62,0,0,17,57,0,1,62,255,0,19,62,17,62,0,18,62,0,1,62,61,14,27,63,18,31,3,19,62,63,25,20,19,21,79,63,20,0,103,62,20,1,41,62,62,8,20,63,63,62,0,21,63,0,2,63,0,0,255,255,0,0,19,63,21,63,0,22,63,0,3,23,22,16,2,63,0,0,255,255,0,0,19,63,23,63,0,25,63,0,1,63,255,0,19,63,25,63,83,20,63,0,42,62,25,8,107,20,1,62,0,26,1,0,25,27,26,4,79,62,27,0,103,63,27,1,41,63,63,8,20,62,62,63,0,28,62,0,2,62,0,0,255,255,0,0,19,62,28,62,0,29,62,0,0,30,57,0,1,62,255,0,19,62,30,62,0,31,62,0,1,62,61,14,27,63,31,31,3,32,62,63,25,33,32,25,79,63,33,0,103,62,33,1,41,62,62,8,20,63,63,62,0,34,63,0,2,63,0,0,255,255,0,0,19,63,34,63,0,36,63,0,3,37,36,29,2,63,0,0,255,255,0,0,19,63,37,63,0,38,63,0,1,63,255,0,19,63,38,63,83,33,63,0,42,62,38,8,107,33,1,62,1,58,119,0,119,0,2,0,1,58,120,0,1,62,128,1,82,39,62,0,0,59,39,0,0,40,58,0,0,41,59,0,1,63,64,0,135,62,24,0,63,40,41,0,0,42,1,0,25,43,42,1,78,44,43,0,0,45,59,0,134,62,0,0,24,78,1,0,44,45,0,0,0,47,1,0,25,48,47,2,78,49,48,0,0,50,1,0,25,51,50,1,78,52,51,0,135,62,12,0,49,52,0,0,137,61,0,0,1,62,1,0,139,62,0,0,140,3,78,0,0,0,0,0,2,74,0,0,255,0,0,0,1,72,0,0,136,75,0,0,0,73,75,0,136,75,0,0,25,75,75,32,137,75,0,0,25,69,73,12,0,3,0,0,0,4,1,0,0,15,2,0,0,26,15,0,2,75,0,0,255,255,0,0,19,75,26,75,0,37,75,0,1,76,10,0,135,75,30,0,37,69,76,0,135,48,13,0,69,0,0,0,19,75,48,74,0,59,75,0,0,68,59,0,1,75,0,1,82,61,75,0,1,75,15,0,1,76,1,0,135,62,0,0,75,76,61,0,0,70,62,0,0,63,70,0,79,76,63,0,103,75,63,1,41,75,75,8,20,76,76,75,0,5,76,0,19,76,5,74,0,6,76,0,0,71,6,0,0,7,70,0,25,8,7,2,79,76,8,0,103,75,8,1,41,75,75,8,20,76,76,75,0,9,76,0,19,76,9,74,0,10,76,0,0,64,10,0,1,65,0,0,0,11,65,0,19,76,11,74,0,12,76,0,0,13,68,0,19,76,13,74,0,14,76,0,15,16,12,14,120,16,2,0,119,0,80,0,0,17,65,0,19,76,17,74,0,18,76,0,3,19,69,18,78,20,19,0,19,76,20,74,0,21,76,0,26,22,21,48,19,76,22,74,0,23,76,0,0,66,23,0,1,75,4,0,1,77,0,0,134,76,0,0,204,62,1,0,75,77,0,0,1,67,0,0,0,24,67,0,19,76,24,74,0,25,76,0,0,27,64,0,19,76,27,74,0,28,76,0,15,29,25,28,120,29,2,0,119,0,36,0,0,30,3,0,0,31,4,0,19,76,31,74,0,32,76,0,0,33,67,0,19,76,33,74,0,34,76,0,4,35,32,34,19,76,35,74,0,36,76,0,0,38,71,0,0,39,67,0,19,76,39,74,0,40,76,0,25,41,40,1,19,76,41,74,0,42,76,0,0,43,66,0,0,44,70,0,135,76,60,0,30,36,38,42,43,44,0,0,1,77,1,0,1,75,0,0,134,76,0,0,204,62,1,0,77,75,0,0,0,45,67,0,19,76,45,74,0,46,76,0,25,47,46,1,19,76,47,74,0,49,76,0,0,67,49,0,119,0,213,255,0,50,71,0,19,76,50,74,0,51,76,0,0,52,3,0,19,76,52,74,0,53,76,0,3,54,53,51,19,76,54,74,0,55,76,0,0,3,55,0,0,56,65,0,19,76,56,74,0,57,76,0,25,58,57,1,19,76,58,74,0,60,76,0,0,65,60,0,119,0,169,255,137,73,0,0,139,0,0,0,140,2,55,0,0,0,0,0,2,48,0,0,255,0,0,0,2,49,0,0,255,255,0,0,1,46,0,0,136,50,0,0,0,47,50,0,136,50,0,0,25,50,50,16,137,50,0,0,25,45,47,5,0,3,0,0,0,14,1,0,1,44,0,0,0,25,3,0,1,51,1,0,1,52,0,0,1,53,0,0,1,54,0,0,135,50,42,0,25,51,52,53,54,0,0,0,0,36,14,0,19,50,36,49,0,38,50,0,0,39,44,0,19,50,39,48,0,40,50,0,3,41,38,40,19,50,41,49,0,42,50,0,134,4,0,0,12,93,1,0,42,0,0,0,0,43,4,0,0,5,43,0,19,50,5,48,0,6,50,0,32,7,6,0,121,7,3,0,1,46,4,0,119,0,18,0,0,8,43,0,19,50,8,48,0,9,50,0,13,10,9,48,121,10,3,0,1,46,4,0,119,0,11,0,1,50,5,0,83,45,50,0,0,11,43,0,19,50,11,48,0,12,50,0,25,13,45,1,19,50,12,48,83,13,50,0,42,54,12,8,107,13,1,54,32,54,46,4,121,54,5,0,1,46,0,0,134,54,0,0,224,95,1,0,45,0,0,0,78,15,45,0,19,54,15,48,0,16,54,0,32,17,16,5,120,17,2,0,119,0,208,255,25,18,45,1,79,54,18,0,103,50,18,1,41,50,50,8,20,54,54,50,0,19,54,0,19,54,19,49,0,20,54,0,1,54,34,0,1,50,7,0,138,20,54,50,156,34,1,0,188,34,1,0,220,34,1,0,224,34,1,0,152,34,1,0,228,34,1,0,236,34,1,0,119,0,23,0,0,21,44,0,19,54,21,48,0,22,54,0,26,23,22,1,19,54,23,48,0,24,54,0,0,44,24,0,119,0,15,0,0,26,44,0,19,54,26,48,0,27,54,0,25,28,27,1,19,54,28,48,0,29,54,0,0,44,29,0,119,0,7,0,119,0,240,255,119,0,247,255,1,46,10,0,119,0,21,0,1,46,11,0,119,0,19,0,0,31,44,0,19,54,31,48,0,32,54,0,30,54,32,4,38,54,54,255,0,33,54,0,19,54,33,48,0,34,54,0,0,44,34,0,0,35,3,0,1,50,1,0,1,53,0,0,1,52,0,0,1,51,0,0,135,54,42,0,35,50,53,52,51,0,0,0,119,0,149,255,32,54,46,10,121,54,7,0,0,30,44,0,0,2,30,0,0,37,2,0,137,47,0,0,139,37,0,0,119,0,7,0,32,54,46,11,121,54,5,0,1,2,255,255,0,37,2,0,137,47,0,0,139,37,0,0,1,54,0,0,139,54,0,0,140,0,55,0,0,0,0,0,2,48,0,0,255,0,0,0,1,46,0,0,136,49,0,0,0,47,49,0,136,49,0,0,25,49,49,48,137,49,0,0,25,43,47,31,0,44,47,0,1,49,139,13,78,0,49,0,19,49,0,48,0,1,49,0,25,12,1,1,19,49,12,48,0,23,49,0,1,49,139,13,83,49,23,0,1,49,121,13,1,50,0,0,19,50,50,48,83,49,50,0,1,50,121,13,1,49,0,0,42,49,49,8,107,50,1,49,1,49,139,13,78,34,49,0,19,49,34,48,0,37,49,0,1,49,30,0,15,38,49,37,121,38,18,0,1,49,144,13,78,39,49,0,19,49,39,48,0,40,49,0,32,41,40,1,121,41,7,0,1,49,137,13,1,50,2,0,83,49,50,0,137,47,0,0,139,0,0,0,119,0,6,0,1,50,137,13,1,49,1,0,83,50,49,0,137,47,0,0,139,0,0,0,1,42,0,0,0,2,42,0,19,49,2,48,0,3,49,0,34,4,3,20,120,4,2,0,119,0,18,0,0,5,42,0,19,49,5,48,0,6,49,0,1,49,172,13,27,50,6,7,3,7,49,50,25,8,7,5,1,50,0,0,83,8,50,0,0,9,42,0,19,50,9,48,0,10,50,0,25,11,10,1,19,50,11,48,0,13,50,0,0,42,13,0,119,0,234,255,134,50,0,0,200,89,1,0,1,49,33,0,1,51,1,0,1,52,61,0,1,53,34,0,1,54,1,0,135,50,42,0,49,51,52,53,54,0,0,0,1,50,139,13,78,14,50,0,19,50,14,48,0,15,50,0,1,54,10,0,135,50,30,0,15,43,54,0,135,16,13,0,43,0,0,0,26,17,16,1,27,18,17,6,29,50,18,2,38,50,50,255,0,19,50,0,1,50,64,0,4,20,50,19,19,50,20,48,0,21,50,0,0,45,21,0,0,22,45,0,19,50,22,48,0,24,50,0,25,25,24,15,19,50,25,48,0,26,50,0,1,54,38,0,135,50,16,0,26,54,43,0,1,54,50,0,1,53,0,0,134,50,0,0,204,62,1,0,54,53,0,0,1,50,150,13,79,50,50,0,1,53,150,13,103,53,53,1,41,53,53,8,20,50,50,53,0,27,50,0,2,50,0,0,255,255,0,0,19,50,27,50,0,28,50,0,32,29,28,0,121,29,5,0,1,50,137,13,1,53,1,0,83,50,53,0,1,42,38,0,1,53,148,13,79,53,53,0,1,50,148,13,103,50,50,1,41,50,50,8,20,53,53,50,0,30,53,0,2,53,0,0,255,255,0,0,19,53,30,53,0,31,53,0,32,32,31,0,121,32,5,0,1,53,137,13,1,50,2,0,83,53,50,0,1,42,37,0,1,50,137,13,78,33,50,0,41,50,33,24,42,50,50,24,33,35,50,0,121,35,8,0,0,36,42,0,135,50,92,0,36,44,0,0,1,53,1,0,134,50,0,0,96,242,0,0,44,53,0,0,134,50,0,0,64,215,0,0,137,47,0,0,139,0,0,0,140,1,50,0,0,0,0,0,2,45,0,0,255,0,0,0,1,43,0,0,136,46,0,0,0,44,46,0,136,46,0,0,25,46,46,32,137,46,0,0,25,37,44,8,0,1,0,0,1,46,128,1,82,2,46,0,0,41,2,0,0,13,1,0,0,24,41,0,135,31,9,0,13,24,0,0,0,40,31,0,0,32,40,0,41,46,32,24,42,46,46,24,33,33,46,0,120,33,3,0,1,43,3,0,119,0,41,0,0,34,41,0,0,35,40,0,1,46,4,0,1,47,2,0,1,48,155,255,1,49,93,0,134,36,0,0,160,32,0,0,34,35,46,47,48,49,0,0,0,39,36,0,0,3,39,0,19,49,3,45,0,4,49,0,14,5,45,4,120,5,3,0,1,43,9,0,119,0,23,0,0,6,39,0,19,49,6,45,0,7,49,0,0,8,41,0,3,9,8,7,78,10,9,0,0,38,10,0,0,11,38,0,1,49,24,0,135,12,48,0,11,49,0,0,41,49,12,24,42,49,49,24,33,14,49,0,121,14,3,0,1,43,7,0,119,0,6,0,1,48,60,0,134,49,0,0,148,98,1,0,48,0,0,0,119,0,205,255,32,49,43,3,121,49,9,0,1,48,84,0,134,49,0,0,148,98,1,0,48,0,0,0,137,44,0,0,1,49,1,0,139,49,0,0,119,0,55,0,32,49,43,7,121,49,48,0,0,15,38,0,1,48,24,0,135,49,50,0,15,48,0,0,1,49,128,1,82,16,49,0,1,49,44,1,3,17,16,49,0,42,17,0,0,18,42,0,1,48,64,0,1,47,148,255,135,49,24,0,48,47,18,0,0,19,38,0,0,20,42,0,134,49,0,0,24,78,1,0,19,20,0,0,1,49,26,0,83,37,49,0,0,21,38,0,25,22,37,1,83,22,21,0,0,23,1,0,25,25,37,2,83,25,23,0,25,26,37,11,1,49,0,0,83,26,49,0,135,27,51,0,37,0,0,0,41,49,27,24,42,49,49,24,33,28,49,0,120,28,4,0,137,44,0,0,1,49,1,0,139,49,0,0,0,29,1,0,0,30,38,0,135,49,11,0,29,30,0,0,137,44,0,0,1,49,1,0,139,49,0,0,119,0,6,0,32,49,43,9,121,49,4,0,137,44,0,0,1,49,1,0,139,49,0,0,1,49,0,0,139,49,0,0,140,3,68,0,0,0,0,0,2,65,0,0,255,0,0,0,1,63,0,0,136,66,0,0,0,64,66,0,136,66,0,0,25,66,66,16,137,66,0,0,0,3,0,0,0,4,1,0,0,15,2,0,1,66,0,1,82,26,66,0,1,66,26,0,1,67,1,0,135,37,0,0,66,67,26,0,0,59,37,0,0,48,59,0,78,54,48,0,0,60,54,0,0,55,59,0,25,56,55,2,78,57,56,0,0,58,57,0,0,5,60,0,19,67,5,65,0,6,67,0,1,67,159,0,4,7,67,6,42,67,7,1,0,8,67,0,19,67,8,65,0,9,67,0,0,61,9,0,0,10,61,0,19,67,10,65,0,11,67,0,25,12,11,0,19,67,12,65,0,13,67,0,0,61,13,0,0,14,15,0,19,67,14,65,0,16,67,0,14,17,16,65,121,17,10,0,0,18,15,0,19,67,18,65,0,19,67,0,27,20,19,12,25,21,20,0,19,67,21,65,0,22,67,0,0,62,22,0,119,0,18,0,0,23,58,0,19,67,23,65,0,24,67,0,1,67,95,0,4,25,67,24,42,67,25,1,0,27,67,0,19,67,27,65,0,28,67,0,0,62,28,0,0,29,62,0,19,67,29,65,0,30,67,0,25,31,30,0,19,67,31,65,0,32,67,0,0,62,32,0,0,33,61,0,0,34,62,0,0,35,60,0,0,36,58,0,0,38,59,0,25,39,38,6,135,67,117,0,33,34,35,36,39,0,0,0,0,40,61,0,19,67,40,65,0,41,67,0,25,42,41,10,19,67,42,65,0,43,67,0,0,44,62,0,19,67,44,65,0,45,67,0,25,46,45,6,19,67,46,65,0,47,67,0,0,49,3,0,135,67,16,0,43,47,49,0,0,50,4,0,19,67,50,65,0,51,67,0,27,52,51,100,2,67,0,0,255,255,0,0,19,67,52,67,0,53,67,0,1,66,1,0,134,67,0,0,204,62,1,0,53,66,0,0,137,64,0,0,139,0,0,0,140,1,28,0,0,0,0,0,1,24,0,0,136,26,0,0,0,25,26,0,136,26,0,0,25,26,26,16,137,26,0,0,0,1,0,0,0,2,1,0,78,13,2,0,1,26,255,0,19,26,13,26,0,17,26,0,1,26,0,0,1,27,28,0,138,17,26,27,184,42,1,0,200,42,1,0,216,42,1,0,232,42,1,0,252,42,1,0,12,43,1,0,28,43,1,0,180,42,1,0,180,42,1,0,180,42,1,0,180,42,1,0,48,43,1,0,180,42,1,0,64,43,1,0,84,43,1,0,100,43,1,0,116,43,1,0,136,43,1,0,156,43,1,0,172,43,1,0,180,42,1,0,180,42,1,0,180,42,1,0,192,43,1,0,208,43,1,0,180,42,1,0,224,43,1,0,244,43,1,0,119,0,85,0,0,18,1,0,135,26,118,0,18,0,0,0,119,0,81,0,0,19,1,0,135,26,119,0,19,0,0,0,119,0,77,0,0,20,1,0,135,26,120,0,20,0,0,0,119,0,73,0,0,21,1,0,134,26,0,0,184,40,0,0,21,0,0,0,119,0,68,0,0,22,1,0,135,26,121,0,22,0,0,0,119,0,64,0,0,23,1,0,135,26,122,0,23,0,0,0,119,0,60,0,0,3,1,0,134,26,0,0,200,139,0,0,3,0,0,0,119,0,55,0,0,4,1,0,135,26,123,0,4,0,0,0,119,0,51,0,0,5,1,0,134,26,0,0,96,28,1,0,5,0,0,0,119,0,46,0,0,6,1,0,135,26,124,0,6,0,0,0,119,0,42,0,0,7,1,0,135,26,125,0,7,0,0,0,119,0,38,0,0,8,1,0,134,26,0,0,96,184,0,0,8,0,0,0,119,0,33,0,0,9,1,0,134,26,0,0,12,168,0,0,9,0,0,0,119,0,28,0,0,10,1,0,135,26,126,0,10,0,0,0,119,0,24,0,0,11,1,0,134,26,0,0,12,90,0,0,11,0,0,0,119,0,19,0,0,12,1,0,135,26,127,0,12,0,0,0,119,0,15,0,0,14,1,0,135,26,128,0,14,0,0,0,119,0,11,0,0,15,1,0,134,26,0,0,108,180,0,0,15,0,0,0,119,0,6,0,0,16,1,0,134,26,0,0,52,11,0,0,16,0,0,0,119,0,1,0,137,25,0,0,1,26,1,0,139,26,0,0,140,0,34,0,0,0,0,0,2,31,0,0,255,0,0,0,1,29,0,0,136,32,0,0,0,30,32,0,136,32,0,0,25,32,32,16,137,32,0,0,135,32,10,0,134,1,0,0,144,92,1,0,19,32,1,31,0,12,32,0,1,32,0,0,1,33,0,1,138,12,32,33,96,48,1,0,136,48,1,0,176,48,1,0,216,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,92,48,1,0,224,48,1,0,119,0,248,254,134,21,0,0,152,91,1,0,0,28,21,0,0,22,28,0,19,32,22,31,0,23,32,0,14,24,31,23,121,24,240,254,1,29,4,0,119,0,25,0,134,3,0,0,28,91,1,0,0,28,3,0,0,4,28,0,19,32,4,31,0,5,32,0,14,6,31,5,121,6,230,254,1,29,6,0,119,0,15,0,134,11,0,0,20,92,1,0,0,28,11,0,0,13,28,0,19,32,13,31,0,14,32,0,14,15,31,14,121,15,220,254,1,29,8,0,119,0,5,0,1,29,9,0,119,0,3,0,1,29,10,0,119,0,1,0,32,32,29,4,121,32,9,0,0,25,28,0,19,32,25,31,0,26,32,0,25,27,26,1,19,32,27,31,0,2,32,0,0,0,2,0,119,0,28,0,32,32,29,6,121,32,9,0,0,7,28,0,19,32,7,31,0,8,32,0,25,9,8,15,19,32,9,31,0,10,32,0,0,0,10,0,119,0,18,0,32,32,29,8,121,32,9,0,0,16,28,0,19,32,16,31,0,17,32,0,25,18,17,23,19,32,18,31,0,19,32,0,0,0,19,0,119,0,8,0,32,32,29,9,121,32,3,0,1,0,254,255,119,0,4,0,32,32,29,10,121,32,2,0,1,0,255,255,0,20,0,0,137,30,0,0,139,20,0,0,140,1,57,0,0,0,0,0,2,51,0,0,255,0,0,0,1,49,0,0,136,52,0,0,0,50,52,0,136,52,0,0,25,52,52,16,137,52,0,0,0,2,0,0,0,13,2,0,134,24,0,0,32,61,1,0,13,0,0,0,0,46,24,0,0,35,46,0,19,52,35,51,0,41,52,0,13,42,51,41,121,42,5,0,1,1,0,0,0,40,1,0,137,50,0,0,139,40,0,0,0,43,2,0,78,44,43,0,19,52,44,51,0,45,52,0,32,3,45,0,121,3,3,0,1,49,5,0,119,0,8,0,0,4,2,0,78,5,4,0,19,52,5,51,0,6,52,0,32,7,6,1,121,7,2,0,1,49,5,0,32,52,49,5,121,52,59,0,0,8,2,0,25,9,8,3,78,10,9,0,0,46,10,0,0,11,46,0,135,52,91,0,11,0,0,0,0,12,46,0,19,52,12,51,0,14,52,0,1,52,172,13,27,53,14,7,3,15,52,53,78,16,15,0,19,53,16,51,0,17,53,0,1,53,127,13,78,18,53,0,19,53,18,51,0,19,53,0,4,20,17,19,41,53,20,4,0,21,53,0,25,22,21,0,19,53,22,51,0,23,53,0,0,47,23,0,0,25,46,0,19,53,25,51,0,26,53,0,1,53,172,13,27,52,26,7,3,27,53,52,25,28,27,1,78,29,28,0,19,52,29,51,0,30,52,0,1,52,128,13,78,31,52,0,19,52,31,51,0,32,52,0,4,33,30,32,41,52,33,4,0,34,52,0,25,36,34,0,19,52,36,51,0,37,52,0,0,48,37,0,0,38,47,0,0,39,48,0,1,53,27,0,1,54,12,0,1,55,17,0,1,56,0,0,134,52,0,0,0,0,0,0,53,54,55,56,38,39,0,0,1,1,1,0,0,40,1,0,137,50,0,0,139,40,0,0,140,1,42,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,16,137,40,0,0,0,2,0,0,1,35,0,0,0,13,2,0,25,24,13,2,78,29,24,0,0,36,29,0,0,30,36,0,1,40,255,0,19,40,30,40,0,31,40,0,1,40,172,13,27,41,31,7,3,32,40,41,0,37,32,0,0,33,37,0,25,34,33,5,1,41,1,0,83,34,41,0,0,3,36,0,1,40,0,0,135,41,39,0,40,3,0,0,0,4,2,0,25,5,4,3,78,6,5,0,1,40,1,0,135,41,39,0,40,6,0,0,0,7,2,0,78,8,7,0,1,41,255,0,19,41,8,41,0,9,41,0,1,41,0,0,1,40,0,1,138,9,41,40,224,55,1,0,4,56,1,0,216,55,1,0,32,56,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,216,55,1,0,40,56,1,0,1,38,6,0,119,0,37,0,0,10,2,0,25,11,10,3,78,12,11,0,134,14,0,0,112,234,0,0,12,0,0,0,0,35,14,0,1,38,6,0,119,0,28,0,0,15,2,0,134,16,0,0,60,68,0,0,15,0,0,0,0,35,16,0,1,38,6,0,119,0,21,0,1,38,5,0,119,0,19,0,0,17,37,0,25,18,17,5,1,41,0,0,83,18,41,0,1,41,133,13,78,19,41,0,0,20,37,0,83,20,19,0,1,41,134,13,78,21,41,0,0,22,37,0,25,23,22,1,83,23,21,0,0,25,36,0,135,41,91,0,25,0,0,0,1,38,5,0,119,0,1,0,32,41,38,5,121,41,9,0,0,26,36,0,135,41,129,0,26,0,0,0,1,1,0,0,0,28,1,0,137,39,0,0,139,28,0,0,119,0,8,0,32,41,38,6,121,41,6,0,0,27,35,0,0,1,27,0,0,28,1,0,137,39,0,0,139,28,0,0,1,41,0,0,139,41,0,0,140,4,56,0,0,0,0,0,2,52,0,0,255,0,0,0,1,50,0,0,136,53,0,0,0,51,53,0,136,53,0,0,25,53,53,16,137,53,0,0,0,4,0,0,0,5,1,0,0,16,2,0,0,27,3,0,0,38,16,0,19,53,38,52,0,45,53,0,1,53,127,13,78,46,53,0,19,53,46,52,0,47,53,0,15,48,45,47,121,48,3,0,137,51,0,0,139,0,0,0,0,49,16,0,19,53,49,52,0,6,53,0,1,53,127,13,78,7,53,0,19,53,7,52,0,8,53,0,25,9,8,10,17,10,9,6,121,10,3,0,137,51,0,0,139,0,0,0,0,11,27,0,19,53,11,52,0,12,53,0,1,53,128,13,78,13,53,0,19,53,13,52,0,14,53,0,15,15,12,14,121,15,3,0,137,51,0,0,139,0,0,0,0,17,27,0,19,53,17,52,0,18,53,0,1,53,128,13,78,19,53,0,19,53,19,52,0,20,53,0,25,21,20,5,17,22,21,18,121,22,3,0,137,51,0,0,139,0,0,0,0,23,16,0,19,53,23,52,0,24,53,0,1,53,127,13,78,25,53,0,19,53,25,52,0,26,53,0,4,28,24,26,41,53,28,4,0,29,53,0,25,30,29,0,19,53,30,52,0,31,53,0,0,16,31,0,0,32,27,0,19,53,32,52,0,33,53,0,1,53,128,13,78,34,53,0,19,53,34,52,0,35,53,0,4,36,33,35,41,53,36,4,0,37,53,0,25,39,37,0,19,53,39,52,0,40,53,0,0,27,40,0,0,41,4,0,0,42,5,0,0,43,16,0,0,44,27,0,1,54,27,0,1,55,0,0,134,53,0,0,0,0,0,0,54,41,42,55,43,44,0,0,137,51,0,0,139,0,0,0,140,0,42,0,0,0,0,0,2,38,0,0,255,0,0,0,2,39,0,0,137,13,0,0,1,36,0,0,136,40,0,0,0,37,40,0,136,40,0,0,25,40,40,16,137,40,0,0,0,33,37,0,1,35,0,0,0,0,35,0,19,40,0,38,0,1,40,0,34,12,1,10,120,12,2,0,119,0,23,0,0,23,35,0,19,40,23,38,0,27,40,0,1,40,172,13,27,41,27,7,3,28,40,41,25,29,28,6,78,30,29,0,19,41,30,38,0,31,41,0,32,32,31,8,0,2,35,0,120,32,3,0,1,36,4,0,119,0,8,0,19,41,2,38,0,3,41,0,25,4,3,1,19,41,4,38,0,5,41,0,0,35,5,0,119,0,229,255,32,41,36,4,121,41,3,0,135,41,91,0,2,0,0,0,78,6,39,0,41,41,6,24,42,41,41,24,33,7,41,0,40,41,7,1,0,8,41,0,120,8,3,0,1,36,13,0,119,0,47,0,134,9,0,0,72,73,1,0,0,34,9,0,0,10,34,0,19,41,10,38,0,11,41,0,13,13,11,38,121,13,3,0,1,36,13,0,119,0,37,0,0,14,34,0,134,15,0,0,64,237,0,0,14,0,0,0,41,41,15,24,42,41,41,24,33,16,41,0,120,16,230,255,0,17,34,0,25,18,33,2,83,18,17,0,134,41,0,0,224,3,1,0,33,0,0,0,134,19,0,0,148,65,1,0,33,0,0,0,0,35,19,0,1,41,144,13,78,20,41,0,19,41,20,38,0,21,41,0,32,22,21,1,121,22,9,0,0,24,35,0,19,41,24,38,0,25,41,0,32,26,25,5,121,26,4,0,1,41,1,0,83,39,41,0,119,0,206,255,1,40,0,0,135,41,130,0,40,0,0,0,119,0,202,255,32,41,36,13,121,41,3,0,137,37,0,0,139,0,0,0,139,0,0,0,140,2,44,0,0,0,0,0,1,40,0,0,136,42,0,0,0,41,42,0,136,42,0,0,25,42,42,16,137,42,0,0,0,3,0,0,0,14,1,0,0,25,3,0,25,33,25,8,82,34,33,0,134,42,0,0,168,90,1,0,34,0,0,0,0,35,3,0,25,36,35,12,82,37,36,0,135,42,131,0,37,0,0,0,0,38,3,0,82,4,38,0,0,39,4,0,0,5,39,0,82,6,5,0,0,7,39,0,13,8,6,7,121,8,11,0,0,9,3,0,25,10,9,12,82,11,10,0,135,42,132,0,11,0,0,0,1,2,0,0,0,32,2,0,137,41,0,0,139,32,0,0,119,0,35,0,0,12,39,0,25,13,12,4,82,15,13,0,0,16,39,0,82,17,16,0,25,18,17,4,85,18,15,0,0,19,39,0,82,20,19,0,0,21,39,0,25,22,21,4,82,23,22,0,85,23,20,0,0,24,3,0,25,26,24,12,82,27,26,0,135,42,132,0,27,0,0,0,0,28,14,0,0,29,39,0,25,30,29,8,78,42,30,0,83,28,42,0,102,43,30,1,107,28,1,43,102,42,30,2,107,28,2,42,0,31,39,0,135,42,133,0,31,0,0,0,1,2,1,0,0,32,2,0,137,41,0,0,139,32,0,0,1,42,0,0,139,42,0,0,140,1,37,0,0,0,0,0,1,32,0,0,136,34,0,0,0,33,34,0,136,34,0,0,25,34,34,16,137,34,0,0,0,1,0,0,135,2,134,0,0,31,2,0,0,13,31,0,1,34,255,0,19,34,13,34,0,24,34,0,1,34,255,0,14,25,34,24,120,25,4,0,0,23,31,0,137,33,0,0,139,23,0,0,0,26,31,0,0,27,1,0,25,28,27,2,83,28,26,0,0,29,31,0,135,34,103,0,29,0,0,0,1,34,141,13,78,30,34,0,41,34,30,24,42,34,34,24,33,3,34,0,121,3,25,0,0,4,31,0,135,34,91,0,4,0,0,0,135,34,104,0,0,5,31,0,1,35,1,0,134,34,0,0,56,75,1,0,5,35,0,0,1,34,16,1,82,6,34,0,135,34,6,0,6,0,0,0,1,34,143,13,78,7,34,0,41,34,7,24,42,34,34,24,33,8,34,0,121,8,6,0,1,35,50,0,1,36,0,0,134,34,0,0,204,62,1,0,35,36,0,0,0,9,31,0,135,34,135,0,9,0,0,0,1,34,141,13,78,10,34,0,41,34,10,24,42,34,34,24,33,11,34,0,121,11,15,0,0,12,31,0,135,34,91,0,12,0,0,0,1,34,143,13,78,14,34,0,41,34,14,24,42,34,34,24,33,15,34,0,121,15,6,0,1,36,50,0,1,35,0,0,134,34,0,0,204,62,1,0,36,35,0,0,0,16,1,0,135,17,136,0,16,0,0,0,41,34,17,24,42,34,34,24,33,18,34,0,121,18,4,0,0,23,31,0,137,33,0,0,139,23,0,0,0,19,1,0,135,20,137,0,19,0,0,0,41,34,20,24,42,34,34,24,33,21,34,0,121,21,4,0,0,23,31,0,137,33,0,0,139,23,0,0,0,22,1,0,1,34,3,0,83,22,34,0,0,23,31,0,137,33,0,0,139,23,0,0,140,2,33,0,0,0,0,0,2,29,0,0,255,0,0,0,2,30,0,0,255,255,0,0,1,27,0,0,136,31,0,0,0,28,31,0,136,31,0,0,25,31,31,16,137,31,0,0,25,25,28,2,0,2,0,0,0,3,1,0,135,14,138,0,0,26,14,0,135,31,139,0,0,18,2,0,41,31,18,16,42,31,31,16,33,19,31,0,121,19,39,0,1,32,1,0,135,31,140,0,32,0,0,0,0,20,2,0,41,31,20,16,42,31,31,16,33,21,31,0,120,21,2,0,119,0,33,0,134,31,0,0,224,95,1,0,25,0,0,0,78,22,25,0,19,31,22,29,0,23,31,0,32,24,23,6,121,24,9,0,0,4,2,0,19,31,4,30,0,5,31,0,26,6,5,1,19,31,6,30,0,7,31,0,0,2,7,0,119,0,6,0,0,8,3,0,41,31,8,24,42,31,31,24,33,9,31,0,120,9,12,0,25,10,25,1,1,31,0,0,19,31,31,29,83,10,31,0,1,32,0,0,42,32,32,8,107,10,1,32,119,0,222,255,134,32,0,0,224,95,1,0,25,0,0,0,0,11,26,0,41,32,11,24,42,32,32,24,33,12,32,0,120,12,11,0,25,15,25,1,79,32,15,0,103,31,15,1,41,31,31,8,20,32,32,31,0,16,32,0,19,32,16,29,0,17,32,0], eb + 71680);
  HEAPU8.set([137,28,0,0,139,17,0,0,135,32,139,0,0,13,26,0,135,32,140,0,13,0,0,0,25,15,25,1,79,32,15,0,103,31,15,1,41,31,31,8,20,32,32,31,0,16,32,0,19,32,16,29,0,17,32,0,137,28,0,0,139,17,0,0,140,0,34,0,0,0,0,0,2,30,0,0,255,0,0,0,2,31,0,0,61,14,0,0,1,28,0,0,136,32,0,0,0,29,32,0,136,32,0,0,25,32,32,16,137,32,0,0,1,32,103,20,134,0,0,0,92,101,0,0,32,0,0,0,0,27,0,0,0,1,27,0,19,32,1,30,0,12,32,0,13,19,30,12,120,19,61,0,0,20,27,0,19,32,20,30,0,21,32,0,27,32,21,31,3,22,31,32,25,23,22,1,78,24,23,0,19,32,24,30,0,25,32,0,1,32,56,14,78,2,32,0,19,32,2,30,0,3,32,0,25,4,3,1,14,5,25,4,121,5,22,0,0,6,27,0,19,32,6,30,0,7,32,0,27,32,7,31,3,8,31,32,25,9,8,1,78,10,9,0,41,32,10,24,42,32,32,24,33,11,32,0,121,11,6,0,1,33,54,0,134,32,0,0,148,98,1,0,33,0,0,0,119,0,215,255,1,33,56,0,134,32,0,0,148,98,1,0,33,0,0,0,119,0,210,255,134,13,0,0,20,44,1,0,0,26,13,0,0,14,26,0,19,32,14,30,0,15,32,0,1,32,254,0,1,33,2,0,138,15,32,33,112,65,1,0,132,65,1,0,0,17,27,0,0,18,26,0,134,32,0,0,164,25,1,0,17,18,0,0,119,0,193,255,0,16,27,0,134,32,0,0,120,12,1,0,16,0,0,0,119,0,188,255,119,0,187,255,137,29,0,0,1,32,1,0,139,32,0,0,140,1,38,0,0,0,0,0,1,34,0,0,136,36,0,0,0,35,36,0,136,36,0,0,25,36,36,16,137,36,0,0,0,1,0,0,0,2,1,0,25,13,2,2,78,24,13,0,0,33,24,0,0,26,1,0,134,27,0,0,40,51,1,0,26,0,0,0,0,32,27,0,0,28,32,0,41,36,28,24,42,36,36,24,33,29,36,0,121,29,37,0,1,36,127,13,78,30,36,0,1,36,128,13,78,31,36,0,135,36,141,0,30,31,0,0,1,37,0,0,135,36,87,0,37,0,0,0,0,3,32,0,1,36,255,0,19,36,3,36,0,4,36,0,1,36,44,1,82,5,36,0,78,6,5,0,1,36,255,0,19,36,6,36,0,7,36,0,3,8,7,4,1,36,255,0,19,36,8,36,0,9,36,0,83,5,9,0,0,10,33,0,1,36,255,0,19,36,10,36,0,11,36,0,34,12,11,10,121,12,5,0,0,14,32,0,134,36,0,0,72,97,1,0,14,0,0,0,134,36,0,0,184,209,0,0,0,15,33,0,1,36,255,0,19,36,15,36,0,16,36,0,1,36,172,13,27,37,16,7,3,17,36,37,78,18,17,0,0,19,33,0,1,37,255,0,19,37,19,37,0,20,37,0,1,37,172,13,27,36,20,7,3,21,37,36,25,22,21,1,78,23,22,0,135,25,63,0,18,23,0,0,137,35,0,0,139,25,0,0,140,3,43,0,0,0,0,0,1,38,0,0,136,40,0,0,0,39,40,0,136,40,0,0,25,40,40,16,137,40,0,0,25,37,39,2,0,3,0,0,0,4,1,0,0,15,2,0,0,26,3,0,83,37,26,0,0,29,15,0,2,40,0,0,255,255,0,0,19,40,29,40,0,30,40,0,25,31,37,1,1,41,10,0,135,40,30,0,30,31,41,0,0,32,4,0,1,40,255,0,19,40,32,40,0,33,40,0,1,40,172,13,27,41,33,7,3,34,40,41,78,5,34,0,1,41,255,0,19,41,5,41,0,6,41,0,1,41,127,13,78,7,41,0,1,41,255,0,19,41,7,41,0,8,41,0,4,9,6,8,41,41,9,4,0,10,41,0,25,11,10,0,1,41,255,0,19,41,11,41,0,12,41,0,0,35,12,0,0,13,4,0,1,41,255,0,19,41,13,41,0,14,41,0,1,41,172,13,27,40,14,7,3,16,41,40,25,17,16,1,78,18,17,0,1,40,255,0,19,40,18,40,0,19,40,0,1,40,128,13,78,20,40,0,1,40,255,0,19,40,20,40,0,21,40,0,4,22,19,21,41,40,22,4,0,23,40,0,25,24,23,0,1,40,255,0,19,40,24,40,0,25,40,0,0,36,25,0,0,27,35,0,0,28,36,0,135,40,16,0,27,28,37,0,1,41,50,0,1,42,0,0,134,40,0,0,204,62,1,0,41,42,0,0,137,39,0,0,139,0,0,0,140,0,38,0,0,0,0,0,2,32,0,0,255,0,0,0,1,30,0,0,136,33,0,0,0,31,33,0,136,33,0,0,25,33,33,16,137,33,0,0,135,33,10,0,1,33,128,1,82,0,33,0,0,28,0,0,1,33,128,1,82,1,33,0,1,33,200,0,3,12,1,33,0,29,12,0,1,33,128,1,82,18,33,0,1,33,250,0,3,19,18,33,0,25,19,0,1,33,56,14,78,20,33,0,0,21,28,0,135,22,114,0,20,21,0,0,0,27,22,0,1,26,0,0,0,23,26,0,19,33,23,32,0,24,33,0,0,2,27,0,19,33,2,32,0,3,33,0,15,4,24,3,120,4,2,0,119,0,48,0,0,5,26,0,19,33,5,32,0,6,33,0,0,7,28,0,3,8,7,6,78,9,8,0,0,10,29,0,135,33,29,0,9,10,0,0,0,11,25,0,1,34,64,0,1,35,163,255,135,33,24,0,34,35,11,0,0,13,29,0,0,14,25,0,135,33,26,0,13,14,0,0,1,35,20,0,1,34,79,0,1,36,138,255,1,37,93,0,135,33,14,0,35,34,36,37,1,37,20,0,1,36,79,0,1,34,138,255,1,35,93,0,135,33,15,0,37,36,34,35,0,15,29,0,1,35,22,0,1,34,81,0,135,33,16,0,35,34,15,0,1,34,5,0,1,35,0,0,134,33,0,0,204,62,1,0,34,35,0,0,0,16,26,0,25,33,16,1,41,33,33,24,42,33,33,24,0,17,33,0,0,26,17,0,119,0,201,255,135,33,10,0,137,31,0,0,139,0,0,0,140,1,38,0,0,0,0,0,1,33,0,0,136,35,0,0,0,34,35,0,136,35,0,0,25,35,35,16,137,35,0,0,0,1,0,0,0,2,1,0,1,35,255,0,19,35,2,35,0,13,35,0,1,35,61,14,27,36,13,31,3,23,35,36,25,24,23,2,78,25,24,0,0,31,25,0,0,26,31,0,41,36,26,24,42,36,36,24,33,27,36,0,120,27,3,0,137,34,0,0,139,0,0,0,1,36,128,1,82,28,36,0,1,36,44,1,3,29,28,36,0,32,29,0,1,36,128,1,82,3,36,0,1,36,84,1,3,4,3,36,0,30,4,0,0,5,1,0,0,6,32,0,135,36,112,0,5,6,0,0,0,7,30,0,1,35,64,0,1,37,111,0,135,36,24,0,35,37,7,0,0,8,32,0,0,9,30,0,135,36,26,0,8,9,0,0,0,10,1,0,0,11,30,0,135,36,142,0,10,11,0,0,0,12,32,0,0,14,30,0,135,36,26,0,12,14,0,0,0,15,30,0,1,37,64,0,1,35,112,0,135,36,24,0,37,35,15,0,0,16,32,0,0,17,30,0,135,36,26,0,16,17,0,0,135,36,10,0,0,18,31,0,1,36,255,0,19,36,18,36,0,19,36,0,26,20,19,1,1,36,255,0,19,36,20,36,0,21,36,0,0,22,32,0,134,36,0,0,24,78,1,0,21,22,0,0,137,34,0,0,139,0,0,0,140,0,21,0,0,0,0,0,2,18,0,0,255,0,0,0,1,16,0,0,136,19,0,0,0,17,19,0,136,19,0,0,25,19,19,16,137,19,0,0,135,1,143,0,41,19,1,24,42,19,19,24,33,7,19,0,121,7,3,0,1,16,3,0,119,0,40,0,135,8,144,0,41,19,8,24,42,19,19,24,33,9,19,0,121,9,3,0,1,16,5,0,119,0,33,0,135,19,145,0,134,19,0,0,64,64,1,0,134,10,0,0,244,80,1,0,0,15,10,0,0,11,15,0,41,19,11,24,42,19,19,24,33,12,19,0,120,12,2,0,119,0,246,255,0,13,15,0,19,19,13,18,0,14,19,0,32,2,14,1,120,2,8,0,0,3,15,0,19,19,3,18,0,4,19,0,32,5,4,2,121,5,236,255,1,16,10,0,119,0,9,0,134,19,0,0,32,68,1,0,135,19,146,0,134,19,0,0,52,76,1,0,134,19,0,0,244,79,1,0,119,0,211,255,32,19,16,3,121,19,10,0,1,20,89,0,134,19,0,0,148,98,1,0,20,0,0,0,1,0,1,0,0,6,0,0,137,17,0,0,139,6,0,0,119,0,18,0,32,19,16,5,121,19,10,0,1,20,90,0,134,19,0,0,148,98,1,0,20,0,0,0,1,0,0,0,0,6,0,0,137,17,0,0,139,6,0,0,119,0,7,0,32,19,16,10,121,19,5,0,1,0,2,0,0,6,0,0,137,17,0,0,139,6,0,0,1,19,0,0,139,19,0,0,140,2,31,0,0,0,0,0,1,26,0,0,136,28,0,0,0,27,28,0,136,28,0,0,25,28,28,16,137,28,0,0,0,2,0,0,0,3,1,0,1,29,0,0,135,28,147,0,29,0,0,0,1,28,128,1,82,14,28,0,1,28,44,1,3,17,14,28,0,25,17,0,1,28,128,1,82,18,28,0,1,28,84,1,3,19,18,28,0,24,19,0,0,20,2,0,1,28,255,0,19,28,20,28,0,21,28,0,1,28,56,14,78,22,28,0,1,28,255,0,19,28,22,28,0,23,28,0,13,4,21,23,121,4,7,0,0,5,25,0,1,29,64,0,1,30,98,0,135,28,24,0,29,30,5,0,119,0,5,0,0,6,2,0,0,7,25,0,135,28,29,0,6,7,0,0,0,8,24,0,1,30,64,0,1,29,97,0,135,28,24,0,30,29,8,0,0,9,25,0,0,10,24,0,135,28,26,0,9,10,0,0,0,11,3,0,0,12,24,0,135,28,112,0,11,12,0,0,0,13,25,0,0,15,24,0,135,28,26,0,13,15,0,0,0,16,25,0,1,29,79,0,1,30,73,0,135,28,59,0,29,30,16,0,1,30,100,0,1,29,0,0,134,28,0,0,204,62,1,0,30,29,0,0,137,27,0,0,139,0,0,0,140,0,19,0,0,0,0,0,2,17,0,0,255,0,0,0,1,15,0,0,136,18,0,0,0,16,18,0,136,18,0,0,25,18,18,16,137,18,0,0,1,18,127,13,78,1,18,0,1,18,128,13,78,6,18,0,135,18,141,0,1,6,0,0,135,18,148,0,135,18,149,0,1,18,5,0,134,7,0,0,40,203,0,0,18,0,0,0,41,18,7,24,42,18,18,24,33,8,18,0,121,8,9,0,134,2,0,0,8,251,0,0,19,18,2,17,0,3,18,0,13,4,3,17,121,4,243,255,1,15,6,0,119,0,10,0,135,9,150,0,0,14,9,0,0,10,14,0,19,18,10,17,0,11,18,0,14,12,11,17,121,12,234,255,1,15,4,0,119,0,1,0,32,18,15,4,121,18,7,0,0,13,14,0,0,0,13,0,0,5,0,0,137,16,0,0,139,5,0,0,119,0,7,0,32,18,15,6,121,18,5,0,1,0,255,255,0,5,0,0,137,16,0,0,139,5,0,0,1,18,0,0,139,18,0,0,140,2,28,0,0,0,0,0,1,23,0,0,136,25,0,0,0,24,25,0,136,25,0,0,25,25,25,16,137,25,0,0,0,2,0,0,0,3,1,0,1,26,1,0,135,25,147,0,26,0,0,0,1,25,128,1,82,13,25,0,1,25,44,1,3,14,13,25,0,22,14,0,1,25,128,1,82,15,25,0,1,25,84,1,3,16,15,25,0,21,16,0,0,17,2,0,0,18,22,0,135,25,29,0,17,18,0,0,0,19,21,0,1,26,64,0,1,27,104,0,135,25,24,0,26,27,19,0,0,20,22,0,0,4,21,0,135,25,26,0,20,4,0,0,0,5,3,0,0,6,21,0,135,25,29,0,5,6,0,0,0,7,22,0,0,8,21,0,135,25,26,0,7,8,0,0,0,9,21,0,1,27,64,0,1,26,105,0,135,25,24,0,27,26,9,0,0,10,22,0,0,11,21,0,135,25,26,0,10,11,0,0,0,12,22,0,1,26,79,0,1,27,73,0,135,25,59,0,26,27,12,0,1,27,44,1,1,26,0,0,134,25,0,0,204,62,1,0,27,26,0,0,137,24,0,0,139,0,0,0,140,2,30,0,0,0,0,0,2,25,0,0,255,0,0,0,2,26,0,0,172,13,0,0,1,23,0,0,136,27,0,0,0,24,27,0,136,27,0,0,25,27,27,16,137,27,0,0,0,2,0,0,0,3,1,0,1,28,0,0,135,27,87,0,28,0,0,0,1,22,0,0,0,14,22,0,19,27,14,25,0,15,27,0,25,16,15,1,19,27,16,25,0,17,27,0,0,22,17,0,135,27,89,0,0,18,22,0,19,27,18,25,0,19,27,0,0,20,3,0,19,27,20,25,0,21,27,0,15,4,21,19,120,4,28,0,1,28,10,0,1,29,0,0,134,27,0,0,204,62,1,0,28,29,0,0,0,5,2,0,19,27,5,25,0,6,27,0,27,27,6,7,3,7,26,27,78,8,7,0,0,9,2,0,19,27,9,25,0,10,27,0,27,27,10,7,3,11,26,27,25,12,11,1,78,13,12,0,1,29,1,0,135,27,85,0,8,13,29,0,1,29,10,0,1,28,0,0,134,27,0,0,204,62,1,0,29,28,0,0,119,0,214,255,137,24,0,0,139,0,0,0,140,0,27,0,0,0,0,0,2,25,0,0,255,0,0,0,1,23,0,0,136,26,0,0,0,24,26,0,136,26,0,0,25,26,26,16,137,26,0,0,1,26,140,1,82,0,26,0,0,22,0,0,1,21,0,0,0,1,21,0,19,26,1,25,0,12,26,0,34,14,12,100,120,14,2,0,119,0,36,0,0,15,21,0,19,26,15,25,0,16,26,0,0,17,22,0,27,26,16,12,3,18,17,26,78,19,18,0,19,26,19,25,0,20,26,0,13,2,25,20,120,2,18,0,0,3,21,0,19,26,3,25,0,4,26,0,0,5,22,0,27,26,4,12,3,6,5,26,134,26,0,0,0,42,1,0,6,0,0,0,0,7,21,0,19,26,7,25,0,8,26,0,0,9,22,0,27,26,8,12,3,10,9,26,135,26,151,0,10,0,0,0,0,11,21,0,25,26,11,1,41,26,26,24,42,26,26,24,0,13,26,0,0,21,13,0,119,0,216,255,137,24,0,0,139,0,0,0,140,1,25,0,0,0,0,0,1,20,0,0,136,22,0,0,0,21,22,0,136,22,0,0,25,22,22,16,137,22,0,0,0,1,0,0,1,23,2,0,135,22,147,0,23,0,0,0,1,22,128,1,82,2,22,0,1,22,44,1,3,10,2,22,0,19,10,0,1,22,128,1,82,11,22,0,1,22,84,1,3,12,11,22,0,18,12,0,0,13,1,0,1,22,255,0,19,22,13,22,0,14,22,0,1,22,56,14,78,15,22,0,1,22,255,0,19,22,15,22,0,16,22,0,13,17,14,16,121,17,7,0,0,3,19,0,1,23,64,0,1,24,98,0,135,22,24,0,23,24,3,0,119,0,5,0,0,4,1,0,0,5,19,0,135,22,29,0,4,5,0,0,0,6,18,0,1,24,64,0,1,23,91,0,135,22,24,0,24,23,6,0,0,7,19,0,0,8,18,0,135,22,26,0,7,8,0,0,0,9,19,0,1,23,79,0,1,24,73,0,135,22,59,0,23,24,9,0,1,24,44,1,1,23,0,0,134,22,0,0,204,62,1,0,24,23,0,0,137,21,0,0,139,0,0,0,140,2,21,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,25,12,15,8,25,13,15,4,0,2,0,0,0,3,1,0,1,17,4,0,1,18,43,0,1,19,154,255,1,20,91,0,135,16,14,0,17,18,19,20,1,20,4,0,1,19,43,0,1,18,154,255,1,17,90,0,135,16,15,0,20,19,18,17,1,16,8,0,83,12,16,0,25,4,12,1,1,16,43,0,83,4,16,0,25,5,12,2,1,16,152,255,83,5,16,0,25,6,12,3,1,16,88,0,83,6,16,0,1,16,10,0,83,13,16,0,25,7,13,1,1,16,49,0,83,7,16,0,25,8,13,2,1,16,62,0,83,8,16,0,25,9,13,3,1,16,91,0,83,9,16,0,0,10,2,0,1,17,8,0,1,18,47,0,135,16,152,0,17,18,10,0,0,11,3,0,135,16,62,0,12,13,11,0,1,18,44,1,1,17,1,0,134,16,0,0,204,62,1,0,18,17,0,0,137,15,0,0,139,0,0,0,140,0,20,0,0,0,0,0,2,16,0,0,255,0,0,0,2,17,0,0,137,13,0,0,1,14,0,0,136,18,0,0,0,15,18,0,136,18,0,0,25,18,18,16,137,18,0,0,0,12,15,0,78,0,17,0,41,18,0,24,42,18,18,24,33,1,18,0,40,18,1,1,0,4,18,0,120,4,3,0,1,14,8,0,119,0,32,0,134,5,0,0,136,49,1,0,12,0,0,0,41,18,5,24,42,18,18,24,33,6,18,0,120,6,3,0,1,14,8,0,119,0,23,0,134,7,0,0,148,65,1,0,12,0,0,0,0,13,7,0,1,18,144,13,78,8,18,0,19,18,8,16,0,9,18,0,32,10,9,0,121,10,9,0,0,11,13,0,19,18,11,16,0,2,18,0,32,3,2,5,121,3,4,0,1,18,2,0,83,17,18,0,119,0,221,255,1,19,1,0,135,18,130,0,19,0,0,0,119,0,217,255,32,18,14,8,121,18,3,0,137,15,0,0,139,0,0,0,139,0,0,0,140,0,15,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,1,13,59,14,78,0,13,0,1,13,255,0,19,13,0,13,0,1,13,0,25,3,1,1,1,13,255,0,19,13,3,13,0,4,13,0,1,13,59,14,83,13,4,0,1,13,59,14,78,5,13,0,1,13,255,0,19,13,5,13,0,6,13,0,1,13,12,0,15,7,13,6,120,7,7,0,134,13,0,0,0,55,0,0,135,13,153,0,134,13,0,0,204,187,0,0,139,0,0,0,1,13,57,14,79,13,13,0,1,14,57,14,103,14,14,1,41,14,14,8,20,13,13,14,0,8,13,0,2,13,0,0,255,255,0,0,19,13,8,13,0,9,13,0,25,10,9,1,2,13,0,0,255,255,0,0,19,13,10,13,0,2,13,0,1,13,57,14,1,14,255,0,19,14,2,14,83,13,14,0,1,14,57,14,42,13,2,8,107,14,1,13,1,13,59,14,1,14,1,0,83,13,14,0,135,14,154,0,135,14,155,0,134,14,0,0,0,55,0,0,135,14,153,0,134,14,0,0,204,187,0,0,139,0,0,0,140,0,14,0,0,0,0,0,1,9,0,0,136,11,0,0,0,10,11,0,136,11,0,0,25,11,11,48,137,11,0,0,25,8,10,32,0,7,10,0,1,12,64,0,1,13,121,0,135,11,24,0,12,13,7,0,1,11,53,0,83,8,11,0,25,1,8,2,1,11,101,0,83,1,11,0,25,2,8,1,1,11,10,0,83,2,11,0,25,3,8,3,1,11,46,0,83,3,11,0,1,11,0,0,134,4,0,0,140,24,0,0,8,11,7,0,1,11,255,0,19,11,4,11,0,5,11,0,1,11,0,0,1,13,0,1,138,5,11,13,136,85,1,0,144,85,1,0,168,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,128,85,1,0,176,85,1,0,1,0,0,0,119,0,13,0,1,0,1,0,119,0,11,0,1,13,0,0,134,11,0,0,56,23,1,0,13,0,0,0,1,0,0,0,119,0,5,0,1,0,2,0,119,0,3,0,1,0,0,0,119,0,1,0,0,6,0,0,137,10,0,0,139,6,0,0,140,1,22,0,0,0,0,0,1,17,0,0,136,19,0,0,0,18,19,0,136,19,0,0,25,19,19,16,137,19,0,0,0,1,0,0,1,19,128,1,82,2,19,0,1,19,44,1,3,7,2,19,0,16,7,0,1,19,128,1,82,8,19,0,1,19,84,1,3,9,8,19,0,15,9,0,0,10,16,0,1,20,64,0,1,21,78,0,135,19,24,0,20,21,10,0,0,11,1,0,0,12,15,0,135,19,29,0,11,12,0,0,0,13,16,0,0,14,15,0,135,19,26,0,13,14,0,0,0,3,15,0,1,21,64,0,1,20,79,0,135,19,24,0,21,20,3,0,0,4,16,0,0,5,15,0,135,19,26,0,4,5,0,0,0,6,16,0,1,20,2,0,134,19,0,0,96,242,0,0,6,20,0,0,137,18,0,0,139,0,0,0,140,1,19,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,0,1,0,0,1,16,128,1,82,2,16,0,1,16,44,1,3,4,2,16,0,13,4,0,1,16,128,1,82,5,16,0,1,16,84,1,3,6,5,16,0,12,6,0,0,7,1,0,0,8,13,0,135,16,29,0,7,8,0,0,0,9,12,0,1,17,64,0,1,18,83,0,135,16,24,0,17,18,9,0,0,10,13,0,0,11,12,0,135,16,26,0,10,11,0,0,0,3,13,0,1,18,2,0,134,16,0,0,96,242,0,0,3,18,0,0,137,15,0,0,139,0,0,0,140,1,19,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,0,1,0,0,1,16,128,1,82,2,16,0,1,16,44,1,3,4,2,16,0,13,4,0,1,16,128,1,82,5,16,0,1,16,84,1,3,6,5,16,0,12,6,0,0,7,1,0,0,8,13,0,135,16,29,0,7,8,0,0,0,9,12,0,1,17,64,0,1,18,82,0,135,16,24,0,17,18,9,0,0,10,13,0,0,11,12,0,135,16,26,0,10,11,0,0,0,3,13,0,1,18,2,0,134,16,0,0,96,242,0,0,3,18,0,0,137,15,0,0,139,0,0,0,140,1,19,0,0,0,0,0,1,14,0,0,136,16,0,0,0,15,16,0,136,16,0,0,25,16,16,16,137,16,0,0,0,1,0,0,1,16,128,1,82,2,16,0,1,16,44,1,3,4,2,16,0,13,4,0,1,16,128,1,82,5,16,0,1,16,84,1,3,6,5,16,0,12,6,0,0,7,1,0,0,8,13,0,135,16,29,0,7,8,0,0,0,9,12,0,1,17,64,0,1,18,81,0,135,16,24,0,17,18,9,0,0,10,13,0,0,11,12,0,135,16,26,0,10,11,0,0,0,3,13,0,1,18,2,0,134,16,0,0,96,242,0,0,3,18,0,0,137,15,0,0,139,0,0,0,140,0,16,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,1,14,3,0,135,13,147,0,14,0,0,0,1,13,128,1,82,0,13,0,1,13,44,1,3,1,0,13,0,10,1,0,1,13,128,1,82,2,13,0,1,13,84,1,3,3,2,13,0,9,3,0,0,4,10,0,1,14,64,0,1,15,98,0,135,13,24,0,14,15,4,0,0,5,9,0,1,15,64,0,1,14,92,0,135,13,24,0,15,14,5,0,0,6,10,0,0,7,9,0,135,13,26,0,6,7,0,0,0,8,10,0,1,14,79,0,1,15,73,0,135,13,59,0,14,15,8,0,1,15,44,1,1,14,0,0,134,13,0,0,204,62,1,0,15,14,0,0,137,12,0,0,139,0,0,0,140,0,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,135,0,156,0,41,8,0,24,42,8,8,24,33,1,8,0,121,1,6,0,1,9,0,0,134,8,0,0,192,97,1,0,9,0,0,0,139,0,0,0,135,8,157,0,1,9,3,0,134,8,0,0,12,93,1,0,9,0,0,0,135,2,158,0,41,8,2,24,42,8,8,24,33,3,8,0,121,3,8,0,1,9,1,0,134,8,0,0,192,97,1,0,9,0,0,0,135,8,159,0,135,8,160,0,139,0,0,0,134,4,0,0,212,111,0,0,41,8,4,24,42,8,8,24,33,5,8,0,120,5,2,0,119,0,4,0,134,8,0,0,204,70,1,0,119,0,247,255,135,8,159,0,135,8,160,0,139,0,0,0,140,0,17,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,135,0,22,0,30,12,0,5,38,12,12,255,0,1,12,0,25,2,1,1,1,12,255,0,19,12,2,12,0,3,12,0,1,12,138,13,83,12,3,0,1,12,138,13,78,4,12,0,1,12,255,0,19,12,4,12,0,5,12,0,25,6,5,27,2,12,0,0,255,255,0,0,19,12,6,12,0,7,12,0,1,13,1,0,1,14,15,0,1,15,16,0,1,16,1,0,135,12,42,0,7,13,14,15,16,0,0,0,1,12,138,13,78,8,12,0,1,16,9,0,1,15,47,0,1,14,82,0,1,13,1,0,135,12,42,0,16,8,15,14,13,0,0,0,1,12,138,13,78,9,12,0,1,13,9,0,1,14,47,0,1,15,82,0,1,16,0,0,135,12,42,0,13,9,14,15,16,0,0,0,1,16,50,0,1,15,0,0,134,12,0,0,204,62,1,0,16,15,0,0,139,0,0,0,140,1,14,0,0,0,0,0,1,10,0,0,136,12,0,0,0,11,12,0,136,12,0,0,25,12,12,16,137,12,0,0,0,1,0,0,0,2,1,0,0,9,2,0,1,13,1,0,135,12,161,0,13,0,0,0,0,3,9,0,82,4,3,0,32,5,4,0,120,5,2,0,119,0,5,0,1,13,10,0,135,12,161,0,13,0,0,0,119,0,248,255,0,6,9,0,82,7,6,0,26,8,7,1,85,6,8,0,137,11,0,0,139,0,0,0,140,0,11,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,48,137,8,0,0,25,5,7,32,0,4,7,0,1,9,64,0,1,10,39,0,135,8,24,0,9,10,4,0,1,8,79,0,83,5,8,0,25,0,5,2,1,8,103,0,83,0,8,0,25,1,5,1,1,8,14,0,83,1,8,0,25,2,5,3,1,8,74,0,83,2,8,0,1,8,0,0,134,3,0,0,140,24,0,0,5,8,4,0,137,7,0,0,139,3,0,0,140,0,11,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,80,137,8,0,0,25,5,7,76,0,4,7,0,1,9,64,0,1,10,38,0,135,8,24,0,9,10,4,0,1,8,79,0,83,5,8,0,25,0,5,2,1,8,103,0,83,0,8,0,25,1,5,1,1,8,14,0,83,1,8,0,25,2,5,3,1,8,86,0,83,2,8,0,1,8,0,0,134,3,0,0,140,24,0,0,5,8,4,0,137,7,0,0,139,3,0,0,140,0,11,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,48,137,8,0,0,25,5,7,32,0,4,7,0,1,9,64,0,1,10,40,0,135,8,24,0,9,10,4,0,1,8,79,0,83,5,8,0,25,0,5,2,1,8,103,0,83,0,8,0,25,1,5,1,1,8,14,0,83,1,8,0,25,2,5,3,1,8,74,0,83,2,8,0,1,8,0,0,134,3,0,0,140,24,0,0,5,8,4,0,137,7,0,0,139,3,0,0,140,0,11,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,25,5,7,28,0,4,7,0,1,9,64,0,1,10,37,0,135,8,24,0,9,10,4,0,1,8,53,0,83,5,8,0,25,0,5,2,1,8,77,0,83,0,8,0,25,1,5,1,1,8,10,0,83,1,8,0,25,2,5,3,1,8,58,0,83,2,8,0,1,8,0,0,134,3,0,0,140,24,0,0,5,8,4,0,137,7,0,0,139,3,0,0,140,1,17,0,0,0,0,0,1,11,0,0,136,13,0,0,0,12,13,0,136,13,0,0,25,13,13,16,137,13,0,0,0,1,0,0,0,2,1,0,1,13,0,1,82,3,13,0,1,13,1,0,135,4,0,0,2,13,3,0,0,10,4,0,0,5,1,0,0,6,10,0,25,7,6,5,78,8,7,0,1,13,0,0,1,14,1,0,1,15,0,0,1,16,0,0,134,9,0,0,0,0,0,0,5,13,8,14,15,16,0,0,137,12,0,0,139,9,0,0,140,2,15,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,32,137,10,0,0,25,7,9,4,0,2,0,0,0,3,1,0,1,11,43,0,1,12,29,0,1,13,115,0,1,14,65,0,135,10,14,0,11,12,13,14,1,14,42,0,1,13,28,0,1,12,116,0,1,11,66,0,135,10,15,0,14,13,12,11,1,11,64,0,1,12,42,0,135,10,24,0,11,12,7,0,1,12,43,0,1,11,29,0,135,10,16,0,12,11,7,0,0,4,2,0,0,5,3,0,134,6,0,0,64,126,0,0,4,5,0,0,137,9,0,0,139,6,0,0,140,2,15,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,32,137,10,0,0,25,7,9,4,0,2,0,0,0,3,1,0,1,11,43,0,1,12,29,0,1,13,115,0,1,14,65,0,135,10,14,0,11,12,13,14,1,14,42,0,1,13,28,0,1,12,116,0,1,11,66,0,135,10,15,0,14,13,12,11,1,11,64,0,1,12,41,0,135,10,24,0,11,12,7,0,1,12,43,0,1,11,29,0,135,10,16,0,12,11,7,0,0,4,2,0,0,5,3,0,134,6,0,0,64,126,0,0,4,5,0,0,137,9,0,0,139,6,0,0,140,2,15,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,32,137,10,0,0,25,7,9,4,0,2,0,0,0,3,1,0,1,11,43,0,1,12,29,0,1,13,115,0,1,14,65,0,135,10,14,0,11,12,13,14,1,14,42,0,1,13,28,0,1,12,116,0,1,11,66,0,135,10,15,0,14,13,12,11,1,11,64,0,1,12,43,0,135,10,24,0,11,12,7,0,1,12,43,0,1,11,29,0,135,10,16,0,12,11,7,0,0,4,2,0,0,5,3,0,134,6,0,0,64,126,0,0,4,5,0,0,137,9,0,0,139,6,0,0,140,0,10,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,135,8,162,0,1,8,137,13,78,0,8,0,1,8,255,0,19,8,0,8,0,1,8,0,33,2,1,0,121,2,2,0,139,0,0,0,1,8,144,13,78,3,8,0,1,8,255,0,19,8,3,8,0,4,8,0,32,5,4,2,121,5,4,0,135,8,163,0,139,0,0,0,119,0,13,0,135,8,164,0,134,8,0,0,132,99,1,0,134,8,0,0,184,209,0,0,1,9,0,0,135,8,130,0,9,0,0,0,1,9,1,0,135,8,130,0,9,0,0,0,139,0,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,0,1,0,0,0,2,1,0,134,3,0,0,228,98,1,0,2,0,0,0,41,10,3,24,42,10,10,24,33,4,10,0,120,4,2,0,119,0,248,255,0,5,1,0,135,6,165,0,5,0,0,0,41,10,6,24,42,10,10,24,33,7,10,0,121,7,241,255,119,0,1,0,137,9,0,0,139,0,0,0,140,2,10,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,1,2,0,0,0,3,0,0,0,4,1,0,2,8,0,0,10,151,5,0,2,9,0,0,23,151,5,0,135,7,166,0,8,9,0,0,2,9,0,0,37,151,5,0,135,7,167,0,9,0,0,0,2,9,0,0,51,151,5,0,135,7,168,0,9,0,0,0,1,9,17,0,135,7,169,0,9,0,0,0,134,7,0,0,20,89,1,0,1,9,2,0,135,7,170,0,9,0,0,0,137,6,0,0,1,7,0,0,139,7,0,0,140,1,13,0,0,0,0,0,1,8,0,0,136,10,0,0,0,9,10,0,136,10,0,0,25,10,10,16,137,10,0,0,0,1,0,0,1,10,128,1,82,2,10,0,1,10,44,1,3,3,2,10,0,7,3,0,0,4,7,0,1,11,64,0,1,12,95,0,135,10,24,0,11,12,4,0,0,5,1,0,0,6,7,0,134,10,0,0,24,78,1,0,5,6,0,0,137,9,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,6,0,0,136,8,0,0,0,7,8,0,136,8,0,0,25,8,8,32,137,8,0,0,25,5,7,8,0,4,7,0,0,1,0,0,1,9,22,0,135,8,92,0,9,5,0,0,0,2,1,0,1,8,255,0,19,8,2,8,0,3,8,0,1,9,10,0,135,8,30,0,3,4,9,0,135,8,26,0,5,4,0,0,1,9,1,0,1,10,255,255,134,8,0,0,60,40,1,0,5,9,10,0,137,7,0,0,139,0,0,0,140,1,11,0,0,0,0,0,1,7,0,0,136,9,0,0,0,8,9,0,136,9,0,0,25,9,9,64,137,9,0,0,0,6,8,0,0,1,0,0,0,2,1,0,1,9,255,0,19,9,2,9,0,3,9,0,25,4,3,46,1,9,255,0,19,9,4,9,0,5,9,0,1,10,1,0,135,9,24,0,10,5,6,0,1,10,2,0,134,9,0,0,96,242,0,0,6,10,0,0,137,8,0,0,139,0,0,0,140,0,6,0,0,0,0,0,1,3,0,0,136,5,0,0,0,4,5,0,134,5,0,0,76,95,1,0,1,5,137,13,78,0,5,0,41,5,0,24,42,5,5,24,33,1,5,0,40,5,1,1,0,2,5,0,120,2,2,0,119,0,9,0,134,5,0,0,124,35,1,0,134,5,0,0,76,58,1,0,134,5,0,0,12,79,1,0,135,5,171,0,119,0,240,255,1,5,0,0,139,5,0,0,140,1,8,0,0,0,0,0,1,4,0,0,136,6,0,0,0,5,6,0,136,6,0,0,25,6,6,32,137,6,0,0,0,3,5,0,0,1,0,0,0,2,1,0,1,7,64,0,135,6,24,0,7,2,3,0,1,7,2,0,134,6,0,0,96,242,0,0,3,7,0,0,137,5,0,0,139,0,0,0,140,1,8,0,0,0,0,0,1,5,0,0,136,7,0,0,0,6,7,0,136,7,0,0,25,7,7,16,137,7,0,0,0,1,0,0,0,2,1,0,1,7,212,7,134,3,0,0,244,59,1,0,7,2,0,0,1,7,255,0,19,7,3,7,0,4,7,0,137,6,0,0,139,4,0,0,140,0,6,0,0,0,0,0,1,1,0,0,136,3,0,0,0,2,3,0,1,3,16,1,82,0,3,0,1,4,0,0,1,5,128,7,135,3,66,0,0,4,5,0,1,5,6,0,134,3,0,0,12,93,1,0,5,0,0,0,1,5,136,19,1,4,1,0,134,3,0,0,204,62,1,0,5,4,0,0,139,0,0,0,140,0,5,0,0,0,0,0,1,0,0,0,136,2,0,0,0,1,2,0,135,2,148,0,1,3,10,0,135,2,91,0,3,0,0,0,1,3,100,0,1,4,0,0,134,2,0,0,204,62,1,0,3,4,0,0,1,4,0,0,135,2,91,0,4,0,0,0,1,4,100,0,1,3,0,0,134,2,0,0,204,62,1,0,4,3,0,0,139,0,0,0], eb + 81920);

  var relocations = [];
  relocations = relocations.concat([104,256,396,700,736,996,1128,1152,1372,1868,2480,2652,2684,2716,2764,3068,3276,3296,3524,3648,3824,4028,4348,4416,4468,4612,4896,4928,5224,5404,5472,5524,5668,5940,5972,6528,6712,6956,7156,7636,7640,7644,7648,7652,7656,7660,7824,7900,7948,8004,8540,8824,8848,9188,9192,9196,9200,9204,9208,9212,9216,9220,9268,9352,9408,9812,9996,10184,10632,10636,10640,10692,10724,10728,10960,10988,11260,11396,11504,12016,12432,12748,12772,13112,13116,13120,13124,13128,13132,13136,13336,13508,13696,14312,14408,14596,14656,14900,15080,15188,15192,15196,15492,15604,15812,15872,15924,16144,16148,16428,16624,16760,17208,17696,21580,23592,23596,23600,23604,23608,26248,26252,26256,26260,26264,26268,26272,26276,26280,26284,26288,26292,26296,26300,26304,26308,26312,26316,28100,28104,28108,28112,28116,28120,28124,28732,28736,28740,28744,28748,28752,28756,28760,28764,28768,28772,28776,28780,28784,28788,28792,28796,28800,28804,28808,28812,28816,28820,28824,28828,28832,28836,28840,28844,28848,28852,28856,28860,28864,28868,28872,28876,28880,28884,28888,28892,28896,28900,28904,28908,28912,28916,28920,28924,28928,28932,28936,28940,28944,28948,28952,28956,28960,28964,28968,28972,28976,28980,28984,28988,28992,28996,29000,29004,29008,29012,29016,29020,29024,29028,29032,29036,29040,29044,29048,29052,29056,29060,29064,29068,29072,29076,29080,29084,29088,29092,29096,29100,29104,29108,29112,29116,29120,29124,29128,29132,29136,29140,29144,29148,29152,29156,29160,29164,29168,29172,29176,29180,29184,29188,29192,29196,29200,29204,29208,29212,29216,29220,29224,29228,29232,29236,29240,29244,29248,29252,29256,29260,29264,29268,29272,29276,29280,29284,29288,29292,29296,29300,29304,29308,29312,29316,29320,29324,29328,29332,29336,29340,29344,29348,29352,29356,29360,29364,29368,29372,29376,29380,29384,29388,29392,29396,29400,29404,29408,29412,29416,29420,29424,29428,29432,29436,29440,29444,29448,29452,29456,29460,29464,29468,29472,29476,29480,29484,29488,29492,29496,29500,29504,29508,29512,29516,29520,29524,29528,29532,29536,29540,29544,29548,29552,29556,29560,29564,29568,29572,29576,29580,29584,29588,29592,29596,29600,29604,29608,29612,29616,29620,29624,29628,29632,29636,29640,29644,29648,29652,29656,29660,29664,29668,29672,29676,29680,29684,29688,29692,29696,29700,29704,29708,29712,29716,29720,29724,29728,29732,29736,29740,29744,29748,29752,32916,32920,32924,32928,32932,32936,32940,36208,36212,36216,36220,36224,37636,37640,37644,37648,37652,37656,37660,40416,40420,40424,40428,40432,40436,40440,40444,40448,40452,40456,40460,40464,40468,40472,40476,40480,40484,40488,40492,40496,40500,40504,40508,40512,40516,40520,40524,40528,40532,40536,40540,40544,40548,40552,40556,40560,40564,40568,40572,40576,40580,40584,40588,40592,40596,40600,40604,40608,40612,40616,40620,40624,40628,40632,40636,40640,40644,40648,40652,40656,40660,40664,40668,40672,40676,40680,40684,40688,40692,40696,40700,40704,40708,40712,40716,40720,40724,40728,40732,40736,40740,40744,40748,40752,40756,40760,40764,40768,40772,40776,40780,40784,40788,40792,40796,40800,40804,40808,40812,40816,40820,40824,40828,40832,40836,40840,40844,40848,40852,40856,40860,40864,40868,40872,40876,40880,40884,40888,40892,40896,40900,40904,40908,40912,40916,40920,40924,40928,40932,40936,40940,40944,40948,40952,40956,40960,40964,40968,40972,40976,40980,40984,40988,40992,40996,41000,41004,41008,41012,41016,41020,41024,41028,41032,41036,41040,41044,41048,41052,41056,41060,41064,41068,41072,41076,41080,41084,41088,41092,41096,41100,41104,41108,41112,41116,41120,41124,41128,41132,41136,41140,41144,41148,41152,41156,41160,41164,41168,41172,41176,41180,41184,41188,41192,41196,41200,41204,41208,41212,41216,41220,41224,41228,41232,41236,41240,41244,41248,41252,41256,41260,41264,41268,41272,41276,41280,41284,41288,41292,41296,41300,41304,41308,41312,41316,41320,41324,41328,41332,41336,41340,41344,41348,41352,41356,41360,41364,41368,41372,41376,41380,41384,41388,41392,41396,41400,41404,41408,41412,41416,41420,41424,41428,41432,41436,43420,43424,43428,43432,43436,47616,47620,47624,47628,47632,48292,48296,48300,48304,48308,48428,48432,48436,52260,52264,52316,52320,52324,52328,52332,52336,52340,52344,52348,52352,52356,52360,52364,52368,52372,52376,52380,52384,55452,55456,55460,55464,55468,55472,55476,60892,64592,64596,64600,64604,64608,64612,64616,64620,64624,64628,64632,64636,64640,64644,64648,64652,64656,64660,64664,64668,64672,64676,64680,64684,64688,64692,64696,64700,64704,64708,64712,64716,64720,64724,64728,64732,64736,64740,64744,64748,64752,64756,64760,64764,64768,64772,64776,64780,64784,64788,64792,64796,64800,64804,64808,64812,64816,64820,64824,64828,64832,64836,64840,64844,64848,64852,64856,64860,64864,64868,64872,64876,64880,64884,64888,64892,64896,64900,64904,64908,64912,64916,64920,64924,64928,64932,64936,64940,64944,64948,64952,64956,64960,64964,64968,64972,64976,64980,64984,64988,64992,64996,65000,65004,65008,65012,65016,65020,65024,65028,65032,65036,65040,65044,65048,65052,65056,65060,65064,65068,65072,65076,65080,65084,65088,65092,65096,65100,65104,65108,65112,65116,65120,65124,65128,65132,65136,65140,65144,65148,65152,65156,65160,65164,65168,65172,65176,65180,65184,65188,65192,65196,65200,65204,65208,65212,65216,65220,65224,65228,65232,65236,65240,65244,65248,65252,65256,65260,65264,65268,65272,65276,65280,65284,65288,65292,65296,65300,65304,65308,65312,65316,65320,65324,65328,65332,65336,65340,65344,65348,65352,65356,65360,65364,65368,65372,65376,65380,65384,65388,65392,65396,65400,65404,65408,65412,65416,65420,65424,65428,65432,65436,65440,65444,65448,65452,65456,65460,65464,65468,65472,65476,65480,65484,65488,65492,65496,65500,65504,65508,65512,65516,65520,65524,65528,65532,65536,65540,65544,65548,65552,65556,65560,65564,65568,65572,65576,65580,65584,65588,65592,65596,65600,65604,65608,65612,66776,66780,66784,66788,66792,66796,66800,66804,66808,66812,66816,66820,66824,66828,66832,66836,66840,66844,66848,66852,66856,66860,66864,66868,66872,66876,66880,66884,66888,66892,66896,66900,66904,66908,66912,66916,66920,66924,66928,66932,66936,66940,66944,66948,66952,66956,66960,66964,66968,66972,66976,66980,66984,66988,66992,66996,67000,67004,67008,67012,67016,67020,67024,67028,67032,67036,67040,67044,67048,67052,67056,67060,67064,67068,67072,67076,67080,67084,67088,67092,67096,67100,67104,67108,67112,67116,67120,67124,67128,67132,67136,67140,67144,67148,67152,67156,67160,67164,67168,67172,67176,67180,67184,67188,67192,67196,67200,67204,67208,67212,67216,67220,67224,67228,67232,67236,67240,67244,67248,67252,67256,67260,67264,67268,67272,67276,67280,67284,67288,67292,67296,67300,67304,67308,67312,67316,67320,67324,67328,67332,67336,67340,67344,67348,67352,67356,67360,67364,67368,67372,67376,67380,67384,67388,67392,67396,67400,67404,67408,67412,67416,67420,67424,67428,67432,67436,67440,67444,67448,67452,67456,67460,67464,67468,67472,67476,67480,67484,67488,67492,67496,67500,67504,67508,67512,67516,67520,67524,67528,67532,67536,67540,67544,67548,67552,67556,67560,67564,67568,67572,67576,67580,67584,67588,67592,67596,67600,67604,67608,67612,67616,67620,67624,67628,67632,67636,67640,67644,67648,67652,67656,67660,67664,67668,67672,67676,67680,67684,67688,67692,67696,67700,67704,67708,67712,67716,67720,67724,67728,67732,67736,67740,67744,67748,67752,67756,67760,67764,67768,67772,67776,67780,67784,67788,67792,69120,69124,69128,69132,69136,69140,69144,70096,70100,70104,70108,71716,71720,71724,71728,71732,71736,71740,72212,72216,72220,72224,72228,72232,72236,72240,72244,72248,72252,72256,72260,72264,72268,72272,72276,72280,72284,72288,72292,72296,72300,72304,72308,72312,72316,74364,74368,74372,74376,74380,74384,74388,76356,76360,76364,76368,76372,76376,76380,76384,76388,76392,76396,76400,76404,76408,76412,76416,76420,76424,76428,76432,76436,76440,76444,76448,76452,76456,76460,76464,76892,76896,76900,76904,76908,76912,76916,76920,76924,76928,76932,76936,76940,76944,76948,76952,76956,76960,76964,76968,76972,76976,76980,76984,76988,76992,76996,77000,77004,77008,77012,77016,77020,77024,77028,77032,77036,77040,77044,77048,77052,77056,77060,77064,77068,77072,77076,77080,77084,77088,77092,77096,77100,77104,77108,77112,77116,77120,77124,77128,77132,77136,77140,77144,77148,77152,77156,77160,77164,77168,77172,77176,77180,77184,77188,77192,77196,77200,77204,77208,77212,77216,77220,77224,77228,77232,77236,77240,77244,77248,77252,77256,77260,77264,77268,77272,77276,77280,77284,77288,77292,77296,77300,77304,77308,77312,77316,77320,77324,77328,77332,77336,77340,77344,77348,77352,77356,77360,77364,77368,77372,77376,77380,77384,77388,77392,77396,77400,77404,77408,77412,77416,77420,77424,77428,77432,77436,77440,77444,77448,77452,77456,77460,77464,77468,77472,77476,77480,77484,77488,77492,77496,77500,77504,77508,77512,77516,77520,77524,77528,77532,77536,77540,77544,77548,77552,77556,77560,77564,77568,77572,77576,77580,77584,77588,77592,77596,77600,77604,77608,77612,77616,77620,77624,77628,77632,77636,77640,77644,77648,77652,77656,77660,77664,77668,77672,77676,77680,77684,77688,77692,77696,77700,77704,77708,77712,77716,77720,77724,77728,77732,77736,77740,77744,77748,77752,77756,77760,77764,77768,77772,77776,77780,77784,77788,77792,77796,77800,77804,77808,77812,77816,77820,77824,77828,77832,77836,77840,77844,77848,77852,77856,77860,77864,77868,77872,77876,77880,77884,77888,77892,77896,77900,77904,77908,77912,78808,78812,78816,78820,78824,78828,78832,78836,78840,78844,78848,78852,78856,78860,78864,78868,78872,78876,78880,78884,78888,78892,78896,78900,78904,78908,78912,78916,78920,78924,78928,78932,78936,78940,78944,78948,78952,78956,78960,78964,78968,78972,78976,78980,78984,78988,78992,78996,79000,79004,79008,79012,79016,79020,79024,79028,79032,79036,79040,79044,79048,79052,79056,79060,79064,79068,79072,79076,79080,79084,79088,79092,79096,79100,79104,79108,79112,79116,79120,79124,79128,79132,79136,79140,79144,79148,79152,79156,79160,79164,79168,79172,79176,79180,79184,79188,79192,79196,79200,79204,79208,79212,79216,79220,79224,79228,79232,79236,79240,79244,79248,79252,79256,79260,79264,79268,79272,79276,79280,79284,79288,79292,79296,79300,79304,79308,79312,79316,79320,79324,79328,79332,79336,79340,79344,79348,79352,79356,79360,79364,79368,79372,79376,79380,79384,79388,79392,79396,79400,79404,79408,79412,79416,79420,79424,79428,79432,79436,79440,79444,79448,79452,79456,79460,79464,79468,79472,79476,79480,79484,79488,79492,79496,79500,79504,79508,79512,79516,79520,79524,79528,79532,79536,79540,79544,79548,79552,79556,79560,79564,79568,79572,79576,79580,79584,79588,79592,79596,79600,79604,79608,79612,79616,79620,79624,79628,79632,79636,79640,79644,79648,79652,79656,79660,79664,79668,79672,79676,79680,79684,79688,79692,79696,79700,79704,79708,79712,79716,79720,79724,79728,79732,79736,79740,79744,79748,79752,79756,79760,79764,79768,79772,79776,79780,79784,79788,79792,79796,79800,79804,79808,79812,79816,79820,79824,79828,82256,82260,86400,86404,86408,86412,86416,86420,86424,86428,86432,86436,86440,86444,86448,86452,86456,86460,86464,86468,86472,86476,86480,86484,86488,86492,86496,86500,86504,86508,86512,86516,86520,86524,86528,86532,86536,86540,86544,86548,86552,86556,86560,86564,86568,86572,86576,86580,86584,86588,86592,86596,86600,86604,86608,86612,86616,86620,86624,86628,86632,86636,86640,86644,86648,86652,86656,86660,86664,86668,86672,86676,86680,86684,86688,86692,86696,86700,86704,86708,86712,86716,86720,86724,86728,86732,86736,86740,86744,86748,86752,86756,86760,86764,86768,86772,86776,86780,86784,86788,86792,86796,86800,86804,86808,86812,86816,86820,86824,86828,86832,86836,86840,86844,86848,86852,86856,86860,86864,86868,86872,86876,86880,86884,86888,86892,86896,86900,86904,86908,86912,86916,86920,86924,86928,86932,86936,86940,86944,86948,86952,86956,86960,86964,86968,86972,86976,86980,86984,86988,86992,86996,87000,87004,87008,87012,87016,87020,87024,87028,87032,87036,87040,87044,87048,87052,87056,87060,87064,87068,87072,87076,87080,87084,87088,87092,87096,87100,87104,87108,87112,87116,87120,87124,87128,87132,87136,87140,87144,87148,87152,87156,87160,87164,87168,87172,87176,87180,87184,87188,87192,87196,87200,87204,87208,87212,87216,87220,87224,87228,87232,87236,87240,87244,87248,87252,87256,87260,87264,87268,87272,87276,87280,87284,87288,87292,87296,87300,87304,87308,87312,87316,87320,87324,87328,87332,87336,87340,87344,87348,87352,87356,87360,87364,87368,87372,87376,87380,87384,87388,87392,87396,87400,87404,87408,87412,87416,87420,2372,3236,3504,3656,3784,3984,4128,5028,5192,5348,6236,6248,6264,7524,9104,11032,11552,11604,11728,12208,13028,15824,16308,16404,16600,16696,16712,16844,17340,17852,17932,18084,18132,18296,18684,19140,19200,19416,19668,19788,19876,20032,20188,20376,20392,20520,20620,20716,20744,21160,21428,21532,21644,21908,22208,22224,22388,22476,22656,24296,24428,25900,25920,26132,27872,28696,29772,29856,29904,29948,31104,31304,31352,31380,31552,31868,32840,33588,33668,33728,33904,33940,34252,34772,34896,35452,35488,36672,36764,37576,38116,38460,38500,38652,38928,39840,40032,40168,40356,41464,41492,41692,41856,41996,42140,42252,42816,42932,43872,44056,44336,44448,44776,44924,44968,45188,45468,45580,45908,46056,46100,47148,48032,48652,49064,49208,49320,49520,49900,50196,50316,50428,50444,50652,50672,50756,50784,50864,51140,51380,51492,51760,51876,51920,52092,52644,52656,52948,53084,53196,53292,53308,53480,53508,53536,54116,54172,54300,54356,54576,54628,55716,55828,56360,56644,56788,56900,57116,57232,57424,57568,57860,57956,58600,58632,58856,59432,59536,59680,59788,59964,59992,60464,60492,60536,60924,61480,61592,61764,61816,61844,62744,62864,62900,63344,63476,63604,64092,64556,65720,65968,66084,66192,66284,66344,66724,67864,67884,67968,68196,68308,68464,68516,68544,69036,69452,69564,69716,69768,69796,70660,70744,70872,71308,71588,71840,71860,72332,72352,72372,72392,72412,72432,72452,72472,72492,72512,72532,72552,72572,72592,72612,72632,72652,72672,72692,72712,72732,72752,72772,73400,73760,73908,74164,74288,74932,75092,75280,75292,75440,75560,75588,75688,76272,76528,76580,76616,76668,76688,76724,76776,76796,76868,77924,77964,78004,78268,78604,79856,79884,80440,80684,80728,80768,80780,80940,81348,81408,81500,81744,81860,82040,82188,82208,82224,82276,82296,82384,82544,82556,82960,83288,83644,83764,83772,83856,83868,83876,83900,83944,84280,84376,84404,84776,84940,85024,85196,85512,85756,85864,85900,86104,86116,86240,86252,86368,87448,87668,87824,87980,88136,88324,88388,88412,88448,88472,88500,88732,88968,89092,89216,89340,89456,89612,89764,89916,90036,90044,90124,90308,90424,90544,90652,90692,90736,90744,90752,90836,90900,90980,91000,91060,91092]);

  for (var i = 0; i < relocations.length; i++) {
    //assert(relocations[i] % 4 === 0);
    //assert(relocations[i] >= 0 && relocations[i] < eb + 91104); // in range
    //assert(HEAPU32[eb + relocations[i] >> 2] + eb < (-1 >>> 0), [i, relocations[i]]); // no overflows
    HEAPU32[eb + relocations[i] >> 2] = HEAPU32[eb + relocations[i] >> 2] + eb;
  }
});



  var _BDtoIHigh=true;

   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  
  
  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var EmterpreterAsync={initted:false,state:0,saveStack:"",yieldCallbacks:[],postAsync:null,asyncFinalizers:[],ensureInit:function () {
        if (this.initted) return;
        this.initted = true;
      },setState:function (s) {
        this.ensureInit();
        this.state = s;
        asm.setAsyncState(s);
      },handle:function (doAsyncOp, yieldDuring) {
        Module['noExitRuntime'] = true;
        if (EmterpreterAsync.state === 0) {
          // save the stack we want to resume. this lets other code run in between
          // XXX this assumes that this stack top never ever leak! exceptions might violate that
          var stack = new Int32Array(HEAP32.subarray(EMTSTACKTOP>>2, asm.emtStackSave()>>2));
          var stacktop = asm.stackSave();
  
          var resumedCallbacksForYield = false;
          function resumeCallbacksForYield() {
            if (resumedCallbacksForYield) return;
            resumedCallbacksForYield = true;
            // allow async callbacks, and also make sure to call the specified yield callbacks. we must
            // do this when nothing is on the stack, i.e. after it unwound
            EmterpreterAsync.yieldCallbacks.forEach(function(func) {
              func();
            });
            Browser.resumeAsyncCallbacks(); // if we were paused (e.g. we are after a sleep), then since we are now yielding, it is safe to call callbacks
          }
  
          var callingDoAsyncOp = 1; // if resume is called synchronously - during the doAsyncOp - we must make it truly async, for consistency
  
          doAsyncOp(function resume(post) {
            if (callingDoAsyncOp) {
              assert(callingDoAsyncOp === 1); // avoid infinite recursion
              callingDoAsyncOp++;
              setTimeout(function() {
                resume(post);
              }, 0);
              return;
            }
  
            assert(EmterpreterAsync.state === 1 || EmterpreterAsync.state === 3);
            EmterpreterAsync.setState(3);
            if (yieldDuring) {
              resumeCallbacksForYield();
            }
            // copy the stack back in and resume
            HEAP32.set(stack, EMTSTACKTOP>>2);
            EmterpreterAsync.setState(2);
            // Resume the main loop
            if (Browser.mainLoop.func) {
              Browser.mainLoop.resume();
            }
            assert(!EmterpreterAsync.postAsync);
            EmterpreterAsync.postAsync = post || null;
            asm.emterpret(stack[0]); // pc of the first function, from which we can reconstruct the rest, is at position 0 on the stack
            if (!yieldDuring && EmterpreterAsync.state === 0) {
              // if we did *not* do another async operation, then we know that nothing is conceptually on the stack now, and we can re-allow async callbacks as well as run the queued ones right now
              Browser.resumeAsyncCallbacks();
            }
            if (EmterpreterAsync.state === 0) {
              EmterpreterAsync.asyncFinalizers.forEach(function(func) {
                func();
              });
              EmterpreterAsync.asyncFinalizers.length = 0;
            }
          });
  
          callingDoAsyncOp = 0;
  
          EmterpreterAsync.setState(1);
          // Pause the main loop, until we resume
          if (Browser.mainLoop.func) {
            Browser.mainLoop.pause();
          }
          if (yieldDuring) {
            // do this when we are not on the stack, i.e., the stack unwound. we might be too late, in which case we do it in resume()
            setTimeout(function() {
              resumeCallbacksForYield();
            }, 0);
          } else {
            Browser.pauseAsyncCallbacks();
          }
        } else {
          // nothing to do here, the stack was just recreated. reset the state.
          assert(EmterpreterAsync.state === 2);
          EmterpreterAsync.setState(0);
  
          if (EmterpreterAsync.postAsync) {
            var ret = EmterpreterAsync.postAsync();
            EmterpreterAsync.postAsync = null;
            return ret;
          }
        }
      }};function _emscripten_sleep_with_yield(ms) {
      EmterpreterAsync.handle(function(resume) {
        Browser.safeSetTimeout(resume, ms);
      }, true);
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  function ___lock() {}

  function ___unlock() {}

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_asm_const=true;

   
  Module["_i64Add"] = _i64Add;

  var _fabs=Math_abs;

  var _BItoD=true;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _emscripten_asm_const_int=true;


  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_async_call(func, arg, millis) {
      Module['noExitRuntime'] = true;
  
      function wrapper() {
        Runtime.getFuncWrapper(func, 'vi')(arg);
      }
  
      if (millis >= 0) {
        Browser.safeSetTimeout(wrapper, millis);
      } else {
        Browser.safeRequestAnimationFrame(wrapper);
      }
    }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_iiiii": invoke_iiiii, "invoke_v": invoke_v, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_fabs": _fabs, "___syscall6": ___syscall6, "___setErrNo": ___setErrNo, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_pthread_self": _pthread_self, "_emscripten_sleep_with_yield": _emscripten_sleep_with_yield, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___lock": ___lock, "_abort": _abort, "_pthread_cleanup_push": _pthread_cleanup_push, "_emscripten_asm_const_2": _emscripten_asm_const_2, "_time": _time, "_emscripten_asm_const_1": _emscripten_asm_const_1, "___syscall140": ___syscall140, "_emscripten_async_call": _emscripten_async_call, "___syscall146": ___syscall146, "_emscripten_asm_const_0": _emscripten_asm_const_0, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
Module.asmLibraryArg['EMTSTACKTOP'] = EMTSTACKTOP; Module.asmLibraryArg['EMT_STACK_MAX'] = EMT_STACK_MAX; Module.asmLibraryArg['eb'] = eb;
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_v=env.invoke_v;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _fabs=env._fabs;
  var ___syscall6=env.___syscall6;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _pthread_self=env._pthread_self;
  var _emscripten_sleep_with_yield=env._emscripten_sleep_with_yield;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___lock=env.___lock;
  var _abort=env._abort;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _time=env._time;
  var _emscripten_asm_const_1=env._emscripten_asm_const_1;
  var ___syscall140=env.___syscall140;
  var _emscripten_async_call=env._emscripten_async_call;
  var ___syscall146=env.___syscall146;
  var _emscripten_asm_const_0=env._emscripten_asm_const_0;
  var tempFloat = 0.0;
  var asyncState = 0;

var EMTSTACKTOP = env.EMTSTACKTOP|0;
var EMT_STACK_MAX = env.EMT_STACK_MAX|0;
var eb = env.eb|0;
// EMSCRIPTEN_START_FUNCS

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $bytes >>> 0 < 245;
 do {
  if ($0) {
   $1 = $bytes >>> 0 < 11;
   $2 = $bytes + 11 | 0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[2544 >> 2] | 0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8 | 0) == 0;
   if (!$9) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = $11 + $5 | 0;
    $13 = $12 << 1;
    $14 = 2584 + ($13 << 2) | 0;
    $$sum10 = $13 + 2 | 0;
    $15 = 2584 + ($$sum10 << 2) | 0;
    $16 = HEAP32[$15 >> 2] | 0;
    $17 = $16 + 8 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $19 = ($14 | 0) == ($18 | 0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[2544 >> 2] = $22;
     } else {
      $23 = HEAP32[2560 >> 2] | 0;
      $24 = $18 >>> 0 < $23 >>> 0;
      if ($24) {
       _abort();
      }
      $25 = $18 + 12 | 0;
      $26 = HEAP32[$25 >> 2] | 0;
      $27 = ($26 | 0) == ($16 | 0);
      if ($27) {
       HEAP32[$25 >> 2] = $14;
       HEAP32[$15 >> 2] = $18;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = $16 + 4 | 0;
    HEAP32[$30 >> 2] = $29;
    $$sum1112 = $28 | 4;
    $31 = $16 + $$sum1112 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $32 | 1;
    HEAP32[$31 >> 2] = $33;
    $mem$0 = $17;
    return $mem$0 | 0;
   }
   $34 = HEAP32[2552 >> 2] | 0;
   $35 = $4 >>> 0 > $34 >>> 0;
   if ($35) {
    $36 = ($7 | 0) == 0;
    if (!$36) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = 0 - $38 | 0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = 0 - $41 | 0;
     $43 = $41 & $42;
     $44 = $43 + -1 | 0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = $62 + $63 | 0;
     $65 = $64 << 1;
     $66 = 2584 + ($65 << 2) | 0;
     $$sum4 = $65 + 2 | 0;
     $67 = 2584 + ($$sum4 << 2) | 0;
     $68 = HEAP32[$67 >> 2] | 0;
     $69 = $68 + 8 | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     $71 = ($66 | 0) == ($70 | 0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[2544 >> 2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[2560 >> 2] | 0;
       $76 = $70 >>> 0 < $75 >>> 0;
       if ($76) {
        _abort();
       }
       $77 = $70 + 12 | 0;
       $78 = HEAP32[$77 >> 2] | 0;
       $79 = ($78 | 0) == ($68 | 0);
       if ($79) {
        HEAP32[$77 >> 2] = $66;
        HEAP32[$67 >> 2] = $70;
        $$pre = HEAP32[2552 >> 2] | 0;
        $89 = $$pre;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $80 = $64 << 3;
     $81 = $80 - $4 | 0;
     $82 = $4 | 3;
     $83 = $68 + 4 | 0;
     HEAP32[$83 >> 2] = $82;
     $84 = $68 + $4 | 0;
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = $68 + $$sum56 | 0;
     HEAP32[$86 >> 2] = $85;
     $87 = $68 + $80 | 0;
     HEAP32[$87 >> 2] = $81;
     $88 = ($89 | 0) == 0;
     if (!$88) {
      $90 = HEAP32[2564 >> 2] | 0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = 2584 + ($92 << 2) | 0;
      $94 = HEAP32[2544 >> 2] | 0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96 | 0) == 0;
      if ($97) {
       $98 = $94 | $95;
       HEAP32[2544 >> 2] = $98;
       $$pre105 = $92 + 2 | 0;
       $$pre106 = 2584 + ($$pre105 << 2) | 0;
       $$pre$phiZ2D = $$pre106;
       $F4$0 = $93;
      } else {
       $$sum9 = $92 + 2 | 0;
       $99 = 2584 + ($$sum9 << 2) | 0;
       $100 = HEAP32[$99 >> 2] | 0;
       $101 = HEAP32[2560 >> 2] | 0;
       $102 = $100 >>> 0 < $101 >>> 0;
       if ($102) {
        _abort();
       } else {
        $$pre$phiZ2D = $99;
        $F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $90;
      $103 = $F4$0 + 12 | 0;
      HEAP32[$103 >> 2] = $90;
      $104 = $90 + 8 | 0;
      HEAP32[$104 >> 2] = $F4$0;
      $105 = $90 + 12 | 0;
      HEAP32[$105 >> 2] = $93;
     }
     HEAP32[2552 >> 2] = $81;
     HEAP32[2564 >> 2] = $84;
     $mem$0 = $69;
     return $mem$0 | 0;
    }
    $106 = HEAP32[2548 >> 2] | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = 0 - $106 | 0;
     $109 = $106 & $108;
     $110 = $109 + -1 | 0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = $128 + $129 | 0;
     $131 = 2848 + ($130 << 2) | 0;
     $132 = HEAP32[$131 >> 2] | 0;
     $133 = $132 + 4 | 0;
     $134 = HEAP32[$133 >> 2] | 0;
     $135 = $134 & -8;
     $136 = $135 - $4 | 0;
     $rsize$0$i = $136;
     $t$0$i = $132;
     $v$0$i = $132;
     while (1) {
      $137 = $t$0$i + 16 | 0;
      $138 = HEAP32[$137 >> 2] | 0;
      $139 = ($138 | 0) == (0 | 0);
      if ($139) {
       $140 = $t$0$i + 20 | 0;
       $141 = HEAP32[$140 >> 2] | 0;
       $142 = ($141 | 0) == (0 | 0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;
        $v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = $144 + 4 | 0;
      $145 = HEAP32[$143 >> 2] | 0;
      $146 = $145 & -8;
      $147 = $146 - $4 | 0;
      $148 = $147 >>> 0 < $rsize$0$i >>> 0;
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;
      $t$0$i = $144;
      $v$0$i = $$v$0$i;
     }
     $149 = HEAP32[2560 >> 2] | 0;
     $150 = $v$0$i$lcssa >>> 0 < $149 >>> 0;
     if ($150) {
      _abort();
     }
     $151 = $v$0$i$lcssa + $4 | 0;
     $152 = $v$0$i$lcssa >>> 0 < $151 >>> 0;
     if (!$152) {
      _abort();
     }
     $153 = $v$0$i$lcssa + 24 | 0;
     $154 = HEAP32[$153 >> 2] | 0;
     $155 = $v$0$i$lcssa + 12 | 0;
     $156 = HEAP32[$155 >> 2] | 0;
     $157 = ($156 | 0) == ($v$0$i$lcssa | 0);
     do {
      if ($157) {
       $167 = $v$0$i$lcssa + 20 | 0;
       $168 = HEAP32[$167 >> 2] | 0;
       $169 = ($168 | 0) == (0 | 0);
       if ($169) {
        $170 = $v$0$i$lcssa + 16 | 0;
        $171 = HEAP32[$170 >> 2] | 0;
        $172 = ($171 | 0) == (0 | 0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;
         $RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;
        $RP$0$i = $167;
       }
       while (1) {
        $173 = $R$0$i + 20 | 0;
        $174 = HEAP32[$173 >> 2] | 0;
        $175 = ($174 | 0) == (0 | 0);
        if (!$175) {
         $R$0$i = $174;
         $RP$0$i = $173;
         continue;
        }
        $176 = $R$0$i + 16 | 0;
        $177 = HEAP32[$176 >> 2] | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;
         $RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;
         $RP$0$i = $176;
        }
       }
       $179 = $RP$0$i$lcssa >>> 0 < $149 >>> 0;
       if ($179) {
        _abort();
       } else {
        HEAP32[$RP$0$i$lcssa >> 2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = $v$0$i$lcssa + 8 | 0;
       $159 = HEAP32[$158 >> 2] | 0;
       $160 = $159 >>> 0 < $149 >>> 0;
       if ($160) {
        _abort();
       }
       $161 = $159 + 12 | 0;
       $162 = HEAP32[$161 >> 2] | 0;
       $163 = ($162 | 0) == ($v$0$i$lcssa | 0);
       if (!$163) {
        _abort();
       }
       $164 = $156 + 8 | 0;
       $165 = HEAP32[$164 >> 2] | 0;
       $166 = ($165 | 0) == ($v$0$i$lcssa | 0);
       if ($166) {
        HEAP32[$161 >> 2] = $156;
        HEAP32[$164 >> 2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $180 = ($154 | 0) == (0 | 0);
     do {
      if (!$180) {
       $181 = $v$0$i$lcssa + 28 | 0;
       $182 = HEAP32[$181 >> 2] | 0;
       $183 = 2848 + ($182 << 2) | 0;
       $184 = HEAP32[$183 >> 2] | 0;
       $185 = ($v$0$i$lcssa | 0) == ($184 | 0);
       if ($185) {
        HEAP32[$183 >> 2] = $R$1$i;
        $cond$i = ($R$1$i | 0) == (0 | 0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[2548 >> 2] | 0;
         $189 = $188 & $187;
         HEAP32[2548 >> 2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[2560 >> 2] | 0;
        $191 = $154 >>> 0 < $190 >>> 0;
        if ($191) {
         _abort();
        }
        $192 = $154 + 16 | 0;
        $193 = HEAP32[$192 >> 2] | 0;
        $194 = ($193 | 0) == ($v$0$i$lcssa | 0);
        if ($194) {
         HEAP32[$192 >> 2] = $R$1$i;
        } else {
         $195 = $154 + 20 | 0;
         HEAP32[$195 >> 2] = $R$1$i;
        }
        $196 = ($R$1$i | 0) == (0 | 0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[2560 >> 2] | 0;
       $198 = $R$1$i >>> 0 < $197 >>> 0;
       if ($198) {
        _abort();
       }
       $199 = $R$1$i + 24 | 0;
       HEAP32[$199 >> 2] = $154;
       $200 = $v$0$i$lcssa + 16 | 0;
       $201 = HEAP32[$200 >> 2] | 0;
       $202 = ($201 | 0) == (0 | 0);
       do {
        if (!$202) {
         $203 = $201 >>> 0 < $197 >>> 0;
         if ($203) {
          _abort();
         } else {
          $204 = $R$1$i + 16 | 0;
          HEAP32[$204 >> 2] = $201;
          $205 = $201 + 24 | 0;
          HEAP32[$205 >> 2] = $R$1$i;
          break;
         }
        }
       } while (0);
       $206 = $v$0$i$lcssa + 20 | 0;
       $207 = HEAP32[$206 >> 2] | 0;
       $208 = ($207 | 0) == (0 | 0);
       if (!$208) {
        $209 = HEAP32[2560 >> 2] | 0;
        $210 = $207 >>> 0 < $209 >>> 0;
        if ($210) {
         _abort();
        } else {
         $211 = $R$1$i + 20 | 0;
         HEAP32[$211 >> 2] = $207;
         $212 = $207 + 24 | 0;
         HEAP32[$212 >> 2] = $R$1$i;
         break;
        }
       }
      }
     } while (0);
     $213 = $rsize$0$i$lcssa >>> 0 < 16;
     if ($213) {
      $214 = $rsize$0$i$lcssa + $4 | 0;
      $215 = $214 | 3;
      $216 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$216 >> 2] = $215;
      $$sum4$i = $214 + 4 | 0;
      $217 = $v$0$i$lcssa + $$sum4$i | 0;
      $218 = HEAP32[$217 >> 2] | 0;
      $219 = $218 | 1;
      HEAP32[$217 >> 2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = $v$0$i$lcssa + 4 | 0;
      HEAP32[$221 >> 2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = $v$0$i$lcssa + $$sum$i35 | 0;
      HEAP32[$223 >> 2] = $222;
      $$sum1$i = $rsize$0$i$lcssa + $4 | 0;
      $224 = $v$0$i$lcssa + $$sum1$i | 0;
      HEAP32[$224 >> 2] = $rsize$0$i$lcssa;
      $225 = HEAP32[2552 >> 2] | 0;
      $226 = ($225 | 0) == 0;
      if (!$226) {
       $227 = HEAP32[2564 >> 2] | 0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = 2584 + ($229 << 2) | 0;
       $231 = HEAP32[2544 >> 2] | 0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233 | 0) == 0;
       if ($234) {
        $235 = $231 | $232;
        HEAP32[2544 >> 2] = $235;
        $$pre$i = $229 + 2 | 0;
        $$pre8$i = 2584 + ($$pre$i << 2) | 0;
        $$pre$phi$iZ2D = $$pre8$i;
        $F1$0$i = $230;
       } else {
        $$sum3$i = $229 + 2 | 0;
        $236 = 2584 + ($$sum3$i << 2) | 0;
        $237 = HEAP32[$236 >> 2] | 0;
        $238 = HEAP32[2560 >> 2] | 0;
        $239 = $237 >>> 0 < $238 >>> 0;
        if ($239) {
         _abort();
        } else {
         $$pre$phi$iZ2D = $236;
         $F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $227;
       $240 = $F1$0$i + 12 | 0;
       HEAP32[$240 >> 2] = $227;
       $241 = $227 + 8 | 0;
       HEAP32[$241 >> 2] = $F1$0$i;
       $242 = $227 + 12 | 0;
       HEAP32[$242 >> 2] = $230;
      }
      HEAP32[2552 >> 2] = $rsize$0$i$lcssa;
      HEAP32[2564 >> 2] = $151;
     }
     $243 = $v$0$i$lcssa + 8 | 0;
     $mem$0 = $243;
     return $mem$0 | 0;
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = $bytes >>> 0 > 4294967231;
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = $bytes + 11 | 0;
    $246 = $245 & -8;
    $247 = HEAP32[2548 >> 2] | 0;
    $248 = ($247 | 0) == 0;
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = 0 - $246 | 0;
     $250 = $245 >>> 8;
     $251 = ($250 | 0) == 0;
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = $246 >>> 0 > 16777215;
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = $250 + 1048320 | 0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = $256 + 520192 | 0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = $261 + 245760 | 0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = 14 - $265 | 0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = $266 + $268 | 0;
       $270 = $269 << 1;
       $271 = $269 + 7 | 0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = 2848 + ($idx$0$i << 2) | 0;
     $276 = HEAP32[$275 >> 2] | 0;
     $277 = ($276 | 0) == (0 | 0);
     L123 : do {
      if ($277) {
       $rsize$2$i = $249;
       $t$1$i = 0;
       $v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i | 0) == 31;
       $279 = $idx$0$i >>> 1;
       $280 = 25 - $279 | 0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;
       $rst$0$i = 0;
       $sizebits$0$i = $282;
       $t$0$i14 = $276;
       $v$0$i16 = 0;
       while (1) {
        $283 = $t$0$i14 + 4 | 0;
        $284 = HEAP32[$283 >> 2] | 0;
        $285 = $284 & -8;
        $286 = $285 - $246 | 0;
        $287 = $286 >>> 0 < $rsize$0$i15 >>> 0;
        if ($287) {
         $288 = ($285 | 0) == ($246 | 0);
         if ($288) {
          $rsize$331$i = $286;
          $t$230$i = $t$0$i14;
          $v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;
          $v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;
         $v$1$i = $v$0$i16;
        }
        $289 = $t$0$i14 + 20 | 0;
        $290 = HEAP32[$289 >> 2] | 0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ($t$0$i14 + 16 | 0) + ($291 << 2) | 0;
        $293 = HEAP32[$292 >> 2] | 0;
        $294 = ($290 | 0) == (0 | 0);
        $295 = ($290 | 0) == ($293 | 0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293 | 0) == (0 | 0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;
         $t$1$i = $rst$1$i;
         $v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $297;
         $t$0$i14 = $293;
         $v$0$i16 = $v$1$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 86) {
      $298 = ($t$1$i | 0) == (0 | 0);
      $299 = ($v$2$i | 0) == (0 | 0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = 0 - $300 | 0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303 | 0) == 0;
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = 0 - $303 | 0;
       $306 = $303 & $305;
       $307 = $306 + -1 | 0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = $325 + $326 | 0;
       $328 = 2848 + ($327 << 2) | 0;
       $329 = HEAP32[$328 >> 2] | 0;
       $t$2$ph$i = $329;
       $v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;
       $v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i | 0) == (0 | 0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;
       $v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;
       $t$230$i = $t$2$ph$i;
       $v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label | 0) == 90) {
      while (1) {
       label = 0;
       $331 = $t$230$i + 4 | 0;
       $332 = HEAP32[$331 >> 2] | 0;
       $333 = $332 & -8;
       $334 = $333 - $246 | 0;
       $335 = $334 >>> 0 < $rsize$331$i >>> 0;
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = $t$230$i + 16 | 0;
       $337 = HEAP32[$336 >> 2] | 0;
       $338 = ($337 | 0) == (0 | 0);
       if (!$338) {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $337;
        $v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = $t$230$i + 20 | 0;
       $340 = HEAP32[$339 >> 2] | 0;
       $341 = ($340 | 0) == (0 | 0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;
        $v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $340;
        $v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i | 0) == (0 | 0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[2552 >> 2] | 0;
      $344 = $343 - $246 | 0;
      $345 = $rsize$3$lcssa$i >>> 0 < $344 >>> 0;
      if ($345) {
       $346 = HEAP32[2560 >> 2] | 0;
       $347 = $v$3$lcssa$i >>> 0 < $346 >>> 0;
       if ($347) {
        _abort();
       }
       $348 = $v$3$lcssa$i + $246 | 0;
       $349 = $v$3$lcssa$i >>> 0 < $348 >>> 0;
       if (!$349) {
        _abort();
       }
       $350 = $v$3$lcssa$i + 24 | 0;
       $351 = HEAP32[$350 >> 2] | 0;
       $352 = $v$3$lcssa$i + 12 | 0;
       $353 = HEAP32[$352 >> 2] | 0;
       $354 = ($353 | 0) == ($v$3$lcssa$i | 0);
       do {
        if ($354) {
         $364 = $v$3$lcssa$i + 20 | 0;
         $365 = HEAP32[$364 >> 2] | 0;
         $366 = ($365 | 0) == (0 | 0);
         if ($366) {
          $367 = $v$3$lcssa$i + 16 | 0;
          $368 = HEAP32[$367 >> 2] | 0;
          $369 = ($368 | 0) == (0 | 0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;
           $RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;
          $RP$0$i17 = $364;
         }
         while (1) {
          $370 = $R$0$i18 + 20 | 0;
          $371 = HEAP32[$370 >> 2] | 0;
          $372 = ($371 | 0) == (0 | 0);
          if (!$372) {
           $R$0$i18 = $371;
           $RP$0$i17 = $370;
           continue;
          }
          $373 = $R$0$i18 + 16 | 0;
          $374 = HEAP32[$373 >> 2] | 0;
          $375 = ($374 | 0) == (0 | 0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;
           $RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;
           $RP$0$i17 = $373;
          }
         }
         $376 = $RP$0$i17$lcssa >>> 0 < $346 >>> 0;
         if ($376) {
          _abort();
         } else {
          HEAP32[$RP$0$i17$lcssa >> 2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = $v$3$lcssa$i + 8 | 0;
         $356 = HEAP32[$355 >> 2] | 0;
         $357 = $356 >>> 0 < $346 >>> 0;
         if ($357) {
          _abort();
         }
         $358 = $356 + 12 | 0;
         $359 = HEAP32[$358 >> 2] | 0;
         $360 = ($359 | 0) == ($v$3$lcssa$i | 0);
         if (!$360) {
          _abort();
         }
         $361 = $353 + 8 | 0;
         $362 = HEAP32[$361 >> 2] | 0;
         $363 = ($362 | 0) == ($v$3$lcssa$i | 0);
         if ($363) {
          HEAP32[$358 >> 2] = $353;
          HEAP32[$361 >> 2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $377 = ($351 | 0) == (0 | 0);
       do {
        if (!$377) {
         $378 = $v$3$lcssa$i + 28 | 0;
         $379 = HEAP32[$378 >> 2] | 0;
         $380 = 2848 + ($379 << 2) | 0;
         $381 = HEAP32[$380 >> 2] | 0;
         $382 = ($v$3$lcssa$i | 0) == ($381 | 0);
         if ($382) {
          HEAP32[$380 >> 2] = $R$1$i20;
          $cond$i21 = ($R$1$i20 | 0) == (0 | 0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[2548 >> 2] | 0;
           $386 = $385 & $384;
           HEAP32[2548 >> 2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[2560 >> 2] | 0;
          $388 = $351 >>> 0 < $387 >>> 0;
          if ($388) {
           _abort();
          }
          $389 = $351 + 16 | 0;
          $390 = HEAP32[$389 >> 2] | 0;
          $391 = ($390 | 0) == ($v$3$lcssa$i | 0);
          if ($391) {
           HEAP32[$389 >> 2] = $R$1$i20;
          } else {
           $392 = $351 + 20 | 0;
           HEAP32[$392 >> 2] = $R$1$i20;
          }
          $393 = ($R$1$i20 | 0) == (0 | 0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[2560 >> 2] | 0;
         $395 = $R$1$i20 >>> 0 < $394 >>> 0;
         if ($395) {
          _abort();
         }
         $396 = $R$1$i20 + 24 | 0;
         HEAP32[$396 >> 2] = $351;
         $397 = $v$3$lcssa$i + 16 | 0;
         $398 = HEAP32[$397 >> 2] | 0;
         $399 = ($398 | 0) == (0 | 0);
         do {
          if (!$399) {
           $400 = $398 >>> 0 < $394 >>> 0;
           if ($400) {
            _abort();
           } else {
            $401 = $R$1$i20 + 16 | 0;
            HEAP32[$401 >> 2] = $398;
            $402 = $398 + 24 | 0;
            HEAP32[$402 >> 2] = $R$1$i20;
            break;
           }
          }
         } while (0);
         $403 = $v$3$lcssa$i + 20 | 0;
         $404 = HEAP32[$403 >> 2] | 0;
         $405 = ($404 | 0) == (0 | 0);
         if (!$405) {
          $406 = HEAP32[2560 >> 2] | 0;
          $407 = $404 >>> 0 < $406 >>> 0;
          if ($407) {
           _abort();
          } else {
           $408 = $R$1$i20 + 20 | 0;
           HEAP32[$408 >> 2] = $404;
           $409 = $404 + 24 | 0;
           HEAP32[$409 >> 2] = $R$1$i20;
           break;
          }
         }
        }
       } while (0);
       $410 = $rsize$3$lcssa$i >>> 0 < 16;
       L199 : do {
        if ($410) {
         $411 = $rsize$3$lcssa$i + $246 | 0;
         $412 = $411 | 3;
         $413 = $v$3$lcssa$i + 4 | 0;
         HEAP32[$413 >> 2] = $412;
         $$sum18$i = $411 + 4 | 0;
         $414 = $v$3$lcssa$i + $$sum18$i | 0;
         $415 = HEAP32[$414 >> 2] | 0;
         $416 = $415 | 1;
         HEAP32[$414 >> 2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = $v$3$lcssa$i + 4 | 0;
         HEAP32[$418 >> 2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = $v$3$lcssa$i + $$sum$i2334 | 0;
         HEAP32[$420 >> 2] = $419;
         $$sum1$i24 = $rsize$3$lcssa$i + $246 | 0;
         $421 = $v$3$lcssa$i + $$sum1$i24 | 0;
         HEAP32[$421 >> 2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = $rsize$3$lcssa$i >>> 0 < 256;
         if ($423) {
          $424 = $422 << 1;
          $425 = 2584 + ($424 << 2) | 0;
          $426 = HEAP32[2544 >> 2] | 0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428 | 0) == 0;
          if ($429) {
           $430 = $426 | $427;
           HEAP32[2544 >> 2] = $430;
           $$pre$i25 = $424 + 2 | 0;
           $$pre43$i = 2584 + ($$pre$i25 << 2) | 0;
           $$pre$phi$i26Z2D = $$pre43$i;
           $F5$0$i = $425;
          } else {
           $$sum17$i = $424 + 2 | 0;
           $431 = 2584 + ($$sum17$i << 2) | 0;
           $432 = HEAP32[$431 >> 2] | 0;
           $433 = HEAP32[2560 >> 2] | 0;
           $434 = $432 >>> 0 < $433 >>> 0;
           if ($434) {
            _abort();
           } else {
            $$pre$phi$i26Z2D = $431;
            $F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
          $435 = $F5$0$i + 12 | 0;
          HEAP32[$435 >> 2] = $348;
          $$sum15$i = $246 + 8 | 0;
          $436 = $v$3$lcssa$i + $$sum15$i | 0;
          HEAP32[$436 >> 2] = $F5$0$i;
          $$sum16$i = $246 + 12 | 0;
          $437 = $v$3$lcssa$i + $$sum16$i | 0;
          HEAP32[$437 >> 2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438 | 0) == 0;
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = $rsize$3$lcssa$i >>> 0 > 16777215;
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = $438 + 1048320 | 0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = $444 + 520192 | 0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = $449 + 245760 | 0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = 14 - $453 | 0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = $454 + $456 | 0;
           $458 = $457 << 1;
           $459 = $457 + 7 | 0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = 2848 + ($I7$0$i << 2) | 0;
         $$sum2$i = $246 + 28 | 0;
         $464 = $v$3$lcssa$i + $$sum2$i | 0;
         HEAP32[$464 >> 2] = $I7$0$i;
         $$sum3$i27 = $246 + 16 | 0;
         $465 = $v$3$lcssa$i + $$sum3$i27 | 0;
         $$sum4$i28 = $246 + 20 | 0;
         $466 = $v$3$lcssa$i + $$sum4$i28 | 0;
         HEAP32[$466 >> 2] = 0;
         HEAP32[$465 >> 2] = 0;
         $467 = HEAP32[2548 >> 2] | 0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469 | 0) == 0;
         if ($470) {
          $471 = $467 | $468;
          HEAP32[2548 >> 2] = $471;
          HEAP32[$463 >> 2] = $348;
          $$sum5$i = $246 + 24 | 0;
          $472 = $v$3$lcssa$i + $$sum5$i | 0;
          HEAP32[$472 >> 2] = $463;
          $$sum6$i = $246 + 12 | 0;
          $473 = $v$3$lcssa$i + $$sum6$i | 0;
          HEAP32[$473 >> 2] = $348;
          $$sum7$i = $246 + 8 | 0;
          $474 = $v$3$lcssa$i + $$sum7$i | 0;
          HEAP32[$474 >> 2] = $348;
          break;
         }
         $475 = HEAP32[$463 >> 2] | 0;
         $476 = $475 + 4 | 0;
         $477 = HEAP32[$476 >> 2] | 0;
         $478 = $477 & -8;
         $479 = ($478 | 0) == ($rsize$3$lcssa$i | 0);
         L217 : do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i | 0) == 31;
           $481 = $I7$0$i >>> 1;
           $482 = 25 - $481 | 0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;
           $T$028$i = $475;
           while (1) {
            $491 = $K12$029$i >>> 31;
            $492 = ($T$028$i + 16 | 0) + ($491 << 2) | 0;
            $487 = HEAP32[$492 >> 2] | 0;
            $493 = ($487 | 0) == (0 | 0);
            if ($493) {
             $$lcssa232 = $492;
             $T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = $487 + 4 | 0;
            $488 = HEAP32[$486 >> 2] | 0;
            $489 = $488 & -8;
            $490 = ($489 | 0) == ($rsize$3$lcssa$i | 0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;
             $T$028$i = $487;
            }
           }
           $494 = HEAP32[2560 >> 2] | 0;
           $495 = $$lcssa232 >>> 0 < $494 >>> 0;
           if ($495) {
            _abort();
           } else {
            HEAP32[$$lcssa232 >> 2] = $348;
            $$sum11$i = $246 + 24 | 0;
            $496 = $v$3$lcssa$i + $$sum11$i | 0;
            HEAP32[$496 >> 2] = $T$028$i$lcssa;
            $$sum12$i = $246 + 12 | 0;
            $497 = $v$3$lcssa$i + $$sum12$i | 0;
            HEAP32[$497 >> 2] = $348;
            $$sum13$i = $246 + 8 | 0;
            $498 = $v$3$lcssa$i + $$sum13$i | 0;
            HEAP32[$498 >> 2] = $348;
            break L199;
           }
          }
         } while (0);
         $499 = $T$0$lcssa$i + 8 | 0;
         $500 = HEAP32[$499 >> 2] | 0;
         $501 = HEAP32[2560 >> 2] | 0;
         $502 = $500 >>> 0 >= $501 >>> 0;
         $not$$i = $T$0$lcssa$i >>> 0 >= $501 >>> 0;
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = $500 + 12 | 0;
          HEAP32[$504 >> 2] = $348;
          HEAP32[$499 >> 2] = $348;
          $$sum8$i = $246 + 8 | 0;
          $505 = $v$3$lcssa$i + $$sum8$i | 0;
          HEAP32[$505 >> 2] = $500;
          $$sum9$i = $246 + 12 | 0;
          $506 = $v$3$lcssa$i + $$sum9$i | 0;
          HEAP32[$506 >> 2] = $T$0$lcssa$i;
          $$sum10$i = $246 + 24 | 0;
          $507 = $v$3$lcssa$i + $$sum10$i | 0;
          HEAP32[$507 >> 2] = 0;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $508 = $v$3$lcssa$i + 8 | 0;
       $mem$0 = $508;
       return $mem$0 | 0;
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while (0);
 $509 = HEAP32[2552 >> 2] | 0;
 $510 = $509 >>> 0 < $nb$0 >>> 0;
 if (!$510) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[2564 >> 2] | 0;
  $513 = $511 >>> 0 > 15;
  if ($513) {
   $514 = $512 + $nb$0 | 0;
   HEAP32[2564 >> 2] = $514;
   HEAP32[2552 >> 2] = $511;
   $515 = $511 | 1;
   $$sum2 = $nb$0 + 4 | 0;
   $516 = $512 + $$sum2 | 0;
   HEAP32[$516 >> 2] = $515;
   $517 = $512 + $509 | 0;
   HEAP32[$517 >> 2] = $511;
   $518 = $nb$0 | 3;
   $519 = $512 + 4 | 0;
   HEAP32[$519 >> 2] = $518;
  } else {
   HEAP32[2552 >> 2] = 0;
   HEAP32[2564 >> 2] = 0;
   $520 = $509 | 3;
   $521 = $512 + 4 | 0;
   HEAP32[$521 >> 2] = $520;
   $$sum1 = $509 + 4 | 0;
   $522 = $512 + $$sum1 | 0;
   $523 = HEAP32[$522 >> 2] | 0;
   $524 = $523 | 1;
   HEAP32[$522 >> 2] = $524;
  }
  $525 = $512 + 8 | 0;
  $mem$0 = $525;
  return $mem$0 | 0;
 }
 $526 = HEAP32[2556 >> 2] | 0;
 $527 = $526 >>> 0 > $nb$0 >>> 0;
 if ($527) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[2556 >> 2] = $528;
  $529 = HEAP32[2568 >> 2] | 0;
  $530 = $529 + $nb$0 | 0;
  HEAP32[2568 >> 2] = $530;
  $531 = $528 | 1;
  $$sum = $nb$0 + 4 | 0;
  $532 = $529 + $$sum | 0;
  HEAP32[$532 >> 2] = $531;
  $533 = $nb$0 | 3;
  $534 = $529 + 4 | 0;
  HEAP32[$534 >> 2] = $533;
  $535 = $529 + 8 | 0;
  $mem$0 = $535;
  return $mem$0 | 0;
 }
 $536 = HEAP32[3016 >> 2] | 0;
 $537 = ($536 | 0) == 0;
 do {
  if ($537) {
   $538 = _sysconf(30) | 0;
   $539 = $538 + -1 | 0;
   $540 = $539 & $538;
   $541 = ($540 | 0) == 0;
   if ($541) {
    HEAP32[3024 >> 2] = $538;
    HEAP32[3020 >> 2] = $538;
    HEAP32[3028 >> 2] = -1;
    HEAP32[3032 >> 2] = -1;
    HEAP32[3036 >> 2] = 0;
    HEAP32[2988 >> 2] = 0;
    $542 = _time(0 | 0) | 0;
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[3016 >> 2] = $544;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[3024 >> 2] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 $551 = $550 >>> 0 > $nb$0 >>> 0;
 if (!$551) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = HEAP32[2984 >> 2] | 0;
 $553 = ($552 | 0) == 0;
 if (!$553) {
  $554 = HEAP32[2976 >> 2] | 0;
  $555 = $554 + $550 | 0;
  $556 = $555 >>> 0 <= $554 >>> 0;
  $557 = $555 >>> 0 > $552 >>> 0;
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 $558 = HEAP32[2988 >> 2] | 0;
 $559 = $558 & 4;
 $560 = ($559 | 0) == 0;
 L258 : do {
  if ($560) {
   $561 = HEAP32[2568 >> 2] | 0;
   $562 = ($561 | 0) == (0 | 0);
   L260 : do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = 2992;
     while (1) {
      $563 = HEAP32[$sp$0$i$i >> 2] | 0;
      $564 = $563 >>> 0 > $561 >>> 0;
      if (!$564) {
       $565 = $sp$0$i$i + 4 | 0;
       $566 = HEAP32[$565 >> 2] | 0;
       $567 = $563 + $566 | 0;
       $568 = $567 >>> 0 > $561 >>> 0;
       if ($568) {
        $$lcssa228 = $sp$0$i$i;
        $$lcssa230 = $565;
        break;
       }
      }
      $569 = $sp$0$i$i + 8 | 0;
      $570 = HEAP32[$569 >> 2] | 0;
      $571 = ($570 | 0) == (0 | 0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[2556 >> 2] | 0;
     $595 = $548 - $594 | 0;
     $596 = $595 & $549;
     $597 = $596 >>> 0 < 2147483647;
     if ($597) {
      $598 = _sbrk($596 | 0) | 0;
      $599 = HEAP32[$$lcssa228 >> 2] | 0;
      $600 = HEAP32[$$lcssa230 >> 2] | 0;
      $601 = $599 + $600 | 0;
      $602 = ($598 | 0) == ($601 | 0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598 | 0) == (-1 | 0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;
        $tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;
       $ssize$1$ph$i = $596;
       $tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 174) {
     $572 = _sbrk(0) | 0;
     $573 = ($572 | 0) == (-1 | 0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[3020 >> 2] | 0;
      $576 = $575 + -1 | 0;
      $577 = $576 & $574;
      $578 = ($577 | 0) == 0;
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = $576 + $574 | 0;
       $580 = 0 - $575 | 0;
       $581 = $579 & $580;
       $582 = $550 - $574 | 0;
       $583 = $582 + $581 | 0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[2976 >> 2] | 0;
      $585 = $584 + $ssize$0$i | 0;
      $586 = $ssize$0$i >>> 0 > $nb$0 >>> 0;
      $587 = $ssize$0$i >>> 0 < 2147483647;
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[2984 >> 2] | 0;
       $589 = ($588 | 0) == 0;
       if (!$589) {
        $590 = $585 >>> 0 <= $584 >>> 0;
        $591 = $585 >>> 0 > $588 >>> 0;
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = _sbrk($ssize$0$i | 0) | 0;
       $593 = ($592 | 0) == ($572 | 0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;
        $tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;
        $ssize$1$ph$i = $ssize$0$i;
        $tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while (0);
   L280 : do {
    if ((label | 0) == 184) {
     $604 = 0 - $ssize$1$ph$i | 0;
     $605 = ($br$0$ph$i | 0) != (-1 | 0);
     $606 = $ssize$1$ph$i >>> 0 < 2147483647;
     $or$cond5$i = $606 & $605;
     $607 = $545 >>> 0 > $ssize$1$ph$i >>> 0;
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[3024 >> 2] | 0;
       $609 = $547 - $ssize$1$ph$i | 0;
       $610 = $609 + $608 | 0;
       $611 = 0 - $608 | 0;
       $612 = $610 & $611;
       $613 = $612 >>> 0 < 2147483647;
       if ($613) {
        $614 = _sbrk($612 | 0) | 0;
        $615 = ($614 | 0) == (-1 | 0);
        if ($615) {
         _sbrk($604 | 0) | 0;
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = $612 + $ssize$1$ph$i | 0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while (0);
     $617 = ($br$0$ph$i | 0) == (-1 | 0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;
      $tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while (0);
   $618 = HEAP32[2988 >> 2] | 0;
   $619 = $618 | 4;
   HEAP32[2988 >> 2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while (0);
 if ((label | 0) == 191) {
  $620 = $550 >>> 0 < 2147483647;
  if ($620) {
   $621 = _sbrk($550 | 0) | 0;
   $622 = _sbrk(0) | 0;
   $623 = ($621 | 0) != (-1 | 0);
   $624 = ($622 | 0) != (-1 | 0);
   $or$cond3$i = $623 & $624;
   $625 = $621 >>> 0 < $622 >>> 0;
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = $626 - $627 | 0;
    $629 = $nb$0 + 40 | 0;
    $630 = $628 >>> 0 > $629 >>> 0;
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;
     $tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label | 0) == 194) {
  $631 = HEAP32[2976 >> 2] | 0;
  $632 = $631 + $tsize$254$i | 0;
  HEAP32[2976 >> 2] = $632;
  $633 = HEAP32[2980 >> 2] | 0;
  $634 = $632 >>> 0 > $633 >>> 0;
  if ($634) {
   HEAP32[2980 >> 2] = $632;
  }
  $635 = HEAP32[2568 >> 2] | 0;
  $636 = ($635 | 0) == (0 | 0);
  L299 : do {
   if ($636) {
    $637 = HEAP32[2560 >> 2] | 0;
    $638 = ($637 | 0) == (0 | 0);
    $639 = $tbase$255$i >>> 0 < $637 >>> 0;
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[2560 >> 2] = $tbase$255$i;
    }
    HEAP32[2992 >> 2] = $tbase$255$i;
    HEAP32[2996 >> 2] = $tsize$254$i;
    HEAP32[3004 >> 2] = 0;
    $640 = HEAP32[3016 >> 2] | 0;
    HEAP32[2580 >> 2] = $640;
    HEAP32[2576 >> 2] = -1;
    $i$02$i$i = 0;
    while (1) {
     $641 = $i$02$i$i << 1;
     $642 = 2584 + ($641 << 2) | 0;
     $$sum$i$i = $641 + 3 | 0;
     $643 = 2584 + ($$sum$i$i << 2) | 0;
     HEAP32[$643 >> 2] = $642;
     $$sum1$i$i = $641 + 2 | 0;
     $644 = 2584 + ($$sum1$i$i << 2) | 0;
     HEAP32[$644 >> 2] = $642;
     $645 = $i$02$i$i + 1 | 0;
     $exitcond$i$i = ($645 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = $tsize$254$i + -40 | 0;
    $647 = $tbase$255$i + 8 | 0;
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649 | 0) == 0;
    $651 = 0 - $648 | 0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = $tbase$255$i + $653 | 0;
    $655 = $646 - $653 | 0;
    HEAP32[2568 >> 2] = $654;
    HEAP32[2556 >> 2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = $653 + 4 | 0;
    $657 = $tbase$255$i + $$sum$i13$i | 0;
    HEAP32[$657 >> 2] = $656;
    $$sum2$i$i = $tsize$254$i + -36 | 0;
    $658 = $tbase$255$i + $$sum2$i$i | 0;
    HEAP32[$658 >> 2] = 40;
    $659 = HEAP32[3032 >> 2] | 0;
    HEAP32[2572 >> 2] = $659;
   } else {
    $sp$084$i = 2992;
    while (1) {
     $660 = HEAP32[$sp$084$i >> 2] | 0;
     $661 = $sp$084$i + 4 | 0;
     $662 = HEAP32[$661 >> 2] | 0;
     $663 = $660 + $662 | 0;
     $664 = ($tbase$255$i | 0) == ($663 | 0);
     if ($664) {
      $$lcssa222 = $660;
      $$lcssa224 = $661;
      $$lcssa226 = $662;
      $sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = $sp$084$i + 8 | 0;
     $666 = HEAP32[$665 >> 2] | 0;
     $667 = ($666 | 0) == (0 | 0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label | 0) == 204) {
     $668 = $sp$084$i$lcssa + 12 | 0;
     $669 = HEAP32[$668 >> 2] | 0;
     $670 = $669 & 8;
     $671 = ($670 | 0) == 0;
     if ($671) {
      $672 = $635 >>> 0 >= $$lcssa222 >>> 0;
      $673 = $635 >>> 0 < $tbase$255$i >>> 0;
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = $$lcssa226 + $tsize$254$i | 0;
       HEAP32[$$lcssa224 >> 2] = $674;
       $675 = HEAP32[2556 >> 2] | 0;
       $676 = $675 + $tsize$254$i | 0;
       $677 = $635 + 8 | 0;
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679 | 0) == 0;
       $681 = 0 - $678 | 0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = $635 + $683 | 0;
       $685 = $676 - $683 | 0;
       HEAP32[2568 >> 2] = $684;
       HEAP32[2556 >> 2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = $683 + 4 | 0;
       $687 = $635 + $$sum$i17$i | 0;
       HEAP32[$687 >> 2] = $686;
       $$sum2$i18$i = $676 + 4 | 0;
       $688 = $635 + $$sum2$i18$i | 0;
       HEAP32[$688 >> 2] = 40;
       $689 = HEAP32[3032 >> 2] | 0;
       HEAP32[2572 >> 2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[2560 >> 2] | 0;
    $691 = $tbase$255$i >>> 0 < $690 >>> 0;
    if ($691) {
     HEAP32[2560 >> 2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = $tbase$255$i + $tsize$254$i | 0;
    $sp$183$i = 2992;
    while (1) {
     $693 = HEAP32[$sp$183$i >> 2] | 0;
     $694 = ($693 | 0) == ($692 | 0);
     if ($694) {
      $$lcssa219 = $sp$183$i;
      $sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = $sp$183$i + 8 | 0;
     $696 = HEAP32[$695 >> 2] | 0;
     $697 = ($696 | 0) == (0 | 0);
     if ($697) {
      $sp$0$i$i$i = 2992;
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label | 0) == 212) {
     $698 = $sp$183$i$lcssa + 12 | 0;
     $699 = HEAP32[$698 >> 2] | 0;
     $700 = $699 & 8;
     $701 = ($700 | 0) == 0;
     if ($701) {
      HEAP32[$$lcssa219 >> 2] = $tbase$255$i;
      $702 = $sp$183$i$lcssa + 4 | 0;
      $703 = HEAP32[$702 >> 2] | 0;
      $704 = $703 + $tsize$254$i | 0;
      HEAP32[$702 >> 2] = $704;
      $705 = $tbase$255$i + 8 | 0;
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707 | 0) == 0;
      $709 = 0 - $706 | 0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = $tbase$255$i + $711 | 0;
      $$sum112$i = $tsize$254$i + 8 | 0;
      $713 = $tbase$255$i + $$sum112$i | 0;
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715 | 0) == 0;
      $717 = 0 - $714 | 0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = $719 + $tsize$254$i | 0;
      $720 = $tbase$255$i + $$sum113$i | 0;
      $721 = $720;
      $722 = $712;
      $723 = $721 - $722 | 0;
      $$sum$i19$i = $711 + $nb$0 | 0;
      $724 = $tbase$255$i + $$sum$i19$i | 0;
      $725 = $723 - $nb$0 | 0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = $711 + 4 | 0;
      $727 = $tbase$255$i + $$sum1$i20$i | 0;
      HEAP32[$727 >> 2] = $726;
      $728 = ($720 | 0) == ($635 | 0);
      L324 : do {
       if ($728) {
        $729 = HEAP32[2556 >> 2] | 0;
        $730 = $729 + $725 | 0;
        HEAP32[2556 >> 2] = $730;
        HEAP32[2568 >> 2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = $$sum$i19$i + 4 | 0;
        $732 = $tbase$255$i + $$sum42$i$i | 0;
        HEAP32[$732 >> 2] = $731;
       } else {
        $733 = HEAP32[2564 >> 2] | 0;
        $734 = ($720 | 0) == ($733 | 0);
        if ($734) {
         $735 = HEAP32[2552 >> 2] | 0;
         $736 = $735 + $725 | 0;
         HEAP32[2552 >> 2] = $736;
         HEAP32[2564 >> 2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = $$sum$i19$i + 4 | 0;
         $738 = $tbase$255$i + $$sum40$i$i | 0;
         HEAP32[$738 >> 2] = $737;
         $$sum41$i$i = $736 + $$sum$i19$i | 0;
         $739 = $tbase$255$i + $$sum41$i$i | 0;
         HEAP32[$739 >> 2] = $736;
         break;
        }
        $$sum2$i21$i = $tsize$254$i + 4 | 0;
        $$sum114$i = $$sum2$i21$i + $719 | 0;
        $740 = $tbase$255$i + $$sum114$i | 0;
        $741 = HEAP32[$740 >> 2] | 0;
        $742 = $741 & 3;
        $743 = ($742 | 0) == 1;
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = $741 >>> 0 < 256;
         L332 : do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = $$sum3738$i$i + $tsize$254$i | 0;
           $747 = $tbase$255$i + $$sum124$i | 0;
           $748 = HEAP32[$747 >> 2] | 0;
           $$sum39$i$i = $tsize$254$i + 12 | 0;
           $$sum125$i = $$sum39$i$i + $719 | 0;
           $749 = $tbase$255$i + $$sum125$i | 0;
           $750 = HEAP32[$749 >> 2] | 0;
           $751 = $745 << 1;
           $752 = 2584 + ($751 << 2) | 0;
           $753 = ($748 | 0) == ($752 | 0);
           do {
            if (!$753) {
             $754 = $748 >>> 0 < $755 >>> 0;
             if ($754) {
              _abort();
             }
             $756 = $748 + 12 | 0;
             $757 = HEAP32[$756 >> 2] | 0;
             $758 = ($757 | 0) == ($720 | 0);
             if ($758) {
              break;
             }
             _abort();
            }
           } while (0);
           $759 = ($750 | 0) == ($748 | 0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[2544 >> 2] | 0;
            $763 = $762 & $761;
            HEAP32[2544 >> 2] = $763;
            break;
           }
           $764 = ($750 | 0) == ($752 | 0);
           do {
            if ($764) {
             $$pre57$i$i = $750 + 8 | 0;
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = $750 >>> 0 < $755 >>> 0;
             if ($765) {
              _abort();
             }
             $766 = $750 + 8 | 0;
             $767 = HEAP32[$766 >> 2] | 0;
             $768 = ($767 | 0) == ($720 | 0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
            }
           } while (0);
           $769 = $748 + 12 | 0;
           HEAP32[$769 >> 2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D >> 2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = $$sum34$i$i + $tsize$254$i | 0;
           $770 = $tbase$255$i + $$sum115$i | 0;
           $771 = HEAP32[$770 >> 2] | 0;
           $$sum5$i$i = $tsize$254$i + 12 | 0;
           $$sum116$i = $$sum5$i$i + $719 | 0;
           $772 = $tbase$255$i + $$sum116$i | 0;
           $773 = HEAP32[$772 >> 2] | 0;
           $774 = ($773 | 0) == ($720 | 0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = $$sum2$i21$i + $$sum67$i$i | 0;
             $784 = $tbase$255$i + $$sum122$i | 0;
             $785 = HEAP32[$784 >> 2] | 0;
             $786 = ($785 | 0) == (0 | 0);
             if ($786) {
              $$sum123$i = $$sum67$i$i + $tsize$254$i | 0;
              $787 = $tbase$255$i + $$sum123$i | 0;
              $788 = HEAP32[$787 >> 2] | 0;
              $789 = ($788 | 0) == (0 | 0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;
               $RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;
              $RP$0$i$i = $784;
             }
             while (1) {
              $790 = $R$0$i$i + 20 | 0;
              $791 = HEAP32[$790 >> 2] | 0;
              $792 = ($791 | 0) == (0 | 0);
              if (!$792) {
               $R$0$i$i = $791;
               $RP$0$i$i = $790;
               continue;
              }
              $793 = $R$0$i$i + 16 | 0;
              $794 = HEAP32[$793 >> 2] | 0;
              $795 = ($794 | 0) == (0 | 0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;
               $RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;
               $RP$0$i$i = $793;
              }
             }
             $796 = $RP$0$i$i$lcssa >>> 0 < $755 >>> 0;
             if ($796) {
              _abort();
             } else {
              HEAP32[$RP$0$i$i$lcssa >> 2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = $$sum3536$i$i + $tsize$254$i | 0;
             $775 = $tbase$255$i + $$sum117$i | 0;
             $776 = HEAP32[$775 >> 2] | 0;
             $777 = $776 >>> 0 < $755 >>> 0;
             if ($777) {
              _abort();
             }
             $778 = $776 + 12 | 0;
             $779 = HEAP32[$778 >> 2] | 0;
             $780 = ($779 | 0) == ($720 | 0);
             if (!$780) {
              _abort();
             }
             $781 = $773 + 8 | 0;
             $782 = HEAP32[$781 >> 2] | 0;
             $783 = ($782 | 0) == ($720 | 0);
             if ($783) {
              HEAP32[$778 >> 2] = $773;
              HEAP32[$781 >> 2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           $797 = ($771 | 0) == (0 | 0);
           if ($797) {
            break;
           }
           $$sum30$i$i = $tsize$254$i + 28 | 0;
           $$sum118$i = $$sum30$i$i + $719 | 0;
           $798 = $tbase$255$i + $$sum118$i | 0;
           $799 = HEAP32[$798 >> 2] | 0;
           $800 = 2848 + ($799 << 2) | 0;
           $801 = HEAP32[$800 >> 2] | 0;
           $802 = ($720 | 0) == ($801 | 0);
           do {
            if ($802) {
             HEAP32[$800 >> 2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[2548 >> 2] | 0;
             $806 = $805 & $804;
             HEAP32[2548 >> 2] = $806;
             break L332;
            } else {
             $807 = HEAP32[2560 >> 2] | 0;
             $808 = $771 >>> 0 < $807 >>> 0;
             if ($808) {
              _abort();
             }
             $809 = $771 + 16 | 0;
             $810 = HEAP32[$809 >> 2] | 0;
             $811 = ($810 | 0) == ($720 | 0);
             if ($811) {
              HEAP32[$809 >> 2] = $R$1$i$i;
             } else {
              $812 = $771 + 20 | 0;
              HEAP32[$812 >> 2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i | 0) == (0 | 0);
             if ($813) {
              break L332;
             }
            }
           } while (0);
           $814 = HEAP32[2560 >> 2] | 0;
           $815 = $R$1$i$i >>> 0 < $814 >>> 0;
           if ($815) {
            _abort();
           }
           $816 = $R$1$i$i + 24 | 0;
           HEAP32[$816 >> 2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = $$sum3132$i$i + $tsize$254$i | 0;
           $817 = $tbase$255$i + $$sum119$i | 0;
           $818 = HEAP32[$817 >> 2] | 0;
           $819 = ($818 | 0) == (0 | 0);
           do {
            if (!$819) {
             $820 = $818 >>> 0 < $814 >>> 0;
             if ($820) {
              _abort();
             } else {
              $821 = $R$1$i$i + 16 | 0;
              HEAP32[$821 >> 2] = $818;
              $822 = $818 + 24 | 0;
              HEAP32[$822 >> 2] = $R$1$i$i;
              break;
             }
            }
           } while (0);
           $$sum120$i = $$sum2$i21$i + $$sum3132$i$i | 0;
           $823 = $tbase$255$i + $$sum120$i | 0;
           $824 = HEAP32[$823 >> 2] | 0;
           $825 = ($824 | 0) == (0 | 0);
           if ($825) {
            break;
           }
           $826 = HEAP32[2560 >> 2] | 0;
           $827 = $824 >>> 0 < $826 >>> 0;
           if ($827) {
            _abort();
           } else {
            $828 = $R$1$i$i + 20 | 0;
            HEAP32[$828 >> 2] = $824;
            $829 = $824 + 24 | 0;
            HEAP32[$829 >> 2] = $R$1$i$i;
            break;
           }
          }
         } while (0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = $$sum9$i$i + $tsize$254$i | 0;
         $830 = $tbase$255$i + $$sum121$i | 0;
         $831 = $744 + $725 | 0;
         $oldfirst$0$i$i = $830;
         $qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;
         $qsize$0$i$i = $725;
        }
        $832 = $oldfirst$0$i$i + 4 | 0;
        $833 = HEAP32[$832 >> 2] | 0;
        $834 = $833 & -2;
        HEAP32[$832 >> 2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = $$sum$i19$i + 4 | 0;
        $836 = $tbase$255$i + $$sum10$i$i | 0;
        HEAP32[$836 >> 2] = $835;
        $$sum11$i$i = $qsize$0$i$i + $$sum$i19$i | 0;
        $837 = $tbase$255$i + $$sum11$i$i | 0;
        HEAP32[$837 >> 2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = $qsize$0$i$i >>> 0 < 256;
        if ($839) {
         $840 = $838 << 1;
         $841 = 2584 + ($840 << 2) | 0;
         $842 = HEAP32[2544 >> 2] | 0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844 | 0) == 0;
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[2544 >> 2] = $846;
           $$pre$i22$i = $840 + 2 | 0;
           $$pre56$i$i = 2584 + ($$pre$i22$i << 2) | 0;
           $$pre$phi$i23$iZ2D = $$pre56$i$i;
           $F4$0$i$i = $841;
          } else {
           $$sum29$i$i = $840 + 2 | 0;
           $847 = 2584 + ($$sum29$i$i << 2) | 0;
           $848 = HEAP32[$847 >> 2] | 0;
           $849 = HEAP32[2560 >> 2] | 0;
           $850 = $848 >>> 0 < $849 >>> 0;
           if (!$850) {
            $$pre$phi$i23$iZ2D = $847;
            $F4$0$i$i = $848;
            break;
           }
           _abort();
          }
         } while (0);
         HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724;
         $851 = $F4$0$i$i + 12 | 0;
         HEAP32[$851 >> 2] = $724;
         $$sum27$i$i = $$sum$i19$i + 8 | 0;
         $852 = $tbase$255$i + $$sum27$i$i | 0;
         HEAP32[$852 >> 2] = $F4$0$i$i;
         $$sum28$i$i = $$sum$i19$i + 12 | 0;
         $853 = $tbase$255$i + $$sum28$i$i | 0;
         HEAP32[$853 >> 2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854 | 0) == 0;
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = $qsize$0$i$i >>> 0 > 16777215;
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = $854 + 1048320 | 0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = $860 + 520192 | 0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = $865 + 245760 | 0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = 14 - $869 | 0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = $870 + $872 | 0;
          $874 = $873 << 1;
          $875 = $873 + 7 | 0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while (0);
        $879 = 2848 + ($I7$0$i$i << 2) | 0;
        $$sum12$i$i = $$sum$i19$i + 28 | 0;
        $880 = $tbase$255$i + $$sum12$i$i | 0;
        HEAP32[$880 >> 2] = $I7$0$i$i;
        $$sum13$i$i = $$sum$i19$i + 16 | 0;
        $881 = $tbase$255$i + $$sum13$i$i | 0;
        $$sum14$i$i = $$sum$i19$i + 20 | 0;
        $882 = $tbase$255$i + $$sum14$i$i | 0;
        HEAP32[$882 >> 2] = 0;
        HEAP32[$881 >> 2] = 0;
        $883 = HEAP32[2548 >> 2] | 0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885 | 0) == 0;
        if ($886) {
         $887 = $883 | $884;
         HEAP32[2548 >> 2] = $887;
         HEAP32[$879 >> 2] = $724;
         $$sum15$i$i = $$sum$i19$i + 24 | 0;
         $888 = $tbase$255$i + $$sum15$i$i | 0;
         HEAP32[$888 >> 2] = $879;
         $$sum16$i$i = $$sum$i19$i + 12 | 0;
         $889 = $tbase$255$i + $$sum16$i$i | 0;
         HEAP32[$889 >> 2] = $724;
         $$sum17$i$i = $$sum$i19$i + 8 | 0;
         $890 = $tbase$255$i + $$sum17$i$i | 0;
         HEAP32[$890 >> 2] = $724;
         break;
        }
        $891 = HEAP32[$879 >> 2] | 0;
        $892 = $891 + 4 | 0;
        $893 = HEAP32[$892 >> 2] | 0;
        $894 = $893 & -8;
        $895 = ($894 | 0) == ($qsize$0$i$i | 0);
        L418 : do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i | 0) == 31;
          $897 = $I7$0$i$i >>> 1;
          $898 = 25 - $897 | 0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;
          $T$050$i$i = $891;
          while (1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = ($T$050$i$i + 16 | 0) + ($907 << 2) | 0;
           $903 = HEAP32[$908 >> 2] | 0;
           $909 = ($903 | 0) == (0 | 0);
           if ($909) {
            $$lcssa = $908;
            $T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = $903 + 4 | 0;
           $904 = HEAP32[$902 >> 2] | 0;
           $905 = $904 & -8;
           $906 = ($905 | 0) == ($qsize$0$i$i | 0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;
            $T$050$i$i = $903;
           }
          }
          $910 = HEAP32[2560 >> 2] | 0;
          $911 = $$lcssa >>> 0 < $910 >>> 0;
          if ($911) {
           _abort();
          } else {
           HEAP32[$$lcssa >> 2] = $724;
           $$sum23$i$i = $$sum$i19$i + 24 | 0;
           $912 = $tbase$255$i + $$sum23$i$i | 0;
           HEAP32[$912 >> 2] = $T$050$i$i$lcssa;
           $$sum24$i$i = $$sum$i19$i + 12 | 0;
           $913 = $tbase$255$i + $$sum24$i$i | 0;
           HEAP32[$913 >> 2] = $724;
           $$sum25$i$i = $$sum$i19$i + 8 | 0;
           $914 = $tbase$255$i + $$sum25$i$i | 0;
           HEAP32[$914 >> 2] = $724;
           break L324;
          }
         }
        } while (0);
        $915 = $T$0$lcssa$i25$i + 8 | 0;
        $916 = HEAP32[$915 >> 2] | 0;
        $917 = HEAP32[2560 >> 2] | 0;
        $918 = $916 >>> 0 >= $917 >>> 0;
        $not$$i26$i = $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0;
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = $916 + 12 | 0;
         HEAP32[$920 >> 2] = $724;
         HEAP32[$915 >> 2] = $724;
         $$sum20$i$i = $$sum$i19$i + 8 | 0;
         $921 = $tbase$255$i + $$sum20$i$i | 0;
         HEAP32[$921 >> 2] = $916;
         $$sum21$i$i = $$sum$i19$i + 12 | 0;
         $922 = $tbase$255$i + $$sum21$i$i | 0;
         HEAP32[$922 >> 2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = $$sum$i19$i + 24 | 0;
         $923 = $tbase$255$i + $$sum22$i$i | 0;
         HEAP32[$923 >> 2] = 0;
         break;
        } else {
         _abort();
        }
       }
      } while (0);
      $$sum1819$i$i = $711 | 8;
      $924 = $tbase$255$i + $$sum1819$i$i | 0;
      $mem$0 = $924;
      return $mem$0 | 0;
     } else {
      $sp$0$i$i$i = 2992;
     }
    }
    while (1) {
     $925 = HEAP32[$sp$0$i$i$i >> 2] | 0;
     $926 = $925 >>> 0 > $635 >>> 0;
     if (!$926) {
      $927 = $sp$0$i$i$i + 4 | 0;
      $928 = HEAP32[$927 >> 2] | 0;
      $929 = $925 + $928 | 0;
      $930 = $929 >>> 0 > $635 >>> 0;
      if ($930) {
       $$lcssa215 = $925;
       $$lcssa216 = $928;
       $$lcssa217 = $929;
       break;
      }
     }
     $931 = $sp$0$i$i$i + 8 | 0;
     $932 = HEAP32[$931 >> 2] | 0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = $$lcssa216 + -47 | 0;
    $$sum1$i15$i = $$lcssa216 + -39 | 0;
    $933 = $$lcssa215 + $$sum1$i15$i | 0;
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935 | 0) == 0;
    $937 = 0 - $934 | 0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = $$sum$i14$i + $939 | 0;
    $940 = $$lcssa215 + $$sum2$i16$i | 0;
    $941 = $635 + 16 | 0;
    $942 = $940 >>> 0 < $941 >>> 0;
    $943 = $942 ? $635 : $940;
    $944 = $943 + 8 | 0;
    $945 = $tsize$254$i + -40 | 0;
    $946 = $tbase$255$i + 8 | 0;
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948 | 0) == 0;
    $950 = 0 - $947 | 0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = $tbase$255$i + $952 | 0;
    $954 = $945 - $952 | 0;
    HEAP32[2568 >> 2] = $953;
    HEAP32[2556 >> 2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = $952 + 4 | 0;
    $956 = $tbase$255$i + $$sum$i$i$i | 0;
    HEAP32[$956 >> 2] = $955;
    $$sum2$i$i$i = $tsize$254$i + -36 | 0;
    $957 = $tbase$255$i + $$sum2$i$i$i | 0;
    HEAP32[$957 >> 2] = 40;
    $958 = HEAP32[3032 >> 2] | 0;
    HEAP32[2572 >> 2] = $958;
    $959 = $943 + 4 | 0;
    HEAP32[$959 >> 2] = 27;
    HEAP32[$944 >> 2] = HEAP32[2992 >> 2] | 0;
    HEAP32[$944 + 4 >> 2] = HEAP32[2992 + 4 >> 2] | 0;
    HEAP32[$944 + 8 >> 2] = HEAP32[2992 + 8 >> 2] | 0;
    HEAP32[$944 + 12 >> 2] = HEAP32[2992 + 12 >> 2] | 0;
    HEAP32[2992 >> 2] = $tbase$255$i;
    HEAP32[2996 >> 2] = $tsize$254$i;
    HEAP32[3004 >> 2] = 0;
    HEAP32[3e3 >> 2] = $944;
    $960 = $943 + 28 | 0;
    HEAP32[$960 >> 2] = 7;
    $961 = $943 + 32 | 0;
    $962 = $961 >>> 0 < $$lcssa217 >>> 0;
    if ($962) {
     $964 = $960;
     while (1) {
      $963 = $964 + 4 | 0;
      HEAP32[$963 >> 2] = 7;
      $965 = $964 + 8 | 0;
      $966 = $965 >>> 0 < $$lcssa217 >>> 0;
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943 | 0) == ($635 | 0);
    if (!$967) {
     $968 = $943;
     $969 = $635;
     $970 = $968 - $969 | 0;
     $971 = HEAP32[$959 >> 2] | 0;
     $972 = $971 & -2;
     HEAP32[$959 >> 2] = $972;
     $973 = $970 | 1;
     $974 = $635 + 4 | 0;
     HEAP32[$974 >> 2] = $973;
     HEAP32[$943 >> 2] = $970;
     $975 = $970 >>> 3;
     $976 = $970 >>> 0 < 256;
     if ($976) {
      $977 = $975 << 1;
      $978 = 2584 + ($977 << 2) | 0;
      $979 = HEAP32[2544 >> 2] | 0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981 | 0) == 0;
      if ($982) {
       $983 = $979 | $980;
       HEAP32[2544 >> 2] = $983;
       $$pre$i$i = $977 + 2 | 0;
       $$pre14$i$i = 2584 + ($$pre$i$i << 2) | 0;
       $$pre$phi$i$iZ2D = $$pre14$i$i;
       $F$0$i$i = $978;
      } else {
       $$sum4$i$i = $977 + 2 | 0;
       $984 = 2584 + ($$sum4$i$i << 2) | 0;
       $985 = HEAP32[$984 >> 2] | 0;
       $986 = HEAP32[2560 >> 2] | 0;
       $987 = $985 >>> 0 < $986 >>> 0;
       if ($987) {
        _abort();
       } else {
        $$pre$phi$i$iZ2D = $984;
        $F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
      $988 = $F$0$i$i + 12 | 0;
      HEAP32[$988 >> 2] = $635;
      $989 = $635 + 8 | 0;
      HEAP32[$989 >> 2] = $F$0$i$i;
      $990 = $635 + 12 | 0;
      HEAP32[$990 >> 2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991 | 0) == 0;
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = $970 >>> 0 > 16777215;
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = $991 + 1048320 | 0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = $997 + 520192 | 0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = $1002 + 245760 | 0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = 14 - $1006 | 0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = $1007 + $1009 | 0;
       $1011 = $1010 << 1;
       $1012 = $1010 + 7 | 0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = 2848 + ($I1$0$i$i << 2) | 0;
     $1017 = $635 + 28 | 0;
     HEAP32[$1017 >> 2] = $I1$0$i$i;
     $1018 = $635 + 20 | 0;
     HEAP32[$1018 >> 2] = 0;
     HEAP32[$941 >> 2] = 0;
     $1019 = HEAP32[2548 >> 2] | 0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021 | 0) == 0;
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[2548 >> 2] = $1023;
      HEAP32[$1016 >> 2] = $635;
      $1024 = $635 + 24 | 0;
      HEAP32[$1024 >> 2] = $1016;
      $1025 = $635 + 12 | 0;
      HEAP32[$1025 >> 2] = $635;
      $1026 = $635 + 8 | 0;
      HEAP32[$1026 >> 2] = $635;
      break;
     }
     $1027 = HEAP32[$1016 >> 2] | 0;
     $1028 = $1027 + 4 | 0;
     $1029 = HEAP32[$1028 >> 2] | 0;
     $1030 = $1029 & -8;
     $1031 = ($1030 | 0) == ($970 | 0);
     L459 : do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i | 0) == 31;
       $1033 = $I1$0$i$i >>> 1;
       $1034 = 25 - $1033 | 0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;
       $T$06$i$i = $1027;
       while (1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = ($T$06$i$i + 16 | 0) + ($1043 << 2) | 0;
        $1039 = HEAP32[$1044 >> 2] | 0;
        $1045 = ($1039 | 0) == (0 | 0);
        if ($1045) {
         $$lcssa211 = $1044;
         $T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = $1039 + 4 | 0;
        $1040 = HEAP32[$1038 >> 2] | 0;
        $1041 = $1040 & -8;
        $1042 = ($1041 | 0) == ($970 | 0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;
         $T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[2560 >> 2] | 0;
       $1047 = $$lcssa211 >>> 0 < $1046 >>> 0;
       if ($1047) {
        _abort();
       } else {
        HEAP32[$$lcssa211 >> 2] = $635;
        $1048 = $635 + 24 | 0;
        HEAP32[$1048 >> 2] = $T$06$i$i$lcssa;
        $1049 = $635 + 12 | 0;
        HEAP32[$1049 >> 2] = $635;
        $1050 = $635 + 8 | 0;
        HEAP32[$1050 >> 2] = $635;
        break L299;
       }
      }
     } while (0);
     $1051 = $T$0$lcssa$i$i + 8 | 0;
     $1052 = HEAP32[$1051 >> 2] | 0;
     $1053 = HEAP32[2560 >> 2] | 0;
     $1054 = $1052 >>> 0 >= $1053 >>> 0;
     $not$$i$i = $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0;
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = $1052 + 12 | 0;
      HEAP32[$1056 >> 2] = $635;
      HEAP32[$1051 >> 2] = $635;
      $1057 = $635 + 8 | 0;
      HEAP32[$1057 >> 2] = $1052;
      $1058 = $635 + 12 | 0;
      HEAP32[$1058 >> 2] = $T$0$lcssa$i$i;
      $1059 = $635 + 24 | 0;
      HEAP32[$1059 >> 2] = 0;
      break;
     } else {
      _abort();
     }
    }
   }
  } while (0);
  $1060 = HEAP32[2556 >> 2] | 0;
  $1061 = $1060 >>> 0 > $nb$0 >>> 0;
  if ($1061) {
   $1062 = $1060 - $nb$0 | 0;
   HEAP32[2556 >> 2] = $1062;
   $1063 = HEAP32[2568 >> 2] | 0;
   $1064 = $1063 + $nb$0 | 0;
   HEAP32[2568 >> 2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = $nb$0 + 4 | 0;
   $1066 = $1063 + $$sum$i32 | 0;
   HEAP32[$1066 >> 2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = $1063 + 4 | 0;
   HEAP32[$1068 >> 2] = $1067;
   $1069 = $1063 + 8 | 0;
   $mem$0 = $1069;
   return $mem$0 | 0;
  }
 }
 $1070 = ___errno_location() | 0;
 HEAP32[$1070 >> 2] = 12;
 $mem$0 = 0;
 return $mem$0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0, $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0, $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0, $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x$i = sp;
 switch ($prec | 0) {
 case 0:
  {
   $bits$0$ph = 24;
   $emin$0$ph = -149;
   label = 4;
   break;
  }
 case 1:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 case 2:
  {
   $bits$0$ph = 53;
   $emin$0$ph = -1074;
   label = 4;
   break;
  }
 default:
  {
   $$0 = 0.0;
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $0 = $f + 4 | 0;
   $1 = $f + 100 | 0;
   while (1) {
    $2 = HEAP32[$0 >> 2] | 0;
    $3 = HEAP32[$1 >> 2] | 0;
    $4 = $2 >>> 0 < $3 >>> 0;
    if ($4) {
     $5 = $2 + 1 | 0;
     HEAP32[$0 >> 2] = $5;
     $6 = HEAP8[$2 >> 0] | 0;
     $7 = $6 & 255;
     $9 = $7;
    } else {
     $8 = ___shgetc($f) | 0;
     $9 = $8;
    }
    $10 = _isspace($9) | 0;
    $11 = ($10 | 0) == 0;
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275 | 0) == 45;
   L13 : do {
    switch ($$lcssa275 | 0) {
    case 43:
    case 45:
     {
      $13 = $12 & 1;
      $14 = $13 << 1;
      $15 = 1 - $14 | 0;
      $16 = HEAP32[$0 >> 2] | 0;
      $17 = HEAP32[$1 >> 2] | 0;
      $18 = $16 >>> 0 < $17 >>> 0;
      if ($18) {
       $19 = $16 + 1 | 0;
       HEAP32[$0 >> 2] = $19;
       $20 = HEAP8[$16 >> 0] | 0;
       $21 = $20 & 255;
       $c$0 = $21;
       $sign$0 = $15;
       break L13;
      } else {
       $22 = ___shgetc($f) | 0;
       $c$0 = $22;
       $sign$0 = $15;
       break L13;
      }
      break;
     }
    default:
     {
      $c$0 = $$lcssa275;
      $sign$0 = 1;
     }
    }
   } while (0);
   $c$179 = $c$0;
   $i$078 = 0;
   while (1) {
    $23 = $c$179 | 32;
    $24 = 383738 + $i$078 | 0;
    $25 = HEAP8[$24 >> 0] | 0;
    $26 = $25 << 24 >> 24;
    $27 = ($23 | 0) == ($26 | 0);
    if (!$27) {
     $c$1$lcssa = $c$179;
     $i$0$lcssa = $i$078;
     break;
    }
    $28 = $i$078 >>> 0 < 7;
    do {
     if ($28) {
      $29 = HEAP32[$0 >> 2] | 0;
      $30 = HEAP32[$1 >> 2] | 0;
      $31 = $29 >>> 0 < $30 >>> 0;
      if ($31) {
       $32 = $29 + 1 | 0;
       HEAP32[$0 >> 2] = $32;
       $33 = HEAP8[$29 >> 0] | 0;
       $34 = $33 & 255;
       $c$2 = $34;
       break;
      } else {
       $35 = ___shgetc($f) | 0;
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while (0);
    $36 = $i$078 + 1 | 0;
    $37 = $36 >>> 0 < 8;
    if ($37) {
     $c$179 = $c$2;
     $i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;
     $i$0$lcssa = $36;
     break;
    }
   }
   L29 : do {
    switch ($i$0$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23;
      break;
     }
    default:
     {
      $38 = $i$0$lcssa >>> 0 > 3;
      $39 = ($pok | 0) != 0;
      $or$cond5 = $39 & $38;
      if ($or$cond5) {
       $40 = ($i$0$lcssa | 0) == 8;
       if ($40) {
        break L29;
       } else {
        label = 23;
        break L29;
       }
      }
      $53 = ($i$0$lcssa | 0) == 0;
      L34 : do {
       if ($53) {
        $c$377 = $c$1$lcssa;
        $i$276 = 0;
        while (1) {
         $54 = $c$377 | 32;
         $55 = 385569 + $i$276 | 0;
         $56 = HEAP8[$55 >> 0] | 0;
         $57 = $56 << 24 >> 24;
         $58 = ($54 | 0) == ($57 | 0);
         if (!$58) {
          $c$5 = $c$377;
          $i$3 = $i$276;
          break L34;
         }
         $59 = $i$276 >>> 0 < 2;
         do {
          if ($59) {
           $60 = HEAP32[$0 >> 2] | 0;
           $61 = HEAP32[$1 >> 2] | 0;
           $62 = $60 >>> 0 < $61 >>> 0;
           if ($62) {
            $63 = $60 + 1 | 0;
            HEAP32[$0 >> 2] = $63;
            $64 = HEAP8[$60 >> 0] | 0;
            $65 = $64 & 255;
            $c$4 = $65;
            break;
           } else {
            $66 = ___shgetc($f) | 0;
            $c$4 = $66;
            break;
           }
          } else {
           $c$4 = $c$377;
          }
         } while (0);
         $67 = $i$276 + 1 | 0;
         $68 = $67 >>> 0 < 3;
         if ($68) {
          $c$377 = $c$4;
          $i$276 = $67;
         } else {
          $c$5 = $c$4;
          $i$3 = $67;
          break;
         }
        }
       } else {
        $c$5 = $c$1$lcssa;
        $i$3 = $i$0$lcssa;
       }
      } while (0);
      switch ($i$3 | 0) {
      case 3:
       {
        $69 = HEAP32[$0 >> 2] | 0;
        $70 = HEAP32[$1 >> 2] | 0;
        $71 = $69 >>> 0 < $70 >>> 0;
        if ($71) {
         $72 = $69 + 1 | 0;
         HEAP32[$0 >> 2] = $72;
         $73 = HEAP8[$69 >> 0] | 0;
         $74 = $73 & 255;
         $77 = $74;
        } else {
         $75 = ___shgetc($f) | 0;
         $77 = $75;
        }
        $76 = ($77 | 0) == 40;
        if ($76) {
         $i$4 = 1;
        } else {
         $78 = HEAP32[$1 >> 2] | 0;
         $79 = ($78 | 0) == (0 | 0);
         if ($79) {
          $$0 = nan;
          break L4;
         }
         $80 = HEAP32[$0 >> 2] | 0;
         $81 = $80 + -1 | 0;
         HEAP32[$0 >> 2] = $81;
         $$0 = nan;
         break L4;
        }
        while (1) {
         $82 = HEAP32[$0 >> 2] | 0;
         $83 = HEAP32[$1 >> 2] | 0;
         $84 = $82 >>> 0 < $83 >>> 0;
         if ($84) {
          $85 = $82 + 1 | 0;
          HEAP32[$0 >> 2] = $85;
          $86 = HEAP8[$82 >> 0] | 0;
          $87 = $86 & 255;
          $90 = $87;
         } else {
          $88 = ___shgetc($f) | 0;
          $90 = $88;
         }
         $89 = $90 + -48 | 0;
         $91 = $89 >>> 0 < 10;
         $92 = $90 + -65 | 0;
         $93 = $92 >>> 0 < 26;
         $or$cond = $91 | $93;
         if (!$or$cond) {
          $94 = $90 + -97 | 0;
          $95 = $94 >>> 0 < 26;
          $96 = ($90 | 0) == 95;
          $or$cond7 = $96 | $95;
          if (!$or$cond7) {
           $$lcssa = $90;
           $i$4$lcssa = $i$4;
           break;
          }
         }
         $108 = $i$4 + 1 | 0;
         $i$4 = $108;
        }
        $97 = ($$lcssa | 0) == 41;
        if ($97) {
         $$0 = nan;
         break L4;
        }
        $98 = HEAP32[$1 >> 2] | 0;
        $99 = ($98 | 0) == (0 | 0);
        if (!$99) {
         $100 = HEAP32[$0 >> 2] | 0;
         $101 = $100 + -1 | 0;
         HEAP32[$0 >> 2] = $101;
        }
        if (!$39) {
         $103 = ___errno_location() | 0;
         HEAP32[$103 >> 2] = 22;
         ___shlim($f, 0);
         $$0 = 0.0;
         break L4;
        }
        $102 = ($i$4$lcssa | 0) == 0;
        if ($102) {
         $$0 = nan;
         break L4;
        } else {
         $$in = $i$4$lcssa;
        }
        while (1) {
         $104 = $$in + -1 | 0;
         if (!$99) {
          $105 = HEAP32[$0 >> 2] | 0;
          $106 = $105 + -1 | 0;
          HEAP32[$0 >> 2] = $106;
         }
         $107 = ($104 | 0) == 0;
         if ($107) {
          $$0 = nan;
          break L4;
         } else {
          $$in = $104;
         }
        }
        break;
       }
      case 0:
       {
        $114 = ($c$5 | 0) == 48;
        do {
         if ($114) {
          $115 = HEAP32[$0 >> 2] | 0;
          $116 = HEAP32[$1 >> 2] | 0;
          $117 = $115 >>> 0 < $116 >>> 0;
          if ($117) {
           $118 = $115 + 1 | 0;
           HEAP32[$0 >> 2] = $118;
           $119 = HEAP8[$115 >> 0] | 0;
           $120 = $119 & 255;
           $123 = $120;
          } else {
           $121 = ___shgetc($f) | 0;
           $123 = $121;
          }
          $122 = $123 | 32;
          $124 = ($122 | 0) == 120;
          if (!$124) {
           $326 = HEAP32[$1 >> 2] | 0;
           $327 = ($326 | 0) == (0 | 0);
           if ($327) {
            $c$6 = 48;
            break;
           }
           $328 = HEAP32[$0 >> 2] | 0;
           $329 = $328 + -1 | 0;
           HEAP32[$0 >> 2] = $329;
           $c$6 = 48;
           break;
          }
          $125 = HEAP32[$0 >> 2] | 0;
          $126 = HEAP32[$1 >> 2] | 0;
          $127 = $125 >>> 0 < $126 >>> 0;
          if ($127) {
           $128 = $125 + 1 | 0;
           HEAP32[$0 >> 2] = $128;
           $129 = HEAP8[$125 >> 0] | 0;
           $130 = $129 & 255;
           $c$0$i = $130;
           $gotdig$0$i = 0;
          } else {
           $131 = ___shgetc($f) | 0;
           $c$0$i = $131;
           $gotdig$0$i = 0;
          }
          L94 : while (1) {
           switch ($c$0$i | 0) {
           case 46:
            {
             $gotdig$0$i$lcssa242 = $gotdig$0$i;
             label = 74;
             break L94;
             break;
            }
           case 48:
            {
             break;
            }
           default:
            {
             $169 = 0;
             $171 = 0;
             $694 = 0;
             $695 = 0;
             $c$2$i = $c$0$i;
             $gotdig$2$i = $gotdig$0$i;
             $gotrad$0$i = 0;
             $gottail$0$i = 0;
             $scale$0$i = 1.0;
             $x$0$i = 0;
             $y$0$i = 0.0;
             break L94;
            }
           }
           $132 = HEAP32[$0 >> 2] | 0;
           $133 = HEAP32[$1 >> 2] | 0;
           $134 = $132 >>> 0 < $133 >>> 0;
           if ($134) {
            $135 = $132 + 1 | 0;
            HEAP32[$0 >> 2] = $135;
            $136 = HEAP8[$132 >> 0] | 0;
            $137 = $136 & 255;
            $c$0$i = $137;
            $gotdig$0$i = 1;
            continue;
           } else {
            $138 = ___shgetc($f) | 0;
            $c$0$i = $138;
            $gotdig$0$i = 1;
            continue;
           }
          }
          if ((label | 0) == 74) {
           $139 = HEAP32[$0 >> 2] | 0;
           $140 = HEAP32[$1 >> 2] | 0;
           $141 = $139 >>> 0 < $140 >>> 0;
           if ($141) {
            $142 = $139 + 1 | 0;
            HEAP32[$0 >> 2] = $142;
            $143 = HEAP8[$139 >> 0] | 0;
            $144 = $143 & 255;
            $c$1$ph$i = $144;
           } else {
            $145 = ___shgetc($f) | 0;
            $c$1$ph$i = $145;
           }
           $146 = ($c$1$ph$i | 0) == 48;
           if ($146) {
            $154 = 0;
            $155 = 0;
            while (1) {
             $147 = HEAP32[$0 >> 2] | 0;
             $148 = HEAP32[$1 >> 2] | 0;
             $149 = $147 >>> 0 < $148 >>> 0;
             if ($149) {
              $150 = $147 + 1 | 0;
              HEAP32[$0 >> 2] = $150;
              $151 = HEAP8[$147 >> 0] | 0;
              $152 = $151 & 255;
              $159 = $152;
             } else {
              $153 = ___shgetc($f) | 0;
              $159 = $153;
             }
             $156 = _i64Add($154 | 0, $155 | 0, -1, -1) | 0;
             $157 = tempRet0;
             $158 = ($159 | 0) == 48;
             if ($158) {
              $154 = $156;
              $155 = $157;
             } else {
              $169 = 0;
              $171 = 0;
              $694 = $156;
              $695 = $157;
              $c$2$i = $159;
              $gotdig$2$i = 1;
              $gotrad$0$i = 1;
              $gottail$0$i = 0;
              $scale$0$i = 1.0;
              $x$0$i = 0;
              $y$0$i = 0.0;
              break;
             }
            }
           } else {
            $169 = 0;
            $171 = 0;
            $694 = 0;
            $695 = 0;
            $c$2$i = $c$1$ph$i;
            $gotdig$2$i = $gotdig$0$i$lcssa242;
            $gotrad$0$i = 1;
            $gottail$0$i = 0;
            $scale$0$i = 1.0;
            $x$0$i = 0;
            $y$0$i = 0.0;
           }
          }
          while (1) {
           $160 = $c$2$i + -48 | 0;
           $161 = $160 >>> 0 < 10;
           $$pre$i = $c$2$i | 32;
           if ($161) {
            label = 86;
           } else {
            $162 = $$pre$i + -97 | 0;
            $163 = $162 >>> 0 < 6;
            $164 = ($c$2$i | 0) == 46;
            $or$cond6$i = $164 | $163;
            if (!$or$cond6$i) {
             $213 = $171;
             $214 = $694;
             $216 = $169;
             $217 = $695;
             $c$2$lcssa$i = $c$2$i;
             $gotdig$2$i$lcssa = $gotdig$2$i;
             $gotrad$0$i$lcssa = $gotrad$0$i;
             $x$0$i$lcssa = $x$0$i;
             $y$0$i$lcssa = $y$0$i;
             break;
            }
            if ($164) {
             $165 = ($gotrad$0$i | 0) == 0;
             if ($165) {
              $696 = $171;
              $697 = $169;
              $698 = $171;
              $699 = $169;
              $gotdig$3$i = $gotdig$2$i;
              $gotrad$1$i = 1;
              $gottail$2$i = $gottail$0$i;
              $scale$2$i = $scale$0$i;
              $x$2$i = $x$0$i;
              $y$2$i = $y$0$i;
             } else {
              $213 = $171;
              $214 = $694;
              $216 = $169;
              $217 = $695;
              $c$2$lcssa$i = 46;
              $gotdig$2$i$lcssa = $gotdig$2$i;
              $gotrad$0$i$lcssa = $gotrad$0$i;
              $x$0$i$lcssa = $x$0$i;
              $y$0$i$lcssa = $y$0$i;
              break;
             }
            } else {
             label = 86;
            }
           }
           if ((label | 0) == 86) {
            label = 0;
            $166 = ($c$2$i | 0) > 57;
            $167 = $$pre$i + -87 | 0;
            $d$0$i = $166 ? $167 : $160;
            $168 = ($169 | 0) < 0;
            $170 = $171 >>> 0 < 8;
            $172 = ($169 | 0) == 0;
            $173 = $172 & $170;
            $174 = $168 | $173;
            do {
             if ($174) {
              $175 = $x$0$i << 4;
              $176 = $d$0$i + $175 | 0;
              $gottail$1$i = $gottail$0$i;
              $scale$1$i = $scale$0$i;
              $x$1$i = $176;
              $y$1$i = $y$0$i;
             } else {
              $177 = ($169 | 0) < 0;
              $178 = $171 >>> 0 < 14;
              $179 = ($169 | 0) == 0;
              $180 = $179 & $178;
              $181 = $177 | $180;
              if ($181) {
               $182 = +($d$0$i | 0);
               $183 = $scale$0$i * .0625;
               $184 = $183 * $182;
               $185 = $y$0$i + $184;
               $gottail$1$i = $gottail$0$i;
               $scale$1$i = $183;
               $x$1$i = $x$0$i;
               $y$1$i = $185;
               break;
              }
              $186 = ($d$0$i | 0) == 0;
              $187 = ($gottail$0$i | 0) != 0;
              $or$cond$i = $187 | $186;
              if ($or$cond$i) {
               $gottail$1$i = $gottail$0$i;
               $scale$1$i = $scale$0$i;
               $x$1$i = $x$0$i;
               $y$1$i = $y$0$i;
              } else {
               $188 = $scale$0$i * .5;
               $189 = $y$0$i + $188;
               $gottail$1$i = 1;
               $scale$1$i = $scale$0$i;
               $x$1$i = $x$0$i;
               $y$1$i = $189;
              }
             }
            } while (0);
            $190 = _i64Add($171 | 0, $169 | 0, 1, 0) | 0;
            $191 = tempRet0;
            $696 = $694;
            $697 = $695;
            $698 = $190;
            $699 = $191;
            $gotdig$3$i = 1;
            $gotrad$1$i = $gotrad$0$i;
            $gottail$2$i = $gottail$1$i;
            $scale$2$i = $scale$1$i;
            $x$2$i = $x$1$i;
            $y$2$i = $y$1$i;
           }
           $192 = HEAP32[$0 >> 2] | 0;
           $193 = HEAP32[$1 >> 2] | 0;
           $194 = $192 >>> 0 < $193 >>> 0;
           if ($194) {
            $195 = $192 + 1 | 0;
            HEAP32[$0 >> 2] = $195;
            $196 = HEAP8[$192 >> 0] | 0;
            $197 = $196 & 255;
            $169 = $699;
            $171 = $698;
            $694 = $696;
            $695 = $697;
            $c$2$i = $197;
            $gotdig$2$i = $gotdig$3$i;
            $gotrad$0$i = $gotrad$1$i;
            $gottail$0$i = $gottail$2$i;
            $scale$0$i = $scale$2$i;
            $x$0$i = $x$2$i;
            $y$0$i = $y$2$i;
            continue;
           } else {
            $198 = ___shgetc($f) | 0;
            $169 = $699;
            $171 = $698;
            $694 = $696;
            $695 = $697;
            $c$2$i = $198;
            $gotdig$2$i = $gotdig$3$i;
            $gotrad$0$i = $gotrad$1$i;
            $gottail$0$i = $gottail$2$i;
            $scale$0$i = $scale$2$i;
            $x$0$i = $x$2$i;
            $y$0$i = $y$2$i;
            continue;
           }
          }
          $199 = ($gotdig$2$i$lcssa | 0) == 0;
          if ($199) {
           $200 = HEAP32[$1 >> 2] | 0;
           $201 = ($200 | 0) == (0 | 0);
           if (!$201) {
            $202 = HEAP32[$0 >> 2] | 0;
            $203 = $202 + -1 | 0;
            HEAP32[$0 >> 2] = $203;
           }
           $204 = ($pok | 0) == 0;
           if ($204) {
            ___shlim($f, 0);
           } else {
            if (!$201) {
             $205 = HEAP32[$0 >> 2] | 0;
             $206 = $205 + -1 | 0;
             HEAP32[$0 >> 2] = $206;
             $207 = ($gotrad$0$i$lcssa | 0) == 0;
             if (!$207) {
              $208 = $205 + -2 | 0;
              HEAP32[$0 >> 2] = $208;
             }
            }
           }
           $209 = +($sign$0 | 0);
           $210 = $209 * 0.0;
           $$0 = $210;
           break L4;
          }
          $211 = ($gotrad$0$i$lcssa | 0) == 0;
          $212 = $211 ? $213 : $214;
          $215 = $211 ? $216 : $217;
          $218 = ($216 | 0) < 0;
          $219 = $213 >>> 0 < 8;
          $220 = ($216 | 0) == 0;
          $221 = $220 & $219;
          $222 = $218 | $221;
          if ($222) {
           $224 = $213;
           $225 = $216;
           $x$324$i = $x$0$i$lcssa;
           while (1) {
            $223 = $x$324$i << 4;
            $226 = _i64Add($224 | 0, $225 | 0, 1, 0) | 0;
            $227 = tempRet0;
            $228 = ($227 | 0) < 0;
            $229 = $226 >>> 0 < 8;
            $230 = ($227 | 0) == 0;
            $231 = $230 & $229;
            $232 = $228 | $231;
            if ($232) {
             $224 = $226;
             $225 = $227;
             $x$324$i = $223;
            } else {
             $x$3$lcssa$i = $223;
             break;
            }
           }
          } else {
           $x$3$lcssa$i = $x$0$i$lcssa;
          }
          $233 = $c$2$lcssa$i | 32;
          $234 = ($233 | 0) == 112;
          if ($234) {
           $235 = _scanexp($f, $pok) | 0;
           $236 = tempRet0;
           $237 = ($235 | 0) == 0;
           $238 = ($236 | 0) == -2147483648;
           $239 = $237 & $238;
           if ($239) {
            $240 = ($pok | 0) == 0;
            if ($240) {
             ___shlim($f, 0);
             $$0 = 0.0;
             break L4;
            }
            $241 = HEAP32[$1 >> 2] | 0;
            $242 = ($241 | 0) == (0 | 0);
            if ($242) {
             $253 = 0;
             $254 = 0;
            } else {
             $243 = HEAP32[$0 >> 2] | 0;
             $244 = $243 + -1 | 0;
             HEAP32[$0 >> 2] = $244;
             $253 = 0;
             $254 = 0;
            }
           } else {
            $253 = $235;
            $254 = $236;
           }
          } else {
           $245 = HEAP32[$1 >> 2] | 0;
           $246 = ($245 | 0) == (0 | 0);
           if ($246) {
            $253 = 0;
            $254 = 0;
           } else {
            $247 = HEAP32[$0 >> 2] | 0;
            $248 = $247 + -1 | 0;
            HEAP32[$0 >> 2] = $248;
            $253 = 0;
            $254 = 0;
           }
          }
          $249 = _bitshift64Shl($212 | 0, $215 | 0, 2) | 0;
          $250 = tempRet0;
          $251 = _i64Add($249 | 0, $250 | 0, -32, -1) | 0;
          $252 = tempRet0;
          $255 = _i64Add($251 | 0, $252 | 0, $253 | 0, $254 | 0) | 0;
          $256 = tempRet0;
          $257 = ($x$3$lcssa$i | 0) == 0;
          if ($257) {
           $258 = +($sign$0 | 0);
           $259 = $258 * 0.0;
           $$0 = $259;
           break L4;
          }
          $260 = 0 - $emin$0$ph | 0;
          $261 = ($256 | 0) > 0;
          $262 = $255 >>> 0 > $260 >>> 0;
          $263 = ($256 | 0) == 0;
          $264 = $263 & $262;
          $265 = $261 | $264;
          if ($265) {
           $266 = ___errno_location() | 0;
           HEAP32[$266 >> 2] = 34;
           $267 = +($sign$0 | 0);
           $268 = $267 * 1797693134862315708145274.0e284;
           $269 = $268 * 1797693134862315708145274.0e284;
           $$0 = $269;
           break L4;
          }
          $270 = $emin$0$ph + -106 | 0;
          $271 = ($270 | 0) < 0;
          $272 = $271 << 31 >> 31;
          $273 = ($256 | 0) < ($272 | 0);
          $274 = $255 >>> 0 < $270 >>> 0;
          $275 = ($256 | 0) == ($272 | 0);
          $276 = $275 & $274;
          $277 = $273 | $276;
          if ($277) {
           $279 = ___errno_location() | 0;
           HEAP32[$279 >> 2] = 34;
           $280 = +($sign$0 | 0);
           $281 = $280 * 2.2250738585072014e-308;
           $282 = $281 * 2.2250738585072014e-308;
           $$0 = $282;
           break L4;
          }
          $278 = ($x$3$lcssa$i | 0) > -1;
          if ($278) {
           $288 = $255;
           $289 = $256;
           $x$419$i = $x$3$lcssa$i;
           $y$320$i = $y$0$i$lcssa;
           while (1) {
            $283 = !($y$320$i >= .5);
            $284 = $x$419$i << 1;
            $285 = $y$320$i + -1.0;
            $286 = $283 & 1;
            $287 = $286 | $284;
            $x$5$i = $287 ^ 1;
            $$pn$i = $283 ? $y$320$i : $285;
            $y$4$i = $y$320$i + $$pn$i;
            $290 = _i64Add($288 | 0, $289 | 0, -1, -1) | 0;
            $291 = tempRet0;
            $292 = ($287 | 0) > -1;
            if ($292) {
             $288 = $290;
             $289 = $291;
             $x$419$i = $x$5$i;
             $y$320$i = $y$4$i;
            } else {
             $297 = $290;
             $298 = $291;
             $x$4$lcssa$i = $x$5$i;
             $y$3$lcssa$i = $y$4$i;
             break;
            }
           }
          } else {
           $297 = $255;
           $298 = $256;
           $x$4$lcssa$i = $x$3$lcssa$i;
           $y$3$lcssa$i = $y$0$i$lcssa;
          }
          $293 = ($emin$0$ph | 0) < 0;
          $294 = $293 << 31 >> 31;
          $295 = _i64Subtract(32, 0, $emin$0$ph | 0, $294 | 0) | 0;
          $296 = tempRet0;
          $299 = _i64Add($297 | 0, $298 | 0, $295 | 0, $296 | 0) | 0;
          $300 = tempRet0;
          $301 = 0 > ($300 | 0);
          $302 = $bits$0$ph >>> 0 > $299 >>> 0;
          $303 = 0 == ($300 | 0);
          $304 = $303 & $302;
          $305 = $301 | $304;
          if ($305) {
           $306 = ($299 | 0) < 0;
           if ($306) {
            $$0710$i = 0;
            label = 127;
           } else {
            $$07$i = $299;
            label = 125;
           }
          } else {
           $$07$i = $bits$0$ph;
           label = 125;
          }
          if ((label | 0) == 125) {
           $307 = ($$07$i | 0) < 53;
           if ($307) {
            $$0710$i = $$07$i;
            label = 127;
           } else {
            $$pre41$i = +($sign$0 | 0);
            $$0711$i = $$07$i;
            $$pre$phi42$iZ2D = $$pre41$i;
            $bias$0$i = 0.0;
           }
          }
          if ((label | 0) == 127) {
           $308 = 84 - $$0710$i | 0;
           $309 = +_scalbn(1.0, $308);
           $310 = +($sign$0 | 0);
           $311 = +_copysignl($309, $310);
           $$0711$i = $$0710$i;
           $$pre$phi42$iZ2D = $310;
           $bias$0$i = $311;
          }
          $312 = ($$0711$i | 0) < 32;
          $313 = $y$3$lcssa$i != 0.0;
          $or$cond4$i = $313 & $312;
          $314 = $x$4$lcssa$i & 1;
          $315 = ($314 | 0) == 0;
          $or$cond9$i = $315 & $or$cond4$i;
          $316 = $or$cond9$i & 1;
          $x$6$i = $316 + $x$4$lcssa$i | 0;
          $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
          $317 = +($x$6$i >>> 0);
          $318 = $$pre$phi42$iZ2D * $317;
          $319 = $bias$0$i + $318;
          $320 = $$pre$phi42$iZ2D * $y$5$i;
          $321 = $320 + $319;
          $322 = $321 - $bias$0$i;
          $323 = $322 != 0.0;
          if (!$323) {
           $324 = ___errno_location() | 0;
           HEAP32[$324 >> 2] = 34;
          }
          $325 = +_scalbnl($322, $297);
          $$0 = $325;
          break L4;
         } else {
          $c$6 = $c$5;
         }
        } while (0);
        $sum$i = $emin$0$ph + $bits$0$ph | 0;
        $330 = 0 - $sum$i | 0;
        $$09$i = $c$6;
        $gotdig$0$i12 = 0;
        L184 : while (1) {
         switch ($$09$i | 0) {
         case 46:
          {
           $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
           label = 138;
           break L184;
           break;
          }
         case 48:
          {
           break;
          }
         default:
          {
           $$2$i = $$09$i;
           $700 = 0;
           $701 = 0;
           $gotdig$2$i13 = $gotdig$0$i12;
           $gotrad$0$i14 = 0;
           break L184;
          }
         }
         $331 = HEAP32[$0 >> 2] | 0;
         $332 = HEAP32[$1 >> 2] | 0;
         $333 = $331 >>> 0 < $332 >>> 0;
         if ($333) {
          $334 = $331 + 1 | 0;
          HEAP32[$0 >> 2] = $334;
          $335 = HEAP8[$331 >> 0] | 0;
          $336 = $335 & 255;
          $$09$i = $336;
          $gotdig$0$i12 = 1;
          continue;
         } else {
          $337 = ___shgetc($f) | 0;
          $$09$i = $337;
          $gotdig$0$i12 = 1;
          continue;
         }
        }
        if ((label | 0) == 138) {
         $338 = HEAP32[$0 >> 2] | 0;
         $339 = HEAP32[$1 >> 2] | 0;
         $340 = $338 >>> 0 < $339 >>> 0;
         if ($340) {
          $341 = $338 + 1 | 0;
          HEAP32[$0 >> 2] = $341;
          $342 = HEAP8[$338 >> 0] | 0;
          $343 = $342 & 255;
          $$1$ph$i = $343;
         } else {
          $344 = ___shgetc($f) | 0;
          $$1$ph$i = $344;
         }
         $345 = ($$1$ph$i | 0) == 48;
         if ($345) {
          $346 = 0;
          $347 = 0;
          while (1) {
           $348 = _i64Add($346 | 0, $347 | 0, -1, -1) | 0;
           $349 = tempRet0;
           $350 = HEAP32[$0 >> 2] | 0;
           $351 = HEAP32[$1 >> 2] | 0;
           $352 = $350 >>> 0 < $351 >>> 0;
           if ($352) {
            $353 = $350 + 1 | 0;
            HEAP32[$0 >> 2] = $353;
            $354 = HEAP8[$350 >> 0] | 0;
            $355 = $354 & 255;
            $$1$be$i = $355;
           } else {
            $356 = ___shgetc($f) | 0;
            $$1$be$i = $356;
           }
           $357 = ($$1$be$i | 0) == 48;
           if ($357) {
            $346 = $348;
            $347 = $349;
           } else {
            $$2$i = $$1$be$i;
            $700 = $348;
            $701 = $349;
            $gotdig$2$i13 = 1;
            $gotrad$0$i14 = 1;
            break;
           }
          }
         } else {
          $$2$i = $$1$ph$i;
          $700 = 0;
          $701 = 0;
          $gotdig$2$i13 = $gotdig$0$i12$lcssa273;
          $gotrad$0$i14 = 1;
         }
        }
        HEAP32[$x$i >> 2] = 0;
        $358 = $$2$i + -48 | 0;
        $359 = $358 >>> 0 < 10;
        $360 = ($$2$i | 0) == 46;
        $361 = $360 | $359;
        L203 : do {
         if ($361) {
          $362 = $x$i + 496 | 0;
          $$3105$i = $$2$i;
          $365 = 0;
          $366 = 0;
          $702 = $360;
          $703 = $358;
          $704 = $700;
          $705 = $701;
          $gotdig$3101$i = $gotdig$2$i13;
          $gotrad$1102$i = $gotrad$0$i14;
          $j$0104$i = 0;
          $k$0103$i = 0;
          $lnz$0100$i = 0;
          L205 : while (1) {
           do {
            if ($702) {
             $cond$i = ($gotrad$1102$i | 0) == 0;
             if ($cond$i) {
              $706 = $365;
              $707 = $366;
              $708 = $365;
              $709 = $366;
              $gotdig$4$i = $gotdig$3101$i;
              $gotrad$2$i = 1;
              $j$2$i = $j$0104$i;
              $k$2$i = $k$0103$i;
              $lnz$2$i = $lnz$0100$i;
             } else {
              $710 = $704;
              $711 = $705;
              $712 = $365;
              $713 = $366;
              $gotdig$3101$i$lcssa = $gotdig$3101$i;
              $j$0104$i$lcssa = $j$0104$i;
              $k$0103$i$lcssa = $k$0103$i;
              $lnz$0100$i$lcssa = $lnz$0100$i;
              break L205;
             }
            } else {
             $364 = ($k$0103$i | 0) < 125;
             $367 = _i64Add($365 | 0, $366 | 0, 1, 0) | 0;
             $368 = tempRet0;
             $369 = ($$3105$i | 0) != 48;
             if (!$364) {
              if (!$369) {
               $706 = $704;
               $707 = $705;
               $708 = $367;
               $709 = $368;
               $gotdig$4$i = $gotdig$3101$i;
               $gotrad$2$i = $gotrad$1102$i;
               $j$2$i = $j$0104$i;
               $k$2$i = $k$0103$i;
               $lnz$2$i = $lnz$0100$i;
               break;
              }
              $379 = HEAP32[$362 >> 2] | 0;
              $380 = $379 | 1;
              HEAP32[$362 >> 2] = $380;
              $706 = $704;
              $707 = $705;
              $708 = $367;
              $709 = $368;
              $gotdig$4$i = $gotdig$3101$i;
              $gotrad$2$i = $gotrad$1102$i;
              $j$2$i = $j$0104$i;
              $k$2$i = $k$0103$i;
              $lnz$2$i = $lnz$0100$i;
              break;
             }
             $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
             $370 = ($j$0104$i | 0) == 0;
             $371 = $x$i + ($k$0103$i << 2) | 0;
             if ($370) {
              $storemerge$i = $703;
             } else {
              $372 = HEAP32[$371 >> 2] | 0;
              $373 = $372 * 10 | 0;
              $374 = $$3105$i + -48 | 0;
              $375 = $374 + $373 | 0;
              $storemerge$i = $375;
             }
             HEAP32[$371 >> 2] = $storemerge$i;
             $376 = $j$0104$i + 1 | 0;
             $377 = ($376 | 0) == 9;
             $378 = $377 & 1;
             $$k$0$i = $378 + $k$0103$i | 0;
             $$11$i = $377 ? 0 : $376;
             $706 = $704;
             $707 = $705;
             $708 = $367;
             $709 = $368;
             $gotdig$4$i = 1;
             $gotrad$2$i = $gotrad$1102$i;
             $j$2$i = $$11$i;
             $k$2$i = $$k$0$i;
             $lnz$2$i = $$lnz$0$i;
            }
           } while (0);
           $381 = HEAP32[$0 >> 2] | 0;
           $382 = HEAP32[$1 >> 2] | 0;
           $383 = $381 >>> 0 < $382 >>> 0;
           if ($383) {
            $384 = $381 + 1 | 0;
            HEAP32[$0 >> 2] = $384;
            $385 = HEAP8[$381 >> 0] | 0;
            $386 = $385 & 255;
            $$3$be$i = $386;
           } else {
            $387 = ___shgetc($f) | 0;
            $$3$be$i = $387;
           }
           $388 = $$3$be$i + -48 | 0;
           $389 = $388 >>> 0 < 10;
           $390 = ($$3$be$i | 0) == 46;
           $391 = $390 | $389;
           if ($391) {
            $$3105$i = $$3$be$i;
            $365 = $708;
            $366 = $709;
            $702 = $390;
            $703 = $388;
            $704 = $706;
            $705 = $707;
            $gotdig$3101$i = $gotdig$4$i;
            $gotrad$1102$i = $gotrad$2$i;
            $j$0104$i = $j$2$i;
            $k$0103$i = $k$2$i;
            $lnz$0100$i = $lnz$2$i;
           } else {
            $$3$lcssa$i = $$3$be$i;
            $394 = $708;
            $395 = $706;
            $397 = $709;
            $398 = $707;
            $gotdig$3$lcssa$i = $gotdig$4$i;
            $gotrad$1$lcssa$i = $gotrad$2$i;
            $j$0$lcssa$i = $j$2$i;
            $k$0$lcssa$i = $k$2$i;
            $lnz$0$lcssa$i = $lnz$2$i;
            label = 161;
            break L203;
           }
          }
          $363 = ($gotdig$3101$i$lcssa | 0) != 0;
          $714 = $712;
          $715 = $713;
          $716 = $710;
          $717 = $711;
          $718 = $363;
          $j$069$i = $j$0104$i$lcssa;
          $k$065$i = $k$0103$i$lcssa;
          $lnz$059$i = $lnz$0100$i$lcssa;
          label = 169;
         } else {
          $$3$lcssa$i = $$2$i;
          $394 = 0;
          $395 = $700;
          $397 = 0;
          $398 = $701;
          $gotdig$3$lcssa$i = $gotdig$2$i13;
          $gotrad$1$lcssa$i = $gotrad$0$i14;
          $j$0$lcssa$i = 0;
          $k$0$lcssa$i = 0;
          $lnz$0$lcssa$i = 0;
          label = 161;
         }
        } while (0);
        do {
         if ((label | 0) == 161) {
          $392 = ($gotrad$1$lcssa$i | 0) == 0;
          $393 = $392 ? $394 : $395;
          $396 = $392 ? $397 : $398;
          $399 = ($gotdig$3$lcssa$i | 0) != 0;
          $400 = $$3$lcssa$i | 32;
          $401 = ($400 | 0) == 101;
          $or$cond13$i = $401 & $399;
          if (!$or$cond13$i) {
           $416 = ($$3$lcssa$i | 0) > -1;
           if ($416) {
            $714 = $394;
            $715 = $397;
            $716 = $393;
            $717 = $396;
            $718 = $399;
            $j$069$i = $j$0$lcssa$i;
            $k$065$i = $k$0$lcssa$i;
            $lnz$059$i = $lnz$0$lcssa$i;
            label = 169;
            break;
           } else {
            $719 = $394;
            $720 = $397;
            $721 = $399;
            $722 = $393;
            $723 = $396;
            $j$068$i = $j$0$lcssa$i;
            $k$064$i = $k$0$lcssa$i;
            $lnz$058$i = $lnz$0$lcssa$i;
            label = 171;
            break;
           }
          }
          $402 = _scanexp($f, $pok) | 0;
          $403 = tempRet0;
          $404 = ($402 | 0) == 0;
          $405 = ($403 | 0) == -2147483648;
          $406 = $404 & $405;
          if ($406) {
           $407 = ($pok | 0) == 0;
           if ($407) {
            ___shlim($f, 0);
            $$0$i27 = 0.0;
            break;
           }
           $408 = HEAP32[$1 >> 2] | 0;
           $409 = ($408 | 0) == (0 | 0);
           if ($409) {
            $412 = 0;
            $413 = 0;
           } else {
            $410 = HEAP32[$0 >> 2] | 0;
            $411 = $410 + -1 | 0;
            HEAP32[$0 >> 2] = $411;
            $412 = 0;
            $413 = 0;
           }
          } else {
           $412 = $402;
           $413 = $403;
          }
          $414 = _i64Add($412 | 0, $413 | 0, $393 | 0, $396 | 0) | 0;
          $415 = tempRet0;
          $427 = $414;
          $428 = $394;
          $430 = $415;
          $431 = $397;
          $j$067$i = $j$0$lcssa$i;
          $k$063$i = $k$0$lcssa$i;
          $lnz$057$i = $lnz$0$lcssa$i;
          label = 173;
         }
        } while (0);
        if ((label | 0) == 169) {
         $417 = HEAP32[$1 >> 2] | 0;
         $418 = ($417 | 0) == (0 | 0);
         if ($418) {
          $719 = $714;
          $720 = $715;
          $721 = $718;
          $722 = $716;
          $723 = $717;
          $j$068$i = $j$069$i;
          $k$064$i = $k$065$i;
          $lnz$058$i = $lnz$059$i;
          label = 171;
         } else {
          $419 = HEAP32[$0 >> 2] | 0;
          $420 = $419 + -1 | 0;
          HEAP32[$0 >> 2] = $420;
          if ($718) {
           $427 = $716;
           $428 = $714;
           $430 = $717;
           $431 = $715;
           $j$067$i = $j$069$i;
           $k$063$i = $k$065$i;
           $lnz$057$i = $lnz$059$i;
           label = 173;
          } else {
           label = 172;
          }
         }
        }
        if ((label | 0) == 171) {
         if ($721) {
          $427 = $722;
          $428 = $719;
          $430 = $723;
          $431 = $720;
          $j$067$i = $j$068$i;
          $k$063$i = $k$064$i;
          $lnz$057$i = $lnz$058$i;
          label = 173;
         } else {
          label = 172;
         }
        }
        do {
         if ((label | 0) == 172) {
          $421 = ___errno_location() | 0;
          HEAP32[$421 >> 2] = 22;
          ___shlim($f, 0);
          $$0$i27 = 0.0;
         } else if ((label | 0) == 173) {
          $422 = HEAP32[$x$i >> 2] | 0;
          $423 = ($422 | 0) == 0;
          if ($423) {
           $424 = +($sign$0 | 0);
           $425 = $424 * 0.0;
           $$0$i27 = $425;
           break;
          }
          $426 = ($427 | 0) == ($428 | 0);
          $429 = ($430 | 0) == ($431 | 0);
          $432 = $426 & $429;
          $433 = ($431 | 0) < 0;
          $434 = $428 >>> 0 < 10;
          $435 = ($431 | 0) == 0;
          $436 = $435 & $434;
          $437 = $433 | $436;
          $or$cond$i16 = $437 & $432;
          if ($or$cond$i16) {
           $438 = $bits$0$ph >>> 0 > 30;
           $439 = $422 >>> $bits$0$ph;
           $440 = ($439 | 0) == 0;
           $or$cond15$i = $438 | $440;
           if ($or$cond15$i) {
            $441 = +($sign$0 | 0);
            $442 = +($422 >>> 0);
            $443 = $441 * $442;
            $$0$i27 = $443;
            break;
           }
          }
          $444 = ($emin$0$ph | 0) / -2 & -1;
          $445 = ($444 | 0) < 0;
          $446 = $445 << 31 >> 31;
          $447 = ($430 | 0) > ($446 | 0);
          $448 = $427 >>> 0 > $444 >>> 0;
          $449 = ($430 | 0) == ($446 | 0);
          $450 = $449 & $448;
          $451 = $447 | $450;
          if ($451) {
           $452 = ___errno_location() | 0;
           HEAP32[$452 >> 2] = 34;
           $453 = +($sign$0 | 0);
           $454 = $453 * 1797693134862315708145274.0e284;
           $455 = $454 * 1797693134862315708145274.0e284;
           $$0$i27 = $455;
           break;
          }
          $456 = $emin$0$ph + -106 | 0;
          $457 = ($456 | 0) < 0;
          $458 = $457 << 31 >> 31;
          $459 = ($430 | 0) < ($458 | 0);
          $460 = $427 >>> 0 < $456 >>> 0;
          $461 = ($430 | 0) == ($458 | 0);
          $462 = $461 & $460;
          $463 = $459 | $462;
          if ($463) {
           $464 = ___errno_location() | 0;
           HEAP32[$464 >> 2] = 34;
           $465 = +($sign$0 | 0);
           $466 = $465 * 2.2250738585072014e-308;
           $467 = $466 * 2.2250738585072014e-308;
           $$0$i27 = $467;
           break;
          }
          $468 = ($j$067$i | 0) == 0;
          if ($468) {
           $k$3$i = $k$063$i;
          } else {
           $469 = ($j$067$i | 0) < 9;
           if ($469) {
            $470 = $x$i + ($k$063$i << 2) | 0;
            $$promoted$i = HEAP32[$470 >> 2] | 0;
            $472 = $$promoted$i;
            $j$394$i = $j$067$i;
            while (1) {
             $471 = $472 * 10 | 0;
             $473 = $j$394$i + 1 | 0;
             $exitcond$i = ($473 | 0) == 9;
             if ($exitcond$i) {
              $$lcssa265 = $471;
              break;
             } else {
              $472 = $471;
              $j$394$i = $473;
             }
            }
            HEAP32[$470 >> 2] = $$lcssa265;
           }
           $474 = $k$063$i + 1 | 0;
           $k$3$i = $474;
          }
          $475 = ($lnz$057$i | 0) < 9;
          if ($475) {
           $476 = ($lnz$057$i | 0) <= ($427 | 0);
           $477 = ($427 | 0) < 18;
           $or$cond3$i = $476 & $477;
           if ($or$cond3$i) {
            $478 = ($427 | 0) == 9;
            if ($478) {
             $479 = +($sign$0 | 0);
             $480 = HEAP32[$x$i >> 2] | 0;
             $481 = +($480 >>> 0);
             $482 = $479 * $481;
             $$0$i27 = $482;
             break;
            }
            $483 = ($427 | 0) < 9;
            if ($483) {
             $484 = +($sign$0 | 0);
             $485 = HEAP32[$x$i >> 2] | 0;
             $486 = +($485 >>> 0);
             $487 = $484 * $486;
             $488 = 8 - $427 | 0;
             $489 = 2284 + ($488 << 2) | 0;
             $490 = HEAP32[$489 >> 2] | 0;
             $491 = +($490 | 0);
             $492 = $487 / $491;
             $$0$i27 = $492;
             break;
            }
            $$neg32$i = $bits$0$ph + 27 | 0;
            $493 = Math_imul($427, -3) | 0;
            $494 = $$neg32$i + $493 | 0;
            $495 = ($494 | 0) > 30;
            $$pre$i17 = HEAP32[$x$i >> 2] | 0;
            $496 = $$pre$i17 >>> $494;
            $497 = ($496 | 0) == 0;
            $or$cond182$i = $495 | $497;
            if ($or$cond182$i) {
             $498 = +($sign$0 | 0);
             $499 = +($$pre$i17 >>> 0);
             $500 = $498 * $499;
             $501 = $427 + -10 | 0;
             $502 = 2284 + ($501 << 2) | 0;
             $503 = HEAP32[$502 >> 2] | 0;
             $504 = +($503 | 0);
             $505 = $500 * $504;
             $$0$i27 = $505;
             break;
            }
           }
          }
          $506 = ($427 | 0) % 9 & -1;
          $507 = ($506 | 0) == 0;
          if ($507) {
           $a$2$ph38$i = 0;
           $e2$0$ph$i = 0;
           $rp$2$ph36$i = $427;
           $z$1$ph37$i = $k$3$i;
          } else {
           $508 = ($427 | 0) > -1;
           $509 = $506 + 9 | 0;
           $510 = $508 ? $506 : $509;
           $511 = 8 - $510 | 0;
           $512 = 2284 + ($511 << 2) | 0;
           $513 = HEAP32[$512 >> 2] | 0;
           $514 = ($k$3$i | 0) == 0;
           if ($514) {
            $a$0$lcssa151$i = 0;
            $rp$0$lcssa152$i = $427;
            $z$0$i = 0;
           } else {
            $515 = 1e9 / ($513 | 0) & -1;
            $a$085$i = 0;
            $carry$087$i = 0;
            $k$486$i = 0;
            $rp$084$i = $427;
            while (1) {
             $516 = $x$i + ($k$486$i << 2) | 0;
             $517 = HEAP32[$516 >> 2] | 0;
             $518 = ($517 >>> 0) % ($513 >>> 0) & -1;
             $519 = ($517 >>> 0) / ($513 >>> 0) & -1;
             $520 = $519 + $carry$087$i | 0;
             HEAP32[$516 >> 2] = $520;
             $521 = Math_imul($518, $515) | 0;
             $522 = ($k$486$i | 0) == ($a$085$i | 0);
             $523 = ($520 | 0) == 0;
             $or$cond16$i = $522 & $523;
             $524 = $k$486$i + 1 | 0;
             $525 = $524 & 127;
             $526 = $rp$084$i + -9 | 0;
             $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
             $a$1$i = $or$cond16$i ? $525 : $a$085$i;
             $527 = ($524 | 0) == ($k$3$i | 0);
             if ($527) {
              $$lcssa264 = $521;
              $a$1$i$lcssa = $a$1$i;
              $rp$1$i18$lcssa = $rp$1$i18;
              break;
             } else {
              $a$085$i = $a$1$i;
              $carry$087$i = $521;
              $k$486$i = $524;
              $rp$084$i = $rp$1$i18;
             }
            }
            $528 = ($$lcssa264 | 0) == 0;
            if ($528) {
             $a$0$lcssa151$i = $a$1$i$lcssa;
             $rp$0$lcssa152$i = $rp$1$i18$lcssa;
             $z$0$i = $k$3$i;
            } else {
             $529 = $k$3$i + 1 | 0;
             $530 = $x$i + ($k$3$i << 2) | 0;
             HEAP32[$530 >> 2] = $$lcssa264;
             $a$0$lcssa151$i = $a$1$i$lcssa;
             $rp$0$lcssa152$i = $rp$1$i18$lcssa;
             $z$0$i = $529;
            }
           }
           $531 = 9 - $510 | 0;
           $532 = $531 + $rp$0$lcssa152$i | 0;
           $a$2$ph38$i = $a$0$lcssa151$i;
           $e2$0$ph$i = 0;
           $rp$2$ph36$i = $532;
           $z$1$ph37$i = $z$0$i;
          }
          L284 : while (1) {
           $533 = ($rp$2$ph36$i | 0) < 18;
           $534 = ($rp$2$ph36$i | 0) == 18;
           $535 = $x$i + ($a$2$ph38$i << 2) | 0;
           $e2$0$i19 = $e2$0$ph$i;
           $z$1$i = $z$1$ph37$i;
           while (1) {
            if (!$533) {
             if (!$534) {
              $a$3$ph$i = $a$2$ph38$i;
              $e2$1$ph$i = $e2$0$i19;
              $rp$3$ph34$i = $rp$2$ph36$i;
              $z$5$ph$i = $z$1$i;
              break L284;
             }
             $536 = HEAP32[$535 >> 2] | 0;
             $537 = $536 >>> 0 < 9007199;
             if (!$537) {
              $a$3$ph$i = $a$2$ph38$i;
              $e2$1$ph$i = $e2$0$i19;
              $rp$3$ph34$i = 18;
              $z$5$ph$i = $z$1$i;
              break L284;
             }
            }
            $538 = $z$1$i + 127 | 0;
            $carry1$0$i = 0;
            $k$5$in$i = $538;
            $z$2$i = $z$1$i;
            while (1) {
             $k$5$i = $k$5$in$i & 127;
             $539 = $x$i + ($k$5$i << 2) | 0;
             $540 = HEAP32[$539 >> 2] | 0;
             $541 = _bitshift64Shl($540 | 0, 0, 29) | 0;
             $542 = tempRet0;
             $543 = _i64Add($541 | 0, $542 | 0, $carry1$0$i | 0, 0) | 0;
             $544 = tempRet0;
             $545 = $544 >>> 0 > 0;
             $546 = $543 >>> 0 > 1e9;
             $547 = ($544 | 0) == 0;
             $548 = $547 & $546;
             $549 = $545 | $548;
             if ($549) {
              $550 = ___udivdi3($543 | 0, $544 | 0, 1e9, 0) | 0;
              $551 = tempRet0;
              $552 = ___uremdi3($543 | 0, $544 | 0, 1e9, 0) | 0;
              $553 = tempRet0;
              $$sink$off0$i = $552;
              $carry1$1$i = $550;
             } else {
              $$sink$off0$i = $543;
              $carry1$1$i = 0;
             }
             HEAP32[$539 >> 2] = $$sink$off0$i;
             $554 = $z$2$i + 127 | 0;
             $555 = $554 & 127;
             $556 = ($k$5$i | 0) != ($555 | 0);
             $557 = ($k$5$i | 0) == ($a$2$ph38$i | 0);
             $or$cond17$i = $556 | $557;
             $558 = ($$sink$off0$i | 0) == 0;
             $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
             $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
             $559 = $k$5$i + -1 | 0;
             if ($557) {
              $carry1$1$i$lcssa = $carry1$1$i;
              $z$3$i$lcssa = $z$3$i;
              break;
             } else {
              $carry1$0$i = $carry1$1$i;
              $k$5$in$i = $559;
              $z$2$i = $z$3$i;
             }
            }
            $560 = $e2$0$i19 + -29 | 0;
            $561 = ($carry1$1$i$lcssa | 0) == 0;
            if ($561) {
             $e2$0$i19 = $560;
             $z$1$i = $z$3$i$lcssa;
            } else {
             $$lcssa263 = $560;
             $carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;
             $z$3$i$lcssa$lcssa = $z$3$i$lcssa;
             break;
            }
           }
           $562 = $rp$2$ph36$i + 9 | 0;
           $563 = $a$2$ph38$i + 127 | 0;
           $564 = $563 & 127;
           $565 = ($564 | 0) == ($z$3$i$lcssa$lcssa | 0);
           if ($565) {
            $566 = $z$3$i$lcssa$lcssa + 127 | 0;
            $567 = $566 & 127;
            $568 = $x$i + ($567 << 2) | 0;
            $569 = HEAP32[$568 >> 2] | 0;
            $570 = $z$3$i$lcssa$lcssa + 126 | 0;
            $571 = $570 & 127;
            $572 = $x$i + ($571 << 2) | 0;
            $573 = HEAP32[$572 >> 2] | 0;
            $574 = $573 | $569;
            HEAP32[$572 >> 2] = $574;
            $z$4$i = $567;
           } else {
            $z$4$i = $z$3$i$lcssa$lcssa;
           }
           $575 = $x$i + ($564 << 2) | 0;
           HEAP32[$575 >> 2] = $carry1$1$i$lcssa$lcssa;
           $a$2$ph38$i = $564;
           $e2$0$ph$i = $$lcssa263;
           $rp$2$ph36$i = $562;
           $z$1$ph37$i = $z$4$i;
          }
          L302 : while (1) {
           $606 = $z$5$ph$i + 1 | 0;
           $604 = $606 & 127;
           $607 = $z$5$ph$i + 127 | 0;
           $608 = $607 & 127;
           $609 = $x$i + ($608 << 2) | 0;
           $a$3$ph157$i = $a$3$ph$i;
           $e2$1$ph156$i = $e2$1$ph$i;
           $rp$3$ph$i = $rp$3$ph34$i;
           while (1) {
            $610 = ($rp$3$ph$i | 0) == 18;
            $611 = ($rp$3$ph$i | 0) > 27;
            $$18$i = $611 ? 9 : 1;
            $$not$i = $610 ^ 1;
            $a$3$i = $a$3$ph157$i;
            $e2$1$i = $e2$1$ph156$i;
            while (1) {
             $576 = $a$3$i & 127;
             $577 = ($576 | 0) == ($z$5$ph$i | 0);
             do {
              if ($577) {
               label = 219;
              } else {
               $578 = $x$i + ($576 << 2) | 0;
               $579 = HEAP32[$578 >> 2] | 0;
               $580 = $579 >>> 0 < 9007199;
               if ($580) {
                label = 219;
                break;
               }
               $581 = $579 >>> 0 > 9007199;
               if ($581) {
                break;
               }
               $582 = $a$3$i + 1 | 0;
               $583 = $582 & 127;
               $584 = ($583 | 0) == ($z$5$ph$i | 0);
               if ($584) {
                label = 219;
                break;
               }
               $690 = $x$i + ($583 << 2) | 0;
               $691 = HEAP32[$690 >> 2] | 0;
               $692 = $691 >>> 0 < 254740991;
               if ($692) {
                label = 219;
                break;
               }
               $693 = $691 >>> 0 > 254740991;
               $brmerge$i28 = $693 | $$not$i;
               if (!$brmerge$i28) {
                $617 = $576;
                $a$3$i249 = $a$3$i;
                $e2$1$i246 = $e2$1$i;
                $z$7$i = $z$5$ph$i;
                break L302;
               }
              }
             } while (0);
             if ((label | 0) == 219) {
              label = 0;
              if ($610) {
               label = 220;
               break L302;
              }
             }
             $585 = $e2$1$i + $$18$i | 0;
             $586 = ($a$3$i | 0) == ($z$5$ph$i | 0);
             if ($586) {
              $a$3$i = $z$5$ph$i;
              $e2$1$i = $585;
             } else {
              $$lcssa256 = $585;
              $a$3$i$lcssa248 = $a$3$i;
              break;
             }
            }
            $587 = 1 << $$18$i;
            $588 = $587 + -1 | 0;
            $589 = 1e9 >>> $$18$i;
            $a$478$i = $a$3$i$lcssa248;
            $carry3$081$i = 0;
            $k$679$i = $a$3$i$lcssa248;
            $rp$477$i = $rp$3$ph$i;
            while (1) {
             $590 = $x$i + ($k$679$i << 2) | 0;
             $591 = HEAP32[$590 >> 2] | 0;
             $592 = $591 & $588;
             $593 = $591 >>> $$18$i;
             $594 = $593 + $carry3$081$i | 0;
             HEAP32[$590 >> 2] = $594;
             $595 = Math_imul($592, $589) | 0;
             $596 = ($k$679$i | 0) == ($a$478$i | 0);
             $597 = ($594 | 0) == 0;
             $or$cond19$i = $596 & $597;
             $598 = $k$679$i + 1 | 0;
             $599 = $598 & 127;
             $600 = $rp$477$i + -9 | 0;
             $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
             $a$5$i = $or$cond19$i ? $599 : $a$478$i;
             $601 = ($599 | 0) == ($z$5$ph$i | 0);
             if ($601) {
              $$lcssa257 = $595;
              $a$5$i$lcssa = $a$5$i;
              $rp$5$i$lcssa = $rp$5$i;
              break;
             } else {
              $a$478$i = $a$5$i;
              $carry3$081$i = $595;
              $k$679$i = $599;
              $rp$477$i = $rp$5$i;
             }
            }
            $602 = ($$lcssa257 | 0) == 0;
            if ($602) {
             $a$3$ph157$i = $a$5$i$lcssa;
             $e2$1$ph156$i = $$lcssa256;
             $rp$3$ph$i = $rp$5$i$lcssa;
             continue;
            }
            $603 = ($604 | 0) == ($a$5$i$lcssa | 0);
            if (!$603) {
             $$lcssa256$lcssa = $$lcssa256;
             $$lcssa257$lcssa = $$lcssa257;
             $a$5$i$lcssa$lcssa = $a$5$i$lcssa;
             $rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
             break;
            }
            $612 = HEAP32[$609 >> 2] | 0;
            $613 = $612 | 1;
            HEAP32[$609 >> 2] = $613;
            $a$3$ph157$i = $a$5$i$lcssa;
            $e2$1$ph156$i = $$lcssa256;
            $rp$3$ph$i = $rp$5$i$lcssa;
           }
           $605 = $x$i + ($z$5$ph$i << 2) | 0;
           HEAP32[$605 >> 2] = $$lcssa257$lcssa;
           $a$3$ph$i = $a$5$i$lcssa$lcssa;
           $e2$1$ph$i = $$lcssa256$lcssa;
           $rp$3$ph34$i = $rp$5$i$lcssa$lcssa;
           $z$5$ph$i = $604;
          }
          if ((label | 0) == 220) {
           if ($577) {
            $614 = $604 + -1 | 0;
            $615 = $x$i + ($614 << 2) | 0;
            HEAP32[$615 >> 2] = 0;
            $617 = $z$5$ph$i;
            $a$3$i249 = $a$3$i;
            $e2$1$i246 = $e2$1$i;
            $z$7$i = $604;
           } else {
            $617 = $576;
            $a$3$i249 = $a$3$i;
            $e2$1$i246 = $e2$1$i;
            $z$7$i = $z$5$ph$i;
           }
          }
          $616 = $x$i + ($617 << 2) | 0;
          $618 = HEAP32[$616 >> 2] | 0;
          $619 = +($618 >>> 0);
          $620 = $a$3$i249 + 1 | 0;
          $621 = $620 & 127;
          $622 = ($621 | 0) == ($z$7$i | 0);
          if ($622) {
           $679 = $a$3$i249 + 2 | 0;
           $680 = $679 & 127;
           $681 = $680 + -1 | 0;
           $682 = $x$i + ($681 << 2) | 0;
           HEAP32[$682 >> 2] = 0;
           $z$7$1$i = $680;
          } else {
           $z$7$1$i = $z$7$i;
          }
          $683 = $619 * 1.0e9;
          $684 = $x$i + ($621 << 2) | 0;
          $685 = HEAP32[$684 >> 2] | 0;
          $686 = +($685 >>> 0);
          $687 = $683 + $686;
          $643 = +($sign$0 | 0);
          $625 = $643 * $687;
          $663 = $e2$1$i246 + 53 | 0;
          $669 = $663 - $emin$0$ph | 0;
          $670 = ($669 | 0) < ($bits$0$ph | 0);
          $688 = ($669 | 0) < 0;
          $$$i = $688 ? 0 : $669;
          $denormal$0$i = $670 & 1;
          $$010$i = $670 ? $$$i : $bits$0$ph;
          $689 = ($$010$i | 0) < 53;
          if ($689) {
           $623 = 105 - $$010$i | 0;
           $624 = +_scalbn(1.0, $623);
           $626 = +_copysignl($624, $625);
           $627 = 53 - $$010$i | 0;
           $628 = +_scalbn(1.0, $627);
           $629 = +_fmodl($625, $628);
           $630 = $625 - $629;
           $631 = $626 + $630;
           $bias$0$i25 = $626;
           $frac$0$i = $629;
           $y$1$i24 = $631;
          } else {
           $bias$0$i25 = 0.0;
           $frac$0$i = 0.0;
           $y$1$i24 = $625;
          }
          $632 = $a$3$i249 + 2 | 0;
          $633 = $632 & 127;
          $634 = ($633 | 0) == ($z$7$1$i | 0);
          do {
           if ($634) {
            $frac$2$i = $frac$0$i;
           } else {
            $635 = $x$i + ($633 << 2) | 0;
            $636 = HEAP32[$635 >> 2] | 0;
            $637 = $636 >>> 0 < 5e8;
            do {
             if ($637) {
              $638 = ($636 | 0) == 0;
              if ($638) {
               $639 = $a$3$i249 + 3 | 0;
               $640 = $639 & 127;
               $641 = ($640 | 0) == ($z$7$1$i | 0);
               if ($641) {
                $frac$1$i = $frac$0$i;
                break;
               }
              }
              $642 = $643 * .25;
              $644 = $642 + $frac$0$i;
              $frac$1$i = $644;
             } else {
              $645 = $636 >>> 0 > 5e8;
              if ($645) {
               $646 = $643 * .75;
               $647 = $646 + $frac$0$i;
               $frac$1$i = $647;
               break;
              }
              $648 = $a$3$i249 + 3 | 0;
              $649 = $648 & 127;
              $650 = ($649 | 0) == ($z$7$1$i | 0);
              if ($650) {
               $651 = $643 * .5;
               $652 = $651 + $frac$0$i;
               $frac$1$i = $652;
               break;
              } else {
               $653 = $643 * .75;
               $654 = $653 + $frac$0$i;
               $frac$1$i = $654;
               break;
              }
             }
            } while (0);
            $655 = 53 - $$010$i | 0;
            $656 = ($655 | 0) > 1;
            if (!$656) {
             $frac$2$i = $frac$1$i;
             break;
            }
            $657 = +_fmodl($frac$1$i, 1.0);
            $658 = $657 != 0.0;
            if ($658) {
             $frac$2$i = $frac$1$i;
             break;
            }
            $659 = $frac$1$i + 1.0;
            $frac$2$i = $659;
           }
          } while (0);
          $660 = $y$1$i24 + $frac$2$i;
          $661 = $660 - $bias$0$i25;
          $662 = $663 & 2147483647;
          $664 = -2 - $sum$i | 0;
          $665 = ($662 | 0) > ($664 | 0);
          do {
           if ($665) {
            $666 = +Math_abs(+$661);
            $667 = !($666 >= 9007199254740992.0);
            if ($667) {
             $denormal$2$i = $denormal$0$i;
             $e2$2$i = $e2$1$i246;
             $y$2$i26 = $661;
            } else {
             $668 = ($$010$i | 0) == ($669 | 0);
             $or$cond20$i = $670 & $668;
             $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
             $671 = $661 * .5;
             $672 = $e2$1$i246 + 1 | 0;
             $denormal$2$i = $denormal$1$i;
             $e2$2$i = $672;
             $y$2$i26 = $671;
            }
            $673 = $e2$2$i + 50 | 0;
            $674 = ($673 | 0) > ($330 | 0);
            if (!$674) {
             $675 = ($denormal$2$i | 0) != 0;
             $676 = $frac$2$i != 0.0;
             $or$cond8$i = $676 & $675;
             if (!$or$cond8$i) {
              $e2$3$i = $e2$2$i;
              $y$3$i = $y$2$i26;
              break;
             }
            }
            $677 = ___errno_location() | 0;
            HEAP32[$677 >> 2] = 34;
            $e2$3$i = $e2$2$i;
            $y$3$i = $y$2$i26;
           } else {
            $e2$3$i = $e2$1$i246;
            $y$3$i = $661;
           }
          } while (0);
          $678 = +_scalbnl($y$3$i, $e2$3$i);
          $$0$i27 = $678;
         }
        } while (0);
        $$0 = $$0$i27;
        break L4;
        break;
       }
      default:
       {
        $109 = HEAP32[$1 >> 2] | 0;
        $110 = ($109 | 0) == (0 | 0);
        if (!$110) {
         $111 = HEAP32[$0 >> 2] | 0;
         $112 = $111 + -1 | 0;
         HEAP32[$0 >> 2] = $112;
        }
        $113 = ___errno_location() | 0;
        HEAP32[$113 >> 2] = 22;
        ___shlim($f, 0);
        $$0 = 0.0;
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $41 = HEAP32[$1 >> 2] | 0;
    $42 = ($41 | 0) == (0 | 0);
    if (!$42) {
     $43 = HEAP32[$0 >> 2] | 0;
     $44 = $43 + -1 | 0;
     HEAP32[$0 >> 2] = $44;
    }
    $45 = ($pok | 0) != 0;
    $46 = $i$0$lcssa >>> 0 > 3;
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while (1) {
      if (!$42) {
       $47 = HEAP32[$0 >> 2] | 0;
       $48 = $47 + -1 | 0;
       HEAP32[$0 >> 2] = $48;
      }
      $49 = $i$1 + -1 | 0;
      $$old8 = $49 >>> 0 > 3;
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = +($sign$0 | 0);
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0, $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0, $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0, $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0, $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624 | 0;
 $big$i = sp + 24 | 0;
 $e2$i = sp + 16 | 0;
 $buf$i = sp + 588 | 0;
 $ebuf0$i = sp + 576 | 0;
 $arg = sp;
 $buf = sp + 536 | 0;
 $wc = sp + 8 | 0;
 $mb = sp + 528 | 0;
 $0 = ($f | 0) != (0 | 0);
 $1 = $buf + 40 | 0;
 $2 = $1;
 $3 = $buf + 39 | 0;
 $4 = $wc + 4 | 0;
 $5 = $ebuf0$i + 12 | 0;
 $6 = $ebuf0$i + 11 | 0;
 $7 = $buf$i;
 $8 = $5;
 $9 = $8 - $7 | 0;
 $10 = -2 - $7 | 0;
 $11 = $8 + 2 | 0;
 $12 = $big$i + 288 | 0;
 $13 = $buf$i + 9 | 0;
 $14 = $13;
 $15 = $buf$i + 8 | 0;
 $cnt$0 = 0;
 $fmt41 = $fmt;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  $16 = ($cnt$0 | 0) > -1;
  do {
   if ($16) {
    $17 = 2147483647 - $cnt$0 | 0;
    $18 = ($l$0 | 0) > ($17 | 0);
    if ($18) {
     $19 = ___errno_location() | 0;
     HEAP32[$19 >> 2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = $l$0 + $cnt$0 | 0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while (0);
  $21 = HEAP8[$fmt41 >> 0] | 0;
  $22 = $21 << 24 >> 24 == 0;
  if ($22) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;
   $fmt40 = $fmt41;
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $fmt39101 = $fmt40;
     $z$0102 = $fmt40;
     label = 9;
     break L9;
     break;
    }
   case 0:
    {
     $fmt39$lcssa = $fmt40;
     $z$0$lcssa = $fmt40;
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $fmt40 + 1 | 0;
   $$pre = HEAP8[$24 >> 0] | 0;
   $23 = $$pre;
   $fmt40 = $24;
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0;
     $25 = $fmt39101 + 1 | 0;
     $26 = HEAP8[$25 >> 0] | 0;
     $27 = $26 << 24 >> 24 == 37;
     if (!$27) {
      $fmt39$lcssa = $fmt39101;
      $z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = $z$0102 + 1 | 0;
     $29 = $fmt39101 + 2 | 0;
     $30 = HEAP8[$29 >> 0] | 0;
     $31 = $30 << 24 >> 24 == 37;
     if ($31) {
      $fmt39101 = $29;
      $z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;
      $z$0$lcssa = $28;
      break;
     }
    }
   }
  } while (0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = $32 - $33 | 0;
  if ($0) {
   $35 = HEAP32[$f >> 2] | 0;
   $36 = $35 & 32;
   $37 = ($36 | 0) == 0;
   if ($37) {
    ___fwritex($fmt41, $34, $f) | 0;
   }
  }
  $38 = ($z$0$lcssa | 0) == ($fmt41 | 0);
  if (!$38) {
   $l10n$0$phi = $l10n$0;
   $cnt$0 = $cnt$1;
   $fmt41 = $fmt39$lcssa;
   $l$0 = $34;
   $l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = $fmt39$lcssa + 1 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = $41 + -48 | 0;
  $isdigit = $isdigittmp >>> 0 < 10;
  if ($isdigit) {
   $42 = $fmt39$lcssa + 2 | 0;
   $43 = HEAP8[$42 >> 0] | 0;
   $44 = $43 << 24 >> 24 == 36;
   $45 = $fmt39$lcssa + 3 | 0;
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51 >> 0] | 0;
   $47 = $$pre193;
   $argpos$0 = $isdigittmp$;
   $l10n$1 = $$l10n$0;
   $storemerge = $$51;
  } else {
   $47 = $40;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48 | 0) == 32;
  L25 : do {
   if ($49) {
    $51 = $46;
    $56 = $47;
    $fl$0109 = 0;
    $storemerge8108 = $storemerge;
    while (1) {
     $50 = $51 + -32 | 0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53 | 0) == 0;
     if ($54) {
      $66 = $56;
      $fl$062 = $fl$0109;
      $storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = $55 + -32 | 0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = $storemerge8108 + 1 | 0;
     $61 = HEAP8[$60 >> 0] | 0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63 | 0) == 32;
     if ($64) {
      $51 = $62;
      $56 = $61;
      $fl$0109 = $59;
      $storemerge8108 = $60;
     } else {
      $66 = $61;
      $fl$062 = $59;
      $storemerge860 = $60;
      break;
     }
    }
   } else {
    $66 = $47;
    $fl$062 = 0;
    $storemerge860 = $storemerge;
   }
  } while (0);
  $65 = $66 << 24 >> 24 == 42;
  do {
   if ($65) {
    $67 = $storemerge860 + 1 | 0;
    $68 = HEAP8[$67 >> 0] | 0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = $69 + -48 | 0;
    $isdigit12 = $isdigittmp11 >>> 0 < 10;
    if ($isdigit12) {
     $70 = $storemerge860 + 2 | 0;
     $71 = HEAP8[$70 >> 0] | 0;
     $72 = $71 << 24 >> 24 == 36;
     if ($72) {
      $73 = $nl_type + ($isdigittmp11 << 2) | 0;
      HEAP32[$73 >> 2] = 10;
      $74 = HEAP8[$67 >> 0] | 0;
      $75 = $74 << 24 >> 24;
      $76 = $75 + -48 | 0;
      $77 = $nl_arg + ($76 << 3) | 0;
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79 >> 2] | 0;
      $81 = $78 + 4 | 0;
      $82 = $81;
      $83 = HEAP32[$82 >> 2] | 0;
      $84 = $storemerge860 + 3 | 0;
      $l10n$2 = 1;
      $storemerge13 = $84;
      $w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label | 0) == 24) {
     label = 0;
     $85 = ($l10n$1 | 0) == 0;
     if (!$85) {
      $$0 = -1;
      break L1;
     }
     if (!$0) {
      $fl$1 = $fl$062;
      $fmt42 = $67;
      $l10n$3 = 0;
      $w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap >> 2] | 0;
     $86 = $arglist_current;
     $87 = 0 + 4 | 0;
     $expanded4 = $87;
     $expanded = $expanded4 - 1 | 0;
     $88 = $86 + $expanded | 0;
     $89 = 0 + 4 | 0;
     $expanded8 = $89;
     $expanded7 = $expanded8 - 1 | 0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91 >> 2] | 0;
     $arglist_next = $91 + 4 | 0;
     HEAP32[$ap >> 2] = $arglist_next;
     $l10n$2 = 0;
     $storemerge13 = $67;
     $w$0 = $92;
    }
    $93 = ($w$0 | 0) < 0;
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = 0 - $w$0 | 0;
     $fl$1 = $94;
     $fmt42 = $storemerge13;
     $l10n$3 = $l10n$2;
     $w$1 = $95;
    } else {
     $fl$1 = $fl$062;
     $fmt42 = $storemerge13;
     $l10n$3 = $l10n$2;
     $w$1 = $w$0;
    }
   } else {
    $96 = $66 << 24 >> 24;
    $isdigittmp1$i = $96 + -48 | 0;
    $isdigit2$i = $isdigittmp1$i >>> 0 < 10;
    if ($isdigit2$i) {
     $100 = $storemerge860;
     $i$03$i = 0;
     $isdigittmp4$i = $isdigittmp1$i;
     while (1) {
      $97 = $i$03$i * 10 | 0;
      $98 = $97 + $isdigittmp4$i | 0;
      $99 = $100 + 1 | 0;
      $101 = HEAP8[$99 >> 0] | 0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = $102 + -48 | 0;
      $isdigit$i = $isdigittmp$i >>> 0 < 10;
      if ($isdigit$i) {
       $100 = $99;
       $i$03$i = $98;
       $isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;
       $$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa | 0) < 0;
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;
      $fmt42 = $$lcssa318;
      $l10n$3 = $l10n$1;
      $w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;
     $fmt42 = $storemerge860;
     $l10n$3 = $l10n$1;
     $w$1 = 0;
    }
   }
  } while (0);
  $104 = HEAP8[$fmt42 >> 0] | 0;
  $105 = $104 << 24 >> 24 == 46;
  L46 : do {
   if ($105) {
    $106 = $fmt42 + 1 | 0;
    $107 = HEAP8[$106 >> 0] | 0;
    $108 = $107 << 24 >> 24 == 42;
    if (!$108) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = $135 + -48 | 0;
     $isdigit2$i23 = $isdigittmp1$i22 >>> 0 < 10;
     if ($isdigit2$i23) {
      $139 = $106;
      $i$03$i25 = 0;
      $isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;
      $p$0 = 0;
      break;
     }
     while (1) {
      $136 = $i$03$i25 * 10 | 0;
      $137 = $136 + $isdigittmp4$i24 | 0;
      $138 = $139 + 1 | 0;
      $140 = HEAP8[$138 >> 0] | 0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = $141 + -48 | 0;
      $isdigit$i27 = $isdigittmp$i26 >>> 0 < 10;
      if ($isdigit$i27) {
       $139 = $138;
       $i$03$i25 = $137;
       $isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;
       $p$0 = $137;
       break L46;
      }
     }
    }
    $109 = $fmt42 + 2 | 0;
    $110 = HEAP8[$109 >> 0] | 0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = $111 + -48 | 0;
    $isdigit10 = $isdigittmp9 >>> 0 < 10;
    if ($isdigit10) {
     $112 = $fmt42 + 3 | 0;
     $113 = HEAP8[$112 >> 0] | 0;
     $114 = $113 << 24 >> 24 == 36;
     if ($114) {
      $115 = $nl_type + ($isdigittmp9 << 2) | 0;
      HEAP32[$115 >> 2] = 10;
      $116 = HEAP8[$109 >> 0] | 0;
      $117 = $116 << 24 >> 24;
      $118 = $117 + -48 | 0;
      $119 = $nl_arg + ($118 << 3) | 0;
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121 >> 2] | 0;
      $123 = $120 + 4 | 0;
      $124 = $123;
      $125 = HEAP32[$124 >> 2] | 0;
      $126 = $fmt42 + 4 | 0;
      $fmt45 = $126;
      $p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3 | 0) == 0;
    if (!$127) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap >> 2] | 0;
     $128 = $arglist_current2;
     $129 = 0 + 4 | 0;
     $expanded11 = $129;
     $expanded10 = $expanded11 - 1 | 0;
     $130 = $128 + $expanded10 | 0;
     $131 = 0 + 4 | 0;
     $expanded15 = $131;
     $expanded14 = $expanded15 - 1 | 0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133 >> 2] | 0;
     $arglist_next3 = $133 + 4 | 0;
     HEAP32[$ap >> 2] = $arglist_next3;
     $fmt45 = $109;
     $p$0 = $134;
    } else {
     $fmt45 = $109;
     $p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;
    $p$0 = -1;
   }
  } while (0);
  $fmt44 = $fmt45;
  $st$0 = 0;
  while (1) {
   $142 = HEAP8[$fmt44 >> 0] | 0;
   $143 = $142 << 24 >> 24;
   $144 = $143 + -65 | 0;
   $145 = $144 >>> 0 > 57;
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = $fmt44 + 1 | 0;
   $147 = (385045 + ($st$0 * 58 | 0) | 0) + $144 | 0;
   $148 = HEAP8[$147 >> 0] | 0;
   $149 = $148 & 255;
   $150 = $149 + -1 | 0;
   $151 = $150 >>> 0 < 8;
   if ($151) {
    $fmt44 = $146;
    $st$0 = $149;
   } else {
    $$lcssa323 = $146;
    $$lcssa324 = $148;
    $$lcssa325 = $149;
    $fmt44$lcssa321 = $fmt44;
    $st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = $$lcssa324 << 24 >> 24 == 0;
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = $$lcssa324 << 24 >> 24 == 19;
  $154 = ($argpos$0 | 0) > -1;
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = $nl_type + ($argpos$0 << 2) | 0;
     HEAP32[$155 >> 2] = $$lcssa325;
     $156 = $nl_arg + ($argpos$0 << 3) | 0;
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158 >> 2] | 0;
     $160 = $157 + 4 | 0;
     $161 = $160;
     $162 = HEAP32[$161 >> 2] | 0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164 >> 2] = $159;
     $165 = $163 + 4 | 0;
     $166 = $165;
     HEAP32[$166 >> 2] = $162;
     label = 52;
     break;
    }
    if (!$0) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg, $$lcssa325, $ap);
   }
  } while (0);
  if ((label | 0) == 52) {
   label = 0;
   if (!$0) {
    $cnt$0 = $cnt$1;
    $fmt41 = $$lcssa323;
    $l$0 = $34;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321 >> 0] | 0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322 | 0) != 0;
  $170 = $168 & 15;
  $171 = ($170 | 0) == 3;
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173 | 0) == 0;
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75 : do {
   switch ($t$0 | 0) {
   case 110:
    {
     switch ($st$0$lcssa322 | 0) {
     case 0:
      {
       $182 = HEAP32[$arg >> 2] | 0;
       HEAP32[$182 >> 2] = $cnt$1;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 1:
      {
       $183 = HEAP32[$arg >> 2] | 0;
       HEAP32[$183 >> 2] = $cnt$1;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 2:
      {
       $184 = ($cnt$1 | 0) < 0;
       $185 = $184 << 31 >> 31;
       $186 = HEAP32[$arg >> 2] | 0;
       $187 = $186;
       $188 = $187;
       HEAP32[$188 >> 2] = $cnt$1;
       $189 = $187 + 4 | 0;
       $190 = $189;
       HEAP32[$190 >> 2] = $185;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 3:
      {
       $191 = $cnt$1 & 65535;
       $192 = HEAP32[$arg >> 2] | 0;
       HEAP16[$192 >> 1] = $191;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 4:
      {
       $193 = $cnt$1 & 255;
       $194 = HEAP32[$arg >> 2] | 0;
       HEAP8[$194 >> 0] = $193;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 6:
      {
       $195 = HEAP32[$arg >> 2] | 0;
       HEAP32[$195 >> 2] = $cnt$1;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     case 7:
      {
       $196 = ($cnt$1 | 0) < 0;
       $197 = $196 << 31 >> 31;
       $198 = HEAP32[$arg >> 2] | 0;
       $199 = $198;
       $200 = $199;
       HEAP32[$200 >> 2] = $cnt$1;
       $201 = $199 + 4 | 0;
       $202 = $201;
       HEAP32[$202 >> 2] = $197;
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
       break;
      }
     default:
      {
       $cnt$0 = $cnt$1;
       $fmt41 = $$lcssa323;
       $l$0 = $34;
       $l10n$0 = $l10n$3;
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $203 = $p$0 >>> 0 > 8;
     $204 = $203 ? $p$0 : 8;
     $205 = $fl$1$ | 8;
     $fl$3 = $205;
     $p$1 = $204;
     $t$1 = 120;
     label = 64;
     break;
    }
   case 88:
   case 120:
    {
     $fl$3 = $fl$1$;
     $p$1 = $p$0;
     $t$1 = $t$0;
     label = 64;
     break;
    }
   case 111:
    {
     $243 = $arg;
     $244 = $243;
     $245 = HEAP32[$244 >> 2] | 0;
     $246 = $243 + 4 | 0;
     $247 = $246;
     $248 = HEAP32[$247 >> 2] | 0;
     $249 = ($245 | 0) == 0;
     $250 = ($248 | 0) == 0;
     $251 = $249 & $250;
     if ($251) {
      $$0$lcssa$i = $1;
     } else {
      $$03$i33 = $1;
      $253 = $245;
      $257 = $248;
      while (1) {
       $252 = $253 & 7;
       $254 = $252 | 48;
       $255 = $254 & 255;
       $256 = $$03$i33 + -1 | 0;
       HEAP8[$256 >> 0] = $255;
       $258 = _bitshift64Lshr($253 | 0, $257 | 0, 3) | 0;
       $259 = tempRet0;
       $260 = ($258 | 0) == 0;
       $261 = ($259 | 0) == 0;
       $262 = $260 & $261;
       if ($262) {
        $$0$lcssa$i = $256;
        break;
       } else {
        $$03$i33 = $256;
        $253 = $258;
        $257 = $259;
       }
      }
     }
     $263 = $fl$1$ & 8;
     $264 = ($263 | 0) == 0;
     if ($264) {
      $a$0 = $$0$lcssa$i;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = 0;
      $prefix$1 = 385525;
      label = 77;
     } else {
      $265 = $$0$lcssa$i;
      $266 = $2 - $265 | 0;
      $267 = $266 + 1 | 0;
      $268 = ($p$0 | 0) < ($267 | 0);
      $$p$0 = $268 ? $267 : $p$0;
      $a$0 = $$0$lcssa$i;
      $fl$4 = $fl$1$;
      $p$2 = $$p$0;
      $pl$1 = 0;
      $prefix$1 = 385525;
      label = 77;
     }
     break;
    }
   case 105:
   case 100:
    {
     $269 = $arg;
     $270 = $269;
     $271 = HEAP32[$270 >> 2] | 0;
     $272 = $269 + 4 | 0;
     $273 = $272;
     $274 = HEAP32[$273 >> 2] | 0;
     $275 = ($274 | 0) < 0;
     if ($275) {
      $276 = _i64Subtract(0, 0, $271 | 0, $274 | 0) | 0;
      $277 = tempRet0;
      $278 = $arg;
      $279 = $278;
      HEAP32[$279 >> 2] = $276;
      $280 = $278 + 4 | 0;
      $281 = $280;
      HEAP32[$281 >> 2] = $277;
      $286 = $276;
      $287 = $277;
      $pl$0 = 1;
      $prefix$0 = 385525;
      label = 76;
      break L75;
     }
     $282 = $fl$1$ & 2048;
     $283 = ($282 | 0) == 0;
     if ($283) {
      $284 = $fl$1$ & 1;
      $285 = ($284 | 0) == 0;
      $$ = $285 ? 385525 : 385527;
      $286 = $271;
      $287 = $274;
      $pl$0 = $284;
      $prefix$0 = $$;
      label = 76;
     } else {
      $286 = $271;
      $287 = $274;
      $pl$0 = 1;
      $prefix$0 = 385526;
      label = 76;
     }
     break;
    }
   case 117:
    {
     $176 = $arg;
     $177 = $176;
     $178 = HEAP32[$177 >> 2] | 0;
     $179 = $176 + 4 | 0;
     $180 = $179;
     $181 = HEAP32[$180 >> 2] | 0;
     $286 = $178;
     $287 = $181;
     $pl$0 = 0;
     $prefix$0 = 385525;
     label = 76;
     break;
    }
   case 99:
    {
     $307 = $arg;
     $308 = $307;
     $309 = HEAP32[$308 >> 2] | 0;
     $310 = $307 + 4 | 0;
     $311 = $310;
     $312 = HEAP32[$311 >> 2] | 0;
     $313 = $309 & 255;
     HEAP8[$3 >> 0] = $313;
     $a$2 = $3;
     $fl$6 = $175;
     $p$5 = 1;
     $pl$2 = 0;
     $prefix$2 = 385525;
     $z$2 = $1;
     break;
    }
   case 109:
    {
     $314 = ___errno_location() | 0;
     $315 = HEAP32[$314 >> 2] | 0;
     $316 = _strerror($315) | 0;
     $a$1 = $316;
     label = 82;
     break;
    }
   case 115:
    {
     $317 = HEAP32[$arg >> 2] | 0;
     $318 = ($317 | 0) != (0 | 0);
     $319 = $318 ? $317 : 385535;
     $a$1 = $319;
     label = 82;
     break;
    }
   case 67:
    {
     $326 = $arg;
     $327 = $326;
     $328 = HEAP32[$327 >> 2] | 0;
     $329 = $326 + 4 | 0;
     $330 = $329;
     $331 = HEAP32[$330 >> 2] | 0;
     HEAP32[$wc >> 2] = $328;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$arg >> 2] = $wc;
     $p$4198 = -1;
     label = 86;
     break;
    }
   case 83:
    {
     $332 = ($p$0 | 0) == 0;
     if ($332) {
      _pad($f, 32, $w$1, 0, $fl$1$);
      $i$0$lcssa200 = 0;
      label = 98;
     } else {
      $p$4198 = $p$0;
      label = 86;
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $359 = +HEAPF64[$arg >> 3];
     HEAP32[$e2$i >> 2] = 0;
     HEAPF64[tempDoublePtr >> 3] = $359;
     $360 = HEAP32[tempDoublePtr >> 2] | 0;
     $361 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     $362 = ($361 | 0) < 0;
     if ($362) {
      $363 = -$359;
      $$07$i = $363;
      $pl$0$i = 1;
      $prefix$0$i = 385542;
     } else {
      $364 = $fl$1$ & 2048;
      $365 = ($364 | 0) == 0;
      if ($365) {
       $366 = $fl$1$ & 1;
       $367 = ($366 | 0) == 0;
       $$$i = $367 ? 385543 : 385548;
       $$07$i = $359;
       $pl$0$i = $366;
       $prefix$0$i = $$$i;
      } else {
       $$07$i = $359;
       $pl$0$i = 1;
       $prefix$0$i = 385545;
      }
     }
     HEAPF64[tempDoublePtr >> 3] = $$07$i;
     $368 = HEAP32[tempDoublePtr >> 2] | 0;
     $369 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     $370 = $369 & 2146435072;
     $371 = $370 >>> 0 < 2146435072;
     $372 = 0 < 0;
     $373 = ($370 | 0) == 2146435072;
     $374 = $373 & $372;
     $375 = $371 | $374;
     do {
      if ($375) {
       $391 = +_frexpl($$07$i, $e2$i);
       $392 = $391 * 2.0;
       $393 = $392 != 0.0;
       if ($393) {
        $394 = HEAP32[$e2$i >> 2] | 0;
        $395 = $394 + -1 | 0;
        HEAP32[$e2$i >> 2] = $395;
       }
       $396 = $t$0 | 32;
       $397 = ($396 | 0) == 97;
       if ($397) {
        $398 = $t$0 & 32;
        $399 = ($398 | 0) == 0;
        $400 = $prefix$0$i + 9 | 0;
        $prefix$0$$i = $399 ? $prefix$0$i : $400;
        $401 = $pl$0$i | 2;
        $402 = $p$0 >>> 0 > 11;
        $403 = 12 - $p$0 | 0;
        $404 = ($403 | 0) == 0;
        $405 = $402 | $404;
        do {
         if ($405) {
          $$1$i = $392;
         } else {
          $re$169$i = $403;
          $round$068$i = 8.0;
          while (1) {
           $406 = $re$169$i + -1 | 0;
           $407 = $round$068$i * 16.0;
           $408 = ($406 | 0) == 0;
           if ($408) {
            $$lcssa342 = $407;
            break;
           } else {
            $re$169$i = $406;
            $round$068$i = $407;
           }
          }
          $409 = HEAP8[$prefix$0$$i >> 0] | 0;
          $410 = $409 << 24 >> 24 == 45;
          if ($410) {
           $411 = -$392;
           $412 = $411 - $$lcssa342;
           $413 = $$lcssa342 + $412;
           $414 = -$413;
           $$1$i = $414;
           break;
          } else {
           $415 = $392 + $$lcssa342;
           $416 = $415 - $$lcssa342;
           $$1$i = $416;
           break;
          }
         }
        } while (0);
        $417 = HEAP32[$e2$i >> 2] | 0;
        $418 = ($417 | 0) < 0;
        $419 = 0 - $417 | 0;
        $420 = $418 ? $419 : $417;
        $421 = ($420 | 0) < 0;
        $422 = $421 << 31 >> 31;
        $423 = _fmt_u($420, $422, $5) | 0;
        $424 = ($423 | 0) == ($5 | 0);
        if ($424) {
         HEAP8[$6 >> 0] = 48;
         $estr$0$i = $6;
        } else {
         $estr$0$i = $423;
        }
        $425 = $417 >> 31;
        $426 = $425 & 2;
        $427 = $426 + 43 | 0;
        $428 = $427 & 255;
        $429 = $estr$0$i + -1 | 0;
        HEAP8[$429 >> 0] = $428;
        $430 = $t$0 + 15 | 0;
        $431 = $430 & 255;
        $432 = $estr$0$i + -2 | 0;
        HEAP8[$432 >> 0] = $431;
        $notrhs$i = ($p$0 | 0) < 1;
        $433 = $fl$1$ & 8;
        $434 = ($433 | 0) == 0;
        $$2$i = $$1$i;
        $s$0$i = $buf$i;
        while (1) {
         $435 = ~~$$2$i;
         $436 = 385509 + $435 | 0;
         $437 = HEAP8[$436 >> 0] | 0;
         $438 = $437 & 255;
         $439 = $438 | $398;
         $440 = $439 & 255;
         $441 = $s$0$i + 1 | 0;
         HEAP8[$s$0$i >> 0] = $440;
         $442 = +($435 | 0);
         $443 = $$2$i - $442;
         $444 = $443 * 16.0;
         $445 = $441;
         $446 = $445 - $7 | 0;
         $447 = ($446 | 0) == 1;
         do {
          if ($447) {
           $notlhs$i = $444 == 0.0;
           $or$cond3$not$i = $notrhs$i & $notlhs$i;
           $or$cond$i = $434 & $or$cond3$not$i;
           if ($or$cond$i) {
            $s$1$i = $441;
            break;
           }
           $448 = $s$0$i + 2 | 0;
           HEAP8[$441 >> 0] = 46;
           $s$1$i = $448;
          } else {
           $s$1$i = $441;
          }
         } while (0);
         $449 = $444 != 0.0;
         if ($449) {
          $$2$i = $444;
          $s$0$i = $s$1$i;
         } else {
          $s$1$i$lcssa = $s$1$i;
          break;
         }
        }
        $450 = ($p$0 | 0) != 0;
        $$pre182$i = $s$1$i$lcssa;
        $451 = $10 + $$pre182$i | 0;
        $452 = ($451 | 0) < ($p$0 | 0);
        $or$cond240 = $450 & $452;
        $453 = $432;
        $454 = $11 + $p$0 | 0;
        $455 = $454 - $453 | 0;
        $456 = $432;
        $457 = $9 - $456 | 0;
        $458 = $457 + $$pre182$i | 0;
        $l$0$i = $or$cond240 ? $455 : $458;
        $459 = $l$0$i + $401 | 0;
        _pad($f, 32, $w$1, $459, $fl$1$);
        $460 = HEAP32[$f >> 2] | 0;
        $461 = $460 & 32;
        $462 = ($461 | 0) == 0;
        if ($462) {
         ___fwritex($prefix$0$$i, $401, $f) | 0;
        }
        $463 = $fl$1$ ^ 65536;
        _pad($f, 48, $w$1, $459, $463);
        $464 = $$pre182$i - $7 | 0;
        $465 = HEAP32[$f >> 2] | 0;
        $466 = $465 & 32;
        $467 = ($466 | 0) == 0;
        if ($467) {
         ___fwritex($buf$i, $464, $f) | 0;
        }
        $468 = $432;
        $469 = $8 - $468 | 0;
        $sum = $464 + $469 | 0;
        $470 = $l$0$i - $sum | 0;
        _pad($f, 48, $470, 0, 0);
        $471 = HEAP32[$f >> 2] | 0;
        $472 = $471 & 32;
        $473 = ($472 | 0) == 0;
        if ($473) {
         ___fwritex($432, $469, $f) | 0;
        }
        $474 = $fl$1$ ^ 8192;
        _pad($f, 32, $w$1, $459, $474);
        $475 = ($459 | 0) < ($w$1 | 0);
        $w$$i = $475 ? $w$1 : $459;
        $$0$i = $w$$i;
        break;
       }
       $476 = ($p$0 | 0) < 0;
       $$p$i = $476 ? 6 : $p$0;
       if ($393) {
        $477 = $392 * 268435456.0;
        $478 = HEAP32[$e2$i >> 2] | 0;
        $479 = $478 + -28 | 0;
        HEAP32[$e2$i >> 2] = $479;
        $$3$i = $477;
        $481 = $479;
       } else {
        $$pre179$i = HEAP32[$e2$i >> 2] | 0;
        $$3$i = $392;
        $481 = $$pre179$i;
       }
       $480 = ($481 | 0) < 0;
       $$31$i = $480 ? $big$i : $12;
       $482 = $$31$i;
       $$4$i = $$3$i;
       $z$0$i = $$31$i;
       while (1) {
        $483 = ~~$$4$i >>> 0;
        HEAP32[$z$0$i >> 2] = $483;
        $484 = $z$0$i + 4 | 0;
        $485 = +($483 >>> 0);
        $486 = $$4$i - $485;
        $487 = $486 * 1.0e9;
        $488 = $487 != 0.0;
        if ($488) {
         $$4$i = $487;
         $z$0$i = $484;
        } else {
         $$lcssa326 = $484;
         break;
        }
       }
       $$pr$i = HEAP32[$e2$i >> 2] | 0;
       $489 = ($$pr$i | 0) > 0;
       if ($489) {
        $491 = $$pr$i;
        $a$1147$i = $$31$i;
        $z$1146$i = $$lcssa326;
        while (1) {
         $490 = ($491 | 0) > 29;
         $492 = $490 ? 29 : $491;
         $d$0139$i = $z$1146$i + -4 | 0;
         $493 = $d$0139$i >>> 0 < $a$1147$i >>> 0;
         do {
          if ($493) {
           $a$2$ph$i = $a$1147$i;
          } else {
           $carry$0140$i = 0;
           $d$0141$i = $d$0139$i;
           while (1) {
            $494 = HEAP32[$d$0141$i >> 2] | 0;
            $495 = _bitshift64Shl($494 | 0, 0, $492 | 0) | 0;
            $496 = tempRet0;
            $497 = _i64Add($495 | 0, $496 | 0, $carry$0140$i | 0, 0) | 0;
            $498 = tempRet0;
            $499 = ___uremdi3($497 | 0, $498 | 0, 1e9, 0) | 0;
            $500 = tempRet0;
            HEAP32[$d$0141$i >> 2] = $499;
            $501 = ___udivdi3($497 | 0, $498 | 0, 1e9, 0) | 0;
            $502 = tempRet0;
            $d$0$i = $d$0141$i + -4 | 0;
            $503 = $d$0$i >>> 0 < $a$1147$i >>> 0;
            if ($503) {
             $$lcssa327 = $501;
             break;
            } else {
             $carry$0140$i = $501;
             $d$0141$i = $d$0$i;
            }
           }
           $504 = ($$lcssa327 | 0) == 0;
           if ($504) {
            $a$2$ph$i = $a$1147$i;
            break;
           }
           $505 = $a$1147$i + -4 | 0;
           HEAP32[$505 >> 2] = $$lcssa327;
           $a$2$ph$i = $505;
          }
         } while (0);
         $z$2$i = $z$1146$i;
         while (1) {
          $506 = $z$2$i >>> 0 > $a$2$ph$i >>> 0;
          if (!$506) {
           $z$2$i$lcssa = $z$2$i;
           break;
          }
          $507 = $z$2$i + -4 | 0;
          $508 = HEAP32[$507 >> 2] | 0;
          $509 = ($508 | 0) == 0;
          if ($509) {
           $z$2$i = $507;
          } else {
           $z$2$i$lcssa = $z$2$i;
           break;
          }
         }
         $510 = HEAP32[$e2$i >> 2] | 0;
         $511 = $510 - $492 | 0;
         HEAP32[$e2$i >> 2] = $511;
         $512 = ($511 | 0) > 0;
         if ($512) {
          $491 = $511;
          $a$1147$i = $a$2$ph$i;
          $z$1146$i = $z$2$i$lcssa;
         } else {
          $$pr47$i = $511;
          $a$1$lcssa$i = $a$2$ph$i;
          $z$1$lcssa$i = $z$2$i$lcssa;
          break;
         }
        }
       } else {
        $$pr47$i = $$pr$i;
        $a$1$lcssa$i = $$31$i;
        $z$1$lcssa$i = $$lcssa326;
       }
       $513 = ($$pr47$i | 0) < 0;
       if ($513) {
        $514 = $$p$i + 25 | 0;
        $515 = ($514 | 0) / 9 & -1;
        $516 = $515 + 1 | 0;
        $517 = ($396 | 0) == 102;
        $519 = $$pr47$i;
        $a$3134$i = $a$1$lcssa$i;
        $z$3133$i = $z$1$lcssa$i;
        while (1) {
         $518 = 0 - $519 | 0;
         $520 = ($518 | 0) > 9;
         $521 = $520 ? 9 : $518;
         $522 = $a$3134$i >>> 0 < $z$3133$i >>> 0;
         do {
          if ($522) {
           $526 = 1 << $521;
           $527 = $526 + -1 | 0;
           $528 = 1e9 >>> $521;
           $carry3$0128$i = 0;
           $d$1127$i = $a$3134$i;
           while (1) {
            $529 = HEAP32[$d$1127$i >> 2] | 0;
            $530 = $529 & $527;
            $531 = $529 >>> $521;
            $532 = $531 + $carry3$0128$i | 0;
            HEAP32[$d$1127$i >> 2] = $532;
            $533 = Math_imul($530, $528) | 0;
            $534 = $d$1127$i + 4 | 0;
            $535 = $534 >>> 0 < $z$3133$i >>> 0;
            if ($535) {
             $carry3$0128$i = $533;
             $d$1127$i = $534;
            } else {
             $$lcssa329 = $533;
             break;
            }
           }
           $536 = HEAP32[$a$3134$i >> 2] | 0;
           $537 = ($536 | 0) == 0;
           $538 = $a$3134$i + 4 | 0;
           $$a$3$i = $537 ? $538 : $a$3134$i;
           $539 = ($$lcssa329 | 0) == 0;
           if ($539) {
            $$a$3186$i = $$a$3$i;
            $z$4$i = $z$3133$i;
            break;
           }
           $540 = $z$3133$i + 4 | 0;
           HEAP32[$z$3133$i >> 2] = $$lcssa329;
           $$a$3186$i = $$a$3$i;
           $z$4$i = $540;
          } else {
           $523 = HEAP32[$a$3134$i >> 2] | 0;
           $524 = ($523 | 0) == 0;
           $525 = $a$3134$i + 4 | 0;
           $$a$3185$i = $524 ? $525 : $a$3134$i;
           $$a$3186$i = $$a$3185$i;
           $z$4$i = $z$3133$i;
          }
         } while (0);
         $541 = $517 ? $$31$i : $$a$3186$i;
         $542 = $z$4$i;
         $543 = $541;
         $544 = $542 - $543 | 0;
         $545 = $544 >> 2;
         $546 = ($545 | 0) > ($516 | 0);
         $547 = $541 + ($516 << 2) | 0;
         $$z$4$i = $546 ? $547 : $z$4$i;
         $548 = HEAP32[$e2$i >> 2] | 0;
         $549 = $548 + $521 | 0;
         HEAP32[$e2$i >> 2] = $549;
         $550 = ($549 | 0) < 0;
         if ($550) {
          $519 = $549;
          $a$3134$i = $$a$3186$i;
          $z$3133$i = $$z$4$i;
         } else {
          $a$3$lcssa$i = $$a$3186$i;
          $z$3$lcssa$i = $$z$4$i;
          break;
         }
        }
       } else {
        $a$3$lcssa$i = $a$1$lcssa$i;
        $z$3$lcssa$i = $z$1$lcssa$i;
       }
       $551 = $a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0;
       do {
        if ($551) {
         $552 = $a$3$lcssa$i;
         $553 = $482 - $552 | 0;
         $554 = $553 >> 2;
         $555 = $554 * 9 | 0;
         $556 = HEAP32[$a$3$lcssa$i >> 2] | 0;
         $557 = $556 >>> 0 < 10;
         if ($557) {
          $e$1$i = $555;
          break;
         } else {
          $e$0123$i = $555;
          $i$0122$i = 10;
         }
         while (1) {
          $558 = $i$0122$i * 10 | 0;
          $559 = $e$0123$i + 1 | 0;
          $560 = $556 >>> 0 < $558 >>> 0;
          if ($560) {
           $e$1$i = $559;
           break;
          } else {
           $e$0123$i = $559;
           $i$0122$i = $558;
          }
         }
        } else {
         $e$1$i = 0;
        }
       } while (0);
       $561 = ($396 | 0) != 102;
       $562 = $561 ? $e$1$i : 0;
       $563 = $$p$i - $562 | 0;
       $564 = ($396 | 0) == 103;
       $565 = ($$p$i | 0) != 0;
       $566 = $565 & $564;
       $$neg52$i = $566 << 31 >> 31;
       $567 = $563 + $$neg52$i | 0;
       $568 = $z$3$lcssa$i;
       $569 = $568 - $482 | 0;
       $570 = $569 >> 2;
       $571 = $570 * 9 | 0;
       $572 = $571 + -9 | 0;
       $573 = ($567 | 0) < ($572 | 0);
       if ($573) {
        $574 = $567 + 9216 | 0;
        $575 = ($574 | 0) / 9 & -1;
        $$sum$i = $575 + -1023 | 0;
        $576 = $$31$i + ($$sum$i << 2) | 0;
        $577 = ($574 | 0) % 9 & -1;
        $j$0115$i = $577 + 1 | 0;
        $578 = ($j$0115$i | 0) < 9;
        if ($578) {
         $i$1116$i = 10;
         $j$0117$i = $j$0115$i;
         while (1) {
          $579 = $i$1116$i * 10 | 0;
          $j$0$i = $j$0117$i + 1 | 0;
          $exitcond$i = ($j$0$i | 0) == 9;
          if ($exitcond$i) {
           $i$1$lcssa$i = $579;
           break;
          } else {
           $i$1116$i = $579;
           $j$0117$i = $j$0$i;
          }
         }
        } else {
         $i$1$lcssa$i = 10;
        }
        $580 = HEAP32[$576 >> 2] | 0;
        $581 = ($580 >>> 0) % ($i$1$lcssa$i >>> 0) & -1;
        $582 = ($581 | 0) == 0;
        if ($582) {
         $$sum15$i = $575 + -1022 | 0;
         $583 = $$31$i + ($$sum15$i << 2) | 0;
         $584 = ($583 | 0) == ($z$3$lcssa$i | 0);
         if ($584) {
          $a$7$i = $a$3$lcssa$i;
          $d$3$i = $576;
          $e$3$i = $e$1$i;
         } else {
          label = 163;
         }
        } else {
         label = 163;
        }
        do {
         if ((label | 0) == 163) {
          label = 0;
          $585 = ($580 >>> 0) / ($i$1$lcssa$i >>> 0) & -1;
          $586 = $585 & 1;
          $587 = ($586 | 0) == 0;
          $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
          $588 = ($i$1$lcssa$i | 0) / 2 & -1;
          $589 = $581 >>> 0 < $588 >>> 0;
          do {
           if ($589) {
            $small$0$i = .5;
           } else {
            $590 = ($581 | 0) == ($588 | 0);
            if ($590) {
             $$sum16$i = $575 + -1022 | 0;
             $591 = $$31$i + ($$sum16$i << 2) | 0;
             $592 = ($591 | 0) == ($z$3$lcssa$i | 0);
             if ($592) {
              $small$0$i = 1.0;
              break;
             }
            }
            $small$0$i = 1.5;
           }
          } while (0);
          $593 = ($pl$0$i | 0) == 0;
          do {
           if ($593) {
            $round6$1$i = $$20$i;
            $small$1$i = $small$0$i;
           } else {
            $594 = HEAP8[$prefix$0$i >> 0] | 0;
            $595 = $594 << 24 >> 24 == 45;
            if (!$595) {
             $round6$1$i = $$20$i;
             $small$1$i = $small$0$i;
             break;
            }
            $596 = -$$20$i;
            $597 = -$small$0$i;
            $round6$1$i = $596;
            $small$1$i = $597;
           }
          } while (0);
          $598 = $580 - $581 | 0;
          HEAP32[$576 >> 2] = $598;
          $599 = $round6$1$i + $small$1$i;
          $600 = $599 != $round6$1$i;
          if (!$600) {
           $a$7$i = $a$3$lcssa$i;
           $d$3$i = $576;
           $e$3$i = $e$1$i;
           break;
          }
          $601 = $598 + $i$1$lcssa$i | 0;
          HEAP32[$576 >> 2] = $601;
          $602 = $601 >>> 0 > 999999999;
          if ($602) {
           $a$5109$i = $a$3$lcssa$i;
           $d$2108$i = $576;
           while (1) {
            $603 = $d$2108$i + -4 | 0;
            HEAP32[$d$2108$i >> 2] = 0;
            $604 = $603 >>> 0 < $a$5109$i >>> 0;
            if ($604) {
             $605 = $a$5109$i + -4 | 0;
             HEAP32[$605 >> 2] = 0;
             $a$6$i = $605;
            } else {
             $a$6$i = $a$5109$i;
            }
            $606 = HEAP32[$603 >> 2] | 0;
            $607 = $606 + 1 | 0;
            HEAP32[$603 >> 2] = $607;
            $608 = $607 >>> 0 > 999999999;
            if ($608) {
             $a$5109$i = $a$6$i;
             $d$2108$i = $603;
            } else {
             $a$5$lcssa$i = $a$6$i;
             $d$2$lcssa$i = $603;
             break;
            }
           }
          } else {
           $a$5$lcssa$i = $a$3$lcssa$i;
           $d$2$lcssa$i = $576;
          }
          $609 = $a$5$lcssa$i;
          $610 = $482 - $609 | 0;
          $611 = $610 >> 2;
          $612 = $611 * 9 | 0;
          $613 = HEAP32[$a$5$lcssa$i >> 2] | 0;
          $614 = $613 >>> 0 < 10;
          if ($614) {
           $a$7$i = $a$5$lcssa$i;
           $d$3$i = $d$2$lcssa$i;
           $e$3$i = $612;
           break;
          } else {
           $e$2104$i = $612;
           $i$2103$i = 10;
          }
          while (1) {
           $615 = $i$2103$i * 10 | 0;
           $616 = $e$2104$i + 1 | 0;
           $617 = $613 >>> 0 < $615 >>> 0;
           if ($617) {
            $a$7$i = $a$5$lcssa$i;
            $d$3$i = $d$2$lcssa$i;
            $e$3$i = $616;
            break;
           } else {
            $e$2104$i = $616;
            $i$2103$i = $615;
           }
          }
         }
        } while (0);
        $618 = $d$3$i + 4 | 0;
        $619 = $z$3$lcssa$i >>> 0 > $618 >>> 0;
        $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
        $a$8$ph$i = $a$7$i;
        $e$4$ph$i = $e$3$i;
        $z$6$ph$i = $$z$3$i;
       } else {
        $a$8$ph$i = $a$3$lcssa$i;
        $e$4$ph$i = $e$1$i;
        $z$6$ph$i = $z$3$lcssa$i;
       }
       $620 = 0 - $e$4$ph$i | 0;
       $z$6$i = $z$6$ph$i;
       while (1) {
        $621 = $z$6$i >>> 0 > $a$8$ph$i >>> 0;
        if (!$621) {
         $$lcssa159$i = 0;
         $z$6$i$lcssa = $z$6$i;
         break;
        }
        $622 = $z$6$i + -4 | 0;
        $623 = HEAP32[$622 >> 2] | 0;
        $624 = ($623 | 0) == 0;
        if ($624) {
         $z$6$i = $622;
        } else {
         $$lcssa159$i = 1;
         $z$6$i$lcssa = $z$6$i;
         break;
        }
       }
       do {
        if ($564) {
         $625 = $565 & 1;
         $626 = $625 ^ 1;
         $$p$$i = $626 + $$p$i | 0;
         $627 = ($$p$$i | 0) > ($e$4$ph$i | 0);
         $628 = ($e$4$ph$i | 0) > -5;
         $or$cond6$i = $627 & $628;
         if ($or$cond6$i) {
          $629 = $t$0 + -1 | 0;
          $$neg53$i = $$p$$i + -1 | 0;
          $630 = $$neg53$i - $e$4$ph$i | 0;
          $$013$i = $629;
          $$210$i = $630;
         } else {
          $631 = $t$0 + -2 | 0;
          $632 = $$p$$i + -1 | 0;
          $$013$i = $631;
          $$210$i = $632;
         }
         $633 = $fl$1$ & 8;
         $634 = ($633 | 0) == 0;
         if (!$634) {
          $$114$i = $$013$i;
          $$311$i = $$210$i;
          $$pre$phi184$iZ2D = $633;
          break;
         }
         do {
          if ($$lcssa159$i) {
           $635 = $z$6$i$lcssa + -4 | 0;
           $636 = HEAP32[$635 >> 2] | 0;
           $637 = ($636 | 0) == 0;
           if ($637) {
            $j$2$i = 9;
            break;
           }
           $638 = ($636 >>> 0) % 10 & -1;
           $639 = ($638 | 0) == 0;
           if ($639) {
            $i$399$i = 10;
            $j$1100$i = 0;
           } else {
            $j$2$i = 0;
            break;
           }
           while (1) {
            $640 = $i$399$i * 10 | 0;
            $641 = $j$1100$i + 1 | 0;
            $642 = ($636 >>> 0) % ($640 >>> 0) & -1;
            $643 = ($642 | 0) == 0;
            if ($643) {
             $i$399$i = $640;
             $j$1100$i = $641;
            } else {
             $j$2$i = $641;
             break;
            }
           }
          } else {
           $j$2$i = 9;
          }
         } while (0);
         $644 = $$013$i | 32;
         $645 = ($644 | 0) == 102;
         $646 = $z$6$i$lcssa;
         $647 = $646 - $482 | 0;
         $648 = $647 >> 2;
         $649 = $648 * 9 | 0;
         $650 = $649 + -9 | 0;
         if ($645) {
          $651 = $650 - $j$2$i | 0;
          $652 = ($651 | 0) < 0;
          $$21$i = $652 ? 0 : $651;
          $653 = ($$210$i | 0) < ($$21$i | 0);
          $$210$$22$i = $653 ? $$210$i : $$21$i;
          $$114$i = $$013$i;
          $$311$i = $$210$$22$i;
          $$pre$phi184$iZ2D = 0;
          break;
         } else {
          $654 = $650 + $e$4$ph$i | 0;
          $655 = $654 - $j$2$i | 0;
          $656 = ($655 | 0) < 0;
          $$23$i = $656 ? 0 : $655;
          $657 = ($$210$i | 0) < ($$23$i | 0);
          $$210$$24$i = $657 ? $$210$i : $$23$i;
          $$114$i = $$013$i;
          $$311$i = $$210$$24$i;
          $$pre$phi184$iZ2D = 0;
          break;
         }
        } else {
         $$pre183$i = $fl$1$ & 8;
         $$114$i = $t$0;
         $$311$i = $$p$i;
         $$pre$phi184$iZ2D = $$pre183$i;
        }
       } while (0);
       $658 = $$311$i | $$pre$phi184$iZ2D;
       $659 = ($658 | 0) != 0;
       $660 = $659 & 1;
       $661 = $$114$i | 32;
       $662 = ($661 | 0) == 102;
       if ($662) {
        $663 = ($e$4$ph$i | 0) > 0;
        $664 = $663 ? $e$4$ph$i : 0;
        $$pn$i = $664;
        $estr$2$i = 0;
       } else {
        $665 = ($e$4$ph$i | 0) < 0;
        $666 = $665 ? $620 : $e$4$ph$i;
        $667 = ($666 | 0) < 0;
        $668 = $667 << 31 >> 31;
        $669 = _fmt_u($666, $668, $5) | 0;
        $670 = $669;
        $671 = $8 - $670 | 0;
        $672 = ($671 | 0) < 2;
        if ($672) {
         $estr$193$i = $669;
         while (1) {
          $673 = $estr$193$i + -1 | 0;
          HEAP8[$673 >> 0] = 48;
          $674 = $673;
          $675 = $8 - $674 | 0;
          $676 = ($675 | 0) < 2;
          if ($676) {
           $estr$193$i = $673;
          } else {
           $estr$1$lcssa$i = $673;
           break;
          }
         }
        } else {
         $estr$1$lcssa$i = $669;
        }
        $677 = $e$4$ph$i >> 31;
        $678 = $677 & 2;
        $679 = $678 + 43 | 0;
        $680 = $679 & 255;
        $681 = $estr$1$lcssa$i + -1 | 0;
        HEAP8[$681 >> 0] = $680;
        $682 = $$114$i & 255;
        $683 = $estr$1$lcssa$i + -2 | 0;
        HEAP8[$683 >> 0] = $682;
        $684 = $683;
        $685 = $8 - $684 | 0;
        $$pn$i = $685;
        $estr$2$i = $683;
       }
       $686 = $pl$0$i + 1 | 0;
       $687 = $686 + $$311$i | 0;
       $l$1$i = $687 + $660 | 0;
       $688 = $l$1$i + $$pn$i | 0;
       _pad($f, 32, $w$1, $688, $fl$1$);
       $689 = HEAP32[$f >> 2] | 0;
       $690 = $689 & 32;
       $691 = ($690 | 0) == 0;
       if ($691) {
        ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
       }
       $692 = $fl$1$ ^ 65536;
       _pad($f, 48, $w$1, $688, $692);
       do {
        if ($662) {
         $693 = $a$8$ph$i >>> 0 > $$31$i >>> 0;
         $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
         $d$482$i = $r$0$a$8$i;
         while (1) {
          $694 = HEAP32[$d$482$i >> 2] | 0;
          $695 = _fmt_u($694, 0, $13) | 0;
          $696 = ($d$482$i | 0) == ($r$0$a$8$i | 0);
          do {
           if ($696) {
            $700 = ($695 | 0) == ($13 | 0);
            if (!$700) {
             $s7$1$i = $695;
             break;
            }
            HEAP8[$15 >> 0] = 48;
            $s7$1$i = $15;
           } else {
            $697 = $695 >>> 0 > $buf$i >>> 0;
            if ($697) {
             $s7$079$i = $695;
            } else {
             $s7$1$i = $695;
             break;
            }
            while (1) {
             $698 = $s7$079$i + -1 | 0;
             HEAP8[$698 >> 0] = 48;
             $699 = $698 >>> 0 > $buf$i >>> 0;
             if ($699) {
              $s7$079$i = $698;
             } else {
              $s7$1$i = $698;
              break;
             }
            }
           }
          } while (0);
          $701 = HEAP32[$f >> 2] | 0;
          $702 = $701 & 32;
          $703 = ($702 | 0) == 0;
          if ($703) {
           $704 = $s7$1$i;
           $705 = $14 - $704 | 0;
           ___fwritex($s7$1$i, $705, $f) | 0;
          }
          $706 = $d$482$i + 4 | 0;
          $707 = $706 >>> 0 > $$31$i >>> 0;
          if ($707) {
           $$lcssa339 = $706;
           break;
          } else {
           $d$482$i = $706;
          }
         }
         $708 = ($658 | 0) == 0;
         do {
          if (!$708) {
           $709 = HEAP32[$f >> 2] | 0;
           $710 = $709 & 32;
           $711 = ($710 | 0) == 0;
           if (!$711) {
            break;
           }
           ___fwritex(385577, 1, $f) | 0;
          }
         } while (0);
         $712 = $$lcssa339 >>> 0 < $z$6$i$lcssa >>> 0;
         $713 = ($$311$i | 0) > 0;
         $714 = $713 & $712;
         if ($714) {
          $$41276$i = $$311$i;
          $d$575$i = $$lcssa339;
          while (1) {
           $715 = HEAP32[$d$575$i >> 2] | 0;
           $716 = _fmt_u($715, 0, $13) | 0;
           $717 = $716 >>> 0 > $buf$i >>> 0;
           if ($717) {
            $s8$070$i = $716;
            while (1) {
             $718 = $s8$070$i + -1 | 0;
             HEAP8[$718 >> 0] = 48;
             $719 = $718 >>> 0 > $buf$i >>> 0;
             if ($719) {
              $s8$070$i = $718;
             } else {
              $s8$0$lcssa$i = $718;
              break;
             }
            }
           } else {
            $s8$0$lcssa$i = $716;
           }
           $720 = HEAP32[$f >> 2] | 0;
           $721 = $720 & 32;
           $722 = ($721 | 0) == 0;
           if ($722) {
            $723 = ($$41276$i | 0) > 9;
            $724 = $723 ? 9 : $$41276$i;
            ___fwritex($s8$0$lcssa$i, $724, $f) | 0;
           }
           $725 = $d$575$i + 4 | 0;
           $726 = $$41276$i + -9 | 0;
           $727 = $725 >>> 0 < $z$6$i$lcssa >>> 0;
           $728 = ($$41276$i | 0) > 9;
           $729 = $728 & $727;
           if ($729) {
            $$41276$i = $726;
            $d$575$i = $725;
           } else {
            $$412$lcssa$i = $726;
            break;
           }
          }
         } else {
          $$412$lcssa$i = $$311$i;
         }
         $730 = $$412$lcssa$i + 9 | 0;
         _pad($f, 48, $730, 9, 0);
        } else {
         $731 = $a$8$ph$i + 4 | 0;
         $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
         $732 = ($$311$i | 0) > -1;
         if ($732) {
          $733 = ($$pre$phi184$iZ2D | 0) == 0;
          $$587$i = $$311$i;
          $d$686$i = $a$8$ph$i;
          while (1) {
           $734 = HEAP32[$d$686$i >> 2] | 0;
           $735 = _fmt_u($734, 0, $13) | 0;
           $736 = ($735 | 0) == ($13 | 0);
           if ($736) {
            HEAP8[$15 >> 0] = 48;
            $s9$0$i = $15;
           } else {
            $s9$0$i = $735;
           }
           $737 = ($d$686$i | 0) == ($a$8$ph$i | 0);
           do {
            if ($737) {
             $741 = $s9$0$i + 1 | 0;
             $742 = HEAP32[$f >> 2] | 0;
             $743 = $742 & 32;
             $744 = ($743 | 0) == 0;
             if ($744) {
              ___fwritex($s9$0$i, 1, $f) | 0;
             }
             $745 = ($$587$i | 0) < 1;
             $or$cond29$i = $733 & $745;
             if ($or$cond29$i) {
              $s9$2$i = $741;
              break;
             }
             $746 = HEAP32[$f >> 2] | 0;
             $747 = $746 & 32;
             $748 = ($747 | 0) == 0;
             if (!$748) {
              $s9$2$i = $741;
              break;
             }
             ___fwritex(385577, 1, $f) | 0;
             $s9$2$i = $741;
            } else {
             $738 = $s9$0$i >>> 0 > $buf$i >>> 0;
             if ($738) {
              $s9$183$i = $s9$0$i;
             } else {
              $s9$2$i = $s9$0$i;
              break;
             }
             while (1) {
              $739 = $s9$183$i + -1 | 0;
              HEAP8[$739 >> 0] = 48;
              $740 = $739 >>> 0 > $buf$i >>> 0;
              if ($740) {
               $s9$183$i = $739;
              } else {
               $s9$2$i = $739;
               break;
              }
             }
            }
           } while (0);
           $749 = $s9$2$i;
           $750 = $14 - $749 | 0;
           $751 = HEAP32[$f >> 2] | 0;
           $752 = $751 & 32;
           $753 = ($752 | 0) == 0;
           if ($753) {
            $754 = ($$587$i | 0) > ($750 | 0);
            $755 = $754 ? $750 : $$587$i;
            ___fwritex($s9$2$i, $755, $f) | 0;
           }
           $756 = $$587$i - $750 | 0;
           $757 = $d$686$i + 4 | 0;
           $758 = $757 >>> 0 < $z$6$$i >>> 0;
           $759 = ($756 | 0) > -1;
           $760 = $758 & $759;
           if ($760) {
            $$587$i = $756;
            $d$686$i = $757;
           } else {
            $$5$lcssa$i = $756;
            break;
           }
          }
         } else {
          $$5$lcssa$i = $$311$i;
         }
         $761 = $$5$lcssa$i + 18 | 0;
         _pad($f, 48, $761, 18, 0);
         $762 = HEAP32[$f >> 2] | 0;
         $763 = $762 & 32;
         $764 = ($763 | 0) == 0;
         if (!$764) {
          break;
         }
         $765 = $estr$2$i;
         $766 = $8 - $765 | 0;
         ___fwritex($estr$2$i, $766, $f) | 0;
        }
       } while (0);
       $767 = $fl$1$ ^ 8192;
       _pad($f, 32, $w$1, $688, $767);
       $768 = ($688 | 0) < ($w$1 | 0);
       $w$30$i = $768 ? $w$1 : $688;
       $$0$i = $w$30$i;
      } else {
       $376 = $t$0 & 32;
       $377 = ($376 | 0) != 0;
       $378 = $377 ? 385561 : 385565;
       $379 = $$07$i != $$07$i | 0.0 != 0.0;
       $380 = $377 ? 385569 : 385573;
       $pl$1$i = $379 ? 0 : $pl$0$i;
       $s1$0$i = $379 ? $380 : $378;
       $381 = $pl$1$i + 3 | 0;
       _pad($f, 32, $w$1, $381, $175);
       $382 = HEAP32[$f >> 2] | 0;
       $383 = $382 & 32;
       $384 = ($383 | 0) == 0;
       if ($384) {
        ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
        $$pre$i = HEAP32[$f >> 2] | 0;
        $386 = $$pre$i;
       } else {
        $386 = $382;
       }
       $385 = $386 & 32;
       $387 = ($385 | 0) == 0;
       if ($387) {
        ___fwritex($s1$0$i, 3, $f) | 0;
       }
       $388 = $fl$1$ ^ 8192;
       _pad($f, 32, $w$1, $381, $388);
       $389 = ($381 | 0) < ($w$1 | 0);
       $390 = $389 ? $w$1 : $381;
       $$0$i = $390;
      }
     } while (0);
     $cnt$0 = $cnt$1;
     $fmt41 = $$lcssa323;
     $l$0 = $$0$i;
     $l10n$0 = $l10n$3;
     continue L1;
     break;
    }
   default:
    {
     $a$2 = $fmt41;
     $fl$6 = $fl$1$;
     $p$5 = $p$0;
     $pl$2 = 0;
     $prefix$2 = 385525;
     $z$2 = $1;
    }
   }
  } while (0);
  L313 : do {
   if ((label | 0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207 >> 2] | 0;
    $209 = $206 + 4 | 0;
    $210 = $209;
    $211 = HEAP32[$210 >> 2] | 0;
    $212 = $t$1 & 32;
    $213 = ($208 | 0) == 0;
    $214 = ($211 | 0) == 0;
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 385525;
     label = 77;
    } else {
     $$012$i = $1;
     $217 = $208;
     $224 = $211;
     while (1) {
      $216 = $217 & 15;
      $218 = 385509 + $216 | 0;
      $219 = HEAP8[$218 >> 0] | 0;
      $220 = $219 & 255;
      $221 = $220 | $212;
      $222 = $221 & 255;
      $223 = $$012$i + -1 | 0;
      HEAP8[$223 >> 0] = $222;
      $225 = _bitshift64Lshr($217 | 0, $224 | 0, 4) | 0;
      $226 = tempRet0;
      $227 = ($225 | 0) == 0;
      $228 = ($226 | 0) == 0;
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;
       $217 = $225;
       $224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231 >> 2] | 0;
     $233 = $230 + 4 | 0;
     $234 = $233;
     $235 = HEAP32[$234 >> 2] | 0;
     $236 = ($232 | 0) == 0;
     $237 = ($235 | 0) == 0;
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239 | 0) == 0;
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 0;
      $prefix$1 = 385525;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = 385525 + $241 | 0;
      $a$0 = $$lcssa344;
      $fl$4 = $fl$3;
      $p$2 = $p$1;
      $pl$1 = 2;
      $prefix$1 = $242;
      label = 77;
     }
    }
   } else if ((label | 0) == 76) {
    label = 0;
    $288 = _fmt_u($286, $287, $1) | 0;
    $a$0 = $288;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 77;
   } else if ((label | 0) == 82) {
    label = 0;
    $320 = _memchr($a$1, 0, $p$0) | 0;
    $321 = ($320 | 0) == (0 | 0);
    $322 = $320;
    $323 = $a$1;
    $324 = $322 - $323 | 0;
    $325 = $a$1 + $p$0 | 0;
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;
    $fl$6 = $175;
    $p$5 = $p$3;
    $pl$2 = 0;
    $prefix$2 = 385525;
    $z$2 = $z$1;
   } else if ((label | 0) == 86) {
    label = 0;
    $333 = HEAP32[$arg >> 2] | 0;
    $i$0114 = 0;
    $l$1113 = 0;
    $ws$0115 = $333;
    while (1) {
     $334 = HEAP32[$ws$0115 >> 2] | 0;
     $335 = ($334 | 0) == 0;
     if ($335) {
      $i$0$lcssa = $i$0114;
      $l$2 = $l$1113;
      break;
     }
     $336 = _wctomb($mb, $334) | 0;
     $337 = ($336 | 0) < 0;
     $338 = $p$4198 - $i$0114 | 0;
     $339 = $336 >>> 0 > $338 >>> 0;
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;
      $l$2 = $336;
      break;
     }
     $340 = $ws$0115 + 4 | 0;
     $341 = $336 + $i$0114 | 0;
     $342 = $p$4198 >>> 0 > $341 >>> 0;
     if ($342) {
      $i$0114 = $341;
      $l$1113 = $336;
      $ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;
      $l$2 = $336;
      break;
     }
    }
    $343 = ($l$2 | 0) < 0;
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f, 32, $w$1, $i$0$lcssa, $fl$1$);
    $344 = ($i$0$lcssa | 0) == 0;
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg >> 2] | 0;
     $i$1125 = 0;
     $ws$1126 = $345;
     while (1) {
      $346 = HEAP32[$ws$1126 >> 2] | 0;
      $347 = ($346 | 0) == 0;
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = $ws$1126 + 4 | 0;
      $349 = _wctomb($mb, $346) | 0;
      $350 = $349 + $i$1125 | 0;
      $351 = ($350 | 0) > ($i$0$lcssa | 0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f >> 2] | 0;
      $353 = $352 & 32;
      $354 = ($353 | 0) == 0;
      if ($354) {
       ___fwritex($mb, $349, $f) | 0;
      }
      $355 = $350 >>> 0 < $i$0$lcssa >>> 0;
      if ($355) {
       $i$1125 = $350;
       $ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f, 32, $w$1, $i$0$lcssa200, $356);
   $357 = ($w$1 | 0) > ($i$0$lcssa200 | 0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;
   $fmt41 = $$lcssa323;
   $l$0 = $358;
   $l10n$0 = $l10n$3;
   continue;
  }
  if ((label | 0) == 77) {
   label = 0;
   $289 = ($p$2 | 0) > -1;
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292 >> 2] | 0;
   $294 = $291 + 4 | 0;
   $295 = $294;
   $296 = HEAP32[$295 >> 2] | 0;
   $297 = ($293 | 0) != 0;
   $298 = ($296 | 0) != 0;
   $299 = $297 | $298;
   $300 = ($p$2 | 0) != 0;
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = $2 - $301 | 0;
    $303 = $299 & 1;
    $304 = $303 ^ 1;
    $305 = $304 + $302 | 0;
    $306 = ($p$2 | 0) > ($305 | 0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = $p$2$;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   } else {
    $a$2 = $1;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = $769 - $770 | 0;
  $772 = ($p$5 | 0) < ($771 | 0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = $pl$2 + $$p$5 | 0;
  $774 = ($w$1 | 0) < ($773 | 0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f, 32, $w$2, $773, $fl$6);
  $775 = HEAP32[$f >> 2] | 0;
  $776 = $775 & 32;
  $777 = ($776 | 0) == 0;
  if ($777) {
   ___fwritex($prefix$2, $pl$2, $f) | 0;
  }
  $778 = $fl$6 ^ 65536;
  _pad($f, 48, $w$2, $773, $778);
  _pad($f, 48, $$p$5, $771, 0);
  $779 = HEAP32[$f >> 2] | 0;
  $780 = $779 & 32;
  $781 = ($780 | 0) == 0;
  if ($781) {
   ___fwritex($a$2, $771, $f) | 0;
  }
  $782 = $fl$6 ^ 8192;
  _pad($f, 32, $w$2, $773, $782);
  $cnt$0 = $cnt$1;
  $fmt41 = $$lcssa323;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 L348 : do {
  if ((label | 0) == 245) {
   $783 = ($f | 0) == (0 | 0);
   if ($783) {
    $784 = ($l10n$0$lcssa | 0) == 0;
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while (1) {
      $785 = $nl_type + ($i$2100 << 2) | 0;
      $786 = HEAP32[$785 >> 2] | 0;
      $787 = ($786 | 0) == 0;
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = $nl_arg + ($i$2100 << 3) | 0;
      _pop_arg($789, $786, $ap);
      $790 = $i$2100 + 1 | 0;
      $791 = ($790 | 0) < 10;
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa | 0) < 10;
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while (1) {
       $794 = $nl_type + ($i$398 << 2) | 0;
       $795 = HEAP32[$794 >> 2] | 0;
       $796 = ($795 | 0) == 0;
       $793 = $i$398 + 1 | 0;
       if (!$796) {
        $$0 = -1;
        break L348;
       }
       $792 = ($793 | 0) < 10;
       if ($792) {
        $i$398 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}
function emterpret(pc) {
 pc = pc | 0;
 var sp = 0, inst = 0, lx = 0, ly = 0, lz = 0;
 var ld = 0.0;
 HEAP32[EMTSTACKTOP >> 2] = pc;
 sp = EMTSTACKTOP + 8 | 0;
 lx = HEAPU16[pc + 2 >> 1] | 0;
 EMTSTACKTOP = EMTSTACKTOP + (lx + 1 << 3) | 0;
 if ((asyncState | 0) != 2) {} else {
  pc = (HEAP32[sp - 4 >> 2] | 0) - 8 | 0;
 }
 pc = pc + 4 | 0;
 while (1) {
  pc = pc + 4 | 0;
  inst = HEAP32[pc >> 2] | 0;
  lx = inst >> 8 & 255;
  ly = inst >> 16 & 255;
  lz = inst >>> 24;
  switch (inst & 255) {
  case 0:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 1:
   HEAP32[sp + (lx << 3) >> 2] = inst >> 16;
   break;
  case 2:
   pc = pc + 4 | 0;
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[pc >> 2] | 0;
   break;
  case 3:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 4:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 5:
   HEAP32[sp + (lx << 3) >> 2] = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 6:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 7:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (HEAP32[sp + (lz << 3) >> 2] >>> 0) >>> 0;
   break;
  case 8:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) % (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 13:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 14:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 15:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 16:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0 | 0;
   break;
  case 17:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0) | 0;
   break;
  case 19:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 20:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0 | (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 21:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ (HEAP32[sp + (lz << 3) >> 2] | 0);
   break;
  case 25:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) | 0;
   break;
  case 26:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) - (inst >> 24) | 0;
   break;
  case 27:
   HEAP32[sp + (lx << 3) >> 2] = Math_imul(HEAP32[sp + (ly << 3) >> 2] | 0, inst >> 24) | 0;
   break;
  case 28:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) / (inst >> 24) | 0;
   break;
  case 29:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] >>> 0) / (lz >>> 0) >>> 0;
   break;
  case 30:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) % (inst >> 24) | 0;
   break;
  case 32:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) == inst >> 24 | 0;
   break;
  case 33:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) != inst >> 24 | 0;
   break;
  case 34:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) < inst >> 24 | 0;
   break;
  case 36:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) <= inst >> 24 | 0;
   break;
  case 38:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) & inst >> 24;
   break;
  case 40:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) ^ inst >> 24;
   break;
  case 41:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) << lz;
   break;
  case 42:
   HEAP32[sp + (lx << 3) >> 2] = (HEAP32[sp + (ly << 3) >> 2] | 0) >> lz;
   break;
  case 45:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 46:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 47:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 48:
   if (HEAP32[sp + (ly << 3) >> 2] >>> 0 < HEAP32[sp + (lz << 3) >> 2] >>> 0) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 49:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = pc + 4 | 0;
   } else {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 52:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) == (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 53:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) != (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 54:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) < (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 56:
   if ((HEAP32[sp + (ly << 3) >> 2] | 0) <= (HEAP32[sp + (lz << 3) >> 2] | 0)) {
    pc = HEAP32[pc + 4 >> 2] | 0;
    pc = pc - 4 | 0;
    continue;
   } else {
    pc = pc + 4 | 0;
   }
   break;
  case 58:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 63:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] + +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 65:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] * +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 66:
   HEAPF64[sp + (lx << 3) >> 3] = +HEAPF64[sp + (ly << 3) >> 3] / +HEAPF64[sp + (lz << 3) >> 3];
   break;
  case 75:
   HEAP32[sp + (lx << 3) >> 2] = ~~+HEAPF64[sp + (ly << 3) >> 3];
   break;
  case 76:
   HEAPF64[sp + (lx << 3) >> 3] = +(HEAP32[sp + (ly << 3) >> 2] | 0);
   break;
  case 78:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[HEAP32[sp + (ly << 3) >> 2] >> 0];
   break;
  case 79:
   HEAP32[sp + (lx << 3) >> 2] = HEAPU8[HEAP32[sp + (ly << 3) >> 2] >> 0];
   break;
  case 82:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[HEAP32[sp + (ly << 3) >> 2] >> 2];
   break;
  case 83:
   HEAP8[HEAP32[sp + (lx << 3) >> 2] >> 0] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 85:
   HEAP32[HEAP32[sp + (lx << 3) >> 2] >> 2] = HEAP32[sp + (ly << 3) >> 2] | 0;
   break;
  case 90:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 0];
   break;
  case 94:
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[(HEAP32[sp + (ly << 3) >> 2] | 0) + (HEAP32[sp + (lz << 3) >> 2] | 0) >> 2];
   break;
  case 95:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 97:
   HEAP32[(HEAP32[sp + (lx << 3) >> 2] | 0) + (HEAP32[sp + (ly << 3) >> 2] | 0) >> 2] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 102:
   HEAP32[sp + (lx << 3) >> 2] = HEAP8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 0];
   break;
  case 103:
   HEAP32[sp + (lx << 3) >> 2] = HEAPU8[(HEAP32[sp + (ly << 3) >> 2] | 0) + (inst >> 24) >> 0];
   break;
  case 107:
   HEAP8[(HEAP32[sp + (lx << 3) >> 2] | 0) + (ly << 24 >> 24) >> 0] = HEAP32[sp + (lz << 3) >> 2] | 0;
   break;
  case 119:
   pc = pc + (inst >> 16 << 2) | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 120:
   if (HEAP32[sp + (lx << 3) >> 2] | 0) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 121:
   if (!(HEAP32[sp + (lx << 3) >> 2] | 0)) {
    pc = pc + (inst >> 16 << 2) | 0;
    pc = pc - 4 | 0;
    continue;
   }
   break;
  case 134:
   lz = HEAPU8[(HEAP32[pc + 4 >> 2] | 0) + 1 | 0] | 0;
   ly = 0;
   if ((asyncState | 0) != 2) {
    while ((ly | 0) < (lz | 0)) {
     HEAP32[EMTSTACKTOP + (ly << 3) + 8 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) >> 2] | 0;
     HEAP32[EMTSTACKTOP + (ly << 3) + 12 >> 2] = HEAP32[sp + (HEAPU8[pc + 8 + ly >> 0] << 3) + 4 >> 2] | 0;
     ly = ly + 1 | 0;
    }
   }
   HEAP32[sp - 4 >> 2] = pc;
   emterpret(HEAP32[pc + 4 >> 2] | 0);
   if ((asyncState | 0) == 1) {
    EMTSTACKTOP = sp - 8 | 0;
    return;
   }
   HEAP32[sp + (lx << 3) >> 2] = HEAP32[EMTSTACKTOP >> 2] | 0;
   HEAP32[sp + (lx << 3) + 4 >> 2] = HEAP32[EMTSTACKTOP + 4 >> 2] | 0;
   pc = pc + (4 + lz + 3 >> 2 << 2) | 0;
   break;
  case 135:
   switch (inst >>> 16 | 0) {
   case 0:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ResLoadToCon(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 1:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gamTraceP(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 2:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _SysGetKey() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 3:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamePictureDummy(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 10 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 4:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamMPicShowV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 5:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamPicShowV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 6:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamShowFrame(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 7:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ResItemGet(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 8:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetDirect(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 9:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 10:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ShowMapClear();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 11:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _DelPerson(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 12:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddPerson(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 13:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _strlen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 14:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysLcdPartClear(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 15:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysRect(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 16:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamStrShowS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 17:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysLcdReverse(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 18:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysRectClear(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 19:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysPutPixel(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 20:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ShowPersonProStr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 21:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ShowPersonPro(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 22:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _rand() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 23:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityDispGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 24:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ResLoadToMem(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 25:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetGoodsName(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 26:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _strcat(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 27:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SetGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 28:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityOutPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 29:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetPersonName(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 30:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _itoa(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 31:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ShowGoodsProStr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 32:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ShowGoodsPro(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 33:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _HarvestryFood();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 34:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _RevenueMoney();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 35:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityCaptives(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 36:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _BeOccupied(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 37:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetJNPtr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 38:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtLoadToMem2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 39:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _BuiltAtkAttr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 40:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _TransIdxToGen1(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 41:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _CountSklHurt(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 42:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcRPicShow(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 43:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _PlcArmsMax(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 44:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _CountOverAdd(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 45:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _CountPlusSub(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 46:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowSNum2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 47:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetExp(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 48:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsManual(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 49:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _SearchRoad(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 50:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _OrderConsumeThew(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 51:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddOrderHead(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 52:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsMoney(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 53:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AttackCityRoad(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 8 | 0;
     continue;
    }
   case 54:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _OrderConsumeMoney(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 55:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddFightOrder(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 56:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetKingCitys(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 57:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _calloc(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 58:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetGenIdx(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 59:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcMidShowStr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 60:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamPicShowExS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 9 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 61:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtFormatStr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 62:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _PlcStrShowS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 63:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetTerrain(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 64:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _free(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 65:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ShowCityMap(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 66:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _memset(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 67:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamShowKing(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 68:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamRevCity(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 69:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetPeriodKings(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 70:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ltoa(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 71:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamAsciiS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 72:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetKingPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 73:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtLoadToMem3(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 74:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtViewForce(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 75:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtStatGen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 76:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 77:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SetGoodsByIndex(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 78:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _DelGoodsPerson(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 79:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _HoldCaptive(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 80:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _LostEscape(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 81:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetCityPGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 82:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AddGoodsPerson(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 83:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _DelGoods(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 84:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetPersonCity(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 85:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtMapUnitShow(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 86:
    {
     HEAP32[sp - 4 >> 2] = pc;
     FUNCTION_TABLE_vi[HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] & 31](HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 87:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowGen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 88:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowCursor();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 89:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowFrame();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 90:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _TransIdxToGen2(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 91:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtSetFocus(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 92:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtLoadToMem(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 93:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _CountMoveP(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 94:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _TransIdxToGen3(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 95:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtGetSklBuf(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 96:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtMakeSklNam(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 97:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtCanUse(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 98:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowAtRng();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 99:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtStrShowV(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 100:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtChkRng() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 101:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtJNChkAim(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 102:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _CountAtkHurt() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 103:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtCountPath(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 104:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowMvRng();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 105:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetEnemyPersons(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 106:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _sav_fopen(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 107:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_fread(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 108:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_fclose(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 109:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetEnemySatraps(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 110:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtGetMPos(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 111:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtGetCmdRng(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 112:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetCityName(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 113:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetCityProStr(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 114:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GetEnemyKing(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 115:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _gam_fwrite(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 116:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamRcdIFace();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 117:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamPicShowS(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 7 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 8 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 8 | 0;
     continue;
    }
   case 118:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _NopDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 119:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AssartDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 120:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AccractbusinessDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 121:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FatherDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 122:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _InspectionDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 123:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ExchangeDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 124:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _MoveDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 125:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _AlienateDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 126:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _RealienateDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 127:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ReconnoitreDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 128:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _ConscriptionDrv(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 129:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtResumeMp(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 130:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtChkEnd(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 131:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_lock_lock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 132:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _gam_lock_unlock(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 133:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _msg_free(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 134:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtGetNearGen() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 135:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtCmpMove(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 136:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtJiNeng(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 137:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtAtkCmd(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 138:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _SysGetTimer1Number() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 139:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysTimer1Close();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 140:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SysTimer1Open(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 141:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowMap(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 142:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GetCityState(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 143:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsLoss() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 144:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _IsWin() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 145:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _SetCitySatrap();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 146:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ComputerTactic();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 147:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ShowFightNoteFace(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 148:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowState();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 149:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtShowInf();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 150:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtCheckIdx() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 151:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _DelOrder(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 152:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _ShowPersonHead(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 6 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 153:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _EventStateDeal() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 154:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GoodsUpDatadate() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 155:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _PersonUpDatadate() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 156:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GamConInit() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 157:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamLoadEngineConfig();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 158:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GamVarInit() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 159:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamVarRst();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 160:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamConRst();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 161:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_sleep_with_yield(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 162:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtIntVar() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 163:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _FgtCountWon();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   case 164:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _FgtIntMap() | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     continue;
    }
   case 165:
    {
     HEAP32[sp - 4 >> 2] = pc;
     lz = _GuiTranslateMsg(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0) | 0;
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     } else HEAP32[sp + (lx << 3) >> 2] = lz;
     pc = pc + 4 | 0;
     continue;
    }
   case 166:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamSetResourcePath(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0, HEAP32[sp + (HEAPU8[pc + 5 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 167:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamSetAltLibPath(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 168:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamSetDataDir(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 169:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _GamSetLcdFlushCallback(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 170:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _emscripten_asm_const_0(HEAP32[sp + (HEAPU8[pc + 4 >> 0] << 3) >> 2] | 0);
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     pc = pc + 4 | 0;
     continue;
    }
   case 171:
    {
     HEAP32[sp - 4 >> 2] = pc;
     _CountProvUse();
     if ((asyncState | 0) == 1) {
      EMTSTACKTOP = sp - 8 | 0;
      return;
     };
     continue;
    }
   default:
   }
   break;
  case 136:
   HEAP32[sp + (lx << 3) >> 2] = STACKTOP;
   break;
  case 137:
   STACKTOP = HEAP32[sp + (lx << 3) >> 2] | 0;
   break;
  case 138:
   lz = HEAP32[sp + (lz << 3) >> 2] | 0;
   lx = (HEAP32[sp + (lx << 3) >> 2] | 0) - (HEAP32[sp + (ly << 3) >> 2] | 0) >>> 0;
   if (lx >>> 0 >= lz >>> 0) {
    pc = pc + (lz << 2) | 0;
    continue;
   }
   pc = HEAP32[pc + 4 + (lx << 2) >> 2] | 0;
   pc = pc - 4 | 0;
   continue;
   break;
  case 139:
   EMTSTACKTOP = sp - 8 | 0;
   HEAP32[EMTSTACKTOP >> 2] = HEAP32[sp + (lx << 3) >> 2] | 0;
   HEAP32[EMTSTACKTOP + 4 >> 2] = HEAP32[sp + (lx << 3) + 4 >> 2] | 0;
   return;
   break;
  default:
  }
 }
}

function _vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0, $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0, $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0, $width$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $ap2$i = sp + 16 | 0;
 $st = sp + 8 | 0;
 $scanset = sp + 33 | 0;
 $wc = sp;
 $0 = sp + 32 | 0;
 $1 = $f + 76 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = ($2 | 0) > -1;
 if ($3) {
  $4 = ___lockfile($f) | 0;
  $334 = $4;
 } else {
  $334 = 0;
 }
 $5 = HEAP8[$fmt >> 0] | 0;
 $6 = $5 << 24 >> 24 == 0;
 L4 : do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = $f + 4 | 0;
   $8 = $f + 100 | 0;
   $9 = $f + 108 | 0;
   $10 = $f + 8 | 0;
   $11 = $scanset + 10 | 0;
   $12 = $scanset + 33 | 0;
   $13 = $st + 4 | 0;
   $14 = $scanset + 46 | 0;
   $15 = $scanset + 94 | 0;
   $17 = $5;
   $matches$0104 = 0;
   $p$0109 = $fmt;
   $pos$0108 = 0;
   $s$0107 = 0;
   $wcs$0103 = 0;
   L6 : while (1) {
    $16 = $17 & 255;
    $18 = _isspace($16) | 0;
    $19 = ($18 | 0) == 0;
    L8 : do {
     if ($19) {
      $46 = HEAP8[$p$0109 >> 0] | 0;
      $47 = $46 << 24 >> 24 == 37;
      L10 : do {
       if ($47) {
        $48 = $p$0109 + 1 | 0;
        $49 = HEAP8[$48 >> 0] | 0;
        L12 : do {
         switch ($49 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $70 = $p$0109 + 2 | 0;
           $dest$0 = 0;
           $p$2 = $70;
           break;
          }
         default:
          {
           $71 = $49 & 255;
           $isdigittmp = $71 + -48 | 0;
           $isdigit = $isdigittmp >>> 0 < 10;
           if ($isdigit) {
            $72 = $p$0109 + 2 | 0;
            $73 = HEAP8[$72 >> 0] | 0;
            $74 = $73 << 24 >> 24 == 36;
            if ($74) {
             $vacopy_currentptr = HEAP32[$ap >> 2] | 0;
             HEAP32[$ap2$i >> 2] = $vacopy_currentptr;
             $i$0$i = $isdigittmp;
             while (1) {
              $75 = $i$0$i >>> 0 > 1;
              $arglist_current = HEAP32[$ap2$i >> 2] | 0;
              $76 = $arglist_current;
              $77 = 0 + 4 | 0;
              $expanded4 = $77;
              $expanded = $expanded4 - 1 | 0;
              $78 = $76 + $expanded | 0;
              $79 = 0 + 4 | 0;
              $expanded8 = $79;
              $expanded7 = $expanded8 - 1 | 0;
              $expanded6 = $expanded7 ^ -1;
              $80 = $78 & $expanded6;
              $81 = $80;
              $82 = HEAP32[$81 >> 2] | 0;
              $arglist_next = $81 + 4 | 0;
              HEAP32[$ap2$i >> 2] = $arglist_next;
              $83 = $i$0$i + -1 | 0;
              if ($75) {
               $i$0$i = $83;
              } else {
               $$lcssa = $82;
               break;
              }
             }
             $84 = $p$0109 + 3 | 0;
             $dest$0 = $$lcssa;
             $p$2 = $84;
             break L12;
            }
           }
           $arglist_current2 = HEAP32[$ap >> 2] | 0;
           $85 = $arglist_current2;
           $86 = 0 + 4 | 0;
           $expanded11 = $86;
           $expanded10 = $expanded11 - 1 | 0;
           $87 = $85 + $expanded10 | 0;
           $88 = 0 + 4 | 0;
           $expanded15 = $88;
           $expanded14 = $expanded15 - 1 | 0;
           $expanded13 = $expanded14 ^ -1;
           $89 = $87 & $expanded13;
           $90 = $89;
           $91 = HEAP32[$90 >> 2] | 0;
           $arglist_next3 = $90 + 4 | 0;
           HEAP32[$ap >> 2] = $arglist_next3;
           $dest$0 = $91;
           $p$2 = $48;
          }
         }
        } while (0);
        $92 = HEAP8[$p$2 >> 0] | 0;
        $93 = $92 & 255;
        $isdigittmp694 = $93 + -48 | 0;
        $isdigit795 = $isdigittmp694 >>> 0 < 10;
        if ($isdigit795) {
         $97 = $93;
         $p$396 = $p$2;
         $width$097 = 0;
         while (1) {
          $94 = $width$097 * 10 | 0;
          $95 = $94 + -48 | 0;
          $96 = $95 + $97 | 0;
          $98 = $p$396 + 1 | 0;
          $99 = HEAP8[$98 >> 0] | 0;
          $100 = $99 & 255;
          $isdigittmp6 = $100 + -48 | 0;
          $isdigit7 = $isdigittmp6 >>> 0 < 10;
          if ($isdigit7) {
           $97 = $100;
           $p$396 = $98;
           $width$097 = $96;
          } else {
           $$lcssa38 = $99;
           $p$3$lcssa = $98;
           $width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;
         $p$3$lcssa = $p$2;
         $width$0$lcssa = 0;
        }
        $101 = $$lcssa38 << 24 >> 24 == 109;
        if ($101) {
         $102 = ($dest$0 | 0) != (0 | 0);
         $103 = $102 & 1;
         $104 = $p$3$lcssa + 1 | 0;
         $$pre168 = HEAP8[$104 >> 0] | 0;
         $107 = $$pre168;
         $alloc$0 = $103;
         $p$4 = $104;
         $s$1 = 0;
         $wcs$1 = 0;
        } else {
         $107 = $$lcssa38;
         $alloc$0 = 0;
         $p$4 = $p$3$lcssa;
         $s$1 = $s$0107;
         $wcs$1 = $wcs$0103;
        }
        $105 = $p$4 + 1 | 0;
        $106 = $107 & 255;
        switch ($106 | 0) {
        case 104:
         {
          $108 = HEAP8[$105 >> 0] | 0;
          $109 = $108 << 24 >> 24 == 104;
          $110 = $p$4 + 2 | 0;
          $$9 = $109 ? $110 : $105;
          $$10 = $109 ? -2 : -1;
          $p$5 = $$9;
          $size$0 = $$10;
          break;
         }
        case 108:
         {
          $111 = HEAP8[$105 >> 0] | 0;
          $112 = $111 << 24 >> 24 == 108;
          $113 = $p$4 + 2 | 0;
          $$11 = $112 ? $113 : $105;
          $$12 = $112 ? 3 : 1;
          $p$5 = $$11;
          $size$0 = $$12;
          break;
         }
        case 106:
         {
          $p$5 = $105;
          $size$0 = 3;
          break;
         }
        case 116:
        case 122:
         {
          $p$5 = $105;
          $size$0 = 1;
          break;
         }
        case 76:
         {
          $p$5 = $105;
          $size$0 = 2;
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $p$5 = $p$4;
          $size$0 = 0;
          break;
         }
        default:
         {
          $alloc$0400 = $alloc$0;
          $matches$0104376 = $matches$0104;
          $s$6 = $s$1;
          $wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
        }
        $114 = HEAP8[$p$5 >> 0] | 0;
        $115 = $114 & 255;
        $116 = $115 & 47;
        $117 = ($116 | 0) == 3;
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$ | 0) {
        case 99:
         {
          $119 = ($width$0$lcssa | 0) < 1;
          $$width$0 = $119 ? 1 : $width$0$lcssa;
          $pos$1 = $pos$0108;
          $width$1 = $$width$0;
          break;
         }
        case 91:
         {
          $pos$1 = $pos$0108;
          $width$1 = $width$0$lcssa;
          break;
         }
        case 110:
         {
          $120 = ($pos$0108 | 0) < 0;
          $121 = $120 << 31 >> 31;
          $122 = ($dest$0 | 0) == (0 | 0);
          if ($122) {
           $matches$1 = $matches$0104;
           $p$11 = $p$5;
           $pos$2 = $pos$0108;
           $s$5 = $s$1;
           $wcs$6 = $wcs$1;
           break L8;
          }
          switch ($$size$0 | 0) {
          case -2:
           {
            $123 = $pos$0108 & 255;
            HEAP8[$dest$0 >> 0] = $123;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case -1:
           {
            $124 = $pos$0108 & 65535;
            HEAP16[$dest$0 >> 1] = $124;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case 0:
           {
            HEAP32[$dest$0 >> 2] = $pos$0108;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case 1:
           {
            HEAP32[$dest$0 >> 2] = $pos$0108;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          case 3:
           {
            $125 = $dest$0;
            $126 = $125;
            HEAP32[$126 >> 2] = $pos$0108;
            $127 = $125 + 4 | 0;
            $128 = $127;
            HEAP32[$128 >> 2] = $121;
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
            break;
           }
          default:
           {
            $matches$1 = $matches$0104;
            $p$11 = $p$5;
            $pos$2 = $pos$0108;
            $s$5 = $s$1;
            $wcs$6 = $wcs$1;
            break L8;
           }
          }
          break;
         }
        default:
         {
          ___shlim($f, 0);
          while (1) {
           $129 = HEAP32[$7 >> 2] | 0;
           $130 = HEAP32[$8 >> 2] | 0;
           $131 = $129 >>> 0 < $130 >>> 0;
           if ($131) {
            $132 = $129 + 1 | 0;
            HEAP32[$7 >> 2] = $132;
            $133 = HEAP8[$129 >> 0] | 0;
            $134 = $133 & 255;
            $136 = $134;
           } else {
            $135 = ___shgetc($f) | 0;
            $136 = $135;
           }
           $137 = _isspace($136) | 0;
           $138 = ($137 | 0) == 0;
           if ($138) {
            break;
           }
          }
          $139 = HEAP32[$8 >> 2] | 0;
          $140 = ($139 | 0) == (0 | 0);
          $$pre170 = HEAP32[$7 >> 2] | 0;
          if ($140) {
           $145 = $$pre170;
          } else {
           $141 = $$pre170 + -1 | 0;
           HEAP32[$7 >> 2] = $141;
           $145 = $141;
          }
          $142 = HEAP32[$9 >> 2] | 0;
          $143 = HEAP32[$10 >> 2] | 0;
          $144 = $145;
          $146 = $143;
          $147 = $142 + $pos$0108 | 0;
          $148 = $147 + $144 | 0;
          $149 = $148 - $146 | 0;
          $pos$1 = $149;
          $width$1 = $width$0$lcssa;
         }
        }
        ___shlim($f, $width$1);
        $150 = HEAP32[$7 >> 2] | 0;
        $151 = HEAP32[$8 >> 2] | 0;
        $152 = $150 >>> 0 < $151 >>> 0;
        if ($152) {
         $153 = $150 + 1 | 0;
         HEAP32[$7 >> 2] = $153;
         $157 = $151;
        } else {
         $154 = ___shgetc($f) | 0;
         $155 = ($154 | 0) < 0;
         if ($155) {
          $alloc$0400 = $alloc$0;
          $matches$0104376 = $matches$0104;
          $s$6 = $s$1;
          $wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8 >> 2] | 0;
         $157 = $$pre172;
        }
        $156 = ($157 | 0) == (0 | 0);
        if (!$156) {
         $158 = HEAP32[$7 >> 2] | 0;
         $159 = $158 + -1 | 0;
         HEAP32[$7 >> 2] = $159;
        }
        L67 : do {
         switch ($$ | 0) {
         case 91:
         case 99:
         case 115:
          {
           $160 = ($$ | 0) == 99;
           $161 = $$ & 239;
           $162 = ($161 | 0) == 99;
           L69 : do {
            if ($162) {
             $163 = ($$ | 0) == 115;
             _memset($scanset | 0, -1, 257) | 0;
             HEAP8[$scanset >> 0] = 0;
             if ($163) {
              HEAP8[$12 >> 0] = 0;
              HEAP8[$11 >> 0] = 0 | 0;
              HEAP8[$11 + 1 >> 0] = 0 | 0;
              HEAP8[$11 + 2 >> 0] = 0 | 0;
              HEAP8[$11 + 3 >> 0] = 0 | 0;
              HEAP8[$11 + 4 >> 0] = 0 | 0;
              $p$9 = $p$5;
             } else {
              $p$9 = $p$5;
             }
            } else {
             $164 = $p$5 + 1 | 0;
             $165 = HEAP8[$164 >> 0] | 0;
             $166 = $165 << 24 >> 24 == 94;
             $167 = $p$5 + 2 | 0;
             $invert$0 = $166 & 1;
             $168 = $166 ? $164 : $p$5;
             $p$6 = $166 ? $167 : $164;
             $169 = $166 & 1;
             _memset($scanset | 0, $169 | 0, 257) | 0;
             HEAP8[$scanset >> 0] = 0;
             $170 = HEAP8[$p$6 >> 0] | 0;
             switch ($170 << 24 >> 24) {
             case 45:
              {
               $171 = $168 + 2 | 0;
               $172 = $invert$0 ^ 1;
               $173 = $172 & 255;
               HEAP8[$14 >> 0] = $173;
               $$pre$phi182Z2D = $173;
               $p$7$ph = $171;
               break;
              }
             case 93:
              {
               $174 = $168 + 2 | 0;
               $175 = $invert$0 ^ 1;
               $176 = $175 & 255;
               HEAP8[$15 >> 0] = $176;
               $$pre$phi182Z2D = $176;
               $p$7$ph = $174;
               break;
              }
             default:
              {
               $$pre180 = $invert$0 ^ 1;
               $$pre181 = $$pre180 & 255;
               $$pre$phi182Z2D = $$pre181;
               $p$7$ph = $p$6;
              }
             }
             $p$7 = $p$7$ph;
             while (1) {
              $177 = HEAP8[$p$7 >> 0] | 0;
              L80 : do {
               switch ($177 << 24 >> 24) {
               case 0:
                {
                 $alloc$0400 = $alloc$0;
                 $matches$0104376 = $matches$0104;
                 $s$6 = $s$1;
                 $wcs$7 = $wcs$1;
                 label = 152;
                 break L6;
                 break;
                }
               case 93:
                {
                 $p$9 = $p$7;
                 break L69;
                 break;
                }
               case 45:
                {
                 $178 = $p$7 + 1 | 0;
                 $179 = HEAP8[$178 >> 0] | 0;
                 switch ($179 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $190 = 45;
                   $p$8 = $p$7;
                   break L80;
                   break;
                  }
                 default:
                  {}
                 }
                 $180 = $p$7 + -1 | 0;
                 $181 = HEAP8[$180 >> 0] | 0;
                 $182 = ($181 & 255) < ($179 & 255);
                 if ($182) {
                  $183 = $181 & 255;
                  $c$0100 = $183;
                  while (1) {
                   $184 = $c$0100 + 1 | 0;
                   $185 = $scanset + $184 | 0;
                   HEAP8[$185 >> 0] = $$pre$phi182Z2D;
                   $186 = HEAP8[$178 >> 0] | 0;
                   $187 = $186 & 255;
                   $188 = ($184 | 0) < ($187 | 0);
                   if ($188) {
                    $c$0100 = $184;
                   } else {
                    $190 = $186;
                    $p$8 = $178;
                    break;
                   }
                  }
                 } else {
                  $190 = $179;
                  $p$8 = $178;
                 }
                 break;
                }
               default:
                {
                 $190 = $177;
                 $p$8 = $p$7;
                }
               }
              } while (0);
              $189 = $190 & 255;
              $191 = $189 + 1 | 0;
              $192 = $scanset + $191 | 0;
              HEAP8[$192 >> 0] = $$pre$phi182Z2D;
              $193 = $p$8 + 1 | 0;
              $p$7 = $193;
             }
            }
           } while (0);
           $194 = $width$1 + 1 | 0;
           $195 = $160 ? $194 : 31;
           $196 = ($$size$0 | 0) == 1;
           $197 = ($alloc$0 | 0) != 0;
           L88 : do {
            if ($196) {
             if ($197) {
              $198 = $195 << 2;
              $199 = _malloc($198) | 0;
              $200 = ($199 | 0) == (0 | 0);
              if ($200) {
               $alloc$0400 = $alloc$0;
               $matches$0104376 = $matches$0104;
               $s$6 = 0;
               $wcs$7 = $199;
               label = 152;
               break L6;
              } else {
               $wcs$2 = $199;
              }
             } else {
              $wcs$2 = $dest$0;
             }
             HEAP32[$st >> 2] = 0;
             HEAP32[$13 >> 2] = 0;
             $i$0$ph = 0;
             $k$0$ph = $195;
             $wcs$3$ph = $wcs$2;
             L94 : while (1) {
              $201 = ($wcs$3$ph | 0) == (0 | 0);
              $i$0$ph20 = $i$0$ph;
              while (1) {
               L98 : while (1) {
                $202 = HEAP32[$7 >> 2] | 0;
                $203 = HEAP32[$8 >> 2] | 0;
                $204 = $202 >>> 0 < $203 >>> 0;
                if ($204) {
                 $205 = $202 + 1 | 0;
                 HEAP32[$7 >> 2] = $205;
                 $206 = HEAP8[$202 >> 0] | 0;
                 $207 = $206 & 255;
                 $210 = $207;
                } else {
                 $208 = ___shgetc($f) | 0;
                 $210 = $208;
                }
                $209 = $210 + 1 | 0;
                $211 = $scanset + $209 | 0;
                $212 = HEAP8[$211 >> 0] | 0;
                $213 = $212 << 24 >> 24 == 0;
                if ($213) {
                 $i$0$ph20$lcssa = $i$0$ph20;
                 $wcs$3$ph$lcssa = $wcs$3$ph;
                 break L94;
                }
                $214 = $210 & 255;
                HEAP8[$0 >> 0] = $214;
                $215 = _mbrtowc($wc, $0, 1, $st) | 0;
                switch ($215 | 0) {
                case -1:
                 {
                  $alloc$0400 = $alloc$0;
                  $matches$0104376 = $matches$0104;
                  $s$6 = 0;
                  $wcs$7 = $wcs$3$ph;
                  label = 152;
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L98;
                 }
                }
               }
               if ($201) {
                $i$1 = $i$0$ph20;
               } else {
                $216 = HEAP32[$wc >> 2] | 0;
                $217 = $i$0$ph20 + 1 | 0;
                $218 = $wcs$3$ph + ($i$0$ph20 << 2) | 0;
                HEAP32[$218 >> 2] = $216;
                $i$1 = $217;
               }
               $219 = ($i$1 | 0) == ($k$0$ph | 0);
               $or$cond = $197 & $219;
               if ($or$cond) {
                break;
               } else {
                $i$0$ph20 = $i$1;
               }
              }
              $factor = $k$0$ph << 1;
              $220 = $factor | 1;
              $221 = $220 << 2;
              $222 = _realloc($wcs$3$ph, $221) | 0;
              $223 = ($222 | 0) == (0 | 0);
              if ($223) {
               $alloc$0400 = $alloc$0;
               $matches$0104376 = $matches$0104;
               $s$6 = 0;
               $wcs$7 = $wcs$3$ph;
               label = 152;
               break L6;
              }
              $i$0$ph$phi = $k$0$ph;
              $k$0$ph = $220;
              $wcs$3$ph = $222;
              $i$0$ph = $i$0$ph$phi;
             }
             $224 = _mbsinit($st) | 0;
             $225 = ($224 | 0) == 0;
             if ($225) {
              $alloc$0400 = $alloc$0;
              $matches$0104376 = $matches$0104;
              $s$6 = 0;
              $wcs$7 = $wcs$3$ph$lcssa;
              label = 152;
              break L6;
             } else {
              $i$4 = $i$0$ph20$lcssa;
              $s$3 = 0;
              $wcs$4 = $wcs$3$ph$lcssa;
             }
            } else {
             if ($197) {
              $226 = _malloc($195) | 0;
              $227 = ($226 | 0) == (0 | 0);
              if ($227) {
               $alloc$0400 = $alloc$0;
               $matches$0104376 = $matches$0104;
               $s$6 = 0;
               $wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph = 0;
               $k$1$ph = $195;
               $s$2$ph = $226;
              }
              while (1) {
               $i$2 = $i$2$ph;
               while (1) {
                $228 = HEAP32[$7 >> 2] | 0;
                $229 = HEAP32[$8 >> 2] | 0;
                $230 = $228 >>> 0 < $229 >>> 0;
                if ($230) {
                 $231 = $228 + 1 | 0;
                 HEAP32[$7 >> 2] = $231;
                 $232 = HEAP8[$228 >> 0] | 0;
                 $233 = $232 & 255;
                 $236 = $233;
                } else {
                 $234 = ___shgetc($f) | 0;
                 $236 = $234;
                }
                $235 = $236 + 1 | 0;
                $237 = $scanset + $235 | 0;
                $238 = HEAP8[$237 >> 0] | 0;
                $239 = $238 << 24 >> 24 == 0;
                if ($239) {
                 $i$4 = $i$2;
                 $s$3 = $s$2$ph;
                 $wcs$4 = 0;
                 break L88;
                }
                $240 = $236 & 255;
                $241 = $i$2 + 1 | 0;
                $242 = $s$2$ph + $i$2 | 0;
                HEAP8[$242 >> 0] = $240;
                $243 = ($241 | 0) == ($k$1$ph | 0);
                if ($243) {
                 break;
                } else {
                 $i$2 = $241;
                }
               }
               $factor16 = $k$1$ph << 1;
               $244 = $factor16 | 1;
               $245 = _realloc($s$2$ph, $244) | 0;
               $246 = ($245 | 0) == (0 | 0);
               if ($246) {
                $alloc$0400 = $alloc$0;
                $matches$0104376 = $matches$0104;
                $s$6 = $s$2$ph;
                $wcs$7 = 0;
                label = 152;
                break L6;
               } else {
                $i$2$ph$phi = $k$1$ph;
                $k$1$ph = $244;
                $s$2$ph = $245;
                $i$2$ph = $i$2$ph$phi;
               }
              }
             }
             $247 = ($dest$0 | 0) == (0 | 0);
             if ($247) {
              $265 = $157;
              while (1) {
               $263 = HEAP32[$7 >> 2] | 0;
               $264 = $263 >>> 0 < $265 >>> 0;
               if ($264) {
                $266 = $263 + 1 | 0;
                HEAP32[$7 >> 2] = $266;
                $267 = HEAP8[$263 >> 0] | 0;
                $268 = $267 & 255;
                $271 = $268;
               } else {
                $269 = ___shgetc($f) | 0;
                $271 = $269;
               }
               $270 = $271 + 1 | 0;
               $272 = $scanset + $270 | 0;
               $273 = HEAP8[$272 >> 0] | 0;
               $274 = $273 << 24 >> 24 == 0;
               if ($274) {
                $i$4 = 0;
                $s$3 = 0;
                $wcs$4 = 0;
                break L88;
               }
               $$pre176 = HEAP32[$8 >> 2] | 0;
               $265 = $$pre176;
              }
             } else {
              $250 = $157;
              $i$3 = 0;
              while (1) {
               $248 = HEAP32[$7 >> 2] | 0;
               $249 = $248 >>> 0 < $250 >>> 0;
               if ($249) {
                $251 = $248 + 1 | 0;
                HEAP32[$7 >> 2] = $251;
                $252 = HEAP8[$248 >> 0] | 0;
                $253 = $252 & 255;
                $256 = $253;
               } else {
                $254 = ___shgetc($f) | 0;
                $256 = $254;
               }
               $255 = $256 + 1 | 0;
               $257 = $scanset + $255 | 0;
               $258 = HEAP8[$257 >> 0] | 0;
               $259 = $258 << 24 >> 24 == 0;
               if ($259) {
                $i$4 = $i$3;
                $s$3 = $dest$0;
                $wcs$4 = 0;
                break L88;
               }
               $260 = $256 & 255;
               $261 = $i$3 + 1 | 0;
               $262 = $dest$0 + $i$3 | 0;
               HEAP8[$262 >> 0] = $260;
               $$pre174 = HEAP32[$8 >> 2] | 0;
               $250 = $$pre174;
               $i$3 = $261;
              }
             }
            }
           } while (0);
           $275 = HEAP32[$8 >> 2] | 0;
           $276 = ($275 | 0) == (0 | 0);
           $$pre178 = HEAP32[$7 >> 2] | 0;
           if ($276) {
            $281 = $$pre178;
           } else {
            $277 = $$pre178 + -1 | 0;
            HEAP32[$7 >> 2] = $277;
            $281 = $277;
           }
           $278 = HEAP32[$9 >> 2] | 0;
           $279 = HEAP32[$10 >> 2] | 0;
           $280 = $281;
           $282 = $279;
           $283 = $280 - $282 | 0;
           $284 = $283 + $278 | 0;
           $285 = ($284 | 0) == 0;
           if ($285) {
            $alloc$2 = $alloc$0;
            $matches$2 = $matches$0104;
            $s$8 = $s$3;
            $wcs$9 = $wcs$4;
            break L6;
           }
           $$not = $160 ^ 1;
           $286 = ($284 | 0) == ($width$1 | 0);
           $or$cond8 = $286 | $$not;
           if (!$or$cond8) {
            $alloc$2 = $alloc$0;
            $matches$2 = $matches$0104;
            $s$8 = $s$3;
            $wcs$9 = $wcs$4;
            break L6;
           }
           do {
            if ($197) {
             if ($196) {
              HEAP32[$dest$0 >> 2] = $wcs$4;
              break;
             } else {
              HEAP32[$dest$0 >> 2] = $s$3;
              break;
             }
            }
           } while (0);
           if ($160) {
            $p$10 = $p$9;
            $s$4 = $s$3;
            $wcs$5 = $wcs$4;
           } else {
            $287 = ($wcs$4 | 0) == (0 | 0);
            if (!$287) {
             $288 = $wcs$4 + ($i$4 << 2) | 0;
             HEAP32[$288 >> 2] = 0;
            }
            $289 = ($s$3 | 0) == (0 | 0);
            if ($289) {
             $p$10 = $p$9;
             $s$4 = 0;
             $wcs$5 = $wcs$4;
             break L67;
            }
            $290 = $s$3 + $i$4 | 0;
            HEAP8[$290 >> 0] = 0;
            $p$10 = $p$9;
            $s$4 = $s$3;
            $wcs$5 = $wcs$4;
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $base$0 = 16;
           label = 134;
           break;
          }
         case 111:
          {
           $base$0 = 8;
           label = 134;
           break;
          }
         case 117:
         case 100:
          {
           $base$0 = 10;
           label = 134;
           break;
          }
         case 105:
          {
           $base$0 = 0;
           label = 134;
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $310 = +___floatscan($f, $$size$0, 0);
           $311 = HEAP32[$9 >> 2] | 0;
           $312 = HEAP32[$7 >> 2] | 0;
           $313 = HEAP32[$10 >> 2] | 0;
           $314 = $312;
           $315 = $313;
           $316 = $315 - $314 | 0;
           $317 = ($311 | 0) == ($316 | 0);
           if ($317) {
            $alloc$2 = $alloc$0;
            $matches$2 = $matches$0104;
            $s$8 = $s$1;
            $wcs$9 = $wcs$1;
            break L6;
           }
           $318 = ($dest$0 | 0) == (0 | 0);
           if ($318) {
            $p$10 = $p$5;
            $s$4 = $s$1;
            $wcs$5 = $wcs$1;
           } else {
            switch ($$size$0 | 0) {
            case 0:
             {
              $319 = $310;
              HEAPF32[$dest$0 >> 2] = $319;
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
              break;
             }
            case 1:
             {
              HEAPF64[$dest$0 >> 3] = $310;
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
              break;
             }
            case 2:
             {
              HEAPF64[$dest$0 >> 3] = $310;
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
              break;
             }
            default:
             {
              $p$10 = $p$5;
              $s$4 = $s$1;
              $wcs$5 = $wcs$1;
              break L67;
             }
            }
           }
           break;
          }
         default:
          {
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
          }
         }
        } while (0);
        L168 : do {
         if ((label | 0) == 134) {
          label = 0;
          $291 = ___intscan($f, $base$0, 0, -1, -1) | 0;
          $292 = tempRet0;
          $293 = HEAP32[$9 >> 2] | 0;
          $294 = HEAP32[$7 >> 2] | 0;
          $295 = HEAP32[$10 >> 2] | 0;
          $296 = $294;
          $297 = $295;
          $298 = $297 - $296 | 0;
          $299 = ($293 | 0) == ($298 | 0);
          if ($299) {
           $alloc$2 = $alloc$0;
           $matches$2 = $matches$0104;
           $s$8 = $s$1;
           $wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$ | 0) == 112;
          $301 = ($dest$0 | 0) != (0 | 0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0 >> 2] = $302;
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0 | 0) == (0 | 0);
          if ($303) {
           $p$10 = $p$5;
           $s$4 = $s$1;
           $wcs$5 = $wcs$1;
          } else {
           switch ($$size$0 | 0) {
           case -2:
            {
             $304 = $291 & 255;
             HEAP8[$dest$0 >> 0] = $304;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case -1:
            {
             $305 = $291 & 65535;
             HEAP16[$dest$0 >> 1] = $305;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case 0:
            {
             HEAP32[$dest$0 >> 2] = $291;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case 1:
            {
             HEAP32[$dest$0 >> 2] = $291;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           case 3:
            {
             $306 = $dest$0;
             $307 = $306;
             HEAP32[$307 >> 2] = $291;
             $308 = $306 + 4 | 0;
             $309 = $308;
             HEAP32[$309 >> 2] = $292;
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
             break;
            }
           default:
            {
             $p$10 = $p$5;
             $s$4 = $s$1;
             $wcs$5 = $wcs$1;
             break L168;
            }
           }
          }
         }
        } while (0);
        $320 = HEAP32[$9 >> 2] | 0;
        $321 = HEAP32[$7 >> 2] | 0;
        $322 = HEAP32[$10 >> 2] | 0;
        $323 = $321;
        $324 = $322;
        $325 = $320 + $pos$1 | 0;
        $326 = $325 + $323 | 0;
        $327 = $326 - $324 | 0;
        $not$ = ($dest$0 | 0) != (0 | 0);
        $328 = $not$ & 1;
        $matches$0$ = $328 + $matches$0104 | 0;
        $matches$1 = $matches$0$;
        $p$11 = $p$10;
        $pos$2 = $327;
        $s$5 = $s$4;
        $wcs$6 = $wcs$5;
        break L8;
       }
      } while (0);
      $50 = $47 & 1;
      $51 = $p$0109 + $50 | 0;
      ___shlim($f, 0);
      $52 = HEAP32[$7 >> 2] | 0;
      $53 = HEAP32[$8 >> 2] | 0;
      $54 = $52 >>> 0 < $53 >>> 0;
      if ($54) {
       $55 = $52 + 1 | 0;
       HEAP32[$7 >> 2] = $55;
       $56 = HEAP8[$52 >> 0] | 0;
       $57 = $56 & 255;
       $62 = $57;
      } else {
       $58 = ___shgetc($f) | 0;
       $62 = $58;
      }
      $59 = HEAP8[$51 >> 0] | 0;
      $60 = $59 & 255;
      $61 = ($62 | 0) == ($60 | 0);
      if (!$61) {
       $$lcssa384 = $62;
       $matches$0104$lcssa = $matches$0104;
       $s$0107$lcssa = $s$0107;
       $wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = $pos$0108 + 1 | 0;
      $matches$1 = $matches$0104;
      $p$11 = $51;
      $pos$2 = $69;
      $s$5 = $s$0107;
      $wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while (1) {
       $20 = $p$1 + 1 | 0;
       $21 = HEAP8[$20 >> 0] | 0;
       $22 = $21 & 255;
       $23 = _isspace($22) | 0;
       $24 = ($23 | 0) == 0;
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f, 0);
      while (1) {
       $25 = HEAP32[$7 >> 2] | 0;
       $26 = HEAP32[$8 >> 2] | 0;
       $27 = $25 >>> 0 < $26 >>> 0;
       if ($27) {
        $28 = $25 + 1 | 0;
        HEAP32[$7 >> 2] = $28;
        $29 = HEAP8[$25 >> 0] | 0;
        $30 = $29 & 255;
        $32 = $30;
       } else {
        $31 = ___shgetc($f) | 0;
        $32 = $31;
       }
       $33 = _isspace($32) | 0;
       $34 = ($33 | 0) == 0;
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8 >> 2] | 0;
      $36 = ($35 | 0) == (0 | 0);
      $$pre = HEAP32[$7 >> 2] | 0;
      if ($36) {
       $41 = $$pre;
      } else {
       $37 = $$pre + -1 | 0;
       HEAP32[$7 >> 2] = $37;
       $41 = $37;
      }
      $38 = HEAP32[$9 >> 2] | 0;
      $39 = HEAP32[$10 >> 2] | 0;
      $40 = $41;
      $42 = $39;
      $43 = $38 + $pos$0108 | 0;
      $44 = $43 + $40 | 0;
      $45 = $44 - $42 | 0;
      $matches$1 = $matches$0104;
      $p$11 = $p$1$lcssa;
      $pos$2 = $45;
      $s$5 = $s$0107;
      $wcs$6 = $wcs$0103;
     }
    } while (0);
    $329 = $p$11 + 1 | 0;
    $330 = HEAP8[$329 >> 0] | 0;
    $331 = $330 << 24 >> 24 == 0;
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;
     $matches$0104 = $matches$1;
     $p$0109 = $329;
     $pos$0108 = $pos$2;
     $s$0107 = $s$5;
     $wcs$0103 = $wcs$6;
    }
   }
   if ((label | 0) == 21) {
    $63 = HEAP32[$8 >> 2] | 0;
    $64 = ($63 | 0) == (0 | 0);
    if (!$64) {
     $65 = HEAP32[$7 >> 2] | 0;
     $66 = $65 + -1 | 0;
     HEAP32[$7 >> 2] = $66;
    }
    $67 = ($$lcssa384 | 0) > -1;
    $68 = ($matches$0104$lcssa | 0) != 0;
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;
     $s$7 = $s$0107$lcssa;
     $wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   } else if ((label | 0) == 152) {
    $$old4 = ($matches$0104376 | 0) == 0;
    if ($$old4) {
     $alloc$1 = $alloc$0400;
     $s$7 = $s$6;
     $wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;
     $matches$2 = $matches$0104376;
     $s$8 = $s$6;
     $wcs$9 = $wcs$7;
    }
   }
   if ((label | 0) == 153) {
    $alloc$2 = $alloc$1;
    $matches$2 = -1;
    $s$8 = $s$7;
    $wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2 | 0) == 0;
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while (0);
 $333 = ($334 | 0) == 0;
 if (!$333) {
  ___unlockfile($f);
 }
 STACKTOP = sp;
 return $matches$3 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($mem | 0) == (0 | 0);
 if ($0) {
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = HEAP32[2560 >> 2] | 0;
 $3 = $1 >>> 0 < $2 >>> 0;
 if ($3) {
  _abort();
 }
 $4 = $mem + -4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 & 3;
 $7 = ($6 | 0) == 1;
 if ($7) {
  _abort();
 }
 $8 = $5 & -8;
 $$sum = $8 + -8 | 0;
 $9 = $mem + $$sum | 0;
 $10 = $5 & 1;
 $11 = ($10 | 0) == 0;
 do {
  if ($11) {
   $12 = HEAP32[$1 >> 2] | 0;
   $13 = ($6 | 0) == 0;
   if ($13) {
    return;
   }
   $$sum2 = -8 - $12 | 0;
   $14 = $mem + $$sum2 | 0;
   $15 = $12 + $8 | 0;
   $16 = $14 >>> 0 < $2 >>> 0;
   if ($16) {
    _abort();
   }
   $17 = HEAP32[2564 >> 2] | 0;
   $18 = ($14 | 0) == ($17 | 0);
   if ($18) {
    $$sum3 = $8 + -4 | 0;
    $103 = $mem + $$sum3 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 & 3;
    $106 = ($105 | 0) == 3;
    if (!$106) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    HEAP32[2552 >> 2] = $15;
    $107 = $104 & -2;
    HEAP32[$103 >> 2] = $107;
    $108 = $15 | 1;
    $$sum20 = $$sum2 + 4 | 0;
    $109 = $mem + $$sum20 | 0;
    HEAP32[$109 >> 2] = $108;
    HEAP32[$9 >> 2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = $12 >>> 0 < 256;
   if ($20) {
    $$sum30 = $$sum2 + 8 | 0;
    $21 = $mem + $$sum30 | 0;
    $22 = HEAP32[$21 >> 2] | 0;
    $$sum31 = $$sum2 + 12 | 0;
    $23 = $mem + $$sum31 | 0;
    $24 = HEAP32[$23 >> 2] | 0;
    $25 = $19 << 1;
    $26 = 2584 + ($25 << 2) | 0;
    $27 = ($22 | 0) == ($26 | 0);
    if (!$27) {
     $28 = $22 >>> 0 < $2 >>> 0;
     if ($28) {
      _abort();
     }
     $29 = $22 + 12 | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     $31 = ($30 | 0) == ($14 | 0);
     if (!$31) {
      _abort();
     }
    }
    $32 = ($24 | 0) == ($22 | 0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[2544 >> 2] | 0;
     $36 = $35 & $34;
     HEAP32[2544 >> 2] = $36;
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    $37 = ($24 | 0) == ($26 | 0);
    if ($37) {
     $$pre60 = $24 + 8 | 0;
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = $24 >>> 0 < $2 >>> 0;
     if ($38) {
      _abort();
     }
     $39 = $24 + 8 | 0;
     $40 = HEAP32[$39 >> 2] | 0;
     $41 = ($40 | 0) == ($14 | 0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
     }
    }
    $42 = $22 + 12 | 0;
    HEAP32[$42 >> 2] = $24;
    HEAP32[$$pre$phi61Z2D >> 2] = $22;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   $$sum22 = $$sum2 + 24 | 0;
   $43 = $mem + $$sum22 | 0;
   $44 = HEAP32[$43 >> 2] | 0;
   $$sum23 = $$sum2 + 12 | 0;
   $45 = $mem + $$sum23 | 0;
   $46 = HEAP32[$45 >> 2] | 0;
   $47 = ($46 | 0) == ($14 | 0);
   do {
    if ($47) {
     $$sum25 = $$sum2 + 20 | 0;
     $57 = $mem + $$sum25 | 0;
     $58 = HEAP32[$57 >> 2] | 0;
     $59 = ($58 | 0) == (0 | 0);
     if ($59) {
      $$sum24 = $$sum2 + 16 | 0;
      $60 = $mem + $$sum24 | 0;
      $61 = HEAP32[$60 >> 2] | 0;
      $62 = ($61 | 0) == (0 | 0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;
       $RP$0 = $60;
      }
     } else {
      $R$0 = $58;
      $RP$0 = $57;
     }
     while (1) {
      $63 = $R$0 + 20 | 0;
      $64 = HEAP32[$63 >> 2] | 0;
      $65 = ($64 | 0) == (0 | 0);
      if (!$65) {
       $R$0 = $64;
       $RP$0 = $63;
       continue;
      }
      $66 = $R$0 + 16 | 0;
      $67 = HEAP32[$66 >> 2] | 0;
      $68 = ($67 | 0) == (0 | 0);
      if ($68) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;
       $RP$0 = $66;
      }
     }
     $69 = $RP$0$lcssa >>> 0 < $2 >>> 0;
     if ($69) {
      _abort();
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = $$sum2 + 8 | 0;
     $48 = $mem + $$sum29 | 0;
     $49 = HEAP32[$48 >> 2] | 0;
     $50 = $49 >>> 0 < $2 >>> 0;
     if ($50) {
      _abort();
     }
     $51 = $49 + 12 | 0;
     $52 = HEAP32[$51 >> 2] | 0;
     $53 = ($52 | 0) == ($14 | 0);
     if (!$53) {
      _abort();
     }
     $54 = $46 + 8 | 0;
     $55 = HEAP32[$54 >> 2] | 0;
     $56 = ($55 | 0) == ($14 | 0);
     if ($56) {
      HEAP32[$51 >> 2] = $46;
      HEAP32[$54 >> 2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $70 = ($44 | 0) == (0 | 0);
   if ($70) {
    $p$0 = $14;
    $psize$0 = $15;
   } else {
    $$sum26 = $$sum2 + 28 | 0;
    $71 = $mem + $$sum26 | 0;
    $72 = HEAP32[$71 >> 2] | 0;
    $73 = 2848 + ($72 << 2) | 0;
    $74 = HEAP32[$73 >> 2] | 0;
    $75 = ($14 | 0) == ($74 | 0);
    if ($75) {
     HEAP32[$73 >> 2] = $R$1;
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[2548 >> 2] | 0;
      $79 = $78 & $77;
      HEAP32[2548 >> 2] = $79;
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[2560 >> 2] | 0;
     $81 = $44 >>> 0 < $80 >>> 0;
     if ($81) {
      _abort();
     }
     $82 = $44 + 16 | 0;
     $83 = HEAP32[$82 >> 2] | 0;
     $84 = ($83 | 0) == ($14 | 0);
     if ($84) {
      HEAP32[$82 >> 2] = $R$1;
     } else {
      $85 = $44 + 20 | 0;
      HEAP32[$85 >> 2] = $R$1;
     }
     $86 = ($R$1 | 0) == (0 | 0);
     if ($86) {
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[2560 >> 2] | 0;
    $88 = $R$1 >>> 0 < $87 >>> 0;
    if ($88) {
     _abort();
    }
    $89 = $R$1 + 24 | 0;
    HEAP32[$89 >> 2] = $44;
    $$sum27 = $$sum2 + 16 | 0;
    $90 = $mem + $$sum27 | 0;
    $91 = HEAP32[$90 >> 2] | 0;
    $92 = ($91 | 0) == (0 | 0);
    do {
     if (!$92) {
      $93 = $91 >>> 0 < $87 >>> 0;
      if ($93) {
       _abort();
      } else {
       $94 = $R$1 + 16 | 0;
       HEAP32[$94 >> 2] = $91;
       $95 = $91 + 24 | 0;
       HEAP32[$95 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $$sum28 = $$sum2 + 20 | 0;
    $96 = $mem + $$sum28 | 0;
    $97 = HEAP32[$96 >> 2] | 0;
    $98 = ($97 | 0) == (0 | 0);
    if ($98) {
     $p$0 = $14;
     $psize$0 = $15;
    } else {
     $99 = HEAP32[2560 >> 2] | 0;
     $100 = $97 >>> 0 < $99 >>> 0;
     if ($100) {
      _abort();
     } else {
      $101 = $R$1 + 20 | 0;
      HEAP32[$101 >> 2] = $97;
      $102 = $97 + 24 | 0;
      HEAP32[$102 >> 2] = $R$1;
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;
   $psize$0 = $8;
  }
 } while (0);
 $110 = $p$0 >>> 0 < $9 >>> 0;
 if (!$110) {
  _abort();
 }
 $$sum19 = $8 + -4 | 0;
 $111 = $mem + $$sum19 | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 $113 = $112 & 1;
 $114 = ($113 | 0) == 0;
 if ($114) {
  _abort();
 }
 $115 = $112 & 2;
 $116 = ($115 | 0) == 0;
 if ($116) {
  $117 = HEAP32[2568 >> 2] | 0;
  $118 = ($9 | 0) == ($117 | 0);
  if ($118) {
   $119 = HEAP32[2556 >> 2] | 0;
   $120 = $119 + $psize$0 | 0;
   HEAP32[2556 >> 2] = $120;
   HEAP32[2568 >> 2] = $p$0;
   $121 = $120 | 1;
   $122 = $p$0 + 4 | 0;
   HEAP32[$122 >> 2] = $121;
   $123 = HEAP32[2564 >> 2] | 0;
   $124 = ($p$0 | 0) == ($123 | 0);
   if (!$124) {
    return;
   }
   HEAP32[2564 >> 2] = 0;
   HEAP32[2552 >> 2] = 0;
   return;
  }
  $125 = HEAP32[2564 >> 2] | 0;
  $126 = ($9 | 0) == ($125 | 0);
  if ($126) {
   $127 = HEAP32[2552 >> 2] | 0;
   $128 = $127 + $psize$0 | 0;
   HEAP32[2552 >> 2] = $128;
   HEAP32[2564 >> 2] = $p$0;
   $129 = $128 | 1;
   $130 = $p$0 + 4 | 0;
   HEAP32[$130 >> 2] = $129;
   $131 = $p$0 + $128 | 0;
   HEAP32[$131 >> 2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = $132 + $psize$0 | 0;
  $134 = $112 >>> 3;
  $135 = $112 >>> 0 < 256;
  do {
   if ($135) {
    $136 = $mem + $8 | 0;
    $137 = HEAP32[$136 >> 2] | 0;
    $$sum1718 = $8 | 4;
    $138 = $mem + $$sum1718 | 0;
    $139 = HEAP32[$138 >> 2] | 0;
    $140 = $134 << 1;
    $141 = 2584 + ($140 << 2) | 0;
    $142 = ($137 | 0) == ($141 | 0);
    if (!$142) {
     $143 = HEAP32[2560 >> 2] | 0;
     $144 = $137 >>> 0 < $143 >>> 0;
     if ($144) {
      _abort();
     }
     $145 = $137 + 12 | 0;
     $146 = HEAP32[$145 >> 2] | 0;
     $147 = ($146 | 0) == ($9 | 0);
     if (!$147) {
      _abort();
     }
    }
    $148 = ($139 | 0) == ($137 | 0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[2544 >> 2] | 0;
     $152 = $151 & $150;
     HEAP32[2544 >> 2] = $152;
     break;
    }
    $153 = ($139 | 0) == ($141 | 0);
    if ($153) {
     $$pre58 = $139 + 8 | 0;
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[2560 >> 2] | 0;
     $155 = $139 >>> 0 < $154 >>> 0;
     if ($155) {
      _abort();
     }
     $156 = $139 + 8 | 0;
     $157 = HEAP32[$156 >> 2] | 0;
     $158 = ($157 | 0) == ($9 | 0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
     }
    }
    $159 = $137 + 12 | 0;
    HEAP32[$159 >> 2] = $139;
    HEAP32[$$pre$phi59Z2D >> 2] = $137;
   } else {
    $$sum5 = $8 + 16 | 0;
    $160 = $mem + $$sum5 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    $$sum67 = $8 | 4;
    $162 = $mem + $$sum67 | 0;
    $163 = HEAP32[$162 >> 2] | 0;
    $164 = ($163 | 0) == ($9 | 0);
    do {
     if ($164) {
      $$sum9 = $8 + 12 | 0;
      $175 = $mem + $$sum9 | 0;
      $176 = HEAP32[$175 >> 2] | 0;
      $177 = ($176 | 0) == (0 | 0);
      if ($177) {
       $$sum8 = $8 + 8 | 0;
       $178 = $mem + $$sum8 | 0;
       $179 = HEAP32[$178 >> 2] | 0;
       $180 = ($179 | 0) == (0 | 0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;
        $RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;
       $RP9$0 = $175;
      }
      while (1) {
       $181 = $R7$0 + 20 | 0;
       $182 = HEAP32[$181 >> 2] | 0;
       $183 = ($182 | 0) == (0 | 0);
       if (!$183) {
        $R7$0 = $182;
        $RP9$0 = $181;
        continue;
       }
       $184 = $R7$0 + 16 | 0;
       $185 = HEAP32[$184 >> 2] | 0;
       $186 = ($185 | 0) == (0 | 0);
       if ($186) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;
        $RP9$0 = $184;
       }
      }
      $187 = HEAP32[2560 >> 2] | 0;
      $188 = $RP9$0$lcssa >>> 0 < $187 >>> 0;
      if ($188) {
       _abort();
      } else {
       HEAP32[$RP9$0$lcssa >> 2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = $mem + $8 | 0;
      $166 = HEAP32[$165 >> 2] | 0;
      $167 = HEAP32[2560 >> 2] | 0;
      $168 = $166 >>> 0 < $167 >>> 0;
      if ($168) {
       _abort();
      }
      $169 = $166 + 12 | 0;
      $170 = HEAP32[$169 >> 2] | 0;
      $171 = ($170 | 0) == ($9 | 0);
      if (!$171) {
       _abort();
      }
      $172 = $163 + 8 | 0;
      $173 = HEAP32[$172 >> 2] | 0;
      $174 = ($173 | 0) == ($9 | 0);
      if ($174) {
       HEAP32[$169 >> 2] = $163;
       HEAP32[$172 >> 2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $189 = ($161 | 0) == (0 | 0);
    if (!$189) {
     $$sum12 = $8 + 20 | 0;
     $190 = $mem + $$sum12 | 0;
     $191 = HEAP32[$190 >> 2] | 0;
     $192 = 2848 + ($191 << 2) | 0;
     $193 = HEAP32[$192 >> 2] | 0;
     $194 = ($9 | 0) == ($193 | 0);
     if ($194) {
      HEAP32[$192 >> 2] = $R7$1;
      $cond47 = ($R7$1 | 0) == (0 | 0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[2548 >> 2] | 0;
       $198 = $197 & $196;
       HEAP32[2548 >> 2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[2560 >> 2] | 0;
      $200 = $161 >>> 0 < $199 >>> 0;
      if ($200) {
       _abort();
      }
      $201 = $161 + 16 | 0;
      $202 = HEAP32[$201 >> 2] | 0;
      $203 = ($202 | 0) == ($9 | 0);
      if ($203) {
       HEAP32[$201 >> 2] = $R7$1;
      } else {
       $204 = $161 + 20 | 0;
       HEAP32[$204 >> 2] = $R7$1;
      }
      $205 = ($R7$1 | 0) == (0 | 0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[2560 >> 2] | 0;
     $207 = $R7$1 >>> 0 < $206 >>> 0;
     if ($207) {
      _abort();
     }
     $208 = $R7$1 + 24 | 0;
     HEAP32[$208 >> 2] = $161;
     $$sum13 = $8 + 8 | 0;
     $209 = $mem + $$sum13 | 0;
     $210 = HEAP32[$209 >> 2] | 0;
     $211 = ($210 | 0) == (0 | 0);
     do {
      if (!$211) {
       $212 = $210 >>> 0 < $206 >>> 0;
       if ($212) {
        _abort();
       } else {
        $213 = $R7$1 + 16 | 0;
        HEAP32[$213 >> 2] = $210;
        $214 = $210 + 24 | 0;
        HEAP32[$214 >> 2] = $R7$1;
        break;
       }
      }
     } while (0);
     $$sum14 = $8 + 12 | 0;
     $215 = $mem + $$sum14 | 0;
     $216 = HEAP32[$215 >> 2] | 0;
     $217 = ($216 | 0) == (0 | 0);
     if (!$217) {
      $218 = HEAP32[2560 >> 2] | 0;
      $219 = $216 >>> 0 < $218 >>> 0;
      if ($219) {
       _abort();
      } else {
       $220 = $R7$1 + 20 | 0;
       HEAP32[$220 >> 2] = $216;
       $221 = $216 + 24 | 0;
       HEAP32[$221 >> 2] = $R7$1;
       break;
      }
     }
    }
   }
  } while (0);
  $222 = $133 | 1;
  $223 = $p$0 + 4 | 0;
  HEAP32[$223 >> 2] = $222;
  $224 = $p$0 + $133 | 0;
  HEAP32[$224 >> 2] = $133;
  $225 = HEAP32[2564 >> 2] | 0;
  $226 = ($p$0 | 0) == ($225 | 0);
  if ($226) {
   HEAP32[2552 >> 2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111 >> 2] = $227;
  $228 = $psize$0 | 1;
  $229 = $p$0 + 4 | 0;
  HEAP32[$229 >> 2] = $228;
  $230 = $p$0 + $psize$0 | 0;
  HEAP32[$230 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = $psize$1 >>> 0 < 256;
 if ($232) {
  $233 = $231 << 1;
  $234 = 2584 + ($233 << 2) | 0;
  $235 = HEAP32[2544 >> 2] | 0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237 | 0) == 0;
  if ($238) {
   $239 = $235 | $236;
   HEAP32[2544 >> 2] = $239;
   $$pre = $233 + 2 | 0;
   $$pre57 = 2584 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre57;
   $F16$0 = $234;
  } else {
   $$sum11 = $233 + 2 | 0;
   $240 = 2584 + ($$sum11 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   $242 = HEAP32[2560 >> 2] | 0;
   $243 = $241 >>> 0 < $242 >>> 0;
   if ($243) {
    _abort();
   } else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  $244 = $F16$0 + 12 | 0;
  HEAP32[$244 >> 2] = $p$0;
  $245 = $p$0 + 8 | 0;
  HEAP32[$245 >> 2] = $F16$0;
  $246 = $p$0 + 12 | 0;
  HEAP32[$246 >> 2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247 | 0) == 0;
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = $psize$1 >>> 0 > 16777215;
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = $247 + 1048320 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = $253 + 520192 | 0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = $258 + 245760 | 0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = 14 - $262 | 0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = $263 + $265 | 0;
   $267 = $266 << 1;
   $268 = $266 + 7 | 0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = 2848 + ($I18$0 << 2) | 0;
 $273 = $p$0 + 28 | 0;
 HEAP32[$273 >> 2] = $I18$0;
 $274 = $p$0 + 16 | 0;
 $275 = $p$0 + 20 | 0;
 HEAP32[$275 >> 2] = 0;
 HEAP32[$274 >> 2] = 0;
 $276 = HEAP32[2548 >> 2] | 0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278 | 0) == 0;
 L199 : do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[2548 >> 2] = $280;
   HEAP32[$272 >> 2] = $p$0;
   $281 = $p$0 + 24 | 0;
   HEAP32[$281 >> 2] = $272;
   $282 = $p$0 + 12 | 0;
   HEAP32[$282 >> 2] = $p$0;
   $283 = $p$0 + 8 | 0;
   HEAP32[$283 >> 2] = $p$0;
  } else {
   $284 = HEAP32[$272 >> 2] | 0;
   $285 = $284 + 4 | 0;
   $286 = HEAP32[$285 >> 2] | 0;
   $287 = $286 & -8;
   $288 = ($287 | 0) == ($psize$1 | 0);
   L202 : do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0 | 0) == 31;
     $290 = $I18$0 >>> 1;
     $291 = 25 - $290 | 0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;
     $T$051 = $284;
     while (1) {
      $300 = $K19$052 >>> 31;
      $301 = ($T$051 + 16 | 0) + ($300 << 2) | 0;
      $296 = HEAP32[$301 >> 2] | 0;
      $302 = ($296 | 0) == (0 | 0);
      if ($302) {
       $$lcssa = $301;
       $T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = $296 + 4 | 0;
      $297 = HEAP32[$295 >> 2] | 0;
      $298 = $297 & -8;
      $299 = ($298 | 0) == ($psize$1 | 0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;
       $T$051 = $296;
      }
     }
     $303 = HEAP32[2560 >> 2] | 0;
     $304 = $$lcssa >>> 0 < $303 >>> 0;
     if ($304) {
      _abort();
     } else {
      HEAP32[$$lcssa >> 2] = $p$0;
      $305 = $p$0 + 24 | 0;
      HEAP32[$305 >> 2] = $T$051$lcssa;
      $306 = $p$0 + 12 | 0;
      HEAP32[$306 >> 2] = $p$0;
      $307 = $p$0 + 8 | 0;
      HEAP32[$307 >> 2] = $p$0;
      break L199;
     }
    }
   } while (0);
   $308 = $T$0$lcssa + 8 | 0;
   $309 = HEAP32[$308 >> 2] | 0;
   $310 = HEAP32[2560 >> 2] | 0;
   $311 = $309 >>> 0 >= $310 >>> 0;
   $not$ = $T$0$lcssa >>> 0 >= $310 >>> 0;
   $312 = $311 & $not$;
   if ($312) {
    $313 = $309 + 12 | 0;
    HEAP32[$313 >> 2] = $p$0;
    HEAP32[$308 >> 2] = $p$0;
    $314 = $p$0 + 8 | 0;
    HEAP32[$314 >> 2] = $309;
    $315 = $p$0 + 12 | 0;
    HEAP32[$315 >> 2] = $T$0$lcssa;
    $316 = $p$0 + 24 | 0;
    HEAP32[$316 >> 2] = 0;
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $317 = HEAP32[2576 >> 2] | 0;
 $318 = $317 + -1 | 0;
 HEAP32[2576 >> 2] = $318;
 $319 = ($318 | 0) == 0;
 if ($319) {
  $sp$0$in$i = 3e3;
 } else {
  return;
 }
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  $320 = ($sp$0$i | 0) == (0 | 0);
  $321 = $sp$0$i + 8 | 0;
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[2576 >> 2] = -1;
 return;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0, $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $p + $psize | 0;
 $1 = $p + 4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 & 1;
 $4 = ($3 | 0) == 0;
 do {
  if ($4) {
   $5 = HEAP32[$p >> 2] | 0;
   $6 = $2 & 3;
   $7 = ($6 | 0) == 0;
   if ($7) {
    return;
   }
   $8 = 0 - $5 | 0;
   $9 = $p + $8 | 0;
   $10 = $5 + $psize | 0;
   $11 = HEAP32[2560 >> 2] | 0;
   $12 = $9 >>> 0 < $11 >>> 0;
   if ($12) {
    _abort();
   }
   $13 = HEAP32[2564 >> 2] | 0;
   $14 = ($9 | 0) == ($13 | 0);
   if ($14) {
    $$sum = $psize + 4 | 0;
    $99 = $p + $$sum | 0;
    $100 = HEAP32[$99 >> 2] | 0;
    $101 = $100 & 3;
    $102 = ($101 | 0) == 3;
    if (!$102) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
    HEAP32[2552 >> 2] = $10;
    $103 = $100 & -2;
    HEAP32[$99 >> 2] = $103;
    $104 = $10 | 1;
    $$sum14 = 4 - $5 | 0;
    $105 = $p + $$sum14 | 0;
    HEAP32[$105 >> 2] = $104;
    HEAP32[$0 >> 2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = $5 >>> 0 < 256;
   if ($16) {
    $$sum24 = 8 - $5 | 0;
    $17 = $p + $$sum24 | 0;
    $18 = HEAP32[$17 >> 2] | 0;
    $$sum25 = 12 - $5 | 0;
    $19 = $p + $$sum25 | 0;
    $20 = HEAP32[$19 >> 2] | 0;
    $21 = $15 << 1;
    $22 = 2584 + ($21 << 2) | 0;
    $23 = ($18 | 0) == ($22 | 0);
    if (!$23) {
     $24 = $18 >>> 0 < $11 >>> 0;
     if ($24) {
      _abort();
     }
     $25 = $18 + 12 | 0;
     $26 = HEAP32[$25 >> 2] | 0;
     $27 = ($26 | 0) == ($9 | 0);
     if (!$27) {
      _abort();
     }
    }
    $28 = ($20 | 0) == ($18 | 0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[2544 >> 2] | 0;
     $32 = $31 & $30;
     HEAP32[2544 >> 2] = $32;
     $$0 = $9;
     $$02 = $10;
     break;
    }
    $33 = ($20 | 0) == ($22 | 0);
    if ($33) {
     $$pre51 = $20 + 8 | 0;
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = $20 >>> 0 < $11 >>> 0;
     if ($34) {
      _abort();
     }
     $35 = $20 + 8 | 0;
     $36 = HEAP32[$35 >> 2] | 0;
     $37 = ($36 | 0) == ($9 | 0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
     }
    }
    $38 = $18 + 12 | 0;
    HEAP32[$38 >> 2] = $20;
    HEAP32[$$pre$phi52Z2D >> 2] = $18;
    $$0 = $9;
    $$02 = $10;
    break;
   }
   $$sum16 = 24 - $5 | 0;
   $39 = $p + $$sum16 | 0;
   $40 = HEAP32[$39 >> 2] | 0;
   $$sum17 = 12 - $5 | 0;
   $41 = $p + $$sum17 | 0;
   $42 = HEAP32[$41 >> 2] | 0;
   $43 = ($42 | 0) == ($9 | 0);
   do {
    if ($43) {
     $$sum18 = 16 - $5 | 0;
     $$sum19 = $$sum18 + 4 | 0;
     $53 = $p + $$sum19 | 0;
     $54 = HEAP32[$53 >> 2] | 0;
     $55 = ($54 | 0) == (0 | 0);
     if ($55) {
      $56 = $p + $$sum18 | 0;
      $57 = HEAP32[$56 >> 2] | 0;
      $58 = ($57 | 0) == (0 | 0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;
       $RP$0 = $56;
      }
     } else {
      $R$0 = $54;
      $RP$0 = $53;
     }
     while (1) {
      $59 = $R$0 + 20 | 0;
      $60 = HEAP32[$59 >> 2] | 0;
      $61 = ($60 | 0) == (0 | 0);
      if (!$61) {
       $R$0 = $60;
       $RP$0 = $59;
       continue;
      }
      $62 = $R$0 + 16 | 0;
      $63 = HEAP32[$62 >> 2] | 0;
      $64 = ($63 | 0) == (0 | 0);
      if ($64) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;
       $RP$0 = $62;
      }
     }
     $65 = $RP$0$lcssa >>> 0 < $11 >>> 0;
     if ($65) {
      _abort();
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = 8 - $5 | 0;
     $44 = $p + $$sum23 | 0;
     $45 = HEAP32[$44 >> 2] | 0;
     $46 = $45 >>> 0 < $11 >>> 0;
     if ($46) {
      _abort();
     }
     $47 = $45 + 12 | 0;
     $48 = HEAP32[$47 >> 2] | 0;
     $49 = ($48 | 0) == ($9 | 0);
     if (!$49) {
      _abort();
     }
     $50 = $42 + 8 | 0;
     $51 = HEAP32[$50 >> 2] | 0;
     $52 = ($51 | 0) == ($9 | 0);
     if ($52) {
      HEAP32[$47 >> 2] = $42;
      HEAP32[$50 >> 2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $66 = ($40 | 0) == (0 | 0);
   if ($66) {
    $$0 = $9;
    $$02 = $10;
   } else {
    $$sum20 = 28 - $5 | 0;
    $67 = $p + $$sum20 | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = 2848 + ($68 << 2) | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    $71 = ($9 | 0) == ($70 | 0);
    if ($71) {
     HEAP32[$69 >> 2] = $R$1;
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[2548 >> 2] | 0;
      $75 = $74 & $73;
      HEAP32[2548 >> 2] = $75;
      $$0 = $9;
      $$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[2560 >> 2] | 0;
     $77 = $40 >>> 0 < $76 >>> 0;
     if ($77) {
      _abort();
     }
     $78 = $40 + 16 | 0;
     $79 = HEAP32[$78 >> 2] | 0;
     $80 = ($79 | 0) == ($9 | 0);
     if ($80) {
      HEAP32[$78 >> 2] = $R$1;
     } else {
      $81 = $40 + 20 | 0;
      HEAP32[$81 >> 2] = $R$1;
     }
     $82 = ($R$1 | 0) == (0 | 0);
     if ($82) {
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
    $83 = HEAP32[2560 >> 2] | 0;
    $84 = $R$1 >>> 0 < $83 >>> 0;
    if ($84) {
     _abort();
    }
    $85 = $R$1 + 24 | 0;
    HEAP32[$85 >> 2] = $40;
    $$sum21 = 16 - $5 | 0;
    $86 = $p + $$sum21 | 0;
    $87 = HEAP32[$86 >> 2] | 0;
    $88 = ($87 | 0) == (0 | 0);
    do {
     if (!$88) {
      $89 = $87 >>> 0 < $83 >>> 0;
      if ($89) {
       _abort();
      } else {
       $90 = $R$1 + 16 | 0;
       HEAP32[$90 >> 2] = $87;
       $91 = $87 + 24 | 0;
       HEAP32[$91 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $$sum22 = $$sum21 + 4 | 0;
    $92 = $p + $$sum22 | 0;
    $93 = HEAP32[$92 >> 2] | 0;
    $94 = ($93 | 0) == (0 | 0);
    if ($94) {
     $$0 = $9;
     $$02 = $10;
    } else {
     $95 = HEAP32[2560 >> 2] | 0;
     $96 = $93 >>> 0 < $95 >>> 0;
     if ($96) {
      _abort();
     } else {
      $97 = $R$1 + 20 | 0;
      HEAP32[$97 >> 2] = $93;
      $98 = $93 + 24 | 0;
      HEAP32[$98 >> 2] = $R$1;
      $$0 = $9;
      $$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;
   $$02 = $psize;
  }
 } while (0);
 $106 = HEAP32[2560 >> 2] | 0;
 $107 = $0 >>> 0 < $106 >>> 0;
 if ($107) {
  _abort();
 }
 $$sum1 = $psize + 4 | 0;
 $108 = $p + $$sum1 | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 $110 = $109 & 2;
 $111 = ($110 | 0) == 0;
 if ($111) {
  $112 = HEAP32[2568 >> 2] | 0;
  $113 = ($0 | 0) == ($112 | 0);
  if ($113) {
   $114 = HEAP32[2556 >> 2] | 0;
   $115 = $114 + $$02 | 0;
   HEAP32[2556 >> 2] = $115;
   HEAP32[2568 >> 2] = $$0;
   $116 = $115 | 1;
   $117 = $$0 + 4 | 0;
   HEAP32[$117 >> 2] = $116;
   $118 = HEAP32[2564 >> 2] | 0;
   $119 = ($$0 | 0) == ($118 | 0);
   if (!$119) {
    return;
   }
   HEAP32[2564 >> 2] = 0;
   HEAP32[2552 >> 2] = 0;
   return;
  }
  $120 = HEAP32[2564 >> 2] | 0;
  $121 = ($0 | 0) == ($120 | 0);
  if ($121) {
   $122 = HEAP32[2552 >> 2] | 0;
   $123 = $122 + $$02 | 0;
   HEAP32[2552 >> 2] = $123;
   HEAP32[2564 >> 2] = $$0;
   $124 = $123 | 1;
   $125 = $$0 + 4 | 0;
   HEAP32[$125 >> 2] = $124;
   $126 = $$0 + $123 | 0;
   HEAP32[$126 >> 2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = $127 + $$02 | 0;
  $129 = $109 >>> 3;
  $130 = $109 >>> 0 < 256;
  do {
   if ($130) {
    $$sum12 = $psize + 8 | 0;
    $131 = $p + $$sum12 | 0;
    $132 = HEAP32[$131 >> 2] | 0;
    $$sum13 = $psize + 12 | 0;
    $133 = $p + $$sum13 | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    $135 = $129 << 1;
    $136 = 2584 + ($135 << 2) | 0;
    $137 = ($132 | 0) == ($136 | 0);
    if (!$137) {
     $138 = $132 >>> 0 < $106 >>> 0;
     if ($138) {
      _abort();
     }
     $139 = $132 + 12 | 0;
     $140 = HEAP32[$139 >> 2] | 0;
     $141 = ($140 | 0) == ($0 | 0);
     if (!$141) {
      _abort();
     }
    }
    $142 = ($134 | 0) == ($132 | 0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[2544 >> 2] | 0;
     $146 = $145 & $144;
     HEAP32[2544 >> 2] = $146;
     break;
    }
    $147 = ($134 | 0) == ($136 | 0);
    if ($147) {
     $$pre49 = $134 + 8 | 0;
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = $134 >>> 0 < $106 >>> 0;
     if ($148) {
      _abort();
     }
     $149 = $134 + 8 | 0;
     $150 = HEAP32[$149 >> 2] | 0;
     $151 = ($150 | 0) == ($0 | 0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
     }
    }
    $152 = $132 + 12 | 0;
    HEAP32[$152 >> 2] = $134;
    HEAP32[$$pre$phi50Z2D >> 2] = $132;
   } else {
    $$sum2 = $psize + 24 | 0;
    $153 = $p + $$sum2 | 0;
    $154 = HEAP32[$153 >> 2] | 0;
    $$sum3 = $psize + 12 | 0;
    $155 = $p + $$sum3 | 0;
    $156 = HEAP32[$155 >> 2] | 0;
    $157 = ($156 | 0) == ($0 | 0);
    do {
     if ($157) {
      $$sum5 = $psize + 20 | 0;
      $167 = $p + $$sum5 | 0;
      $168 = HEAP32[$167 >> 2] | 0;
      $169 = ($168 | 0) == (0 | 0);
      if ($169) {
       $$sum4 = $psize + 16 | 0;
       $170 = $p + $$sum4 | 0;
       $171 = HEAP32[$170 >> 2] | 0;
       $172 = ($171 | 0) == (0 | 0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;
        $RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;
       $RP9$0 = $167;
      }
      while (1) {
       $173 = $R7$0 + 20 | 0;
       $174 = HEAP32[$173 >> 2] | 0;
       $175 = ($174 | 0) == (0 | 0);
       if (!$175) {
        $R7$0 = $174;
        $RP9$0 = $173;
        continue;
       }
       $176 = $R7$0 + 16 | 0;
       $177 = HEAP32[$176 >> 2] | 0;
       $178 = ($177 | 0) == (0 | 0);
       if ($178) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;
        $RP9$0 = $176;
       }
      }
      $179 = $RP9$0$lcssa >>> 0 < $106 >>> 0;
      if ($179) {
       _abort();
      } else {
       HEAP32[$RP9$0$lcssa >> 2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = $psize + 8 | 0;
      $158 = $p + $$sum11 | 0;
      $159 = HEAP32[$158 >> 2] | 0;
      $160 = $159 >>> 0 < $106 >>> 0;
      if ($160) {
       _abort();
      }
      $161 = $159 + 12 | 0;
      $162 = HEAP32[$161 >> 2] | 0;
      $163 = ($162 | 0) == ($0 | 0);
      if (!$163) {
       _abort();
      }
      $164 = $156 + 8 | 0;
      $165 = HEAP32[$164 >> 2] | 0;
      $166 = ($165 | 0) == ($0 | 0);
      if ($166) {
       HEAP32[$161 >> 2] = $156;
       HEAP32[$164 >> 2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $180 = ($154 | 0) == (0 | 0);
    if (!$180) {
     $$sum8 = $psize + 28 | 0;
     $181 = $p + $$sum8 | 0;
     $182 = HEAP32[$181 >> 2] | 0;
     $183 = 2848 + ($182 << 2) | 0;
     $184 = HEAP32[$183 >> 2] | 0;
     $185 = ($0 | 0) == ($184 | 0);
     if ($185) {
      HEAP32[$183 >> 2] = $R7$1;
      $cond39 = ($R7$1 | 0) == (0 | 0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[2548 >> 2] | 0;
       $189 = $188 & $187;
       HEAP32[2548 >> 2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[2560 >> 2] | 0;
      $191 = $154 >>> 0 < $190 >>> 0;
      if ($191) {
       _abort();
      }
      $192 = $154 + 16 | 0;
      $193 = HEAP32[$192 >> 2] | 0;
      $194 = ($193 | 0) == ($0 | 0);
      if ($194) {
       HEAP32[$192 >> 2] = $R7$1;
      } else {
       $195 = $154 + 20 | 0;
       HEAP32[$195 >> 2] = $R7$1;
      }
      $196 = ($R7$1 | 0) == (0 | 0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[2560 >> 2] | 0;
     $198 = $R7$1 >>> 0 < $197 >>> 0;
     if ($198) {
      _abort();
     }
     $199 = $R7$1 + 24 | 0;
     HEAP32[$199 >> 2] = $154;
     $$sum9 = $psize + 16 | 0;
     $200 = $p + $$sum9 | 0;
     $201 = HEAP32[$200 >> 2] | 0;
     $202 = ($201 | 0) == (0 | 0);
     do {
      if (!$202) {
       $203 = $201 >>> 0 < $197 >>> 0;
       if ($203) {
        _abort();
       } else {
        $204 = $R7$1 + 16 | 0;
        HEAP32[$204 >> 2] = $201;
        $205 = $201 + 24 | 0;
        HEAP32[$205 >> 2] = $R7$1;
        break;
       }
      }
     } while (0);
     $$sum10 = $psize + 20 | 0;
     $206 = $p + $$sum10 | 0;
     $207 = HEAP32[$206 >> 2] | 0;
     $208 = ($207 | 0) == (0 | 0);
     if (!$208) {
      $209 = HEAP32[2560 >> 2] | 0;
      $210 = $207 >>> 0 < $209 >>> 0;
      if ($210) {
       _abort();
      } else {
       $211 = $R7$1 + 20 | 0;
       HEAP32[$211 >> 2] = $207;
       $212 = $207 + 24 | 0;
       HEAP32[$212 >> 2] = $R7$1;
       break;
      }
     }
    }
   }
  } while (0);
  $213 = $128 | 1;
  $214 = $$0 + 4 | 0;
  HEAP32[$214 >> 2] = $213;
  $215 = $$0 + $128 | 0;
  HEAP32[$215 >> 2] = $128;
  $216 = HEAP32[2564 >> 2] | 0;
  $217 = ($$0 | 0) == ($216 | 0);
  if ($217) {
   HEAP32[2552 >> 2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108 >> 2] = $218;
  $219 = $$02 | 1;
  $220 = $$0 + 4 | 0;
  HEAP32[$220 >> 2] = $219;
  $221 = $$0 + $$02 | 0;
  HEAP32[$221 >> 2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = $$1 >>> 0 < 256;
 if ($223) {
  $224 = $222 << 1;
  $225 = 2584 + ($224 << 2) | 0;
  $226 = HEAP32[2544 >> 2] | 0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228 | 0) == 0;
  if ($229) {
   $230 = $226 | $227;
   HEAP32[2544 >> 2] = $230;
   $$pre = $224 + 2 | 0;
   $$pre48 = 2584 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre48;
   $F16$0 = $225;
  } else {
   $$sum7 = $224 + 2 | 0;
   $231 = 2584 + ($$sum7 << 2) | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   $233 = HEAP32[2560 >> 2] | 0;
   $234 = $232 >>> 0 < $233 >>> 0;
   if ($234) {
    _abort();
   } else {
    $$pre$phiZ2D = $231;
    $F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0;
  $235 = $F16$0 + 12 | 0;
  HEAP32[$235 >> 2] = $$0;
  $236 = $$0 + 8 | 0;
  HEAP32[$236 >> 2] = $F16$0;
  $237 = $$0 + 12 | 0;
  HEAP32[$237 >> 2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238 | 0) == 0;
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = $$1 >>> 0 > 16777215;
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = $238 + 1048320 | 0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = $244 + 520192 | 0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = $249 + 245760 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = 14 - $253 | 0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = $254 + $256 | 0;
   $258 = $257 << 1;
   $259 = $257 + 7 | 0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = 2848 + ($I19$0 << 2) | 0;
 $264 = $$0 + 28 | 0;
 HEAP32[$264 >> 2] = $I19$0;
 $265 = $$0 + 16 | 0;
 $266 = $$0 + 20 | 0;
 HEAP32[$266 >> 2] = 0;
 HEAP32[$265 >> 2] = 0;
 $267 = HEAP32[2548 >> 2] | 0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269 | 0) == 0;
 if ($270) {
  $271 = $267 | $268;
  HEAP32[2548 >> 2] = $271;
  HEAP32[$263 >> 2] = $$0;
  $272 = $$0 + 24 | 0;
  HEAP32[$272 >> 2] = $263;
  $273 = $$0 + 12 | 0;
  HEAP32[$273 >> 2] = $$0;
  $274 = $$0 + 8 | 0;
  HEAP32[$274 >> 2] = $$0;
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0;
 $276 = $275 + 4 | 0;
 $277 = HEAP32[$276 >> 2] | 0;
 $278 = $277 & -8;
 $279 = ($278 | 0) == ($$1 | 0);
 L191 : do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0 | 0) == 31;
   $281 = $I19$0 >>> 1;
   $282 = 25 - $281 | 0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;
   $T$042 = $275;
   while (1) {
    $291 = $K20$043 >>> 31;
    $292 = ($T$042 + 16 | 0) + ($291 << 2) | 0;
    $287 = HEAP32[$292 >> 2] | 0;
    $293 = ($287 | 0) == (0 | 0);
    if ($293) {
     $$lcssa = $292;
     $T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = $287 + 4 | 0;
    $288 = HEAP32[$286 >> 2] | 0;
    $289 = $288 & -8;
    $290 = ($289 | 0) == ($$1 | 0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;
     $T$042 = $287;
    }
   }
   $294 = HEAP32[2560 >> 2] | 0;
   $295 = $$lcssa >>> 0 < $294 >>> 0;
   if ($295) {
    _abort();
   }
   HEAP32[$$lcssa >> 2] = $$0;
   $296 = $$0 + 24 | 0;
   HEAP32[$296 >> 2] = $T$042$lcssa;
   $297 = $$0 + 12 | 0;
   HEAP32[$297 >> 2] = $$0;
   $298 = $$0 + 8 | 0;
   HEAP32[$298 >> 2] = $$0;
   return;
  }
 } while (0);
 $299 = $T$0$lcssa + 8 | 0;
 $300 = HEAP32[$299 >> 2] | 0;
 $301 = HEAP32[2560 >> 2] | 0;
 $302 = $300 >>> 0 >= $301 >>> 0;
 $not$ = $T$0$lcssa >>> 0 >= $301 >>> 0;
 $303 = $302 & $not$;
 if (!$303) {
  _abort();
 }
 $304 = $300 + 12 | 0;
 HEAP32[$304 >> 2] = $$0;
 HEAP32[$299 >> 2] = $$0;
 $305 = $$0 + 8 | 0;
 HEAP32[$305 >> 2] = $300;
 $306 = $$0 + 12 | 0;
 HEAP32[$306 >> 2] = $T$0$lcssa;
 $307 = $$0 + 24 | 0;
 HEAP32[$307 >> 2] = 0;
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0, $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $base >>> 0 > 36;
 L1 : do {
  if ($2) {
   $5 = ___errno_location() | 0;
   HEAP32[$5 >> 2] = 22;
   $286 = 0;
   $287 = 0;
  } else {
   $3 = $f + 4 | 0;
   $4 = $f + 100 | 0;
   while (1) {
    $6 = HEAP32[$3 >> 2] | 0;
    $7 = HEAP32[$4 >> 2] | 0;
    $8 = $6 >>> 0 < $7 >>> 0;
    if ($8) {
     $9 = $6 + 1 | 0;
     HEAP32[$3 >> 2] = $9;
     $10 = HEAP8[$6 >> 0] | 0;
     $11 = $10 & 255;
     $13 = $11;
    } else {
     $12 = ___shgetc($f) | 0;
     $13 = $12;
    }
    $14 = _isspace($13) | 0;
    $15 = ($14 | 0) == 0;
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135 | 0) == 45;
   L11 : do {
    switch ($$lcssa135 | 0) {
    case 43:
    case 45:
     {
      $17 = $16 << 31 >> 31;
      $18 = HEAP32[$3 >> 2] | 0;
      $19 = HEAP32[$4 >> 2] | 0;
      $20 = $18 >>> 0 < $19 >>> 0;
      if ($20) {
       $21 = $18 + 1 | 0;
       HEAP32[$3 >> 2] = $21;
       $22 = HEAP8[$18 >> 0] | 0;
       $23 = $22 & 255;
       $c$0 = $23;
       $neg$0 = $17;
       break L11;
      } else {
       $24 = ___shgetc($f) | 0;
       $c$0 = $24;
       $neg$0 = $17;
       break L11;
      }
      break;
     }
    default:
     {
      $c$0 = $$lcssa135;
      $neg$0 = 0;
     }
    }
   } while (0);
   $25 = ($base | 0) == 0;
   $26 = $base & -17;
   $27 = ($26 | 0) == 0;
   $28 = ($c$0 | 0) == 48;
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3 >> 2] | 0;
     $30 = HEAP32[$4 >> 2] | 0;
     $31 = $29 >>> 0 < $30 >>> 0;
     if ($31) {
      $32 = $29 + 1 | 0;
      HEAP32[$3 >> 2] = $32;
      $33 = HEAP8[$29 >> 0] | 0;
      $34 = $33 & 255;
      $37 = $34;
     } else {
      $35 = ___shgetc($f) | 0;
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36 | 0) == 120;
     if (!$38) {
      if ($25) {
       $$123 = 8;
       $c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;
       $c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3 >> 2] | 0;
     $40 = HEAP32[$4 >> 2] | 0;
     $41 = $39 >>> 0 < $40 >>> 0;
     if ($41) {
      $42 = $39 + 1 | 0;
      HEAP32[$3 >> 2] = $42;
      $43 = HEAP8[$39 >> 0] | 0;
      $44 = $43 & 255;
      $46 = $44;
     } else {
      $45 = ___shgetc($f) | 0;
      $46 = $45;
     }
     $$sum20 = $46 + 1 | 0;
     $47 = 383747 + $$sum20 | 0;
     $48 = HEAP8[$47 >> 0] | 0;
     $49 = ($48 & 255) > 15;
     if ($49) {
      $50 = HEAP32[$4 >> 2] | 0;
      $51 = ($50 | 0) == (0 | 0);
      if (!$51) {
       $52 = HEAP32[$3 >> 2] | 0;
       $53 = $52 + -1 | 0;
       HEAP32[$3 >> 2] = $53;
      }
      $54 = ($pok | 0) == 0;
      if ($54) {
       ___shlim($f, 0);
       $286 = 0;
       $287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;
       $287 = 0;
       break L1;
      }
      $55 = HEAP32[$3 >> 2] | 0;
      $56 = $55 + -1 | 0;
      HEAP32[$3 >> 2] = $56;
      $286 = 0;
      $287 = 0;
      break L1;
     } else {
      $$123 = 16;
      $c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = $c$0 + 1 | 0;
     $57 = 383747 + $$sum | 0;
     $58 = HEAP8[$57 >> 0] | 0;
     $59 = $58 & 255;
     $60 = $59 >>> 0 < $$base21 >>> 0;
     if ($60) {
      $$1 = $$base21;
      $c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4 >> 2] | 0;
      $62 = ($61 | 0) == (0 | 0);
      if (!$62) {
       $63 = HEAP32[$3 >> 2] | 0;
       $64 = $63 + -1 | 0;
       HEAP32[$3 >> 2] = $64;
      }
      ___shlim($f, 0);
      $65 = ___errno_location() | 0;
      HEAP32[$65 >> 2] = 22;
      $286 = 0;
      $287 = 0;
      break L1;
     }
    }
   } while (0);
   if ((label | 0) == 32) {
    $66 = ($$1 | 0) == 10;
    if ($66) {
     $67 = $c$1 + -48 | 0;
     $68 = $67 >>> 0 < 10;
     if ($68) {
      $71 = $67;
      $x$082 = 0;
      while (1) {
       $69 = $x$082 * 10 | 0;
       $70 = $69 + $71 | 0;
       $72 = HEAP32[$3 >> 2] | 0;
       $73 = HEAP32[$4 >> 2] | 0;
       $74 = $72 >>> 0 < $73 >>> 0;
       if ($74) {
        $75 = $72 + 1 | 0;
        HEAP32[$3 >> 2] = $75;
        $76 = HEAP8[$72 >> 0] | 0;
        $77 = $76 & 255;
        $c$2$be = $77;
       } else {
        $78 = ___shgetc($f) | 0;
        $c$2$be = $78;
       }
       $79 = $c$2$be + -48 | 0;
       $80 = $79 >>> 0 < 10;
       $81 = $70 >>> 0 < 429496729;
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;
        $x$082 = $70;
       } else {
        $$lcssa134 = $70;
        $c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;
      $289 = 0;
      $c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;
      $289 = 0;
      $c$2$lcssa = $c$1;
     }
     $83 = $c$2$lcssa + -48 | 0;
     $84 = $83 >>> 0 < 10;
     if ($84) {
      $85 = $288;
      $86 = $289;
      $90 = $83;
      $c$371 = $c$2$lcssa;
      while (1) {
       $87 = ___muldi3($85 | 0, $86 | 0, 10, 0) | 0;
       $88 = tempRet0;
       $89 = ($90 | 0) < 0;
       $91 = $89 << 31 >> 31;
       $92 = $90 ^ -1;
       $93 = $91 ^ -1;
       $94 = $88 >>> 0 > $93 >>> 0;
       $95 = $87 >>> 0 > $92 >>> 0;
       $96 = ($88 | 0) == ($93 | 0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $90;
        $290 = $85;
        $291 = $86;
        $c$3$lcssa = $c$371;
        break;
       }
       $99 = _i64Add($87 | 0, $88 | 0, $90 | 0, $91 | 0) | 0;
       $100 = tempRet0;
       $101 = HEAP32[$3 >> 2] | 0;
       $102 = HEAP32[$4 >> 2] | 0;
       $103 = $101 >>> 0 < $102 >>> 0;
       if ($103) {
        $104 = $101 + 1 | 0;
        HEAP32[$3 >> 2] = $104;
        $105 = HEAP8[$101 >> 0] | 0;
        $106 = $105 & 255;
        $c$3$be = $106;
       } else {
        $107 = ___shgetc($f) | 0;
        $c$3$be = $107;
       }
       $108 = $c$3$be + -48 | 0;
       $109 = $108 >>> 0 < 10;
       $110 = $100 >>> 0 < 429496729;
       $111 = $99 >>> 0 < 2576980378;
       $112 = ($100 | 0) == 429496729;
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;
        $86 = $100;
        $90 = $108;
        $c$371 = $c$3$be;
       } else {
        $$lcssa = $108;
        $290 = $99;
        $291 = $100;
        $c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = $$lcssa >>> 0 > 9;
      if ($115) {
       $260 = $291;
       $262 = $290;
       $neg$1 = $neg$0;
      } else {
       $$122 = 10;
       $292 = $290;
       $293 = $291;
       $c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $260 = $289;
      $262 = $288;
      $neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;
     $c$124 = $c$1;
     label = 46;
    }
   }
   L63 : do {
    if ((label | 0) == 46) {
     $116 = $$123 + -1 | 0;
     $117 = $116 & $$123;
     $118 = ($117 | 0) == 0;
     if ($118) {
      $123 = $$123 * 23 | 0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = 384004 + $125 | 0;
      $127 = HEAP8[$126 >> 0] | 0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = $c$124 + 1 | 0;
      $129 = 383747 + $$sum1445 | 0;
      $130 = HEAP8[$129 >> 0] | 0;
      $131 = $130 & 255;
      $132 = $131 >>> 0 < $$123 >>> 0;
      if ($132) {
       $135 = $131;
       $x$146 = 0;
       while (1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3 >> 2] | 0;
        $137 = HEAP32[$4 >> 2] | 0;
        $138 = $136 >>> 0 < $137 >>> 0;
        if ($138) {
         $139 = $136 + 1 | 0;
         HEAP32[$3 >> 2] = $139;
         $140 = HEAP8[$136 >> 0] | 0;
         $141 = $140 & 255;
         $c$4$be = $141;
        } else {
         $142 = ___shgetc($f) | 0;
         $c$4$be = $142;
        }
        $$sum14 = $c$4$be + 1 | 0;
        $143 = 383747 + $$sum14 | 0;
        $144 = HEAP8[$143 >> 0] | 0;
        $145 = $144 & 255;
        $146 = $145 >>> 0 < $$123 >>> 0;
        $147 = $134 >>> 0 < 134217728;
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;
         $x$146 = $134;
        } else {
         $$lcssa130 = $134;
         $$lcssa131 = $144;
         $c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;
       $155 = 0;
       $157 = $$lcssa130;
       $c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;
       $155 = 0;
       $157 = 0;
       $c$4$lcssa = $c$124;
      }
      $149 = _bitshift64Lshr(-1, -1, $128 | 0) | 0;
      $150 = tempRet0;
      $151 = $152 & 255;
      $153 = $151 >>> 0 >= $$123 >>> 0;
      $154 = $155 >>> 0 > $150 >>> 0;
      $156 = $157 >>> 0 > $149 >>> 0;
      $158 = ($155 | 0) == ($150 | 0);
      $159 = $158 & $156;
      $160 = $154 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;
       $292 = $157;
       $293 = $155;
       $c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $157;
       $162 = $155;
       $166 = $152;
      }
      while (1) {
       $163 = _bitshift64Shl($161 | 0, $162 | 0, $128 | 0) | 0;
       $164 = tempRet0;
       $165 = $166 & 255;
       $167 = $165 | $163;
       $168 = HEAP32[$3 >> 2] | 0;
       $169 = HEAP32[$4 >> 2] | 0;
       $170 = $168 >>> 0 < $169 >>> 0;
       if ($170) {
        $171 = $168 + 1 | 0;
        HEAP32[$3 >> 2] = $171;
        $172 = HEAP8[$168 >> 0] | 0;
        $173 = $172 & 255;
        $c$5$be = $173;
       } else {
        $174 = ___shgetc($f) | 0;
        $c$5$be = $174;
       }
       $$sum15 = $c$5$be + 1 | 0;
       $175 = 383747 + $$sum15 | 0;
       $176 = HEAP8[$175 >> 0] | 0;
       $177 = $176 & 255;
       $178 = $177 >>> 0 >= $$123 >>> 0;
       $179 = $164 >>> 0 > $150 >>> 0;
       $180 = $167 >>> 0 > $149 >>> 0;
       $181 = ($164 | 0) == ($150 | 0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;
        $292 = $167;
        $293 = $164;
        $c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;
        $162 = $164;
        $166 = $176;
       }
      }
     }
     $$sum1865 = $c$124 + 1 | 0;
     $119 = 383747 + $$sum1865 | 0;
     $120 = HEAP8[$119 >> 0] | 0;
     $121 = $120 & 255;
     $122 = $121 >>> 0 < $$123 >>> 0;
     if ($122) {
      $186 = $121;
      $x$266 = 0;
      while (1) {
       $184 = Math_imul($x$266, $$123) | 0;
       $185 = $186 + $184 | 0;
       $187 = HEAP32[$3 >> 2] | 0;
       $188 = HEAP32[$4 >> 2] | 0;
       $189 = $187 >>> 0 < $188 >>> 0;
       if ($189) {
        $190 = $187 + 1 | 0;
        HEAP32[$3 >> 2] = $190;
        $191 = HEAP8[$187 >> 0] | 0;
        $192 = $191 & 255;
        $c$6$be = $192;
       } else {
        $193 = ___shgetc($f) | 0;
        $c$6$be = $193;
       }
       $$sum18 = $c$6$be + 1 | 0;
       $194 = 383747 + $$sum18 | 0;
       $195 = HEAP8[$194 >> 0] | 0;
       $196 = $195 & 255;
       $197 = $196 >>> 0 < $$123 >>> 0;
       $198 = $185 >>> 0 < 119304647;
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;
        $x$266 = $185;
       } else {
        $$lcssa132 = $185;
        $$lcssa133 = $195;
        $c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;
      $294 = $$lcssa132;
      $295 = 0;
      $c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;
      $294 = 0;
      $295 = 0;
      $c$6$lcssa = $c$124;
     }
     $200 = $201 & 255;
     $202 = $200 >>> 0 < $$123 >>> 0;
     if ($202) {
      $203 = ___udivdi3(-1, -1, $$123 | 0, 0) | 0;
      $204 = tempRet0;
      $206 = $295;
      $208 = $294;
      $215 = $201;
      $c$753 = $c$6$lcssa;
      while (1) {
       $205 = $206 >>> 0 > $204 >>> 0;
       $207 = $208 >>> 0 > $203 >>> 0;
       $209 = ($206 | 0) == ($204 | 0);
       $210 = $209 & $207;
       $211 = $205 | $210;
       if ($211) {
        $$122 = $$123;
        $292 = $208;
        $293 = $206;
        $c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = ___muldi3($208 | 0, $206 | 0, $$123 | 0, 0) | 0;
       $213 = tempRet0;
       $214 = $215 & 255;
       $216 = $214 ^ -1;
       $217 = $213 >>> 0 > 4294967295;
       $218 = $212 >>> 0 > $216 >>> 0;
       $219 = ($213 | 0) == -1;
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;
        $292 = $208;
        $293 = $206;
        $c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = _i64Add($214 | 0, 0, $212 | 0, $213 | 0) | 0;
       $223 = tempRet0;
       $224 = HEAP32[$3 >> 2] | 0;
       $225 = HEAP32[$4 >> 2] | 0;
       $226 = $224 >>> 0 < $225 >>> 0;
       if ($226) {
        $227 = $224 + 1 | 0;
        HEAP32[$3 >> 2] = $227;
        $228 = HEAP8[$224 >> 0] | 0;
        $229 = $228 & 255;
        $c$7$be = $229;
       } else {
        $230 = ___shgetc($f) | 0;
        $c$7$be = $230;
       }
       $$sum19 = $c$7$be + 1 | 0;
       $231 = 383747 + $$sum19 | 0;
       $232 = HEAP8[$231 >> 0] | 0;
       $233 = $232 & 255;
       $234 = $233 >>> 0 < $$123 >>> 0;
       if ($234) {
        $206 = $223;
        $208 = $222;
        $215 = $232;
        $c$753 = $c$7$be;
       } else {
        $$122 = $$123;
        $292 = $222;
        $293 = $223;
        $c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;
      $292 = $294;
      $293 = $295;
      $c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    $$sum16 = $c$8 + 1 | 0;
    $235 = 383747 + $$sum16 | 0;
    $236 = HEAP8[$235 >> 0] | 0;
    $237 = $236 & 255;
    $238 = $237 >>> 0 < $$122 >>> 0;
    if ($238) {
     while (1) {
      $239 = HEAP32[$3 >> 2] | 0;
      $240 = HEAP32[$4 >> 2] | 0;
      $241 = $239 >>> 0 < $240 >>> 0;
      if ($241) {
       $242 = $239 + 1 | 0;
       HEAP32[$3 >> 2] = $242;
       $243 = HEAP8[$239 >> 0] | 0;
       $244 = $243 & 255;
       $c$9$be = $244;
      } else {
       $245 = ___shgetc($f) | 0;
       $c$9$be = $245;
      }
      $$sum17 = $c$9$be + 1 | 0;
      $246 = 383747 + $$sum17 | 0;
      $247 = HEAP8[$246 >> 0] | 0;
      $248 = $247 & 255;
      $249 = $248 >>> 0 < $$122 >>> 0;
      if (!$249) {
       break;
      }
     }
     $250 = ___errno_location() | 0;
     HEAP32[$250 >> 2] = 34;
     $251 = $0 & 1;
     $252 = ($251 | 0) == 0;
     $253 = 0 == 0;
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $260 = $1;
     $262 = $0;
     $neg$1 = $neg$0$;
    } else {
     $260 = $293;
     $262 = $292;
     $neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4 >> 2] | 0;
   $256 = ($255 | 0) == (0 | 0);
   if (!$256) {
    $257 = HEAP32[$3 >> 2] | 0;
    $258 = $257 + -1 | 0;
    HEAP32[$3 >> 2] = $258;
   }
   $259 = $260 >>> 0 < $1 >>> 0;
   $261 = $262 >>> 0 < $0 >>> 0;
   $263 = ($260 | 0) == ($1 | 0);
   $264 = $263 & $261;
   $265 = $259 | $264;
   if (!$265) {
    $266 = $0 & 1;
    $267 = ($266 | 0) != 0;
    $268 = 0 != 0;
    $269 = $267 | $268;
    $270 = ($neg$1 | 0) != 0;
    $or$cond12 = $269 | $270;
    if (!$or$cond12) {
     $271 = ___errno_location() | 0;
     HEAP32[$271 >> 2] = 34;
     $272 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
     $273 = tempRet0;
     $286 = $273;
     $287 = $272;
     break;
    }
    $274 = $260 >>> 0 > $1 >>> 0;
    $275 = $262 >>> 0 > $0 >>> 0;
    $276 = ($260 | 0) == ($1 | 0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = ___errno_location() | 0;
     HEAP32[$279 >> 2] = 34;
     $286 = $1;
     $287 = $0;
     break;
    }
   }
   $280 = ($neg$1 | 0) < 0;
   $281 = $280 << 31 >> 31;
   $282 = $262 ^ $neg$1;
   $283 = $260 ^ $281;
   $284 = _i64Subtract($282 | 0, $283 | 0, $neg$1 | 0, $281 | 0) | 0;
   $285 = tempRet0;
   $286 = $285;
   $287 = $284;
  }
 } while (0);
 tempRet0 = $286;
 return $287 | 0;
}

function _ShowCityMap($pos, $scrollflag) {
 $pos = $pos | 0;
 $scrollflag = $scrollflag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $astr = 0, $c = 0, $cdptr = 0, $cicon = 0, $count = 0, $h = 0, $pdptr = 0, $sh = 0, $str = 0, $sw = 0, $w = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $pos;
 $1 = $scrollflag;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(2, 14, $2) | 0;
 $cdptr = $3;
 $count = 12;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 & 255;
 $8 = $count;
 $9 = $8 & 65535;
 $10 = Math_imul($9, $7) | 0;
 $11 = $10 & 65535;
 $count = $11;
 $12 = $0;
 $13 = HEAP8[$12 >> 0] | 0;
 $14 = $13 & 255;
 $15 = $count;
 $16 = $15 & 65535;
 $17 = $16 + $14 | 0;
 $18 = $17 & 65535;
 $count = $18;
 $h = 0;
 while (1) {
  $19 = $h;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 6;
  if (!$21) {
   break;
  }
  $22 = $h;
  $23 = $22 & 255;
  $24 = 5227 + ($23 << 3) | 0;
  $25 = $count;
  $26 = $25 & 65535;
  $27 = $cdptr;
  $28 = $27 + $26 | 0;
  HEAP8[$24 >> 0] = HEAP8[$28 >> 0] | 0;
  HEAP8[$24 + 1 >> 0] = HEAP8[$28 + 1 >> 0] | 0;
  HEAP8[$24 + 2 >> 0] = HEAP8[$28 + 2 >> 0] | 0;
  HEAP8[$24 + 3 >> 0] = HEAP8[$28 + 3 >> 0] | 0;
  HEAP8[$24 + 4 >> 0] = HEAP8[$28 + 4 >> 0] | 0;
  HEAP8[$24 + 5 >> 0] = HEAP8[$28 + 5 >> 0] | 0;
  HEAP8[$24 + 6 >> 0] = HEAP8[$28 + 6 >> 0] | 0;
  HEAP8[$24 + 7 >> 0] = HEAP8[$28 + 7 >> 0] | 0;
  $29 = $count;
  $30 = $29 & 65535;
  $31 = $30 + 12 | 0;
  $32 = $31 & 65535;
  $count = $32;
  $33 = $h;
  $34 = $33 + 1 << 24 >> 24;
  $h = $34;
 }
 $35 = $0;
 $36 = $35 + 3 | 0;
 $37 = HEAP8[$36 >> 0] | 0;
 $38 = $37 & 255;
 $39 = $0;
 $40 = $39 + 1 | 0;
 $41 = HEAP8[$40 >> 0] | 0;
 $42 = $41 & 255;
 $43 = $38 - $42 | 0;
 $44 = $43 & 255;
 $sh = $44;
 $45 = $0;
 $46 = $45 + 2 | 0;
 $47 = HEAP8[$46 >> 0] | 0;
 $48 = $47 & 255;
 $49 = $0;
 $50 = HEAP8[$49 >> 0] | 0;
 $51 = $50 & 255;
 $52 = $48 - $51 | 0;
 $53 = $52 & 255;
 $sw = $53;
 $54 = HEAP32[256 >> 2] | 0;
 $55 = _ResLoadToCon(54, 1, $54) | 0;
 $pdptr = $55;
 $56 = $pdptr;
 $57 = $56 + 6 | 0;
 $pdptr = $57;
 $58 = $1;
 $59 = $58 << 24 >> 24 != 0;
 L5 : do {
  if ($59) {
   $170 = $sh;
   $h = $170;
   $171 = $sw;
   $w = $171;
   $172 = $1;
   $173 = $172 & 255;
   switch ($173 | 0) {
   case 1:
    {
     $174 = $sh;
     $175 = $174 & 255;
     $176 = $175 + 1 | 0;
     $177 = $176 & 255;
     $h = $177;
     break;
    }
   case 2:
    {
     $178 = $sw;
     $179 = $178 & 255;
     $180 = $179 + 1 | 0;
     $181 = $180 & 255;
     $w = $181;
     break;
    }
   case 3:
    {
     $182 = $sh;
     $183 = $182 & 255;
     $184 = $183 - 1 | 0;
     $185 = $184 & 255;
     $h = $185;
     break;
    }
   case 4:
    {
     $186 = $sw;
     $187 = $186 & 255;
     $188 = $187 - 1 | 0;
     $189 = $188 & 255;
     $w = $189;
     break;
    }
   default:
    {}
   }
   $190 = $0;
   $191 = $190 + 1 | 0;
   $192 = HEAP8[$191 >> 0] | 0;
   $193 = $192 & 255;
   $194 = $h;
   $195 = $194 & 255;
   $196 = $193 + $195 | 0;
   $197 = $196 & 65535;
   $198 = $197 & 65535;
   $199 = $198 * 12 | 0;
   $200 = $0;
   $201 = HEAP8[$200 >> 0] | 0;
   $202 = $201 & 255;
   $203 = $199 + $202 | 0;
   $204 = $w;
   $205 = $204 & 255;
   $206 = $203 + $205 | 0;
   $207 = $206 << 5;
   $208 = $207 & 65535;
   $count = $208;
   $209 = $w;
   $210 = $209 & 255;
   $211 = $210 << 4;
   $212 = 0 + $211 | 0;
   $213 = $212 & 255;
   $214 = $h;
   $215 = $214 & 255;
   $216 = $215 << 4;
   $217 = 0 + $216 | 0;
   $218 = $217 & 255;
   $219 = $pdptr;
   $220 = $count;
   $221 = $220 & 65535;
   $222 = $219 + $221 | 0;
   $223 = HEAP32[272 >> 2] | 0;
   _GamPicShowV($213, $218, 16, 16, $222, $223);
   $224 = $w;
   $225 = $224 & 255;
   $226 = $h;
   $227 = $226 & 255;
   $228 = 5227 + ($227 << 3) | 0;
   $229 = $228 + $225 | 0;
   $230 = HEAP8[$229 >> 0] | 0;
   $231 = $230 << 24 >> 24 != 0;
   if ($231) {
    $232 = $w;
    $233 = $232 & 255;
    $234 = $h;
    $235 = $234 & 255;
    $236 = 5227 + ($235 << 3) | 0;
    $237 = $236 + $233 | 0;
    $238 = HEAP8[$237 >> 0] | 0;
    $239 = $238 & 255;
    $240 = $239 - 1 | 0;
    $241 = 3645 + ($240 * 31 | 0) | 0;
    $242 = $241 + 1 | 0;
    $243 = HEAP8[$242 >> 0] | 0;
    $244 = $243 & 255;
    $245 = HEAP8[3640 >> 0] | 0;
    $246 = $245 & 255;
    $247 = $246 + 1 | 0;
    $248 = ($244 | 0) == ($247 | 0);
    do {
     if ($248) {
      $c = 8;
     } else {
      $249 = $w;
      $250 = $249 & 255;
      $251 = $h;
      $252 = $251 & 255;
      $253 = 5227 + ($252 << 3) | 0;
      $254 = $253 + $250 | 0;
      $255 = HEAP8[$254 >> 0] | 0;
      $256 = $255 & 255;
      $257 = $256 - 1 | 0;
      $258 = 3645 + ($257 * 31 | 0) | 0;
      $259 = $258 + 1 | 0;
      $260 = HEAP8[$259 >> 0] | 0;
      $261 = $260 << 24 >> 24 != 0;
      if ($261) {
       $c = 7;
       break;
      } else {
       $c = 0;
       break;
      }
     }
    } while (0);
    $262 = HEAP32[256 >> 2] | 0;
    $263 = _ResLoadToCon(55, 1, $262) | 0;
    $cicon = $263;
    $264 = $w;
    $265 = $264 & 255;
    $266 = $265 << 4;
    $267 = 0 + $266 | 0;
    $268 = $267 + 4 | 0;
    $269 = $268 & 255;
    $270 = $h;
    $271 = $270 & 255;
    $272 = $271 << 4;
    $273 = 0 + $272 | 0;
    $274 = $273 + 4 | 0;
    $275 = $274 & 255;
    $276 = $c;
    $277 = $cicon;
    $278 = HEAP32[272 >> 2] | 0;
    _GamPicShowExV($269, $275, 8, 8, $276, $277, $278);
   }
  } else {
   $h = 0;
   while (1) {
    $60 = $h;
    $61 = $60 & 255;
    $62 = ($61 | 0) < 6;
    if (!$62) {
     break;
    }
    $63 = $0;
    $64 = $63 + 1 | 0;
    $65 = HEAP8[$64 >> 0] | 0;
    $66 = $65 & 255;
    $67 = $h;
    $68 = $67 & 255;
    $69 = $66 + $68 | 0;
    $70 = $69 & 65535;
    $71 = $70 & 65535;
    $72 = $71 * 12 | 0;
    $73 = $0;
    $74 = HEAP8[$73 >> 0] | 0;
    $75 = $74 & 255;
    $76 = $72 + $75 | 0;
    $77 = $76 << 5;
    $78 = $77 & 65535;
    $count = $78;
    $w = 0;
    while (1) {
     $79 = $w;
     $80 = $79 & 255;
     $81 = ($80 | 0) < 8;
     if (!$81) {
      break;
     }
     $82 = $w;
     $83 = $82 & 255;
     $84 = $83 << 4;
     $85 = 0 + $84 | 0;
     $86 = $85 & 255;
     $87 = $h;
     $88 = $87 & 255;
     $89 = $88 << 4;
     $90 = 0 + $89 | 0;
     $91 = $90 & 255;
     $92 = $pdptr;
     $93 = $count;
     $94 = $93 & 65535;
     $95 = $92 + $94 | 0;
     $96 = HEAP32[272 >> 2] | 0;
     _GamPicShowV($86, $91, 16, 16, $95, $96);
     $97 = $count;
     $98 = $97 & 65535;
     $99 = $98 + 32 | 0;
     $100 = $99 & 65535;
     $count = $100;
     $101 = $w;
     $102 = $101 + 1 << 24 >> 24;
     $w = $102;
    }
    $103 = $h;
    $104 = $103 + 1 << 24 >> 24;
    $h = $104;
   }
   $h = 0;
   while (1) {
    $105 = $h;
    $106 = $105 & 255;
    $107 = ($106 | 0) < 6;
    if (!$107) {
     break L5;
    }
    $w = 0;
    while (1) {
     $108 = $w;
     $109 = $108 & 255;
     $110 = ($109 | 0) < 8;
     if (!$110) {
      break;
     }
     $111 = $w;
     $112 = $111 & 255;
     $113 = $h;
     $114 = $113 & 255;
     $115 = 5227 + ($114 << 3) | 0;
     $116 = $115 + $112 | 0;
     $117 = HEAP8[$116 >> 0] | 0;
     $118 = $117 << 24 >> 24 != 0;
     if ($118) {
      $119 = $w;
      $120 = $119 & 255;
      $121 = $h;
      $122 = $121 & 255;
      $123 = 5227 + ($122 << 3) | 0;
      $124 = $123 + $120 | 0;
      $125 = HEAP8[$124 >> 0] | 0;
      $126 = $125 & 255;
      $127 = $126 - 1 | 0;
      $128 = 3645 + ($127 * 31 | 0) | 0;
      $129 = $128 + 1 | 0;
      $130 = HEAP8[$129 >> 0] | 0;
      $131 = $130 & 255;
      $132 = HEAP8[3640 >> 0] | 0;
      $133 = $132 & 255;
      $134 = $133 + 1 | 0;
      $135 = ($131 | 0) == ($134 | 0);
      do {
       if ($135) {
        $c = 8;
       } else {
        $136 = $w;
        $137 = $136 & 255;
        $138 = $h;
        $139 = $138 & 255;
        $140 = 5227 + ($139 << 3) | 0;
        $141 = $140 + $137 | 0;
        $142 = HEAP8[$141 >> 0] | 0;
        $143 = $142 & 255;
        $144 = $143 - 1 | 0;
        $145 = 3645 + ($144 * 31 | 0) | 0;
        $146 = $145 + 1 | 0;
        $147 = HEAP8[$146 >> 0] | 0;
        $148 = $147 << 24 >> 24 != 0;
        if ($148) {
         $c = 7;
         break;
        } else {
         $c = 0;
         break;
        }
       }
      } while (0);
      $149 = HEAP32[256 >> 2] | 0;
      $150 = _ResLoadToCon(55, 1, $149) | 0;
      $cicon = $150;
      $151 = $w;
      $152 = $151 & 255;
      $153 = $152 << 4;
      $154 = 0 + $153 | 0;
      $155 = $154 + 4 | 0;
      $156 = $155 & 255;
      $157 = $h;
      $158 = $157 & 255;
      $159 = $158 << 4;
      $160 = 0 + $159 | 0;
      $161 = $160 + 4 | 0;
      $162 = $161 & 255;
      $163 = $c;
      $164 = $cicon;
      $165 = HEAP32[272 >> 2] | 0;
      _GamPicShowExV($156, $162, 8, 8, $163, $164, $165);
     }
     $166 = $w;
     $167 = $166 + 1 << 24 >> 24;
     $w = $167;
    }
    $168 = $h;
    $169 = $168 + 1 << 24 >> 24;
    $h = $169;
   }
  }
 } while (0);
 $279 = HEAP32[256 >> 2] | 0;
 $280 = _ResLoadToCon(56, 1, $279) | 0;
 $cicon = $280;
 $281 = $cicon;
 $282 = $281 + 6 | 0;
 $cicon = $282;
 $283 = $sw;
 $284 = $283 & 255;
 $285 = $284 << 4;
 $286 = 0 + $285 | 0;
 $287 = $286 + 4 | 0;
 $288 = $287 & 255;
 $289 = $sh;
 $290 = $289 & 255;
 $291 = $290 << 4;
 $292 = 0 + $291 | 0;
 $293 = $292 + 8 | 0;
 $294 = $293 & 255;
 $295 = $cicon;
 $296 = HEAP32[272 >> 2] | 0;
 _GamMPicShowV($288, $294, 8, 8, $295, $296);
 $297 = HEAP32[384 >> 2] | 0;
 $298 = $297 + 300 | 0;
 $str = $298;
 $299 = HEAP32[384 >> 2] | 0;
 $300 = $299 + 340 | 0;
 $astr = $300;
 $301 = HEAP32[272 >> 2] | 0;
 _GamePictureDummy(-128, 0, -97, 95, 0, $301, 4);
 $302 = HEAP8[3644 >> 0] | 0;
 $303 = $302 & 255;
 $304 = 47 + $303 | 0;
 $305 = $304 & 65535;
 $306 = HEAP32[256 >> 2] | 0;
 $307 = _ResLoadToCon($305, 1, $306) | 0;
 $cicon = $307;
 $308 = HEAP8[3640 >> 0] | 0;
 $309 = $cicon;
 $310 = HEAP32[272 >> 2] | 0;
 _GamPicShowExV(-125, 4, 24, 24, $308, $309, $310);
 $311 = HEAP32[256 >> 2] | 0;
 $312 = _ResLoadToCon(69, 1, $311) | 0;
 $cicon = $312;
 $313 = $cicon;
 $314 = HEAP32[272 >> 2] | 0;
 _GamPicShowExV(-126, 33, 7, 9, 1, $313, $314);
 $315 = HEAP8[3640 >> 0] | 0;
 $316 = $str;
 $317 = _GetKingCitys($315, $316) | 0;
 $c = $317;
 $318 = $c;
 $319 = $318 & 255;
 $320 = $str;
 _itoa($319, $320, 10) | 0;
 $321 = $str;
 $322 = HEAP32[272 >> 2] | 0;
 _GamStrShowV(-116, 33, $321, $322);
 $323 = $cicon;
 $324 = HEAP32[272 >> 2] | 0;
 _GamPicShowExV(-126, 47, 7, 9, 0, $323, $324);
 $325 = HEAP8[3640 >> 0] | 0;
 $326 = _GetPersonsCount($325) | 0;
 $c = $326;
 $327 = $c;
 $328 = $327 & 255;
 $329 = $str;
 _itoa($328, $329, 10) | 0;
 $330 = $str;
 $331 = HEAP32[272 >> 2] | 0;
 _GamStrShowV(-116, 45, $330, $331);
 $332 = HEAPU8[3641 >> 0] | HEAPU8[3641 + 1 >> 0] << 8;
 $333 = $332 & 65535;
 $334 = $str;
 _itoa($333, $334, 10) | 0;
 $335 = $astr;
 _ResLoadToMem(64, 63, $335) | 0;
 $336 = $str;
 $337 = $astr;
 _strcat($336, $337) | 0;
 $338 = $str;
 $339 = HEAP32[272 >> 2] | 0;
 _GamStrShowV(-127, 58, $338, $339);
 $340 = HEAP8[3643 >> 0] | 0;
 $341 = $340 & 255;
 $342 = $str;
 _itoa($341, $342, 10) | 0;
 $343 = $astr;
 _ResLoadToMem(64, 64, $343) | 0;
 $344 = $str;
 $345 = $astr;
 _strcat($344, $345) | 0;
 $346 = $str;
 $347 = HEAP32[272 >> 2] | 0;
 _GamStrShowV(-127, 70, $346, $347);
 $348 = $sw;
 $349 = $348 & 255;
 $350 = $sh;
 $351 = $350 & 255;
 $352 = 5227 + ($351 << 3) | 0;
 $353 = $352 + $349 | 0;
 $354 = HEAP8[$353 >> 0] | 0;
 $355 = $354 << 24 >> 24 != 0;
 if (!$355) {
  _ShowMapClear();
  $369 = $sw;
  $370 = $369 & 255;
  $371 = $sh;
  $372 = $371 & 255;
  $373 = 5227 + ($372 << 3) | 0;
  $374 = $373 + $370 | 0;
  $375 = HEAP8[$374 >> 0] | 0;
  STACKTOP = sp;
  return $375 | 0;
 }
 $356 = $sw;
 $357 = $356 & 255;
 $358 = $sh;
 $359 = $358 & 255;
 $360 = 5227 + ($359 << 3) | 0;
 $361 = $360 + $357 | 0;
 $362 = HEAP8[$361 >> 0] | 0;
 $363 = $362 & 255;
 $364 = $363 - 1 | 0;
 $365 = $364 & 255;
 $366 = $astr;
 _GetCityName($365, $366);
 $367 = $astr;
 $368 = HEAP32[272 >> 2] | 0;
 _GamStrShowV(-126, 82, $367, $368);
 _ShowMapClear();
 $369 = $sw;
 $370 = $369 & 255;
 $371 = $sh;
 $372 = $371 & 255;
 $373 = 5227 + ($372 << 3) | 0;
 $374 = $373 + $370 | 0;
 $375 = HEAP8[$374 >> 0] | 0;
 STACKTOP = sp;
 return $375 | 0;
}

function _ComputerTacticArmament($city) {
 $city = $city | 0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $armys = 0, $cqptr = 0, $fcount = 0, $fp = 0, $fpcount = 0, $i = 0, $j = 0, $order = 0, $pcount = 0, $pptr = 0, $pqptr = 0, $rnd = 0, $t = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $fp = sp + 36 | 0;
 $order = sp + 16 | 0;
 $0 = $city;
 $1 = HEAP32[384 >> 2] | 0;
 $pqptr = $1;
 $2 = HEAP32[384 >> 2] | 0;
 $3 = $2 + 200 | 0;
 $cqptr = $3;
 $4 = $0;
 $5 = $pqptr;
 $6 = _GetCityPersons($4, $5) | 0;
 $pcount = $6;
 $7 = $pcount;
 $8 = $7 << 24 >> 24 != 0;
 if (!$8) {
  STACKTOP = sp;
  return;
 }
 $9 = _rand() | 0;
 $10 = $pcount;
 $11 = $10 & 255;
 $12 = ($9 | 0) % ($11 | 0) & -1;
 $13 = $pqptr;
 $14 = $13 + $12 | 0;
 $15 = HEAP8[$14 >> 0] | 0;
 $16 = $15 & 255;
 $17 = HEAP32[332 >> 2] | 0;
 $18 = $17 + ($16 * 15 | 0) | 0;
 $pptr = $18;
 $19 = HEAP8[3643 >> 0] | 0;
 $20 = $19 & 255;
 $21 = ($20 | 0) % 3 & -1;
 $22 = ($21 | 0) != 0;
 if (!$22) {
  $23 = $pptr;
  $24 = $23 + 2 | 0;
  $25 = HEAP8[$24 >> 0] | 0;
  $26 = $25 & 255;
  $27 = $26 + 1 | 0;
  $28 = $27 & 255;
  HEAP8[$24 >> 0] = $28;
  $29 = $pptr;
  $30 = $29 + 2 | 0;
  $31 = HEAP8[$30 >> 0] | 0;
  $32 = $31 & 255;
  $33 = ($32 | 0) > 20;
  if ($33) {
   $34 = $pptr;
   $35 = $34 + 2 | 0;
   HEAP8[$35 >> 0] = 20;
  }
 }
 $i = 0;
 L8 : while (1) {
  $36 = $i;
  $37 = $36 & 255;
  $38 = $pcount;
  $39 = $38 & 255;
  $40 = ($37 | 0) < ($39 | 0);
  if (!$40) {
   label = 37;
   break;
  }
  $41 = _rand() | 0;
  $42 = ($41 | 0) % 9 & -1;
  $43 = $42 & 255;
  $rnd = $43;
  $44 = $rnd;
  $45 = $44 & 255;
  switch ($45 | 0) {
  case 0:
   {
    HEAP8[$order >> 0] = 23;
    break;
   }
  case 5:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    $46 = $i;
    $47 = $46 & 255;
    $48 = $pqptr;
    $49 = $48 + $47 | 0;
    $50 = HEAP8[$49 >> 0] | 0;
    $51 = $50 & 255;
    $52 = HEAP32[332 >> 2] | 0;
    $53 = $52 + ($51 * 15 | 0) | 0;
    $pptr = $53;
    $54 = $pptr;
    $55 = $54 + 2 | 0;
    $56 = HEAP8[$55 >> 0] | 0;
    $57 = $56 & 255;
    $armys = $57;
    $58 = $armys;
    $59 = $58 & 65535;
    $60 = $59 * 10 | 0;
    $61 = $60 & 65535;
    $armys = $61;
    $62 = $pptr;
    $63 = $62 + 3 | 0;
    $64 = HEAP8[$63 >> 0] | 0;
    $65 = $64 & 255;
    $66 = $pptr;
    $67 = $66 + 4 | 0;
    $68 = HEAP8[$67 >> 0] | 0;
    $69 = $68 & 255;
    $70 = $65 + $69 | 0;
    $71 = $armys;
    $72 = $71 & 65535;
    $73 = $72 + $70 | 0;
    $74 = $73 & 65535;
    $armys = $74;
    $75 = $armys;
    $76 = $75 & 65535;
    $77 = $76 * 10 | 0;
    $78 = $77 & 65535;
    $armys = $78;
    $79 = $armys;
    $80 = $pptr;
    $81 = $80 + 10 | 0;
    HEAP8[$81 >> 0] = $79 & 255;
    HEAP8[$81 + 1 >> 0] = $79 >> 8;
    HEAP8[$order >> 0] = 24;
    $82 = $order + 4 | 0;
    HEAP8[$82 >> 0] = 0 & 255;
    HEAP8[$82 + 1 >> 0] = 0 >> 8;
    break;
   }
  case 6:
   {
    HEAP8[$order >> 0] = 26;
    break;
   }
  case 7:
   {
    $83 = $i;
    $84 = $83 & 255;
    $85 = ($84 | 0) >= 1;
    if (!$85) {
     $86 = $0;
     $87 = $cqptr;
     $88 = _GetRoundEnemyCity($86, $87) | 0;
     $fcount = $88;
     $89 = $fcount;
     $90 = $89 << 24 >> 24 != 0;
     if ($90) {
      $91 = _rand() | 0;
      $92 = $fcount;
      $93 = $92 & 255;
      $94 = $93 << 1;
      $95 = ($91 | 0) % ($94 | 0) & -1;
      $96 = $95 & 255;
      $rnd = $96;
      $97 = $rnd;
      $98 = $97 & 255;
      $99 = $fcount;
      $100 = $99 & 255;
      $101 = ($98 | 0) >= ($100 | 0);
      if (!$101) {
       $102 = $fcount;
       $103 = $cqptr;
       $104 = _GetWeekCity($102, $103) | 0;
       $105 = $order + 3 | 0;
       HEAP8[$105 >> 0] = $104;
       $106 = $0;
       $107 = $cqptr;
       $108 = _GetCityPersons($106, $107) | 0;
       $fpcount = $108;
       $109 = $fpcount;
       $110 = $109 << 24 >> 24 != 0;
       if ($110) {
        $fcount = 0;
        $fcount = 0;
        while (1) {
         $111 = $fcount;
         $112 = $111 & 255;
         $113 = $fpcount;
         $114 = $113 & 255;
         $115 = $114 - 1 | 0;
         $116 = ($112 | 0) < ($115 | 0);
         if (!$116) {
          break;
         }
         $117 = $fcount;
         $118 = $117 & 255;
         $119 = $118 + 1 | 0;
         $120 = $119 & 255;
         $j = $120;
         while (1) {
          $121 = $j;
          $122 = $121 & 255;
          $123 = $fpcount;
          $124 = $123 & 255;
          $125 = ($122 | 0) < ($124 | 0);
          $126 = $fcount;
          if (!$125) {
           break;
          }
          $127 = $126 & 255;
          $128 = $cqptr;
          $129 = $128 + $127 | 0;
          $130 = HEAP8[$129 >> 0] | 0;
          $131 = $130 & 255;
          $132 = HEAP32[332 >> 2] | 0;
          $133 = $132 + ($131 * 15 | 0) | 0;
          $134 = $133 + 10 | 0;
          $135 = HEAPU8[$134 >> 0] | HEAPU8[$134 + 1 >> 0] << 8;
          $136 = $135 & 65535;
          $137 = $j;
          $138 = $137 & 255;
          $139 = $cqptr;
          $140 = $139 + $138 | 0;
          $141 = HEAP8[$140 >> 0] | 0;
          $142 = $141 & 255;
          $143 = HEAP32[332 >> 2] | 0;
          $144 = $143 + ($142 * 15 | 0) | 0;
          $145 = $144 + 10 | 0;
          $146 = HEAPU8[$145 >> 0] | HEAPU8[$145 + 1 >> 0] << 8;
          $147 = $146 & 65535;
          $148 = ($136 | 0) < ($147 | 0);
          if ($148) {
           $149 = $j;
           $150 = $149 & 255;
           $151 = $cqptr;
           $152 = $151 + $150 | 0;
           $153 = HEAP8[$152 >> 0] | 0;
           $t = $153;
           $154 = $fcount;
           $155 = $154 & 255;
           $156 = $cqptr;
           $157 = $156 + $155 | 0;
           $158 = HEAP8[$157 >> 0] | 0;
           $159 = $j;
           $160 = $159 & 255;
           $161 = $cqptr;
           $162 = $161 + $160 | 0;
           HEAP8[$162 >> 0] = $158;
           $163 = $t;
           $164 = $fcount;
           $165 = $164 & 255;
           $166 = $cqptr;
           $167 = $166 + $165 | 0;
           HEAP8[$167 >> 0] = $163;
          }
          $168 = $pcount;
          $169 = $168 & 255;
          $170 = $169 - 1 | 0;
          $171 = $cqptr;
          $172 = $171 + $170 | 0;
          $173 = HEAP8[$172 >> 0] | 0;
          $174 = $173 & 255;
          $175 = HEAP32[332 >> 2] | 0;
          $176 = $175 + ($174 * 15 | 0) | 0;
          $177 = $176 + 10 | 0;
          $178 = HEAPU8[$177 >> 0] | HEAPU8[$177 + 1 >> 0] << 8;
          $179 = $178 << 16 >> 16 != 0;
          if (!$179) {
           $180 = $fpcount;
           $181 = $180 & 255;
           $182 = $181 - 1 | 0;
           $183 = $182 & 255;
           $fpcount = $183;
          }
          $184 = $j;
          $185 = $184 + 1 << 24 >> 24;
          $j = $185;
         }
         $186 = $126 + 1 << 24 >> 24;
         $fcount = $186;
        }
        $187 = $cqptr;
        $188 = HEAP8[$187 >> 0] | 0;
        $189 = $188 & 255;
        $190 = HEAP32[332 >> 2] | 0;
        $191 = $190 + ($189 * 15 | 0) | 0;
        $192 = $191 + 10 | 0;
        $193 = HEAPU8[$192 >> 0] | HEAPU8[$192 + 1 >> 0] << 8;
        $194 = $193 & 65535;
        $195 = ($194 | 0) < 1e3;
        if (!$195) {
         $196 = $fpcount;
         $197 = $196 & 255;
         $198 = ($197 | 0) < 4;
         if (!$198) {
          break L8;
         }
        }
       }
      }
     }
    }
    break;
   }
  case 8:
   {
    break;
   }
  default:
   {
    $248 = $i;
    $249 = $248 & 255;
    $250 = $pqptr;
    $251 = $250 + $249 | 0;
    $252 = HEAP8[$251 >> 0] | 0;
    $253 = $order + 1 | 0;
    HEAP8[$253 >> 0] = $252;
    $254 = $0;
    $255 = $order + 2 | 0;
    HEAP8[$255 >> 0] = $254;
    $256 = $order + 11 | 0;
    HEAP8[$256 >> 0] = 0;
    $257 = _AddOrderHead($order) | 0;
    $258 = $257 << 24 >> 24 != 0;
    if ($258) {
     $259 = $0;
     $260 = $i;
     $261 = $260 & 255;
     $262 = $pqptr;
     $263 = $262 + $261 | 0;
     $264 = HEAP8[$263 >> 0] | 0;
     _DelPerson($259, $264) | 0;
    }
   }
  }
  $265 = $i;
  $266 = $265 + 1 << 24 >> 24;
  $i = $266;
 }
 if ((label | 0) == 37) {
  STACKTOP = sp;
  return;
 }
 HEAP8[$order >> 0] = 27;
 dest = $fp;
 stop = dest + 10 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $199 = $fpcount;
 $200 = $199 & 255;
 $201 = $200 - 1 | 0;
 $202 = $201 & 255;
 $fpcount = $202;
 $203 = $fpcount;
 $204 = $203 & 255;
 $205 = ($204 | 0) > 10;
 $$ = $205 ? 10 : $202;
 $fpcount = $$;
 $j = 0;
 while (1) {
  $206 = $j;
  $207 = $206 & 255;
  $208 = $fpcount;
  $209 = $208 & 255;
  $210 = ($207 | 0) < ($209 | 0);
  if (!$210) {
   break;
  }
  $211 = $j;
  $212 = $211 & 255;
  $213 = $cqptr;
  $214 = $213 + $212 | 0;
  $215 = HEAP8[$214 >> 0] | 0;
  $216 = $215 & 255;
  $217 = $216 + 1 | 0;
  $218 = $217 & 255;
  $219 = $j;
  $220 = $219 & 255;
  $221 = $fp + $220 | 0;
  HEAP8[$221 >> 0] = $218;
  $222 = $j;
  $223 = $222 + 1 << 24 >> 24;
  $j = $223;
 }
 $224 = $0;
 $225 = $order + 2 | 0;
 HEAP8[$225 >> 0] = $224;
 $226 = $0;
 $227 = $226 & 255;
 $228 = 3645 + ($227 * 31 | 0) | 0;
 $229 = $228 + 23 | 0;
 $230 = HEAPU8[$229 >> 0] | HEAPU8[$229 + 1 >> 0] << 8;
 $231 = $order + 6 | 0;
 HEAP8[$231 >> 0] = $230 & 255;
 HEAP8[$231 + 1 >> 0] = $230 >> 8;
 $232 = $order + 11 | 0;
 HEAP8[$232 >> 0] = 0;
 $233 = _AddFightOrder($order, $fp) | 0;
 $234 = $233 << 24 >> 24 != 0;
 if (!$234) {
  STACKTOP = sp;
  return;
 }
 $j = 0;
 while (1) {
  $235 = $j;
  $236 = $235 & 255;
  $237 = $fpcount;
  $238 = $237 & 255;
  $239 = ($236 | 0) < ($238 | 0);
  if (!$239) {
   break;
  }
  $240 = $0;
  $241 = $j;
  $242 = $241 & 255;
  $243 = $cqptr;
  $244 = $243 + $242 | 0;
  $245 = HEAP8[$244 >> 0] | 0;
  _DelPerson($240, $245) | 0;
  $246 = $j;
  $247 = $246 + 1 << 24 >> 24;
  $j = $247;
 }
 STACKTOP = sp;
 return;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0, $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[2560 >> 2] | 0;
 $5 = $1 & 3;
 $notlhs = $p >>> 0 >= $4 >>> 0;
 $notrhs = ($5 | 0) != 1;
 $or$cond$not = $notrhs & $notlhs;
 $6 = $p >>> 0 < $3 >>> 0;
 $or$cond30 = $or$cond$not & $6;
 if (!$or$cond30) {
  _abort();
 }
 $$sum2728 = $2 | 4;
 $7 = $p + $$sum2728 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 $9 = $8 & 1;
 $10 = ($9 | 0) == 0;
 if ($10) {
  _abort();
 }
 $11 = ($5 | 0) == 0;
 if ($11) {
  $12 = $nb >>> 0 < 256;
  if ($12) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $13 = $nb + 4 | 0;
  $14 = $2 >>> 0 < $13 >>> 0;
  if (!$14) {
   $15 = $2 - $nb | 0;
   $16 = HEAP32[3024 >> 2] | 0;
   $17 = $16 << 1;
   $18 = $15 >>> 0 > $17 >>> 0;
   if (!$18) {
    $newp$0 = $p;
    return $newp$0 | 0;
   }
  }
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $19 = $2 >>> 0 < $nb >>> 0;
 if (!$19) {
  $20 = $2 - $nb | 0;
  $21 = $20 >>> 0 > 15;
  if (!$21) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  $22 = $p + $nb | 0;
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0 >> 2] = $25;
  $$sum23 = $nb + 4 | 0;
  $26 = $p + $$sum23 | 0;
  $27 = $20 | 3;
  HEAP32[$26 >> 2] = $27;
  $28 = HEAP32[$7 >> 2] | 0;
  $29 = $28 | 1;
  HEAP32[$7 >> 2] = $29;
  _dispose_chunk($22, $20);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $30 = HEAP32[2568 >> 2] | 0;
 $31 = ($3 | 0) == ($30 | 0);
 if ($31) {
  $32 = HEAP32[2556 >> 2] | 0;
  $33 = $32 + $2 | 0;
  $34 = $33 >>> 0 > $nb >>> 0;
  if (!$34) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $35 = $33 - $nb | 0;
  $36 = $p + $nb | 0;
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0 >> 2] = $39;
  $$sum22 = $nb + 4 | 0;
  $40 = $p + $$sum22 | 0;
  $41 = $35 | 1;
  HEAP32[$40 >> 2] = $41;
  HEAP32[2568 >> 2] = $36;
  HEAP32[2556 >> 2] = $35;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $42 = HEAP32[2564 >> 2] | 0;
 $43 = ($3 | 0) == ($42 | 0);
 if ($43) {
  $44 = HEAP32[2552 >> 2] | 0;
  $45 = $44 + $2 | 0;
  $46 = $45 >>> 0 < $nb >>> 0;
  if ($46) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $47 = $45 - $nb | 0;
  $48 = $47 >>> 0 > 15;
  if ($48) {
   $49 = $p + $nb | 0;
   $50 = $p + $45 | 0;
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0 >> 2] = $53;
   $$sum19 = $nb + 4 | 0;
   $54 = $p + $$sum19 | 0;
   $55 = $47 | 1;
   HEAP32[$54 >> 2] = $55;
   HEAP32[$50 >> 2] = $47;
   $$sum20 = $45 + 4 | 0;
   $56 = $p + $$sum20 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   $58 = $57 & -2;
   HEAP32[$56 >> 2] = $58;
   $storemerge = $49;
   $storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0 >> 2] = $61;
   $$sum17 = $45 + 4 | 0;
   $62 = $p + $$sum17 | 0;
   $63 = HEAP32[$62 >> 2] | 0;
   $64 = $63 | 1;
   HEAP32[$62 >> 2] = $64;
   $storemerge = 0;
   $storemerge21 = 0;
  }
  HEAP32[2552 >> 2] = $storemerge21;
  HEAP32[2564 >> 2] = $storemerge;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 $65 = $8 & 2;
 $66 = ($65 | 0) == 0;
 if (!$66) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $67 = $8 & -8;
 $68 = $67 + $2 | 0;
 $69 = $68 >>> 0 < $nb >>> 0;
 if ($69) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $70 = $68 - $nb | 0;
 $71 = $8 >>> 3;
 $72 = $8 >>> 0 < 256;
 do {
  if ($72) {
   $$sum15 = $2 + 8 | 0;
   $73 = $p + $$sum15 | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   $$sum16 = $2 + 12 | 0;
   $75 = $p + $$sum16 | 0;
   $76 = HEAP32[$75 >> 2] | 0;
   $77 = $71 << 1;
   $78 = 2584 + ($77 << 2) | 0;
   $79 = ($74 | 0) == ($78 | 0);
   if (!$79) {
    $80 = $74 >>> 0 < $4 >>> 0;
    if ($80) {
     _abort();
    }
    $81 = $74 + 12 | 0;
    $82 = HEAP32[$81 >> 2] | 0;
    $83 = ($82 | 0) == ($3 | 0);
    if (!$83) {
     _abort();
    }
   }
   $84 = ($76 | 0) == ($74 | 0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[2544 >> 2] | 0;
    $88 = $87 & $86;
    HEAP32[2544 >> 2] = $88;
    break;
   }
   $89 = ($76 | 0) == ($78 | 0);
   if ($89) {
    $$pre = $76 + 8 | 0;
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = $76 >>> 0 < $4 >>> 0;
    if ($90) {
     _abort();
    }
    $91 = $76 + 8 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    $93 = ($92 | 0) == ($3 | 0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
    }
   }
   $94 = $74 + 12 | 0;
   HEAP32[$94 >> 2] = $76;
   HEAP32[$$pre$phiZ2D >> 2] = $74;
  } else {
   $$sum = $2 + 24 | 0;
   $95 = $p + $$sum | 0;
   $96 = HEAP32[$95 >> 2] | 0;
   $$sum2 = $2 + 12 | 0;
   $97 = $p + $$sum2 | 0;
   $98 = HEAP32[$97 >> 2] | 0;
   $99 = ($98 | 0) == ($3 | 0);
   do {
    if ($99) {
     $$sum4 = $2 + 20 | 0;
     $109 = $p + $$sum4 | 0;
     $110 = HEAP32[$109 >> 2] | 0;
     $111 = ($110 | 0) == (0 | 0);
     if ($111) {
      $$sum3 = $2 + 16 | 0;
      $112 = $p + $$sum3 | 0;
      $113 = HEAP32[$112 >> 2] | 0;
      $114 = ($113 | 0) == (0 | 0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;
       $RP$0 = $112;
      }
     } else {
      $R$0 = $110;
      $RP$0 = $109;
     }
     while (1) {
      $115 = $R$0 + 20 | 0;
      $116 = HEAP32[$115 >> 2] | 0;
      $117 = ($116 | 0) == (0 | 0);
      if (!$117) {
       $R$0 = $116;
       $RP$0 = $115;
       continue;
      }
      $118 = $R$0 + 16 | 0;
      $119 = HEAP32[$118 >> 2] | 0;
      $120 = ($119 | 0) == (0 | 0);
      if ($120) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;
       $RP$0 = $118;
      }
     }
     $121 = $RP$0$lcssa >>> 0 < $4 >>> 0;
     if ($121) {
      _abort();
     } else {
      HEAP32[$RP$0$lcssa >> 2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = $2 + 8 | 0;
     $100 = $p + $$sum14 | 0;
     $101 = HEAP32[$100 >> 2] | 0;
     $102 = $101 >>> 0 < $4 >>> 0;
     if ($102) {
      _abort();
     }
     $103 = $101 + 12 | 0;
     $104 = HEAP32[$103 >> 2] | 0;
     $105 = ($104 | 0) == ($3 | 0);
     if (!$105) {
      _abort();
     }
     $106 = $98 + 8 | 0;
     $107 = HEAP32[$106 >> 2] | 0;
     $108 = ($107 | 0) == ($3 | 0);
     if ($108) {
      HEAP32[$103 >> 2] = $98;
      HEAP32[$106 >> 2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $122 = ($96 | 0) == (0 | 0);
   if (!$122) {
    $$sum11 = $2 + 28 | 0;
    $123 = $p + $$sum11 | 0;
    $124 = HEAP32[$123 >> 2] | 0;
    $125 = 2848 + ($124 << 2) | 0;
    $126 = HEAP32[$125 >> 2] | 0;
    $127 = ($3 | 0) == ($126 | 0);
    if ($127) {
     HEAP32[$125 >> 2] = $R$1;
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[2548 >> 2] | 0;
      $131 = $130 & $129;
      HEAP32[2548 >> 2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[2560 >> 2] | 0;
     $133 = $96 >>> 0 < $132 >>> 0;
     if ($133) {
      _abort();
     }
     $134 = $96 + 16 | 0;
     $135 = HEAP32[$134 >> 2] | 0;
     $136 = ($135 | 0) == ($3 | 0);
     if ($136) {
      HEAP32[$134 >> 2] = $R$1;
     } else {
      $137 = $96 + 20 | 0;
      HEAP32[$137 >> 2] = $R$1;
     }
     $138 = ($R$1 | 0) == (0 | 0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[2560 >> 2] | 0;
    $140 = $R$1 >>> 0 < $139 >>> 0;
    if ($140) {
     _abort();
    }
    $141 = $R$1 + 24 | 0;
    HEAP32[$141 >> 2] = $96;
    $$sum12 = $2 + 16 | 0;
    $142 = $p + $$sum12 | 0;
    $143 = HEAP32[$142 >> 2] | 0;
    $144 = ($143 | 0) == (0 | 0);
    do {
     if (!$144) {
      $145 = $143 >>> 0 < $139 >>> 0;
      if ($145) {
       _abort();
      } else {
       $146 = $R$1 + 16 | 0;
       HEAP32[$146 >> 2] = $143;
       $147 = $143 + 24 | 0;
       HEAP32[$147 >> 2] = $R$1;
       break;
      }
     }
    } while (0);
    $$sum13 = $2 + 20 | 0;
    $148 = $p + $$sum13 | 0;
    $149 = HEAP32[$148 >> 2] | 0;
    $150 = ($149 | 0) == (0 | 0);
    if (!$150) {
     $151 = HEAP32[2560 >> 2] | 0;
     $152 = $149 >>> 0 < $151 >>> 0;
     if ($152) {
      _abort();
     } else {
      $153 = $R$1 + 20 | 0;
      HEAP32[$153 >> 2] = $149;
      $154 = $149 + 24 | 0;
      HEAP32[$154 >> 2] = $R$1;
      break;
     }
    }
   }
  }
 } while (0);
 $155 = $70 >>> 0 < 16;
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0 >> 2] = $158;
  $$sum910 = $68 | 4;
  $159 = $p + $$sum910 | 0;
  $160 = HEAP32[$159 >> 2] | 0;
  $161 = $160 | 1;
  HEAP32[$159 >> 2] = $161;
  $newp$0 = $p;
  return $newp$0 | 0;
 } else {
  $162 = $p + $nb | 0;
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0 >> 2] = $165;
  $$sum5 = $nb + 4 | 0;
  $166 = $p + $$sum5 | 0;
  $167 = $70 | 3;
  HEAP32[$166 >> 2] = $167;
  $$sum78 = $68 | 4;
  $168 = $p + $$sum78 | 0;
  $169 = HEAP32[$168 >> 2] | 0;
  $170 = $169 | 1;
  HEAP32[$168 >> 2] = $170;
  _dispose_chunk($162, $70);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 return 0 | 0;
}

function _EventStateDeal() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Commerce = 0, $Farming = 0, $Food = 0, $Money = 0, $MothballArms = 0, $PeopleDevotion = 0, $Population = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $i = 0;
 while (1) {
  $0 = $i;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 38;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 & 255;
  $5 = 3645 + ($4 * 31 | 0) | 0;
  $6 = $5 + 11 | 0;
  $PeopleDevotion = $6;
  $7 = $i;
  $8 = $7 & 255;
  $9 = 3645 + ($8 * 31 | 0) | 0;
  $10 = $9 + 5 | 0;
  $Farming = $10;
  $11 = $i;
  $12 = $11 & 255;
  $13 = 3645 + ($12 * 31 | 0) | 0;
  $14 = $13 + 9 | 0;
  $Commerce = $14;
  $15 = $i;
  $16 = $15 & 255;
  $17 = 3645 + ($16 * 31 | 0) | 0;
  $18 = $17 + 25 | 0;
  $MothballArms = $18;
  $19 = $i;
  $20 = $19 & 255;
  $21 = 3645 + ($20 * 31 | 0) | 0;
  $22 = $21 + 23 | 0;
  $Food = $22;
  $23 = $i;
  $24 = $23 & 255;
  $25 = 3645 + ($24 * 31 | 0) | 0;
  $26 = $25 + 21 | 0;
  $Money = $26;
  $27 = $i;
  $28 = $27 & 255;
  $29 = 3645 + ($28 * 31 | 0) | 0;
  $30 = $29 + 17 | 0;
  $Population = $30;
  $31 = $i;
  $32 = $31 & 255;
  $33 = 3645 + ($32 * 31 | 0) | 0;
  $34 = HEAP8[$33 >> 0] | 0;
  $35 = $34 & 255;
  switch ($35 | 0) {
  case 0:
   {
    break;
   }
  case 1:
   {
    $36 = $Commerce;
    $37 = HEAPU8[$36 >> 0] | HEAPU8[$36 + 1 >> 0] << 8;
    $38 = $37 & 65535;
    $39 = $Commerce;
    $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8;
    $41 = $40 & 65535;
    $42 = ($41 | 0) / 20 & -1;
    $43 = $38 - $42 | 0;
    $44 = $43 & 65535;
    $45 = $Commerce;
    HEAP8[$45 >> 0] = $44 & 255;
    HEAP8[$45 + 1 >> 0] = $44 >> 8;
    $46 = $PeopleDevotion;
    $47 = HEAP8[$46 >> 0] | 0;
    $48 = $47 & 255;
    $49 = $PeopleDevotion;
    $50 = HEAP8[$49 >> 0] | 0;
    $51 = $50 & 255;
    $52 = ($51 | 0) / 20 & -1;
    $53 = $48 - $52 | 0;
    $54 = $53 & 255;
    $55 = $PeopleDevotion;
    HEAP8[$55 >> 0] = $54;
    $56 = $MothballArms;
    $57 = HEAPU8[$56 >> 0] | HEAPU8[$56 + 1 >> 0] << 8;
    $58 = $57 & 65535;
    $59 = ($58 | 0) / 2 & -1;
    $60 = $59 & 65535;
    HEAP8[$56 >> 0] = $60 & 255;
    HEAP8[$56 + 1 >> 0] = $60 >> 8;
    $61 = $Population;
    $62 = HEAPU8[$61 >> 0] | HEAPU8[$61 + 1 >> 0] << 8 | HEAPU8[$61 + 2 >> 0] << 16 | HEAPU8[$61 + 3 >> 0] << 24;
    $63 = $Population;
    $64 = HEAPU8[$63 >> 0] | HEAPU8[$63 + 1 >> 0] << 8 | HEAPU8[$63 + 2 >> 0] << 16 | HEAPU8[$63 + 3 >> 0] << 24;
    $65 = ($64 >>> 0) / 4 & -1;
    $66 = $62 - $65 | 0;
    $67 = $Population;
    HEAP8[$67 >> 0] = $66 & 255;
    HEAP8[$67 + 1 >> 0] = $66 >> 8 & 255;
    HEAP8[$67 + 2 >> 0] = $66 >> 16 & 255;
    HEAP8[$67 + 3 >> 0] = $66 >> 24;
    label = 8;
    break;
   }
  case 2:
   {
    $68 = $Food;
    $69 = HEAPU8[$68 >> 0] | HEAPU8[$68 + 1 >> 0] << 8;
    $70 = $69 & 65535;
    $71 = $Food;
    $72 = HEAPU8[$71 >> 0] | HEAPU8[$71 + 1 >> 0] << 8;
    $73 = $72 & 65535;
    $74 = ($73 | 0) / 20 & -1;
    $75 = $70 - $74 | 0;
    $76 = $75 & 65535;
    $77 = $Food;
    HEAP8[$77 >> 0] = $76 & 255;
    HEAP8[$77 + 1 >> 0] = $76 >> 8;
    $78 = $MothballArms;
    $79 = HEAPU8[$78 >> 0] | HEAPU8[$78 + 1 >> 0] << 8;
    $80 = $79 & 65535;
    $81 = $MothballArms;
    $82 = HEAPU8[$81 >> 0] | HEAPU8[$81 + 1 >> 0] << 8;
    $83 = $82 & 65535;
    $84 = ($83 | 0) / 4 & -1;
    $85 = $80 - $84 | 0;
    $86 = $85 & 65535;
    $87 = $MothballArms;
    HEAP8[$87 >> 0] = $86 & 255;
    HEAP8[$87 + 1 >> 0] = $86 >> 8;
    $88 = $Population;
    $89 = HEAPU8[$88 >> 0] | HEAPU8[$88 + 1 >> 0] << 8 | HEAPU8[$88 + 2 >> 0] << 16 | HEAPU8[$88 + 3 >> 0] << 24;
    $90 = $Population;
    $91 = HEAPU8[$90 >> 0] | HEAPU8[$90 + 1 >> 0] << 8 | HEAPU8[$90 + 2 >> 0] << 16 | HEAPU8[$90 + 3 >> 0] << 24;
    $92 = ($91 >>> 0) / 4 & -1;
    $93 = $89 - $92 | 0;
    $94 = $Population;
    HEAP8[$94 >> 0] = $93 & 255;
    HEAP8[$94 + 1 >> 0] = $93 >> 8 & 255;
    HEAP8[$94 + 2 >> 0] = $93 >> 16 & 255;
    HEAP8[$94 + 3 >> 0] = $93 >> 24;
    label = 8;
    break;
   }
  case 3:
   {
    $95 = $Food;
    $96 = HEAPU8[$95 >> 0] | HEAPU8[$95 + 1 >> 0] << 8;
    $97 = $96 & 65535;
    $98 = $Food;
    $99 = HEAPU8[$98 >> 0] | HEAPU8[$98 + 1 >> 0] << 8;
    $100 = $99 & 65535;
    $101 = ($100 | 0) / 20 & -1;
    $102 = $97 - $101 | 0;
    $103 = $102 & 65535;
    $104 = $Food;
    HEAP8[$104 >> 0] = $103 & 255;
    HEAP8[$104 + 1 >> 0] = $103 >> 8;
    $105 = $Commerce;
    $106 = HEAPU8[$105 >> 0] | HEAPU8[$105 + 1 >> 0] << 8;
    $107 = $106 & 65535;
    $108 = $Commerce;
    $109 = HEAPU8[$108 >> 0] | HEAPU8[$108 + 1 >> 0] << 8;
    $110 = $109 & 65535;
    $111 = ($110 | 0) / 10 & -1;
    $112 = $107 - $111 | 0;
    $113 = $112 & 65535;
    $114 = $Commerce;
    HEAP8[$114 >> 0] = $113 & 255;
    HEAP8[$114 + 1 >> 0] = $113 >> 8;
    $115 = $Money;
    $116 = HEAPU8[$115 >> 0] | HEAPU8[$115 + 1 >> 0] << 8;
    $117 = $116 & 65535;
    $118 = $Money;
    $119 = HEAPU8[$118 >> 0] | HEAPU8[$118 + 1 >> 0] << 8;
    $120 = $119 & 65535;
    $121 = ($120 | 0) / 10 & -1;
    $122 = $117 - $121 | 0;
    $123 = $122 & 65535;
    $124 = $Money;
    HEAP8[$124 >> 0] = $123 & 255;
    HEAP8[$124 + 1 >> 0] = $123 >> 8;
    $125 = $MothballArms;
    $126 = HEAPU8[$125 >> 0] | HEAPU8[$125 + 1 >> 0] << 8;
    $127 = $126 & 65535;
    $128 = $MothballArms;
    $129 = HEAPU8[$128 >> 0] | HEAPU8[$128 + 1 >> 0] << 8;
    $130 = $129 & 65535;
    $131 = ($130 | 0) / 4 & -1;
    $132 = $127 - $131 | 0;
    $133 = $132 & 65535;
    $134 = $MothballArms;
    HEAP8[$134 >> 0] = $133 & 255;
    HEAP8[$134 + 1 >> 0] = $133 >> 8;
    $135 = $Population;
    $136 = HEAPU8[$135 >> 0] | HEAPU8[$135 + 1 >> 0] << 8 | HEAPU8[$135 + 2 >> 0] << 16 | HEAPU8[$135 + 3 >> 0] << 24;
    $137 = $Population;
    $138 = HEAPU8[$137 >> 0] | HEAPU8[$137 + 1 >> 0] << 8 | HEAPU8[$137 + 2 >> 0] << 16 | HEAPU8[$137 + 3 >> 0] << 24;
    $139 = ($138 >>> 0) / 4 & -1;
    $140 = $136 - $139 | 0;
    $141 = $Population;
    HEAP8[$141 >> 0] = $140 & 255;
    HEAP8[$141 + 1 >> 0] = $140 >> 8 & 255;
    HEAP8[$141 + 2 >> 0] = $140 >> 16 & 255;
    HEAP8[$141 + 3 >> 0] = $140 >> 24;
    label = 8;
    break;
   }
  case 4:
   {
    $142 = $Food;
    $143 = HEAPU8[$142 >> 0] | HEAPU8[$142 + 1 >> 0] << 8;
    $144 = $143 & 65535;
    $145 = $Food;
    $146 = HEAPU8[$145 >> 0] | HEAPU8[$145 + 1 >> 0] << 8;
    $147 = $146 & 65535;
    $148 = ($147 | 0) / 20 & -1;
    $149 = $144 - $148 | 0;
    $150 = $149 & 65535;
    $151 = $Food;
    HEAP8[$151 >> 0] = $150 & 255;
    HEAP8[$151 + 1 >> 0] = $150 >> 8;
    $152 = $Commerce;
    $153 = HEAPU8[$152 >> 0] | HEAPU8[$152 + 1 >> 0] << 8;
    $154 = $153 & 65535;
    $155 = $Commerce;
    $156 = HEAPU8[$155 >> 0] | HEAPU8[$155 + 1 >> 0] << 8;
    $157 = $156 & 65535;
    $158 = ($157 | 0) / 20 & -1;
    $159 = $154 - $158 | 0;
    $160 = $159 & 65535;
    $161 = $Commerce;
    HEAP8[$161 >> 0] = $160 & 255;
    HEAP8[$161 + 1 >> 0] = $160 >> 8;
    $162 = $Money;
    $163 = HEAPU8[$162 >> 0] | HEAPU8[$162 + 1 >> 0] << 8;
    $164 = $163 & 65535;
    $165 = $Money;
    $166 = HEAPU8[$165 >> 0] | HEAPU8[$165 + 1 >> 0] << 8;
    $167 = $166 & 65535;
    $168 = ($167 | 0) / 20 & -1;
    $169 = $164 - $168 | 0;
    $170 = $169 & 65535;
    $171 = $Money;
    HEAP8[$171 >> 0] = $170 & 255;
    HEAP8[$171 + 1 >> 0] = $170 >> 8;
    $172 = $PeopleDevotion;
    $173 = HEAP8[$172 >> 0] | 0;
    $174 = $173 & 255;
    $175 = $PeopleDevotion;
    $176 = HEAP8[$175 >> 0] | 0;
    $177 = $176 & 255;
    $178 = ($177 | 0) / 10 & -1;
    $179 = $174 - $178 | 0;
    $180 = $179 & 255;
    $181 = $PeopleDevotion;
    HEAP8[$181 >> 0] = $180;
    $182 = $MothballArms;
    $183 = HEAPU8[$182 >> 0] | HEAPU8[$182 + 1 >> 0] << 8;
    $184 = $183 & 65535;
    $185 = ($184 | 0) / 2 & -1;
    $186 = $185 & 65535;
    HEAP8[$182 >> 0] = $186 & 255;
    HEAP8[$182 + 1 >> 0] = $186 >> 8;
    label = 8;
    break;
   }
  default:
   {
    label = 8;
   }
  }
  if ((label | 0) == 8) {
   label = 0;
   $187 = $Farming;
   $188 = HEAPU8[$187 >> 0] | HEAPU8[$187 + 1 >> 0] << 8;
   $189 = $188 & 65535;
   $190 = $Farming;
   $191 = HEAPU8[$190 >> 0] | HEAPU8[$190 + 1 >> 0] << 8;
   $192 = $191 & 65535;
   $193 = ($192 | 0) / 20 & -1;
   $194 = $189 - $193 | 0;
   $195 = $194 & 65535;
   $196 = $Farming;
   HEAP8[$196 >> 0] = $195 & 255;
   HEAP8[$196 + 1 >> 0] = $195 >> 8;
  }
  $197 = $i;
  $198 = $197 + 1 << 24 >> 24;
  $i = $198;
 }
 STACKTOP = sp;
 return 1;
}

function _pop_arg($arg, $type, $ap) {
 $arg = $arg | 0;
 $type = $type | 0;
 $ap = $ap | 0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0, $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $type >>> 0 > 20;
 L1 : do {
  if (!$0) {
   do {
    switch ($type | 0) {
    case 9:
     {
      $arglist_current = HEAP32[$ap >> 2] | 0;
      $1 = $arglist_current;
      $2 = 0 + 4 | 0;
      $expanded28 = $2;
      $expanded = $expanded28 - 1 | 0;
      $3 = $1 + $expanded | 0;
      $4 = 0 + 4 | 0;
      $expanded32 = $4;
      $expanded31 = $expanded32 - 1 | 0;
      $expanded30 = $expanded31 ^ -1;
      $5 = $3 & $expanded30;
      $6 = $5;
      $7 = HEAP32[$6 >> 2] | 0;
      $arglist_next = $6 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next;
      HEAP32[$arg >> 2] = $7;
      break L1;
      break;
     }
    case 10:
     {
      $arglist_current2 = HEAP32[$ap >> 2] | 0;
      $8 = $arglist_current2;
      $9 = 0 + 4 | 0;
      $expanded35 = $9;
      $expanded34 = $expanded35 - 1 | 0;
      $10 = $8 + $expanded34 | 0;
      $11 = 0 + 4 | 0;
      $expanded39 = $11;
      $expanded38 = $expanded39 - 1 | 0;
      $expanded37 = $expanded38 ^ -1;
      $12 = $10 & $expanded37;
      $13 = $12;
      $14 = HEAP32[$13 >> 2] | 0;
      $arglist_next3 = $13 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next3;
      $15 = ($14 | 0) < 0;
      $16 = $15 << 31 >> 31;
      $17 = $arg;
      $18 = $17;
      HEAP32[$18 >> 2] = $14;
      $19 = $17 + 4 | 0;
      $20 = $19;
      HEAP32[$20 >> 2] = $16;
      break L1;
      break;
     }
    case 11:
     {
      $arglist_current5 = HEAP32[$ap >> 2] | 0;
      $21 = $arglist_current5;
      $22 = 0 + 4 | 0;
      $expanded42 = $22;
      $expanded41 = $expanded42 - 1 | 0;
      $23 = $21 + $expanded41 | 0;
      $24 = 0 + 4 | 0;
      $expanded46 = $24;
      $expanded45 = $expanded46 - 1 | 0;
      $expanded44 = $expanded45 ^ -1;
      $25 = $23 & $expanded44;
      $26 = $25;
      $27 = HEAP32[$26 >> 2] | 0;
      $arglist_next6 = $26 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next6;
      $28 = $arg;
      $29 = $28;
      HEAP32[$29 >> 2] = $27;
      $30 = $28 + 4 | 0;
      $31 = $30;
      HEAP32[$31 >> 2] = 0;
      break L1;
      break;
     }
    case 12:
     {
      $arglist_current8 = HEAP32[$ap >> 2] | 0;
      $32 = $arglist_current8;
      $33 = 0 + 8 | 0;
      $expanded49 = $33;
      $expanded48 = $expanded49 - 1 | 0;
      $34 = $32 + $expanded48 | 0;
      $35 = 0 + 8 | 0;
      $expanded53 = $35;
      $expanded52 = $expanded53 - 1 | 0;
      $expanded51 = $expanded52 ^ -1;
      $36 = $34 & $expanded51;
      $37 = $36;
      $38 = $37;
      $39 = $38;
      $40 = HEAP32[$39 >> 2] | 0;
      $41 = $38 + 4 | 0;
      $42 = $41;
      $43 = HEAP32[$42 >> 2] | 0;
      $arglist_next9 = $37 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next9;
      $44 = $arg;
      $45 = $44;
      HEAP32[$45 >> 2] = $40;
      $46 = $44 + 4 | 0;
      $47 = $46;
      HEAP32[$47 >> 2] = $43;
      break L1;
      break;
     }
    case 13:
     {
      $arglist_current11 = HEAP32[$ap >> 2] | 0;
      $48 = $arglist_current11;
      $49 = 0 + 4 | 0;
      $expanded56 = $49;
      $expanded55 = $expanded56 - 1 | 0;
      $50 = $48 + $expanded55 | 0;
      $51 = 0 + 4 | 0;
      $expanded60 = $51;
      $expanded59 = $expanded60 - 1 | 0;
      $expanded58 = $expanded59 ^ -1;
      $52 = $50 & $expanded58;
      $53 = $52;
      $54 = HEAP32[$53 >> 2] | 0;
      $arglist_next12 = $53 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next12;
      $55 = $54 & 65535;
      $56 = $55 << 16 >> 16;
      $57 = ($56 | 0) < 0;
      $58 = $57 << 31 >> 31;
      $59 = $arg;
      $60 = $59;
      HEAP32[$60 >> 2] = $56;
      $61 = $59 + 4 | 0;
      $62 = $61;
      HEAP32[$62 >> 2] = $58;
      break L1;
      break;
     }
    case 14:
     {
      $arglist_current14 = HEAP32[$ap >> 2] | 0;
      $63 = $arglist_current14;
      $64 = 0 + 4 | 0;
      $expanded63 = $64;
      $expanded62 = $expanded63 - 1 | 0;
      $65 = $63 + $expanded62 | 0;
      $66 = 0 + 4 | 0;
      $expanded67 = $66;
      $expanded66 = $expanded67 - 1 | 0;
      $expanded65 = $expanded66 ^ -1;
      $67 = $65 & $expanded65;
      $68 = $67;
      $69 = HEAP32[$68 >> 2] | 0;
      $arglist_next15 = $68 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next15;
      $$mask1 = $69 & 65535;
      $70 = $arg;
      $71 = $70;
      HEAP32[$71 >> 2] = $$mask1;
      $72 = $70 + 4 | 0;
      $73 = $72;
      HEAP32[$73 >> 2] = 0;
      break L1;
      break;
     }
    case 15:
     {
      $arglist_current17 = HEAP32[$ap >> 2] | 0;
      $74 = $arglist_current17;
      $75 = 0 + 4 | 0;
      $expanded70 = $75;
      $expanded69 = $expanded70 - 1 | 0;
      $76 = $74 + $expanded69 | 0;
      $77 = 0 + 4 | 0;
      $expanded74 = $77;
      $expanded73 = $expanded74 - 1 | 0;
      $expanded72 = $expanded73 ^ -1;
      $78 = $76 & $expanded72;
      $79 = $78;
      $80 = HEAP32[$79 >> 2] | 0;
      $arglist_next18 = $79 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next18;
      $81 = $80 & 255;
      $82 = $81 << 24 >> 24;
      $83 = ($82 | 0) < 0;
      $84 = $83 << 31 >> 31;
      $85 = $arg;
      $86 = $85;
      HEAP32[$86 >> 2] = $82;
      $87 = $85 + 4 | 0;
      $88 = $87;
      HEAP32[$88 >> 2] = $84;
      break L1;
      break;
     }
    case 16:
     {
      $arglist_current20 = HEAP32[$ap >> 2] | 0;
      $89 = $arglist_current20;
      $90 = 0 + 4 | 0;
      $expanded77 = $90;
      $expanded76 = $expanded77 - 1 | 0;
      $91 = $89 + $expanded76 | 0;
      $92 = 0 + 4 | 0;
      $expanded81 = $92;
      $expanded80 = $expanded81 - 1 | 0;
      $expanded79 = $expanded80 ^ -1;
      $93 = $91 & $expanded79;
      $94 = $93;
      $95 = HEAP32[$94 >> 2] | 0;
      $arglist_next21 = $94 + 4 | 0;
      HEAP32[$ap >> 2] = $arglist_next21;
      $$mask = $95 & 255;
      $96 = $arg;
      $97 = $96;
      HEAP32[$97 >> 2] = $$mask;
      $98 = $96 + 4 | 0;
      $99 = $98;
      HEAP32[$99 >> 2] = 0;
      break L1;
      break;
     }
    case 17:
     {
      $arglist_current23 = HEAP32[$ap >> 2] | 0;
      $100 = $arglist_current23;
      $101 = 0 + 8 | 0;
      $expanded84 = $101;
      $expanded83 = $expanded84 - 1 | 0;
      $102 = $100 + $expanded83 | 0;
      $103 = 0 + 8 | 0;
      $expanded88 = $103;
      $expanded87 = $expanded88 - 1 | 0;
      $expanded86 = $expanded87 ^ -1;
      $104 = $102 & $expanded86;
      $105 = $104;
      $106 = +HEAPF64[$105 >> 3];
      $arglist_next24 = $105 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next24;
      HEAPF64[$arg >> 3] = $106;
      break L1;
      break;
     }
    case 18:
     {
      $arglist_current26 = HEAP32[$ap >> 2] | 0;
      $107 = $arglist_current26;
      $108 = 0 + 8 | 0;
      $expanded91 = $108;
      $expanded90 = $expanded91 - 1 | 0;
      $109 = $107 + $expanded90 | 0;
      $110 = 0 + 8 | 0;
      $expanded95 = $110;
      $expanded94 = $expanded95 - 1 | 0;
      $expanded93 = $expanded94 ^ -1;
      $111 = $109 & $expanded93;
      $112 = $111;
      $113 = +HEAPF64[$112 >> 3];
      $arglist_next27 = $112 + 8 | 0;
      HEAP32[$ap >> 2] = $arglist_next27;
      HEAPF64[$arg >> 3] = $113;
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
     HEAP32[$rem + 4 >> 2] = 0;
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0;
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     HEAP32[$rem >> 2] = 0 | $a$0 & -1;
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = 0 | $a$0 & -1;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    HEAP32[$rem >> 2] = 0 | $a$0 & -1;
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
    HEAP32[$rem + 4 >> 2] = 0;
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = 0 | $a$0 & -1;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
 }
 $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 $13 = ($11 | 0) == 0;
 $14 = ($12 | 0) == 0;
 $15 = $13 & $14;
 L1 : do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = $16 >>> 0 > 2146435072;
   $18 = $2 >>> 0 > 0;
   $19 = ($16 | 0) == 2146435072;
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6 | 0) == 2047;
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
    $26 = tempRet0;
    $27 = $26 >>> 0 > $12 >>> 0;
    $28 = $25 >>> 0 > $11 >>> 0;
    $29 = ($26 | 0) == ($12 | 0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!$31) {
     $32 = ($25 | 0) == ($11 | 0);
     $33 = ($26 | 0) == ($12 | 0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return +$$x;
    }
    $36 = ($6 | 0) == 0;
    if ($36) {
     $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
     $38 = tempRet0;
     $39 = ($38 | 0) > -1;
     $40 = $37 >>> 0 > 4294967295;
     $41 = ($38 | 0) == -1;
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;
      $46 = $38;
      $ex$026 = 0;
      while (1) {
       $44 = $ex$026 + -1 | 0;
       $47 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0;
       $48 = tempRet0;
       $49 = ($48 | 0) > -1;
       $50 = $47 >>> 0 > 4294967295;
       $51 = ($48 | 0) == -1;
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;
        $46 = $48;
        $ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = 1 - $ex$0$lcssa | 0;
     $55 = _bitshift64Shl($0 | 0, $1 | 0, $54 | 0) | 0;
     $56 = tempRet0;
     $83 = $55;
     $84 = $56;
     $ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;
     $84 = $58;
     $ex$1 = $6;
    }
    $59 = ($9 | 0) == 0;
    if ($59) {
     $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
     $61 = tempRet0;
     $62 = ($61 | 0) > -1;
     $63 = $60 >>> 0 > 4294967295;
     $64 = ($61 | 0) == -1;
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;
      $69 = $61;
      $ey$020 = 0;
      while (1) {
       $67 = $ey$020 + -1 | 0;
       $70 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0;
       $71 = tempRet0;
       $72 = ($71 | 0) > -1;
       $73 = $70 >>> 0 > 4294967295;
       $74 = ($71 | 0) == -1;
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;
        $69 = $71;
        $ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = 1 - $ey$0$lcssa | 0;
     $78 = _bitshift64Shl($2 | 0, $3 | 0, $77 | 0) | 0;
     $79 = tempRet0;
     $85 = $78;
     $86 = $79;
     $ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;
     $86 = $81;
     $ey$1$ph = $9;
    }
    $82 = ($ex$1 | 0) > ($ey$1$ph | 0);
    $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0;
    $88 = tempRet0;
    $89 = ($88 | 0) > -1;
    $90 = $87 >>> 0 > 4294967295;
    $91 = ($88 | 0) == -1;
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23 : do {
     if ($82) {
      $152 = $93;
      $153 = $87;
      $154 = $88;
      $95 = $83;
      $97 = $84;
      $ex$212 = $ex$1;
      while (1) {
       if ($152) {
        $94 = ($95 | 0) == ($85 | 0);
        $96 = ($97 | 0) == ($86 | 0);
        $98 = $94 & $96;
        if ($98) {
         break;
        } else {
         $100 = $153;
         $101 = $154;
        }
       } else {
        $100 = $95;
        $101 = $97;
       }
       $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0;
       $103 = tempRet0;
       $104 = $ex$212 + -1 | 0;
       $105 = ($104 | 0) > ($ey$1$ph | 0);
       $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0;
       $107 = tempRet0;
       $108 = ($107 | 0) > -1;
       $109 = $106 >>> 0 > 4294967295;
       $110 = ($107 | 0) == -1;
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;
        $153 = $106;
        $154 = $107;
        $95 = $102;
        $97 = $103;
        $ex$212 = $104;
       } else {
        $$lcssa7 = $112;
        $114 = $102;
        $116 = $103;
        $155 = $106;
        $156 = $107;
        $ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;
      $114 = $83;
      $116 = $84;
      $155 = $87;
      $156 = $88;
      $ex$2$lcssa = $ex$1;
     }
    } while (0);
    if ($$lcssa7) {
     $113 = ($114 | 0) == ($85 | 0);
     $115 = ($116 | 0) == ($86 | 0);
     $117 = $113 & $115;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $119 = $156;
      $121 = $155;
     }
    } else {
     $119 = $116;
     $121 = $114;
    }
    $118 = $119 >>> 0 < 1048576;
    $120 = $121 >>> 0 < 0;
    $122 = ($119 | 0) == 1048576;
    $123 = $122 & $120;
    $124 = $118 | $123;
    if ($124) {
     $126 = $121;
     $127 = $119;
     $ex$39 = $ex$2$lcssa;
     while (1) {
      $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
      $129 = tempRet0;
      $130 = $ex$39 + -1 | 0;
      $131 = $129 >>> 0 < 1048576;
      $132 = $128 >>> 0 < 0;
      $133 = ($129 | 0) == 1048576;
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;
       $127 = $129;
       $ex$39 = $130;
      } else {
       $137 = $128;
       $138 = $129;
       $ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $121;
     $138 = $119;
     $ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa | 0) > 0;
    if ($136) {
     $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0;
     $140 = tempRet0;
     $141 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;
     $150 = $143;
    } else {
     $145 = 1 - $ex$3$lcssa | 0;
     $146 = _bitshift64Lshr($137 | 0, $138 | 0, $145 | 0) | 0;
     $147 = tempRet0;
     $149 = $147;
     $150 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr >> 2] = $150;
    HEAP32[tempDoublePtr + 4 >> 2] = $148;
    $151 = +HEAPF64[tempDoublePtr >> 3];
    $$0 = $151;
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return +$$0;
}

function _FgtCmpMove($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aidx = 0, $aimx = 0, $aimy = 0, $ax = 0, $ay = 0, $bx = 0, $by = 0, $delta = 0, $flag = 0, $hurt = 0, $hurtmax = 0, $min = 0, $ox = 0, $oy = 0, $pTer = 0, $type = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $aimx = sp + 19 | 0;
 $aimy = sp + 18 | 0;
 $aidx = sp + 17 | 0;
 $hurt = sp;
 $0 = $idx;
 $1 = $0;
 $2 = _FgtGetGenTer($1) | 0;
 $3 = $2 & 255;
 $4 = ($3 | 0) == 5;
 if ($4) {
  STACKTOP = sp;
  return;
 }
 _FgtGetAimPos($aimx, $aimy);
 $5 = $0;
 $6 = $5 & 255;
 $7 = 3500 + ($6 * 7 | 0) | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $ox = $8;
 $9 = $0;
 $10 = $9 & 255;
 $11 = 3500 + ($10 * 7 | 0) | 0;
 $12 = $11 + 1 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $oy = $13;
 $14 = $0;
 $15 = _TransIdxToGen3($14) | 0;
 $16 = $15 & 255;
 $17 = HEAP32[332 >> 2] | 0;
 $18 = $17 + ($16 * 15 | 0) | 0;
 $19 = $18 + 9 | 0;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $20 & 255;
 $22 = $21 << 1;
 $23 = $22 & 255;
 $type = $23;
 $min = -1;
 $hurtmax = 0;
 $24 = $ox;
 $ax = $24;
 $25 = $oy;
 $ay = $25;
 $26 = HEAP8[3459 >> 0] | 0;
 $x = $26;
 L4 : while (1) {
  $27 = $x;
  $28 = $27 & 255;
  $29 = ($28 | 0) < 15;
  if (!$29) {
   break;
  }
  $30 = HEAP8[3460 >> 0] | 0;
  $y = $30;
  while (1) {
   $31 = $y;
   $32 = $31 & 255;
   $33 = ($32 | 0) < 15;
   if (!$33) {
    break;
   }
   $34 = $y;
   $35 = $34 & 255;
   $36 = $35 * 15 | 0;
   $37 = $x;
   $38 = $37 & 255;
   $39 = $36 + $38 | 0;
   $40 = HEAP32[284 >> 2] | 0;
   $41 = $40 + $39 | 0;
   $42 = HEAP8[$41 >> 0] | 0;
   $43 = $42 & 255;
   $44 = ($43 | 0) >= 128;
   if (!$44) {
    $45 = $x;
    $46 = $45 & 255;
    $47 = HEAP8[3459 >> 0] | 0;
    $48 = $47 & 255;
    $49 = $46 - $48 | 0;
    $50 = HEAP8[3457 >> 0] | 0;
    $51 = $50 & 255;
    $52 = $49 + $51 | 0;
    $53 = $52 & 255;
    $bx = $53;
    $54 = $y;
    $55 = $54 & 255;
    $56 = HEAP8[3460 >> 0] | 0;
    $57 = $56 & 255;
    $58 = $55 - $57 | 0;
    $59 = HEAP8[3458 >> 0] | 0;
    $60 = $59 & 255;
    $61 = $58 + $60 | 0;
    $62 = $61 & 255;
    $by = $62;
    $63 = $bx;
    $64 = $by;
    $65 = _FgtGetTerrain($63, $64) | 0;
    $pTer = $65;
    $66 = HEAP8[3472 >> 0] | 0;
    $67 = $66 & 255;
    $68 = 0 == ($67 | 0);
    if ($68) {
     $69 = $pTer;
     $70 = $69 & 255;
     $71 = 5 == ($70 | 0);
     if ($71) {
      label = 9;
      break L4;
     }
    }
    $82 = $bx;
    $83 = $by;
    $84 = HEAP8[$aimx >> 0] | 0;
    $85 = HEAP8[$aimy >> 0] | 0;
    $86 = _FgtCntInterval($82, $83, $84, $85) | 0;
    $delta = $86;
    $87 = $0;
    $88 = $bx;
    $89 = $by;
    _FgtGetAtkRng($87, $88, $89);
    _FgtGetHurtMax($hurt, $aidx);
    $90 = $hurtmax;
    $91 = $90 << 16 >> 16 != 0;
    $92 = HEAPU8[$hurt >> 0] | HEAPU8[$hurt + 1 >> 0] << 8;
    do {
     if ($91) {
      $109 = $92 & 65535;
      $110 = $hurtmax;
      $111 = $110 & 65535;
      $112 = ($109 | 0) < ($111 | 0);
      if ($112) {
       $flag = 0;
       break;
      }
      $113 = HEAPU8[$hurt >> 0] | HEAPU8[$hurt + 1 >> 0] << 8;
      $114 = $113 & 65535;
      $115 = $hurtmax;
      $116 = $115 & 65535;
      $117 = ($114 | 0) > ($116 | 0);
      if ($117) {
       $flag = 1;
       break;
      }
      $118 = $pTer;
      $119 = $118 & 255;
      $120 = 2 == ($119 | 0);
      if (!$120) {
       $121 = $pTer;
       $122 = $121 & 255;
       $123 = 3 == ($122 | 0);
       if (!$123) {
        $124 = $pTer;
        $125 = $124 & 255;
        $126 = 4 == ($125 | 0);
        if (!$126) {
         $127 = $pTer;
         $128 = $127 & 255;
         $129 = 5 == ($128 | 0);
         if (!$129) {
          $130 = $pTer;
          $131 = $130 & 255;
          $132 = 6 == ($131 | 0);
          if (!$132) {
           $133 = $bx;
           $134 = $by;
           $135 = $ox;
           $136 = $oy;
           $137 = _FgtCntInterval($133, $134, $135, $136) | 0;
           $138 = $137 & 255;
           $139 = $ax;
           $140 = $ay;
           $141 = $ox;
           $142 = $oy;
           $143 = _FgtCntInterval($139, $140, $141, $142) | 0;
           $144 = $143 & 255;
           $145 = ($138 | 0) > ($144 | 0);
           if ($145) {
            $flag = 1;
            break;
           } else {
            $flag = 0;
            break;
           }
          }
         }
        }
       }
      }
      $flag = 1;
     } else {
      $hurtmax = $92;
      $93 = $hurtmax;
      $94 = $93 & 65535;
      $95 = ($94 | 0) != 0;
      if (!$95) {
       $96 = $min;
       $97 = $96 & 255;
       $98 = $delta;
       $99 = $98 & 255;
       $100 = ($97 | 0) > ($99 | 0);
       if (!$100) {
        $101 = $min;
        $102 = $101 & 255;
        $103 = $delta;
        $104 = $103 & 255;
        $105 = ($102 | 0) == ($104 | 0);
        if ($105) {
         $106 = _rand() | 0;
         $107 = ($106 | 0) % 10 & -1;
         $108 = $107 & 255;
         $flag = $108;
         break;
        } else {
         $flag = 0;
         break;
        }
       }
      }
      $flag = 1;
     }
    } while (0);
    $146 = $flag;
    $147 = $146 << 24 >> 24 != 0;
    if ($147) {
     $148 = $delta;
     $min = $148;
     $149 = HEAPU8[$hurt >> 0] | HEAPU8[$hurt + 1 >> 0] << 8;
     $hurtmax = $149;
     $150 = $bx;
     $ax = $150;
     $151 = $by;
     $ay = $151;
    }
   }
   $152 = $y;
   $153 = $152 & 255;
   $154 = $153 + 1 | 0;
   $155 = $154 & 255;
   $y = $155;
  }
  $156 = $x;
  $157 = $156 & 255;
  $158 = $157 + 1 | 0;
  $159 = $158 & 255;
  $x = $159;
 }
 if ((label | 0) == 9) {
  $72 = $bx;
  $73 = $0;
  $74 = $73 & 255;
  $75 = 3500 + ($74 * 7 | 0) | 0;
  HEAP8[$75 >> 0] = $72;
  $76 = $by;
  $77 = $0;
  $78 = $77 & 255;
  $79 = 3500 + ($78 * 7 | 0) | 0;
  $80 = $79 + 1 | 0;
  HEAP8[$80 >> 0] = $76;
  $81 = $0;
  _FgtSetFocus($81);
  STACKTOP = sp;
  return;
 }
 $160 = $min;
 $161 = $160 & 255;
 $162 = ($161 | 0) != 255;
 if (!$162) {
  STACKTOP = sp;
  return;
 }
 $163 = $ax;
 $164 = $0;
 $165 = $164 & 255;
 $166 = 3500 + ($165 * 7 | 0) | 0;
 HEAP8[$166 >> 0] = $163;
 $167 = $ay;
 $168 = $0;
 $169 = $168 & 255;
 $170 = 3500 + ($169 * 7 | 0) | 0;
 $171 = $170 + 1 | 0;
 HEAP8[$171 >> 0] = $167;
 STACKTOP = sp;
 return;
}

function _GetPersonProStr($person, $pro, $str) {
 $person = $person | 0;
 $pro = $pro | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $idx = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $person;
 $1 = $pro;
 $2 = $str;
 $idx = 0;
 $3 = $0;
 $4 = $3 & 255;
 $5 = HEAP32[332 >> 2] | 0;
 $6 = $5 + ($4 * 15 | 0) | 0;
 $7 = $6 + 1 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $b = $8;
 $9 = $1;
 $10 = $9 & 255;
 do {
  switch ($10 | 0) {
  case 0:
   {
    $11 = $b;
    $12 = $11 & 255;
    $13 = 255 == ($12 | 0);
    if ($13) {
     $14 = $2;
     _ResLoadToMem(64, 49, $14) | 0;
     STACKTOP = sp;
     return;
    }
    $15 = $b;
    $16 = $15 & 255;
    $17 = $0;
    $18 = $17 & 255;
    $19 = $18 + 1 | 0;
    $20 = ($16 | 0) == ($19 | 0);
    if ($20) {
     $21 = $2;
     _ResLoadToMem(64, 48, $21) | 0;
     STACKTOP = sp;
     return;
    }
    $22 = $b;
    $23 = $22 << 24 >> 24 != 0;
    if ($23) {
     $24 = $b;
     $25 = $24 & 255;
     $26 = $25 - 1 | 0;
     $27 = $26 & 255;
     $28 = $2;
     _GetPersonName($27, $28);
     STACKTOP = sp;
     return;
    } else {
     $29 = $2;
     _ResLoadToMem(64, 47, $29) | 0;
     STACKTOP = sp;
     return;
    }
    break;
   }
  case 1:
   {
    $30 = $0;
    $31 = _GetPersonCity($30) | 0;
    $32 = $2;
    _GetCityName($31, $32);
    STACKTOP = sp;
    return;
    break;
   }
  case 2:
   {
    $33 = $0;
    $34 = $33 & 255;
    $35 = HEAP32[332 >> 2] | 0;
    $36 = $35 + ($34 * 15 | 0) | 0;
    $37 = $36 + 2 | 0;
    $38 = HEAP8[$37 >> 0] | 0;
    $39 = $38 & 255;
    $40 = $2;
    _itoa($39, $40, 10) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 3:
   {
    $41 = $0;
    $42 = $41 & 255;
    $43 = HEAP32[332 >> 2] | 0;
    $44 = $43 + ($42 * 15 | 0) | 0;
    $45 = $44 + 3 | 0;
    $46 = HEAP8[$45 >> 0] | 0;
    $47 = $46 & 255;
    $48 = $2;
    _itoa($47, $48, 10) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 4:
   {
    $49 = $0;
    $50 = $49 & 255;
    $51 = HEAP32[332 >> 2] | 0;
    $52 = $51 + ($50 * 15 | 0) | 0;
    $53 = $52 + 4 | 0;
    $54 = HEAP8[$53 >> 0] | 0;
    $55 = $54 & 255;
    $56 = $2;
    _itoa($55, $56, 10) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 5:
   {
    $57 = $b;
    $58 = $57 & 255;
    $59 = $0;
    $60 = $59 & 255;
    $61 = $60 + 1 | 0;
    $62 = ($58 | 0) == ($61 | 0);
    if ($62) {
     $63 = $2;
     _ResLoadToMem(64, 51, $63) | 0;
     STACKTOP = sp;
     return;
    }
    $64 = $b;
    $65 = $64 << 24 >> 24 != 0;
    if ($65) {
     $66 = $0;
     $67 = $66 & 255;
     $68 = HEAP32[332 >> 2] | 0;
     $69 = $68 + ($67 * 15 | 0) | 0;
     $70 = $69 + 5 | 0;
     $71 = HEAP8[$70 >> 0] | 0;
     $72 = $71 & 255;
     $73 = $2;
     _itoa($72, $73, 10) | 0;
     STACKTOP = sp;
     return;
    } else {
     $74 = $2;
     _ResLoadToMem(64, 51, $74) | 0;
     STACKTOP = sp;
     return;
    }
    break;
   }
  case 6:
   {
    $75 = $0;
    $76 = $75 & 255;
    $77 = HEAP32[332 >> 2] | 0;
    $78 = $77 + ($76 * 15 | 0) | 0;
    $79 = $78 + 7 | 0;
    $80 = HEAP8[$79 >> 0] | 0;
    $81 = $80 & 255;
    $82 = $2;
    _itoa($81, $82, 10) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 7:
   {
    $83 = $0;
    $84 = $83 & 255;
    $85 = HEAP32[332 >> 2] | 0;
    $86 = $85 + ($84 * 15 | 0) | 0;
    $87 = $86 + 8 | 0;
    $88 = HEAP8[$87 >> 0] | 0;
    $89 = $88 & 255;
    $90 = $2;
    _itoa($89, $90, 10) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 8:
   {
    $91 = $0;
    $92 = $91 & 255;
    $93 = HEAP32[332 >> 2] | 0;
    $94 = $93 + ($92 * 15 | 0) | 0;
    $95 = $94 + 9 | 0;
    $96 = HEAP8[$95 >> 0] | 0;
    $97 = $96 & 255;
    switch ($97 | 0) {
    case 0:
     {
      $idx = 17;
      break;
     }
    case 1:
     {
      $idx = 18;
      break;
     }
    case 2:
     {
      $idx = 19;
      break;
     }
    case 3:
     {
      $idx = 20;
      break;
     }
    case 4:
     {
      $idx = 21;
      break;
     }
    case 5:
     {
      $idx = 22;
      break;
     }
    default:
     {}
    }
    $98 = $idx;
    $99 = $2;
    _ResLoadToMem(64, $98, $99) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 9:
   {
    $100 = $0;
    $101 = $100 & 255;
    $102 = HEAP32[332 >> 2] | 0;
    $103 = $102 + ($101 * 15 | 0) | 0;
    $104 = $103 + 10 | 0;
    $105 = HEAPU8[$104 >> 0] | HEAPU8[$104 + 1 >> 0] << 8;
    $106 = $105 & 65535;
    $107 = $2;
    _itoa($106, $107, 10) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 10:
   {
    $108 = $0;
    $109 = $108 & 255;
    $110 = HEAP32[332 >> 2] | 0;
    $111 = $110 + ($109 * 15 | 0) | 0;
    $112 = $111 + 14 | 0;
    $113 = HEAP8[$112 >> 0] | 0;
    $114 = $113 & 255;
    $115 = $2;
    _itoa($114, $115, 10) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 11:
   {
    $116 = $2;
    HEAP8[$116 >> 0] = 0;
    $117 = $0;
    $118 = $117 & 255;
    $119 = HEAP32[332 >> 2] | 0;
    $120 = $119 + ($118 * 15 | 0) | 0;
    $121 = $120 + 12 | 0;
    $122 = HEAP8[$121 >> 0] | 0;
    $123 = $122 << 24 >> 24 != 0;
    if (!$123) {
     STACKTOP = sp;
     return;
    }
    $124 = $0;
    $125 = $124 & 255;
    $126 = HEAP32[332 >> 2] | 0;
    $127 = $126 + ($125 * 15 | 0) | 0;
    $128 = $127 + 12 | 0;
    $129 = HEAP8[$128 >> 0] | 0;
    $130 = $129 & 255;
    $131 = $130 - 1 | 0;
    $132 = $131 & 255;
    $133 = $2;
    _GetGoodsName($132, $133);
    STACKTOP = sp;
    return;
    break;
   }
  case 12:
   {
    $134 = $2;
    HEAP8[$134 >> 0] = 0;
    $135 = $0;
    $136 = $135 & 255;
    $137 = HEAP32[332 >> 2] | 0;
    $138 = $137 + ($136 * 15 | 0) | 0;
    $139 = $138 + 12 | 0;
    $140 = $139 + 1 | 0;
    $141 = HEAP8[$140 >> 0] | 0;
    $142 = $141 << 24 >> 24 != 0;
    if (!$142) {
     STACKTOP = sp;
     return;
    }
    $143 = $0;
    $144 = $143 & 255;
    $145 = HEAP32[332 >> 2] | 0;
    $146 = $145 + ($144 * 15 | 0) | 0;
    $147 = $146 + 12 | 0;
    $148 = $147 + 1 | 0;
    $149 = HEAP8[$148 >> 0] | 0;
    $150 = $149 & 255;
    $151 = $150 - 1 | 0;
    $152 = $151 & 255;
    $153 = $2;
    _GetGoodsName($152, $153);
    STACKTOP = sp;
    return;
    break;
   }
  default:
   {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
}

function _ComputerTacticDiplomatism($city) {
 $city = $city | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ecount = 0, $eqptr = 0, $i = 0, $order = 0, $pcount = 0, $pqptr = 0, $rnd = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $order = sp + 8 | 0;
 $0 = $city;
 $1 = HEAP32[384 >> 2] | 0;
 $pqptr = $1;
 $2 = HEAP32[384 >> 2] | 0;
 $3 = $2 + 200 | 0;
 $eqptr = $3;
 $4 = $0;
 $5 = $pqptr;
 $6 = _GetCityPersons($4, $5) | 0;
 $pcount = $6;
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $7 & 255;
  $9 = $pcount;
  $10 = $9 & 255;
  $11 = ($8 | 0) < ($10 | 0);
  if (!$11) {
   break;
  }
  $12 = _rand() | 0;
  $13 = ($12 | 0) % 8 & -1;
  $14 = $13 & 255;
  $rnd = $14;
  $15 = $0;
  $16 = $eqptr;
  $17 = _GetCityCaptives($15, $16) | 0;
  $ecount = $17;
  $18 = $ecount;
  $19 = $18 << 24 >> 24 != 0;
  if ($19) {
   $rnd = 0;
  }
  $20 = $rnd;
  $21 = $20 & 255;
  L7 : do {
   switch ($21 | 0) {
   case 0:
    {
     $22 = $ecount;
     $23 = $22 << 24 >> 24 != 0;
     if ($23) {
      $24 = _rand() | 0;
      $25 = $ecount;
      $26 = $25 & 255;
      $27 = ($24 | 0) % ($26 | 0) & -1;
      $28 = $27 & 255;
      $rnd = $28;
      $29 = $rnd;
      $30 = $29 & 255;
      $31 = $eqptr;
      $32 = $31 + $30 | 0;
      $33 = HEAP8[$32 >> 0] | 0;
      $34 = $33 & 255;
      $35 = HEAP32[332 >> 2] | 0;
      $36 = $35 + ($34 * 15 | 0) | 0;
      $37 = HEAP8[$36 >> 0] | 0;
      $38 = $37 & 255;
      $39 = HEAP8[3640 >> 0] | 0;
      $40 = $39 & 255;
      $41 = $40 + 1 | 0;
      $42 = ($38 | 0) != ($41 | 0);
      $43 = $0;
      if ($42) {
       $44 = $43 & 255;
       $45 = 3645 + ($44 * 31 | 0) | 0;
       $46 = $45 + 1 | 0;
       $47 = HEAP8[$46 >> 0] | 0;
       $48 = $rnd;
       $49 = $48 & 255;
       $50 = $eqptr;
       $51 = $50 + $49 | 0;
       $52 = HEAP8[$51 >> 0] | 0;
       $53 = $52 & 255;
       $54 = HEAP32[332 >> 2] | 0;
       $55 = $54 + ($53 * 15 | 0) | 0;
       $56 = $55 + 1 | 0;
       HEAP8[$56 >> 0] = $47;
       break L7;
      } else {
       $57 = $rnd;
       $58 = $57 & 255;
       $59 = $eqptr;
       $60 = $59 + $58 | 0;
       $61 = HEAP8[$60 >> 0] | 0;
       _DelPerson($43, $61) | 0;
       HEAP8[$order >> 0] = 0;
       label = 20;
       break L7;
      }
     }
     break;
    }
   case 1:
    {
     $62 = $ecount;
     $63 = $62 << 24 >> 24 != 0;
     if ($63) {
      $64 = _rand() | 0;
      $65 = $ecount;
      $66 = $65 & 255;
      $67 = ($64 | 0) % ($66 | 0) & -1;
      $68 = $67 & 255;
      $rnd = $68;
      $69 = $0;
      $70 = $rnd;
      $71 = $70 & 255;
      $72 = $eqptr;
      $73 = $72 + $71 | 0;
      $74 = HEAP8[$73 >> 0] | 0;
      _DelPerson($69, $74) | 0;
     }
     break;
    }
   case 7:
   case 2:
    {
     break;
    }
   case 3:
    {
     $75 = $0;
     $76 = $eqptr;
     $77 = _GetEnemyPersons($75, $76) | 0;
     $ecount = $77;
     $78 = $ecount;
     $79 = $78 << 24 >> 24 != 0;
     if ($79) {
      $80 = _rand() | 0;
      $81 = $ecount;
      $82 = $81 & 255;
      $83 = ($80 | 0) % ($82 | 0) & -1;
      $84 = $83 & 255;
      $rnd = $84;
      $85 = $rnd;
      $86 = $85 & 255;
      $87 = $eqptr;
      $88 = $87 + $86 | 0;
      $89 = HEAP8[$88 >> 0] | 0;
      $90 = $order + 3 | 0;
      HEAP8[$90 >> 0] = $89;
      HEAP8[$order >> 0] = 15;
      label = 20;
     }
     break;
    }
   case 4:
    {
     $91 = $0;
     $92 = $eqptr;
     $93 = _GetEnemyPersons($91, $92) | 0;
     $ecount = $93;
     $94 = $ecount;
     $95 = $94 << 24 >> 24 != 0;
     if ($95) {
      $96 = _rand() | 0;
      $97 = $ecount;
      $98 = $97 & 255;
      $99 = ($96 | 0) % ($98 | 0) & -1;
      $100 = $99 & 255;
      $rnd = $100;
      $101 = $rnd;
      $102 = $101 & 255;
      $103 = $eqptr;
      $104 = $103 + $102 | 0;
      $105 = HEAP8[$104 >> 0] | 0;
      $106 = $order + 3 | 0;
      HEAP8[$106 >> 0] = $105;
      HEAP8[$order >> 0] = 16;
      label = 20;
     }
     break;
    }
   case 5:
    {
     $107 = $0;
     $108 = $eqptr;
     $109 = _GetEnemySatraps($107, $108) | 0;
     $ecount = $109;
     $110 = $ecount;
     $111 = $110 << 24 >> 24 != 0;
     if ($111) {
      $112 = _rand() | 0;
      $113 = $ecount;
      $114 = $113 & 255;
      $115 = ($112 | 0) % ($114 | 0) & -1;
      $116 = $115 & 255;
      $rnd = $116;
      $117 = $rnd;
      $118 = $117 & 255;
      $119 = $eqptr;
      $120 = $119 + $118 | 0;
      $121 = HEAP8[$120 >> 0] | 0;
      $122 = $order + 3 | 0;
      HEAP8[$122 >> 0] = $121;
      HEAP8[$order >> 0] = 17;
      label = 20;
     }
     break;
    }
   case 6:
    {
     $123 = $0;
     $124 = $eqptr;
     $125 = _GetEnemyKing($123, $124) | 0;
     $ecount = $125;
     $126 = $ecount;
     $127 = $126 << 24 >> 24 != 0;
     if ($127) {
      $128 = _rand() | 0;
      $129 = $ecount;
      $130 = $129 & 255;
      $131 = ($128 | 0) % ($130 | 0) & -1;
      $132 = $131 & 255;
      $rnd = $132;
      $133 = $rnd;
      $134 = $133 & 255;
      $135 = $eqptr;
      $136 = $135 + $134 | 0;
      $137 = HEAP8[$136 >> 0] | 0;
      $138 = $order + 3 | 0;
      HEAP8[$138 >> 0] = $137;
      HEAP8[$order >> 0] = 19;
      label = 20;
     }
     break;
    }
   default:
    {
     label = 20;
    }
   }
  } while (0);
  if ((label | 0) == 20) {
   label = 0;
   $139 = $i;
   $140 = $139 & 255;
   $141 = $pqptr;
   $142 = $141 + $140 | 0;
   $143 = HEAP8[$142 >> 0] | 0;
   $144 = $order + 1 | 0;
   HEAP8[$144 >> 0] = $143;
   $145 = $0;
   $146 = $order + 2 | 0;
   HEAP8[$146 >> 0] = $145;
   $147 = $order + 11 | 0;
   HEAP8[$147 >> 0] = 0;
   $148 = _AddOrderHead($order) | 0;
   $149 = $148 << 24 >> 24 != 0;
   if ($149) {
    $150 = $0;
    $151 = $i;
    $152 = $151 & 255;
    $153 = $pqptr;
    $154 = $153 + $152 | 0;
    $155 = HEAP8[$154 >> 0] | 0;
    _DelPerson($150, $155) | 0;
   }
  }
  $156 = $i;
  $157 = $156 + 1 << 24 >> 24;
  $i = $157;
 }
 STACKTOP = sp;
 return;
}

function _GetCityProStr($city, $pro, $str) {
 $city = $city | 0;
 $pro = $pro | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $strbuf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $strbuf = sp + 4 | 0;
 $0 = $city;
 $1 = $pro;
 $2 = $str;
 $3 = $2;
 HEAP8[$3 >> 0] = 0;
 $4 = $1;
 $5 = $4 & 255;
 do {
  switch ($5 | 0) {
  case 0:
   {
    $6 = $2;
    _ResLoadToMem(64, 2, $6) | 0;
    $7 = $0;
    $8 = $7 & 255;
    $9 = 3645 + ($8 * 31 | 0) | 0;
    $10 = $9 + 1 | 0;
    $11 = HEAP8[$10 >> 0] | 0;
    $12 = $11 << 24 >> 24 != 0;
    if ($12) {
     $13 = $0;
     $14 = $13 & 255;
     $15 = 3645 + ($14 * 31 | 0) | 0;
     $16 = $15 + 1 | 0;
     $17 = HEAP8[$16 >> 0] | 0;
     $18 = $17 & 255;
     $19 = $18 - 1 | 0;
     $20 = $19 & 255;
     $21 = $2;
     $22 = $21 + 5 | 0;
     _GetPersonName($20, $22);
     STACKTOP = sp;
     return;
    } else {
     $23 = $2;
     $24 = $23 + 5 | 0;
     _ResLoadToMem(64, 50, $24) | 0;
     STACKTOP = sp;
     return;
    }
    break;
   }
  case 1:
   {
    $25 = $2;
    _ResLoadToMem(64, 3, $25) | 0;
    $26 = $0;
    $27 = $26 & 255;
    $28 = 3645 + ($27 * 31 | 0) | 0;
    $29 = $28 + 2 | 0;
    $30 = HEAP8[$29 >> 0] | 0;
    $31 = $30 << 24 >> 24 != 0;
    if ($31) {
     $32 = $0;
     $33 = $32 & 255;
     $34 = 3645 + ($33 * 31 | 0) | 0;
     $35 = $34 + 2 | 0;
     $36 = HEAP8[$35 >> 0] | 0;
     $37 = $36 & 255;
     $38 = $37 - 1 | 0;
     $39 = $38 & 255;
     $40 = $2;
     $41 = $40 + 5 | 0;
     _GetPersonName($39, $41);
     STACKTOP = sp;
     return;
    } else {
     $42 = $2;
     $43 = $42 + 5 | 0;
     _ResLoadToMem(64, 50, $43) | 0;
     STACKTOP = sp;
     return;
    }
    break;
   }
  case 2:
   {
    $44 = $2;
    _ResLoadToMem(64, 4, $44) | 0;
    $45 = $0;
    $46 = $45 & 255;
    $47 = 3645 + ($46 * 31 | 0) | 0;
    $48 = $47 + 5 | 0;
    $49 = HEAPU8[$48 >> 0] | HEAPU8[$48 + 1 >> 0] << 8;
    $50 = $49 & 65535;
    _itoa($50, $strbuf, 10) | 0;
    $51 = $2;
    _strcat($51, $strbuf) | 0;
    $52 = $2;
    $53 = _strlen($52) | 0;
    $54 = $53 + 1 | 0;
    $55 = $2;
    $56 = $55 + $54 | 0;
    HEAP8[$56 >> 0] = 0;
    $57 = $2;
    $58 = _strlen($57) | 0;
    $59 = $2;
    $60 = $59 + $58 | 0;
    HEAP8[$60 >> 0] = 47;
    $61 = $0;
    $62 = $61 & 255;
    $63 = 3645 + ($62 * 31 | 0) | 0;
    $64 = $63 + 3 | 0;
    $65 = HEAPU8[$64 >> 0] | HEAPU8[$64 + 1 >> 0] << 8;
    $66 = $65 & 65535;
    _itoa($66, $strbuf, 10) | 0;
    $67 = $2;
    _strcat($67, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 3:
   {
    $68 = $2;
    _ResLoadToMem(64, 5, $68) | 0;
    $69 = $0;
    $70 = $69 & 255;
    $71 = 3645 + ($70 * 31 | 0) | 0;
    $72 = $71 + 9 | 0;
    $73 = HEAPU8[$72 >> 0] | HEAPU8[$72 + 1 >> 0] << 8;
    $74 = $73 & 65535;
    _itoa($74, $strbuf, 10) | 0;
    $75 = $2;
    _strcat($75, $strbuf) | 0;
    $76 = $2;
    $77 = _strlen($76) | 0;
    $78 = $77 + 1 | 0;
    $79 = $2;
    $80 = $79 + $78 | 0;
    HEAP8[$80 >> 0] = 0;
    $81 = $2;
    $82 = _strlen($81) | 0;
    $83 = $2;
    $84 = $83 + $82 | 0;
    HEAP8[$84 >> 0] = 47;
    $85 = $0;
    $86 = $85 & 255;
    $87 = 3645 + ($86 * 31 | 0) | 0;
    $88 = $87 + 7 | 0;
    $89 = HEAPU8[$88 >> 0] | HEAPU8[$88 + 1 >> 0] << 8;
    $90 = $89 & 65535;
    _itoa($90, $strbuf, 10) | 0;
    $91 = $2;
    _strcat($91, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 4:
   {
    $92 = $2;
    _ResLoadToMem(64, 6, $92) | 0;
    $93 = $0;
    $94 = $93 & 255;
    $95 = 3645 + ($94 * 31 | 0) | 0;
    $96 = $95 + 11 | 0;
    $97 = HEAP8[$96 >> 0] | 0;
    $98 = $97 & 255;
    _itoa($98, $strbuf, 10) | 0;
    $99 = $2;
    _strcat($99, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 5:
   {
    $100 = $2;
    _ResLoadToMem(64, 7, $100) | 0;
    $101 = $0;
    $102 = $101 & 255;
    $103 = 3645 + ($102 * 31 | 0) | 0;
    $104 = $103 + 12 | 0;
    $105 = HEAP8[$104 >> 0] | 0;
    $106 = $105 & 255;
    _itoa($106, $strbuf, 10) | 0;
    $107 = $2;
    _strcat($107, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 6:
   {
    $108 = $2;
    _ResLoadToMem(64, 8, $108) | 0;
    $109 = $0;
    $110 = $109 & 255;
    $111 = 3645 + ($110 * 31 | 0) | 0;
    $112 = $111 + 17 | 0;
    $113 = HEAPU8[$112 >> 0] | HEAPU8[$112 + 1 >> 0] << 8 | HEAPU8[$112 + 2 >> 0] << 16 | HEAPU8[$112 + 3 >> 0] << 24;
    _ltoa($113, $strbuf, 10) | 0;
    $114 = $2;
    _strcat($114, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 7:
   {
    $115 = $2;
    _ResLoadToMem(64, 9, $115) | 0;
    $116 = $0;
    $117 = $116 & 255;
    $118 = 3645 + ($117 * 31 | 0) | 0;
    $119 = $118 + 21 | 0;
    $120 = HEAPU8[$119 >> 0] | HEAPU8[$119 + 1 >> 0] << 8;
    $121 = $120 & 65535;
    _itoa($121, $strbuf, 10) | 0;
    $122 = $2;
    _strcat($122, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 8:
   {
    $123 = $2;
    _ResLoadToMem(64, 10, $123) | 0;
    $124 = $0;
    $125 = $124 & 255;
    $126 = 3645 + ($125 * 31 | 0) | 0;
    $127 = $126 + 23 | 0;
    $128 = HEAPU8[$127 >> 0] | HEAPU8[$127 + 1 >> 0] << 8;
    $129 = $128 & 65535;
    _itoa($129, $strbuf, 10) | 0;
    $130 = $2;
    _strcat($130, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 9:
   {
    $131 = $2;
    _ResLoadToMem(64, 11, $131) | 0;
    $132 = $0;
    $133 = $132 & 255;
    $134 = 3645 + ($133 * 31 | 0) | 0;
    $135 = $134 + 25 | 0;
    $136 = HEAPU8[$135 >> 0] | HEAPU8[$135 + 1 >> 0] << 8;
    $137 = $136 & 65535;
    _itoa($137, $strbuf, 10) | 0;
    $138 = $2;
    _strcat($138, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  case 10:
   {
    $139 = $2;
    _ResLoadToMem(64, 1, $139) | 0;
    $140 = $0;
    _GetCityState($140, $strbuf);
    $141 = $2;
    _strcat($141, $strbuf) | 0;
    STACKTOP = sp;
    return;
    break;
   }
  default:
   {
    STACKTOP = sp;
    return;
   }
  }
 } while (0);
}

function _FgtGetRelief($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bh = 0, $boff = 0, $bw = 0, $bx = 0, $by = 0, $moff = 0, $move = 0, $mx = 0, $my = 0, $ptr = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $idx;
 $1 = HEAP32[284 >> 2] | 0;
 _memset($1 | 0, -1, 225) | 0;
 $2 = $0;
 $3 = $2 & 255;
 $4 = 3500 + ($3 * 7 | 0) | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 & 255;
 $7 = $6 + 1 | 0;
 $8 = $7 & 255;
 $x = $8;
 $9 = $0;
 $10 = $9 & 255;
 $11 = 3500 + ($10 * 7 | 0) | 0;
 $12 = $11 + 1 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $14 = $13 & 255;
 $15 = $14 + 1 | 0;
 $16 = $15 & 255;
 $y = $16;
 $17 = $0;
 $18 = $17 & 255;
 $19 = 3500 + ($18 * 7 | 0) | 0;
 $20 = $19 + 4 | 0;
 $21 = HEAP8[$20 >> 0] | 0;
 $move = $21;
 $22 = $x;
 $23 = $22 & 255;
 $24 = $move;
 $25 = $24 & 255;
 $26 = ($23 | 0) >= ($25 | 0);
 if ($26) {
  $27 = $x;
  $28 = $27 & 255;
  $29 = $move;
  $30 = $29 & 255;
  $31 = $28 - $30 | 0;
  $32 = $31 & 255;
  $mx = $32;
  $bx = 0;
 } else {
  $mx = 0;
  $33 = $move;
  $34 = $33 & 255;
  $35 = $x;
  $36 = $35 & 255;
  $37 = $34 - $36 | 0;
  $38 = $37 & 255;
  $bx = $38;
 }
 $39 = $y;
 $40 = $39 & 255;
 $41 = $move;
 $42 = $41 & 255;
 $43 = ($40 | 0) >= ($42 | 0);
 if ($43) {
  $44 = $y;
  $45 = $44 & 255;
  $46 = $move;
  $47 = $46 & 255;
  $48 = $45 - $47 | 0;
  $49 = $48 & 255;
  $my = $49;
  $by = 0;
 } else {
  $my = 0;
  $50 = $move;
  $51 = $50 & 255;
  $52 = $y;
  $53 = $52 & 255;
  $54 = $51 - $53 | 0;
  $55 = $54 & 255;
  $by = $55;
 }
 $56 = $move;
 $57 = $56 & 255;
 $58 = $bx;
 $59 = $58 & 255;
 $60 = $57 - $59 | 0;
 $61 = $60 & 255;
 $bw = $61;
 $62 = HEAP8[3451 >> 0] | 0;
 $63 = $62 & 255;
 $64 = $x;
 $65 = $64 & 255;
 $66 = $63 - $65 | 0;
 $67 = $move;
 $68 = $67 & 255;
 $69 = ($66 | 0) > ($68 | 0);
 if ($69) {
  $70 = $move;
  $71 = $70 & 255;
  $72 = $71 - 1 | 0;
  $73 = $bw;
  $74 = $73 & 255;
  $75 = $74 + $72 | 0;
  $76 = $75 & 255;
  $bw = $76;
 } else {
  $77 = HEAP8[3451 >> 0] | 0;
  $78 = $77 & 255;
  $79 = $x;
  $80 = $79 & 255;
  $81 = $78 - $80 | 0;
  $82 = $bw;
  $83 = $82 & 255;
  $84 = $83 + $81 | 0;
  $85 = $84 & 255;
  $bw = $85;
 }
 $86 = $move;
 $87 = $86 & 255;
 $88 = $by;
 $89 = $88 & 255;
 $90 = $87 - $89 | 0;
 $91 = $90 & 255;
 $bh = $91;
 $92 = HEAP8[3452 >> 0] | 0;
 $93 = $92 & 255;
 $94 = $y;
 $95 = $94 & 255;
 $96 = $93 - $95 | 0;
 $97 = $move;
 $98 = $97 & 255;
 $99 = ($96 | 0) > ($98 | 0);
 if ($99) {
  $100 = $move;
  $101 = $100 & 255;
  $102 = $101 - 1 | 0;
  $103 = $bh;
  $104 = $103 & 255;
  $105 = $104 + $102 | 0;
  $106 = $105 & 255;
  $bh = $106;
 } else {
  $107 = HEAP8[3452 >> 0] | 0;
  $108 = $107 & 255;
  $109 = $y;
  $110 = $109 & 255;
  $111 = $108 - $110 | 0;
  $112 = $bh;
  $113 = $112 & 255;
  $114 = $113 + $111 | 0;
  $115 = $114 & 255;
  $bh = $115;
 }
 $116 = HEAPU8[3474 >> 0] | HEAPU8[3474 + 1 >> 0] << 8;
 $117 = HEAP32[256 >> 2] | 0;
 $118 = _ResLoadToCon($116, 1, $117) | 0;
 $ptr = $118;
 $119 = $ptr;
 $120 = $119 + 16 | 0;
 $ptr = $120;
 $121 = $my;
 $122 = $121 & 255;
 $moff = $122;
 $123 = HEAP8[3451 >> 0] | 0;
 $124 = $123 & 255;
 $125 = $moff;
 $126 = $125 & 65535;
 $127 = Math_imul($126, $124) | 0;
 $128 = $127 & 65535;
 $moff = $128;
 $129 = $mx;
 $130 = $129 & 255;
 $131 = $moff;
 $132 = $131 & 65535;
 $133 = $132 + $130 | 0;
 $134 = $133 & 65535;
 $moff = $134;
 $135 = $by;
 $136 = $135 & 255;
 $boff = $136;
 $137 = $boff;
 $138 = $137 & 65535;
 $139 = $138 * 15 | 0;
 $140 = $139 & 65535;
 $boff = $140;
 $141 = $bx;
 $142 = $141 & 255;
 $143 = $boff;
 $144 = $143 & 65535;
 $145 = $144 + $142 | 0;
 $146 = $145 & 65535;
 $boff = $146;
 $y = 0;
 while (1) {
  $147 = $y;
  $148 = $147 & 255;
  $149 = $bh;
  $150 = $149 & 255;
  $151 = ($148 | 0) < ($150 | 0);
  if (!$151) {
   break;
  }
  $152 = HEAP32[284 >> 2] | 0;
  $153 = $boff;
  $154 = $153 & 65535;
  $155 = $152 + $154 | 0;
  $156 = $ptr;
  $157 = $moff;
  $158 = $157 & 65535;
  $159 = $156 + $158 | 0;
  $160 = $bw;
  $161 = $160 & 255;
  _memcpy($155 | 0, $159 | 0, $161 | 0) | 0;
  $162 = HEAP8[3451 >> 0] | 0;
  $163 = $162 & 255;
  $164 = $moff;
  $165 = $164 & 65535;
  $166 = $165 + $163 | 0;
  $167 = $166 & 65535;
  $moff = $167;
  $168 = $boff;
  $169 = $168 & 65535;
  $170 = $169 + 15 | 0;
  $171 = $170 & 65535;
  $boff = $171;
  $172 = $y;
  $173 = $172 & 255;
  $174 = $173 + 1 | 0;
  $175 = $174 & 255;
  $y = $175;
 }
 $176 = $mx;
 HEAP8[3457 >> 0] = $176;
 $177 = $my;
 HEAP8[3458 >> 0] = $177;
 $178 = $bx;
 HEAP8[3459 >> 0] = $178;
 $179 = $by;
 HEAP8[3460 >> 0] = $179;
 STACKTOP = sp;
 return;
}

function _ComputerTacticInterior($city) {
 $city = $city | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $PeopleDevotion = 0, $Population = 0, $c = 0, $ca = 0, $cl = 0, $cptr = 0, $f = 0, $fa = 0, $fl = 0, $i = 0, $order = 0, $pcount = 0, $pqptr = 0, $rnd = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $order = sp + 32 | 0;
 $0 = $city;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3645 + ($2 * 31 | 0) | 0;
 $cptr = $3;
 $4 = $cptr;
 $5 = $4 + 5 | 0;
 $f = $5;
 $6 = $cptr;
 $7 = $6 + 3 | 0;
 $8 = HEAPU8[$7 >> 0] | HEAPU8[$7 + 1 >> 0] << 8;
 $fl = $8;
 $9 = $cptr;
 $10 = $9 + 9 | 0;
 $c = $10;
 $11 = $cptr;
 $12 = $11 + 7 | 0;
 $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
 $cl = $13;
 $14 = $cptr;
 $15 = $14 + 11 | 0;
 $PeopleDevotion = $15;
 $16 = $cptr;
 $17 = $16 + 17 | 0;
 $Population = $17;
 $18 = HEAP32[384 >> 2] | 0;
 $pqptr = $18;
 $19 = $0;
 $20 = $pqptr;
 $21 = _GetCityPersons($19, $20) | 0;
 $pcount = $21;
 $i = 0;
 while (1) {
  $22 = $i;
  $23 = $22 & 255;
  $24 = $pcount;
  $25 = $24 & 255;
  $26 = ($23 | 0) < ($25 | 0);
  if (!$26) {
   break;
  }
  $27 = _rand() | 0;
  $28 = ($27 | 0) % 5 & -1;
  $29 = $28 & 255;
  $rnd = $29;
  $30 = $rnd;
  $31 = $30 & 255;
  switch ($31 | 0) {
  case 0:
   {
    $fa = 200;
    $32 = $fa;
    $33 = $32 & 65535;
    $34 = $f;
    $35 = HEAPU8[$34 >> 0] | HEAPU8[$34 + 1 >> 0] << 8;
    $36 = $35 & 65535;
    $37 = $36 + $33 | 0;
    $38 = $37 & 65535;
    HEAP8[$34 >> 0] = $38 & 255;
    HEAP8[$34 + 1 >> 0] = $38 >> 8;
    $39 = $f;
    $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8;
    $41 = $40 & 65535;
    $42 = $fl;
    $43 = $42 & 65535;
    $44 = ($41 | 0) > ($43 | 0);
    if ($44) {
     $45 = $fl;
     $46 = $f;
     HEAP8[$46 >> 0] = $45 & 255;
     HEAP8[$46 + 1 >> 0] = $45 >> 8;
    }
    HEAP8[$order >> 0] = 1;
    label = 16;
    break;
   }
  case 1:
   {
    $ca = 200;
    $47 = $ca;
    $48 = $47 & 65535;
    $49 = $c;
    $50 = HEAPU8[$49 >> 0] | HEAPU8[$49 + 1 >> 0] << 8;
    $51 = $50 & 65535;
    $52 = $51 + $48 | 0;
    $53 = $52 & 65535;
    HEAP8[$49 >> 0] = $53 & 255;
    HEAP8[$49 + 1 >> 0] = $53 >> 8;
    $54 = $c;
    $55 = HEAPU8[$54 >> 0] | HEAPU8[$54 + 1 >> 0] << 8;
    $56 = $55 & 65535;
    $57 = $cl;
    $58 = $57 & 65535;
    $59 = ($56 | 0) > ($58 | 0);
    if ($59) {
     $60 = $cl;
     $61 = $c;
     HEAP8[$61 >> 0] = $60 & 255;
     HEAP8[$61 + 1 >> 0] = $60 >> 8;
    }
    HEAP8[$order >> 0] = 2;
    label = 16;
    break;
   }
  case 2:
   {
    HEAP8[$order >> 0] = 3;
    label = 16;
    break;
   }
  case 3:
   {
    $62 = $PeopleDevotion;
    $63 = HEAP8[$62 >> 0] | 0;
    $64 = $63 & 255;
    $65 = $64 + 4 | 0;
    $66 = $65 & 255;
    HEAP8[$62 >> 0] = $66;
    $67 = $PeopleDevotion;
    $68 = HEAP8[$67 >> 0] | 0;
    $69 = $68 & 255;
    $70 = ($69 | 0) > 100;
    if ($70) {
     $71 = $PeopleDevotion;
     HEAP8[$71 >> 0] = 100;
    }
    $72 = $Population;
    $73 = HEAPU8[$72 >> 0] | HEAPU8[$72 + 1 >> 0] << 8 | HEAPU8[$72 + 2 >> 0] << 16 | HEAPU8[$72 + 3 >> 0] << 24;
    $74 = $73 + 100 | 0;
    HEAP8[$72 >> 0] = $74 & 255;
    HEAP8[$72 + 1 >> 0] = $74 >> 8 & 255;
    HEAP8[$72 + 2 >> 0] = $74 >> 16 & 255;
    HEAP8[$72 + 3 >> 0] = $74 >> 24;
    $75 = $Population;
    $76 = HEAPU8[$75 >> 0] | HEAPU8[$75 + 1 >> 0] << 8 | HEAPU8[$75 + 2 >> 0] << 16 | HEAPU8[$75 + 3 >> 0] << 24;
    $77 = $cptr;
    $78 = $77 + 13 | 0;
    $79 = HEAPU8[$78 >> 0] | HEAPU8[$78 + 1 >> 0] << 8 | HEAPU8[$78 + 2 >> 0] << 16 | HEAPU8[$78 + 3 >> 0] << 24;
    $80 = $76 >>> 0 > $79 >>> 0;
    if ($80) {
     $81 = $cptr;
     $82 = $81 + 13 | 0;
     $83 = HEAPU8[$82 >> 0] | HEAPU8[$82 + 1 >> 0] << 8 | HEAPU8[$82 + 2 >> 0] << 16 | HEAPU8[$82 + 3 >> 0] << 24;
     $84 = $Population;
     HEAP8[$84 >> 0] = $83 & 255;
     HEAP8[$84 + 1 >> 0] = $83 >> 8 & 255;
     HEAP8[$84 + 2 >> 0] = $83 >> 16 & 255;
     HEAP8[$84 + 3 >> 0] = $83 >> 24;
    }
    HEAP8[$order >> 0] = 5;
    label = 16;
    break;
   }
  case 4:
   {
    break;
   }
  default:
   {
    label = 16;
   }
  }
  if ((label | 0) == 16) {
   label = 0;
   $85 = $i;
   $86 = $85 & 255;
   $87 = $pqptr;
   $88 = $87 + $86 | 0;
   $89 = HEAP8[$88 >> 0] | 0;
   $90 = $order + 1 | 0;
   HEAP8[$90 >> 0] = $89;
   $91 = $0;
   $92 = $order + 2 | 0;
   HEAP8[$92 >> 0] = $91;
   $93 = $0;
   $94 = $order + 3 | 0;
   HEAP8[$94 >> 0] = $93;
   $95 = $order + 11 | 0;
   HEAP8[$95 >> 0] = 0;
   $96 = _AddOrderHead($order) | 0;
   $97 = $96 << 24 >> 24 != 0;
   if ($97) {
    $98 = $0;
    $99 = $i;
    $100 = $99 & 255;
    $101 = $pqptr;
    $102 = $101 + $100 | 0;
    $103 = HEAP8[$102 >> 0] | 0;
    _DelPerson($98, $103) | 0;
   }
  }
  $104 = $i;
  $105 = $104 + 1 << 24 >> 24;
  $i = $105;
 }
 STACKTOP = sp;
 return;
}

function _FgtSetDifPot($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $lps = 0, $poff = 0, $pos = 0, $sx = 0, $sy = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = $1 & 255;
 $3 = ($2 | 0) < 10;
 if ($3) {
  $lps = 10;
 } else {
  $lps = 0;
 }
 $4 = HEAP8[3457 >> 0] | 0;
 $5 = $4 & 255;
 $6 = HEAP8[3459 >> 0] | 0;
 $7 = $6 & 255;
 $8 = $5 - $7 | 0;
 $9 = $8 & 255;
 $sx = $9;
 $10 = HEAP8[3458 >> 0] | 0;
 $11 = $10 & 255;
 $12 = HEAP8[3460 >> 0] | 0;
 $13 = $12 & 255;
 $14 = $11 - $13 | 0;
 $15 = $14 & 255;
 $sy = $15;
 $16 = $lps;
 $i = $16;
 while (1) {
  $17 = $i;
  $18 = $17 & 255;
  $19 = $lps;
  $20 = $19 & 255;
  $21 = $20 + 10 | 0;
  $22 = ($18 | 0) < ($21 | 0);
  if (!$22) {
   break;
  }
  $23 = $i;
  $24 = $23 & 255;
  $25 = 3500 + ($24 * 7 | 0) | 0;
  $pos = $25;
  $26 = $pos;
  $27 = $26 + 6 | 0;
  $28 = HEAP8[$27 >> 0] | 0;
  $29 = $28 & 255;
  $30 = 8 == ($29 | 0);
  if (!$30) {
   $31 = $pos;
   $32 = HEAP8[$31 >> 0] | 0;
   $33 = $32 & 255;
   $34 = $sx;
   $35 = $34 & 255;
   $36 = $33 - $35 | 0;
   $37 = $36 & 255;
   $x = $37;
   $38 = $pos;
   $39 = $38 + 1 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   $41 = $40 & 255;
   $42 = $sy;
   $43 = $42 & 255;
   $44 = $41 - $43 | 0;
   $45 = $44 & 255;
   $y = $45;
   $46 = $x;
   $47 = $46 & 255;
   $48 = ($47 | 0) > 15;
   if (!$48) {
    $49 = $y;
    $50 = $49 & 255;
    $51 = ($50 | 0) > 15;
    if (!$51) {
     $52 = $y;
     $poff = $52;
     $53 = $poff;
     $54 = $53 & 255;
     $55 = $54 * 15 | 0;
     $56 = $x;
     $57 = $56 & 255;
     $58 = $55 + $57 | 0;
     $59 = $58 & 255;
     $poff = $59;
     $60 = $poff;
     $61 = $60 & 255;
     $62 = ($61 | 0) > 224;
     if (!$62) {
      $63 = $poff;
      $64 = $63 & 255;
      $65 = HEAP32[284 >> 2] | 0;
      $66 = $65 + $64 | 0;
      HEAP8[$66 >> 0] = -2;
      $67 = $0;
      $68 = $67 & 255;
      $69 = 3500 + ($68 * 7 | 0) | 0;
      $70 = $69 + 6 | 0;
      $71 = HEAP8[$70 >> 0] | 0;
      $72 = $71 & 255;
      $73 = ($72 | 0) == 4;
      if (!$73) {
       $74 = $x;
       $75 = $74 & 255;
       $76 = ($75 | 0) != 0;
       if ($76) {
        $77 = $poff;
        $78 = $77 & 255;
        $79 = ($78 | 0) > 1;
        if ($79) {
         $80 = $poff;
         $81 = $80 & 255;
         $82 = $81 - 1 | 0;
         $83 = HEAP32[284 >> 2] | 0;
         $84 = $83 + $82 | 0;
         $85 = HEAP8[$84 >> 0] | 0;
         $86 = $85 & 255;
         $87 = $86 | 160;
         $88 = $87 & 255;
         HEAP8[$84 >> 0] = $88;
        }
       }
       $89 = $x;
       $90 = $89 & 255;
       $91 = ($90 | 0) < 14;
       if ($91) {
        $92 = $poff;
        $93 = $92 & 255;
        $94 = ($93 | 0) < 224;
        if ($94) {
         $95 = $poff;
         $96 = $95 & 255;
         $97 = $96 + 1 | 0;
         $98 = HEAP32[284 >> 2] | 0;
         $99 = $98 + $97 | 0;
         $100 = HEAP8[$99 >> 0] | 0;
         $101 = $100 & 255;
         $102 = $101 | 160;
         $103 = $102 & 255;
         HEAP8[$99 >> 0] = $103;
        }
       }
       $104 = $y;
       $105 = $104 & 255;
       $106 = ($105 | 0) != 0;
       if ($106) {
        $107 = $poff;
        $108 = $107 & 255;
        $109 = ($108 | 0) > 14;
        if ($109) {
         $110 = $poff;
         $111 = $110 & 255;
         $112 = $111 - 15 | 0;
         $113 = HEAP32[284 >> 2] | 0;
         $114 = $113 + $112 | 0;
         $115 = HEAP8[$114 >> 0] | 0;
         $116 = $115 & 255;
         $117 = $116 | 160;
         $118 = $117 & 255;
         HEAP8[$114 >> 0] = $118;
        }
       }
       $119 = $y;
       $120 = $119 & 255;
       $121 = ($120 | 0) < 14;
       if ($121) {
        $122 = $poff;
        $123 = $122 & 255;
        $124 = ($123 | 0) < 209;
        if ($124) {
         $125 = $poff;
         $126 = $125 & 255;
         $127 = $126 + 15 | 0;
         $128 = HEAP32[284 >> 2] | 0;
         $129 = $128 + $127 | 0;
         $130 = HEAP8[$129 >> 0] | 0;
         $131 = $130 & 255;
         $132 = $131 | 160;
         $133 = $132 & 255;
         HEAP8[$129 >> 0] = $133;
        }
       }
      }
     }
    }
   }
  }
  $134 = $i;
  $135 = $134 & 255;
  $136 = $135 + 1 | 0;
  $137 = $136 & 255;
  $i = $137;
 }
 STACKTOP = sp;
 return;
}

function _SearchRoad($sc, $xs, $ys, $ob, $xo, $yo) {
 $sc = $sc | 0;
 $xs = $xs | 0;
 $ys = $ys | 0;
 $ob = $ob | 0;
 $xo = $xo | 0;
 $yo = $yo | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ccount0 = 0, $ccount1 = 0, $cq = 0, $d = 0, $i = 0, $j = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $sc;
 $2 = $xs;
 $3 = $ys;
 $4 = $ob;
 $5 = $xo;
 $6 = $yo;
 $7 = HEAP32[384 >> 2] | 0;
 $8 = $7 + 200 | 0;
 $cq = $8;
 $9 = $1;
 $10 = $cq;
 $11 = _GetRoundSelfCity($9, $10) | 0;
 $ccount0 = $11;
 $12 = $ccount0;
 $13 = $12 << 24 >> 24 != 0;
 if (!$13) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;
  return $143 | 0;
 }
 $14 = $ccount0;
 $ccount1 = $14;
 while (1) {
  $i = 0;
  while (1) {
   $15 = $i;
   $16 = $15 & 255;
   $17 = $ccount0;
   $18 = $17 & 255;
   $19 = ($16 | 0) < ($18 | 0);
   if (!$19) {
    break;
   }
   $20 = $i;
   $21 = $20 & 255;
   $22 = $cq;
   $23 = $22 + $21 | 0;
   $24 = HEAP8[$23 >> 0] | 0;
   $25 = $ccount1;
   $26 = $25 & 255;
   $27 = $cq;
   $28 = $27 + $26 | 0;
   $29 = _GetRoundSelfCity($24, $28) | 0;
   $30 = $29 & 255;
   $31 = $ccount1;
   $32 = $31 & 255;
   $33 = $32 + $30 | 0;
   $34 = $33 & 255;
   $ccount1 = $34;
   $35 = $i;
   $36 = $35 + 1 << 24 >> 24;
   $i = $36;
  }
  $i = 0;
  while (1) {
   $37 = $i;
   $38 = $37 & 255;
   $39 = $ccount1;
   $40 = $39 & 255;
   $41 = ($38 | 0) < ($40 | 0);
   if (!$41) {
    break;
   }
   $42 = $i;
   $43 = $42 & 255;
   $44 = $43 + 1 | 0;
   $45 = $44 & 255;
   $j = $45;
   while (1) {
    $46 = $j;
    $47 = $46 & 255;
    $48 = $ccount1;
    $49 = $48 & 255;
    $50 = ($47 | 0) < ($49 | 0);
    $51 = $i;
    if (!$50) {
     break;
    }
    $52 = $51 & 255;
    $53 = $cq;
    $54 = $53 + $52 | 0;
    $55 = HEAP8[$54 >> 0] | 0;
    $56 = $55 & 255;
    $57 = $j;
    $58 = $57 & 255;
    $59 = $cq;
    $60 = $59 + $58 | 0;
    $61 = HEAP8[$60 >> 0] | 0;
    $62 = $61 & 255;
    $63 = ($56 | 0) == ($62 | 0);
    if ($63) {
     $64 = $ccount1;
     $65 = $64 & 255;
     $66 = $65 - 1 | 0;
     $67 = $66 & 255;
     $ccount1 = $67;
     $68 = $ccount1;
     $69 = $68 & 255;
     $70 = $cq;
     $71 = $70 + $69 | 0;
     $72 = HEAP8[$71 >> 0] | 0;
     $73 = $j;
     $74 = $73 & 255;
     $75 = $cq;
     $76 = $75 + $74 | 0;
     HEAP8[$76 >> 0] = $72;
     continue;
    } else {
     $77 = $j;
     $78 = $77 & 255;
     $79 = $78 + 1 | 0;
     $80 = $79 & 255;
     $j = $80;
     continue;
    }
   }
   $81 = $51 + 1 << 24 >> 24;
   $i = $81;
  }
  $82 = $ccount1;
  $83 = $82 & 255;
  $84 = $ccount0;
  $85 = $84 & 255;
  $86 = ($83 | 0) == ($85 | 0);
  if ($86) {
   break;
  }
  $87 = $ccount1;
  $ccount0 = $87;
 }
 $i = 0;
 while (1) {
  $88 = $i;
  $89 = $88 & 255;
  $90 = $ccount0;
  $91 = $90 & 255;
  $92 = ($89 | 0) < ($91 | 0);
  if (!$92) {
   label = 28;
   break;
  }
  $93 = $i;
  $94 = $93 & 255;
  $95 = $cq;
  $96 = $95 + $94 | 0;
  $97 = HEAP8[$96 >> 0] | 0;
  $98 = $97 & 255;
  $99 = $4;
  $100 = $99 & 255;
  $101 = ($98 | 0) == ($100 | 0);
  if ($101) {
   break;
  }
  $141 = $i;
  $142 = $141 + 1 << 24 >> 24;
  $i = $142;
 }
 if ((label | 0) == 28) {
  $0 = -1;
  $143 = $0;
  STACKTOP = sp;
  return $143 | 0;
 }
 $102 = $6;
 $103 = $102 & 255;
 $104 = $3;
 $105 = $104 & 255;
 $106 = ($103 | 0) > ($105 | 0);
 if ($106) {
  $107 = $6;
  $108 = $107 & 255;
  $109 = $3;
  $110 = $109 & 255;
  $111 = $108 - $110 | 0;
  $112 = $111 & 255;
  $d = $112;
 } else {
  $113 = $3;
  $114 = $113 & 255;
  $115 = $6;
  $116 = $115 & 255;
  $117 = $114 - $116 | 0;
  $118 = $117 & 255;
  $d = $118;
 }
 $119 = $5;
 $120 = $119 & 255;
 $121 = $2;
 $122 = $121 & 255;
 $123 = ($120 | 0) > ($122 | 0);
 $124 = $d;
 $125 = $124 & 255;
 if ($123) {
  $126 = $5;
  $127 = $126 & 255;
  $128 = $125 + $127 | 0;
  $129 = $2;
  $130 = $129 & 255;
  $131 = $128 - $130 | 0;
  $132 = $131 & 255;
  $d = $132;
 } else {
  $133 = $2;
  $134 = $133 & 255;
  $135 = $125 + $134 | 0;
  $136 = $5;
  $137 = $136 & 255;
  $138 = $135 - $137 | 0;
  $139 = $138 & 255;
  $d = $139;
 }
 $140 = $d;
 $0 = $140;
 $143 = $0;
 STACKTOP = sp;
 return $143 | 0;
}

function _FgtJiNeng($pcmd) {
 $pcmd = $pcmd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arms = 0, $i = 0, $id = 0, $idx = 0, $per = 0, $pos = 0, $ranv = 0, $same = 0, $skidx = 0, $sklbuf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $sklbuf = sp + 17 | 0;
 $1 = $pcmd;
 $2 = $1;
 $3 = $2 + 2 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $idx = $4;
 $5 = $idx;
 $6 = $5 & 255;
 $7 = 3500 + ($6 * 7 | 0) | 0;
 $8 = $7 + 6 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $10 = $9 & 255;
 $11 = 2 == ($10 | 0);
 if ($11) {
  $0 = 0;
  $129 = $0;
  STACKTOP = sp;
  return $129 | 0;
 }
 $12 = $idx;
 $13 = _TransIdxToGen3($12) | 0;
 $id = $13;
 $14 = $id;
 $15 = $14 & 255;
 $16 = HEAP32[332 >> 2] | 0;
 $17 = $16 + ($15 * 15 | 0) | 0;
 $per = $17;
 $18 = _rand() | 0;
 $19 = $18 & 65535;
 $ranv = $19;
 $20 = $ranv;
 $21 = $20 & 65535;
 $22 = ($21 | 0) % 150 & -1;
 $23 = $per;
 $24 = $23 + 4 | 0;
 $25 = HEAP8[$24 >> 0] | 0;
 $26 = $25 & 255;
 $27 = ($22 | 0) > ($26 | 0);
 if ($27) {
  $0 = 0;
  $129 = $0;
  STACKTOP = sp;
  return $129 | 0;
 }
 $28 = $per;
 $29 = $28 + 9 | 0;
 $30 = HEAP8[$29 >> 0] | 0;
 $31 = $30 & 255;
 $32 = ($31 | 0) != 5;
 if ($32) {
  $33 = $id;
  $34 = _PlcArmsMax($33) | 0;
  $arms = $34;
  $35 = $arms;
  $36 = $35 & 65535;
  $37 = $36 >> 1;
  $38 = $arms;
  $39 = $38 & 65535;
  $40 = $39 + $37 | 0;
  $41 = $40 & 65535;
  $arms = $41;
  $42 = _rand() | 0;
  $43 = $arms;
  $44 = $43 & 65535;
  $45 = ($42 | 0) % ($44 | 0) & -1;
  $46 = $per;
  $47 = $46 + 10 | 0;
  $48 = HEAPU8[$47 >> 0] | HEAPU8[$47 + 1 >> 0] << 8;
  $49 = $48 & 65535;
  $50 = ($45 | 0) < ($49 | 0);
  if ($50) {
   $0 = 0;
   $129 = $0;
   STACKTOP = sp;
   return $129 | 0;
  }
 }
 $51 = $id;
 _FgtGetSklBuf($51, $sklbuf);
 $52 = $ranv;
 $53 = $52 & 65535;
 $54 = _strlen($sklbuf) | 0;
 $55 = ($53 >>> 0) % ($54 >>> 0) & -1;
 $56 = $55 & 255;
 $skidx = $56;
 $57 = $skidx;
 $58 = $57 & 255;
 $59 = $sklbuf + $58 | 0;
 $60 = HEAP8[$59 >> 0] | 0;
 $skidx = $60;
 $61 = $skidx;
 $62 = $idx;
 $63 = _FgtCanUse($61, $62) | 0;
 $64 = $63 << 24 >> 24 != 0;
 if ($64) {
  $0 = 0;
  $129 = $0;
  STACKTOP = sp;
  return $129 | 0;
 }
 $65 = $skidx;
 $66 = $idx;
 _FgtGetCmdRng(1, $65, $66);
 $i = 0;
 while (1) {
  $67 = $i;
  $68 = $67 & 255;
  $69 = ($68 | 0) < 20;
  if (!$69) {
   label = 23;
   break;
  }
  $70 = $i;
  $71 = $70 & 255;
  $72 = 3500 + ($71 * 7 | 0) | 0;
  $pos = $72;
  $73 = $pos;
  $74 = $73 + 6 | 0;
  $75 = HEAP8[$74 >> 0] | 0;
  $76 = $75 & 255;
  $77 = 8 == ($76 | 0);
  if (!$77) {
   $78 = $pos;
   $79 = HEAP8[$78 >> 0] | 0;
   $80 = $pos;
   $81 = $80 + 1 | 0;
   $82 = HEAP8[$81 >> 0] | 0;
   $83 = _FgtChkAkRng($79, $82) | 0;
   $84 = $83 << 24 >> 24 != 0;
   if ($84) {
    $85 = $i;
    $86 = $85 & 255;
    $87 = ($86 | 0) >= 10;
    if ($87) {
     $same = 1;
    } else {
     $same = 0;
    }
    $88 = $skidx;
    $89 = $same;
    $90 = $i;
    $91 = _FgtJNChkAim($88, $89, $90) | 0;
    $92 = $91 << 24 >> 24 != 0;
    if ($92) {
     $93 = $skidx;
     $94 = $93 & 255;
     $95 = ($94 | 0) == 17;
     if (!$95) {
      $96 = $skidx;
      $97 = $96 & 255;
      $98 = ($97 | 0) == 29;
      if (!$98) {
       label = 21;
       break;
      }
     }
     $99 = $i;
     $100 = $99 & 255;
     $101 = 3480 + $100 | 0;
     $102 = HEAP8[$101 >> 0] | 0;
     $103 = $102 & 255;
     $104 = $103 - 1 | 0;
     $105 = $104 & 255;
     $id = $105;
     $106 = $id;
     $107 = _PlcArmsMax($106) | 0;
     $108 = $107 & 65535;
     $109 = $108 >> 1;
     $110 = $109 & 65535;
     $arms = $110;
     $111 = $arms;
     $112 = $111 & 65535;
     $113 = $112 >> 1;
     $114 = $arms;
     $115 = $114 & 65535;
     $116 = $115 + $113 | 0;
     $117 = $116 & 65535;
     $arms = $117;
    }
   }
  }
  $125 = $i;
  $126 = $125 & 255;
  $127 = $126 + 1 | 0;
  $128 = $127 & 255;
  $i = $128;
 }
 if ((label | 0) == 21) {
  $118 = $1;
  HEAP8[$118 >> 0] = 1;
  $119 = $i;
  $120 = $1;
  $121 = $120 + 3 | 0;
  HEAP8[$121 >> 0] = $119;
  $122 = $skidx;
  $123 = $1;
  $124 = $123 + 1 | 0;
  HEAP8[$124 >> 0] = $122;
  $0 = 1;
  $129 = $0;
  STACKTOP = sp;
  return $129 | 0;
 } else if ((label | 0) == 23) {
  $0 = 0;
  $129 = $0;
  STACKTOP = sp;
  return $129 | 0;
 }
 return 0 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 >>> 0 < $3 >>> 0;
 if ($4) {
  $5 = $1 + 1 | 0;
  HEAP32[$0 >> 2] = $5;
  $6 = HEAP8[$1 >> 0] | 0;
  $7 = $6 & 255;
  $10 = $7;
 } else {
  $8 = ___shgetc($f) | 0;
  $10 = $8;
 }
 $9 = ($10 | 0) == 45;
 switch ($10 | 0) {
 case 43:
 case 45:
  {
   $11 = $9 & 1;
   $12 = HEAP32[$0 >> 2] | 0;
   $13 = HEAP32[$2 >> 2] | 0;
   $14 = $12 >>> 0 < $13 >>> 0;
   if ($14) {
    $15 = $12 + 1 | 0;
    HEAP32[$0 >> 2] = $15;
    $16 = HEAP8[$12 >> 0] | 0;
    $17 = $16 & 255;
    $20 = $17;
   } else {
    $18 = ___shgetc($f) | 0;
    $20 = $18;
   }
   $19 = $20 + -48 | 0;
   $21 = $19 >>> 0 > 9;
   $22 = ($pok | 0) != 0;
   $or$cond3 = $22 & $21;
   if ($or$cond3) {
    $23 = HEAP32[$2 >> 2] | 0;
    $24 = ($23 | 0) == (0 | 0);
    if ($24) {
     $c$0 = $20;
     $neg$0 = $11;
    } else {
     $25 = HEAP32[$0 >> 2] | 0;
     $26 = $25 + -1 | 0;
     HEAP32[$0 >> 2] = $26;
     $c$0 = $20;
     $neg$0 = $11;
    }
   } else {
    $c$0 = $20;
    $neg$0 = $11;
   }
   break;
  }
 default:
  {
   $c$0 = $10;
   $neg$0 = 0;
  }
 }
 $27 = $c$0 + -48 | 0;
 $28 = $27 >>> 0 > 9;
 if ($28) {
  $29 = HEAP32[$2 >> 2] | 0;
  $30 = ($29 | 0) == (0 | 0);
  if ($30) {
   $98 = -2147483648;
   $99 = 0;
  } else {
   $31 = HEAP32[$0 >> 2] | 0;
   $32 = $31 + -1 | 0;
   HEAP32[$0 >> 2] = $32;
   $98 = -2147483648;
   $99 = 0;
  }
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
  while (1) {
   $33 = $x$013 * 10 | 0;
   $34 = $c$112 + -48 | 0;
   $35 = $34 + $33 | 0;
   $36 = HEAP32[$0 >> 2] | 0;
   $37 = HEAP32[$2 >> 2] | 0;
   $38 = $36 >>> 0 < $37 >>> 0;
   if ($38) {
    $39 = $36 + 1 | 0;
    HEAP32[$0 >> 2] = $39;
    $40 = HEAP8[$36 >> 0] | 0;
    $41 = $40 & 255;
    $c$1$be = $41;
   } else {
    $42 = ___shgetc($f) | 0;
    $c$1$be = $42;
   }
   $43 = $c$1$be + -48 | 0;
   $44 = $43 >>> 0 < 10;
   $45 = ($35 | 0) < 214748364;
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;
    $x$013 = $35;
   } else {
    $$lcssa22 = $35;
    $c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22 | 0) < 0;
  $48 = $47 << 31 >> 31;
  $49 = $c$1$be$lcssa + -48 | 0;
  $50 = $49 >>> 0 < 10;
  if ($50) {
   $53 = $$lcssa22;
   $54 = $48;
   $c$27 = $c$1$be$lcssa;
   while (1) {
    $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0;
    $56 = tempRet0;
    $57 = ($c$27 | 0) < 0;
    $58 = $57 << 31 >> 31;
    $59 = _i64Add($c$27 | 0, $58 | 0, -48, -1) | 0;
    $60 = tempRet0;
    $61 = _i64Add($59 | 0, $60 | 0, $55 | 0, $56 | 0) | 0;
    $62 = tempRet0;
    $63 = HEAP32[$0 >> 2] | 0;
    $64 = HEAP32[$2 >> 2] | 0;
    $65 = $63 >>> 0 < $64 >>> 0;
    if ($65) {
     $66 = $63 + 1 | 0;
     HEAP32[$0 >> 2] = $66;
     $67 = HEAP8[$63 >> 0] | 0;
     $68 = $67 & 255;
     $c$2$be = $68;
    } else {
     $69 = ___shgetc($f) | 0;
     $c$2$be = $69;
    }
    $70 = $c$2$be + -48 | 0;
    $71 = $70 >>> 0 < 10;
    $72 = ($62 | 0) < 21474836;
    $73 = $61 >>> 0 < 2061584302;
    $74 = ($62 | 0) == 21474836;
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;
     $54 = $62;
     $c$27 = $c$2$be;
    } else {
     $92 = $61;
     $93 = $62;
     $c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;
   $93 = $48;
   $c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = $c$2$lcssa + -48 | 0;
  $52 = $51 >>> 0 < 10;
  if ($52) {
   while (1) {
    $78 = HEAP32[$0 >> 2] | 0;
    $79 = HEAP32[$2 >> 2] | 0;
    $80 = $78 >>> 0 < $79 >>> 0;
    if ($80) {
     $81 = $78 + 1 | 0;
     HEAP32[$0 >> 2] = $81;
     $82 = HEAP8[$78 >> 0] | 0;
     $83 = $82 & 255;
     $c$3$be = $83;
    } else {
     $84 = ___shgetc($f) | 0;
     $c$3$be = $84;
    }
    $85 = $c$3$be + -48 | 0;
    $86 = $85 >>> 0 < 10;
    if (!$86) {
     break;
    }
   }
  }
  $87 = HEAP32[$2 >> 2] | 0;
  $88 = ($87 | 0) == (0 | 0);
  if (!$88) {
   $89 = HEAP32[$0 >> 2] | 0;
   $90 = $89 + -1 | 0;
   HEAP32[$0 >> 2] = $90;
  }
  $91 = ($neg$0 | 0) != 0;
  $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0;
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;
  $99 = $96;
 }
 tempRet0 = $98;
 return $99 | 0;
}
function _FgtIntMap() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cx = 0, $cy = 0, $i = 0, $lp = 0, $ptr = 0, $sx = 0, $sy = 0, $tmp = 0, $tptr = 0, $way = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = HEAPU8[3474 >> 0] | HEAPU8[3474 + 1 >> 0] << 8;
 $2 = _FgtLoadToCon($1, 1) | 0;
 $ptr = $2;
 $3 = $ptr;
 $4 = (0 | 0) == ($3 | 0);
 if ($4) {
  HEAP8[3446 >> 0] = 1;
  $0 = 1;
  $138 = $0;
  STACKTOP = sp;
  return $138 | 0;
 }
 $5 = $ptr;
 $6 = HEAP8[$5 >> 0] | 0;
 HEAP8[3451 >> 0] = $6;
 $7 = $ptr;
 $8 = $7 + 2 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 HEAP8[3452 >> 0] = $9;
 HEAP8[3447 >> 0] = 4 & 255;
 HEAP8[3447 + 1 >> 0] = 4 >> 8;
 $10 = $ptr;
 $11 = $10 + 16 | 0;
 $ptr = $11;
 $lp = 0;
 while (1) {
  $12 = $lp;
  $13 = $12 & 65535;
  $14 = $ptr;
  $15 = $14 + $13 | 0;
  $16 = HEAP8[$15 >> 0] | 0;
  $17 = $16 & 255;
  $18 = 3 != ($17 | 0);
  $19 = $lp;
  $20 = $19 & 65535;
  if (!$18) {
   break;
  }
  $21 = $20 + 1 | 0;
  $22 = $21 & 65535;
  $lp = $22;
 }
 $23 = HEAP8[3451 >> 0] | 0;
 $24 = $23 & 255;
 $25 = ($20 | 0) % ($24 | 0) & -1;
 $26 = $25 & 255;
 HEAP8[3463 >> 0] = $26;
 $27 = $lp;
 $28 = $27 & 65535;
 $29 = HEAP8[3451 >> 0] | 0;
 $30 = $29 & 255;
 $31 = ($28 | 0) / ($30 | 0) & -1;
 $32 = $31 & 255;
 HEAP8[3464 >> 0] = $32;
 $33 = HEAP8[3463 >> 0] | 0;
 $34 = $33 & 255;
 $35 = $34 - 2 | 0;
 $36 = $35 & 65535;
 $cx = $36;
 $37 = HEAP8[3464 >> 0] | 0;
 $38 = $37 & 255;
 $39 = $38 - 2 | 0;
 $40 = $39 & 65535;
 $cy = $40;
 $41 = _FgtGetBaseXY(120) | 0;
 $sx = $41;
 $42 = _FgtGetBaseXY(121) | 0;
 $sy = $42;
 $tmp = 8;
 $43 = HEAP8[3473 >> 0] | 0;
 $way = $43;
 $44 = HEAP8[3472 >> 0] | 0;
 $45 = $44 & 255;
 $46 = 1 == ($45 | 0);
 if ($46) {
  $47 = $cx;
  $48 = $47 & 255;
  $tmp = $48;
  $49 = $sx;
  $50 = $49 & 255;
  $cx = $50;
  $51 = $tmp;
  $sx = $51;
  $52 = $cy;
  $53 = $52 & 255;
  $tmp = $53;
  $54 = $sy;
  $55 = $54 & 255;
  $cy = $55;
  $56 = $tmp;
  $sy = $56;
  $57 = $way;
  $tmp = $57;
  $way = 8;
 }
 $58 = _FgtLoadToCon(2, 5) | 0;
 $ptr = $58;
 $59 = $ptr;
 $60 = $way;
 $61 = $60 & 255;
 $62 = $61 * 20 | 0;
 $63 = $59 + $62 | 0;
 $tptr = $63;
 $64 = $tmp;
 $65 = $64 & 255;
 $66 = $65 * 20 | 0;
 $67 = $ptr;
 $68 = $67 + $66 | 0;
 $ptr = $68;
 $i = 0;
 while (1) {
  $69 = $i;
  $70 = $69 & 255;
  $71 = ($70 | 0) < 10;
  if (!$71) {
   break;
  }
  $72 = $i;
  $73 = $72 & 255;
  $74 = $73 << 1;
  $75 = $74 & 255;
  $tmp = $75;
  $76 = $cx;
  $77 = $76 & 65535;
  $78 = $tmp;
  $79 = $78 & 255;
  $80 = $ptr;
  $81 = $80 + $79 | 0;
  $82 = HEAP8[$81 >> 0] | 0;
  $83 = $82 & 255;
  $84 = $77 + $83 | 0;
  $85 = $84 & 255;
  $86 = $i;
  $87 = $86 & 255;
  $88 = 3500 + ($87 * 7 | 0) | 0;
  HEAP8[$88 >> 0] = $85;
  $89 = $cy;
  $90 = $89 & 65535;
  $91 = $tmp;
  $92 = $91 & 255;
  $93 = $92 + 1 | 0;
  $94 = $ptr;
  $95 = $94 + $93 | 0;
  $96 = HEAP8[$95 >> 0] | 0;
  $97 = $96 & 255;
  $98 = $90 + $97 | 0;
  $99 = $98 & 255;
  $100 = $i;
  $101 = $100 & 255;
  $102 = 3500 + ($101 * 7 | 0) | 0;
  $103 = $102 + 1 | 0;
  HEAP8[$103 >> 0] = $99;
  $104 = $sx;
  $105 = $104 & 255;
  $106 = $tmp;
  $107 = $106 & 255;
  $108 = $tptr;
  $109 = $108 + $107 | 0;
  $110 = HEAP8[$109 >> 0] | 0;
  $111 = $110 & 255;
  $112 = $105 + $111 | 0;
  $113 = $112 & 255;
  $114 = $i;
  $115 = $114 & 255;
  $116 = $115 + 10 | 0;
  $117 = 3500 + ($116 * 7 | 0) | 0;
  HEAP8[$117 >> 0] = $113;
  $118 = $sy;
  $119 = $118 & 255;
  $120 = $tmp;
  $121 = $120 & 255;
  $122 = $121 + 1 | 0;
  $123 = $tptr;
  $124 = $123 + $122 | 0;
  $125 = HEAP8[$124 >> 0] | 0;
  $126 = $125 & 255;
  $127 = $119 + $126 | 0;
  $128 = $127 & 255;
  $129 = $i;
  $130 = $129 & 255;
  $131 = $130 + 10 | 0;
  $132 = 3500 + ($131 * 7 | 0) | 0;
  $133 = $132 + 1 | 0;
  HEAP8[$133 >> 0] = $128;
  $134 = $i;
  $135 = $134 & 255;
  $136 = $135 + 1 | 0;
  $137 = $136 & 255;
  $i = $137;
 }
 $0 = 0;
 $138 = $0;
 STACKTOP = sp;
 return $138 | 0;
}

function _GamePictureDummy($sX, $sY, $eX, $eY, $pic, $scr, $flag) {
 $sX = $sX | 0;
 $sY = $sY | 0;
 $eX = $eX | 0;
 $eY = $eY | 0;
 $pic = $pic | 0;
 $scr = $scr | 0;
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $X = 0, $Y = 0, $hgt = 0, $ind = 0, $mask = 0, $picPerLine = 0, $pixel = 0, $pixel1 = 0, $scrPerLine = 0, $wid = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $0 = $sX;
 $1 = $sY;
 $2 = $eX;
 $3 = $eY;
 $4 = $pic;
 $5 = $scr;
 $6 = $flag;
 $7 = $2;
 $8 = $7 & 255;
 $9 = $0;
 $10 = $9 & 255;
 $11 = $8 - $10 | 0;
 $12 = $11 + 1 | 0;
 $wid = $12;
 $13 = $3;
 $14 = $13 & 255;
 $15 = $1;
 $16 = $15 & 255;
 $17 = $14 - $16 | 0;
 $18 = $17 + 1 | 0;
 $hgt = $18;
 $scrPerLine = 20;
 $19 = $wid;
 $20 = $19 + 7 | 0;
 $21 = ($20 | 0) / 8 & -1;
 $picPerLine = $21;
 $y = 0;
 while (1) {
  $22 = $y;
  $23 = $hgt;
  $24 = ($22 | 0) < ($23 | 0);
  if (!$24) {
   break;
  }
  $25 = $1;
  $26 = $25 & 255;
  $27 = $y;
  $28 = $26 + $27 | 0;
  $Y = $28;
  $x = 0;
  while (1) {
   $29 = $x;
   $30 = $wid;
   $31 = ($29 | 0) < ($30 | 0);
   if (!$31) {
    break;
   }
   $32 = $0;
   $33 = $32 & 255;
   $34 = $x;
   $35 = $33 + $34 | 0;
   $X = $35;
   $36 = $scrPerLine;
   $37 = $Y;
   $38 = Math_imul($36, $37) | 0;
   $39 = $X;
   $40 = ($39 | 0) / 8 & -1;
   $41 = $38 + $40 | 0;
   $ind = $41;
   $42 = $6;
   $43 = $42 & 255;
   $44 = ($43 | 0) == 4;
   L7 : do {
    if ($44) {
     $pixel1 = 0;
    } else {
     $45 = $4;
     $46 = ($45 | 0) != (0 | 0);
     if ($46) {
      $47 = $picPerLine;
      $48 = $y;
      $49 = Math_imul($47, $48) | 0;
      $50 = $x;
      $51 = ($50 | 0) / 8 & -1;
      $52 = $49 + $51 | 0;
      $53 = $4;
      $54 = $53 + $52 | 0;
      $55 = HEAP8[$54 >> 0] | 0;
      $56 = $55 & 255;
      $57 = $x;
      $58 = ($57 | 0) % 8 & -1;
      $59 = 128 >> $58;
      $60 = $56 & $59;
      $61 = $60 & 255;
      $pixel = $61;
     } else {
      $pixel = 0;
     }
     $62 = $ind;
     $63 = $5;
     $64 = $63 + $62 | 0;
     $65 = HEAP8[$64 >> 0] | 0;
     $66 = $65 & 255;
     $67 = $X;
     $68 = ($67 | 0) % 8 & -1;
     $69 = 128 >> $68;
     $70 = $66 & $69;
     $71 = $70 & 255;
     $pixel1 = $71;
     $72 = $6;
     $73 = $72 & 255;
     switch ($73 | 0) {
     case 0:
      {
       $74 = $pixel;
       $pixel1 = $74;
       break L7;
       break;
      }
     case 1:
      {
       $75 = $pixel;
       $76 = $75 & 255;
       $77 = ($76 | 0) != 0;
       if ($77) {
        $78 = $pixel1;
        $79 = $78 & 255;
        $80 = ($79 | 0) != 0;
        $82 = $80;
       } else {
        $82 = 0;
       }
       $81 = $82 & 1;
       $83 = $81 & 255;
       $pixel1 = $83;
       break L7;
       break;
      }
     case 2:
      {
       $84 = $pixel;
       $85 = $84 & 255;
       $86 = ($85 | 0) != 0;
       if ($86) {
        $91 = 1;
       } else {
        $87 = $pixel1;
        $88 = $87 & 255;
        $89 = ($88 | 0) != 0;
        $91 = $89;
       }
       $90 = $91 & 1;
       $92 = $90 & 255;
       $pixel1 = $92;
       break L7;
       break;
      }
     default:
      {
       break L7;
      }
     }
    }
   } while (0);
   $93 = $X;
   $94 = ($93 | 0) % 8 & -1;
   $95 = 7 - $94 | 0;
   $96 = 1 << $95;
   $mask = $96;
   $97 = $pixel1;
   $98 = $97 & 255;
   $99 = ($98 | 0) != 0;
   $100 = $mask;
   $101 = $99 ? $100 : 0;
   $102 = $101 & 255;
   $pixel1 = $102;
   $103 = $ind;
   $104 = $5;
   $105 = $104 + $103 | 0;
   $106 = HEAP8[$105 >> 0] | 0;
   $107 = $106 & 255;
   $108 = $mask;
   $109 = $108 ^ -1;
   $110 = $107 & $109;
   $111 = $pixel1;
   $112 = $111 & 255;
   $113 = $110 | $112;
   $114 = $113 & 255;
   $115 = $ind;
   $116 = $5;
   $117 = $116 + $115 | 0;
   HEAP8[$117 >> 0] = $114;
   $118 = $x;
   $119 = $118 + 1 | 0;
   $x = $119;
  }
  $120 = $y;
  $121 = $120 + 1 | 0;
  $y = $121;
 }
 STACKTOP = sp;
 return;
}

function _GetWeekCity($count, $cqueue) {
 $count = $count | 0;
 $cqueue = $cqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $armst = 0, $armsw = 0, $c = 0, $cptr = 0, $cw = 0, $i = 0, $inode = 0, $o = 0, $p = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $count;
 $1 = $cqueue;
 $cw = 0;
 $2 = HEAP32[396 >> 2] | 0;
 $inode = $2;
 $armsw = -1;
 $c = 0;
 while (1) {
  $3 = $c;
  $4 = $3 & 255;
  $5 = $0;
  $6 = $5 & 255;
  $7 = ($4 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $c;
  $9 = $8 & 255;
  $10 = $1;
  $11 = $10 + $9 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $13 = $12 & 255;
  $14 = 3645 + ($13 * 31 | 0) | 0;
  $cptr = $14;
  $armst = 0;
  $i = 0;
  while (1) {
   $15 = $i;
   $16 = $15 & 255;
   $17 = $cptr;
   $18 = $17 + 28 | 0;
   $19 = HEAP8[$18 >> 0] | 0;
   $20 = $19 & 255;
   $21 = ($16 | 0) < ($20 | 0);
   if (!$21) {
    break;
   }
   $22 = $cptr;
   $23 = $22 + 27 | 0;
   $24 = HEAP8[$23 >> 0] | 0;
   $25 = $24 & 255;
   $26 = $i;
   $27 = $26 & 255;
   $28 = $25 + $27 | 0;
   $29 = 4823 + $28 | 0;
   $30 = HEAP8[$29 >> 0] | 0;
   $p = $30;
   $31 = $p;
   $32 = $31 & 255;
   $33 = HEAP32[332 >> 2] | 0;
   $34 = $33 + ($32 * 15 | 0) | 0;
   $35 = $34 + 1 | 0;
   $36 = HEAP8[$35 >> 0] | 0;
   $37 = $36 & 255;
   $38 = $cptr;
   $39 = $38 + 1 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   $41 = $40 & 255;
   $42 = ($37 | 0) == ($41 | 0);
   if ($42) {
    $43 = $p;
    $44 = $43 & 255;
    $45 = HEAP32[332 >> 2] | 0;
    $46 = $45 + ($44 * 15 | 0) | 0;
    $47 = $46 + 10 | 0;
    $48 = HEAPU8[$47 >> 0] | HEAPU8[$47 + 1 >> 0] << 8;
    $49 = $48 & 65535;
    $50 = $armst;
    $51 = $50 & 65535;
    $52 = $51 + $49 | 0;
    $53 = $52 & 65535;
    $armst = $53;
   }
   $54 = $i;
   $55 = $54 + 1 << 24 >> 24;
   $i = $55;
  }
  $i = 0;
  while (1) {
   $56 = $i;
   $57 = $56 & 255;
   $58 = ($57 | 0) < 100;
   if (!$58) {
    break;
   }
   $59 = $i;
   $60 = $59 & 255;
   $61 = $inode;
   $62 = $61 + ($60 * 12 | 0) | 0;
   $63 = HEAP8[$62 >> 0] | 0;
   $o = $63;
   $64 = $o;
   $65 = $64 & 255;
   $66 = 255 == ($65 | 0);
   if (!$66) {
    $67 = $o;
    $68 = $67 & 255;
    $69 = ($68 | 0) != 14;
    if ($69) {
     $70 = $o;
     $71 = $70 & 255;
     $72 = ($71 | 0) != 27;
     if ($72) {
      $73 = $i;
      $74 = $73 & 255;
      $75 = $inode;
      $76 = $75 + ($74 * 12 | 0) | 0;
      $77 = $76 + 2 | 0;
      $78 = HEAP8[$77 >> 0] | 0;
      $79 = $78 & 255;
      $80 = $c;
      $81 = $80 & 255;
      $82 = $1;
      $83 = $82 + $81 | 0;
      $84 = HEAP8[$83 >> 0] | 0;
      $85 = $84 & 255;
      $86 = ($79 | 0) == ($85 | 0);
      if ($86) {
       $87 = $i;
       $88 = $87 & 255;
       $89 = $inode;
       $90 = $89 + ($88 * 12 | 0) | 0;
       $91 = $90 + 1 | 0;
       $92 = HEAP8[$91 >> 0] | 0;
       $93 = $92 & 255;
       $94 = HEAP32[332 >> 2] | 0;
       $95 = $94 + ($93 * 15 | 0) | 0;
       $96 = $95 + 10 | 0;
       $97 = HEAPU8[$96 >> 0] | HEAPU8[$96 + 1 >> 0] << 8;
       $98 = $97 & 65535;
       $99 = $armst;
       $100 = $99 & 65535;
       $101 = $100 + $98 | 0;
       $102 = $101 & 65535;
       $armst = $102;
      }
     }
    }
   }
   $103 = $i;
   $104 = $103 + 1 << 24 >> 24;
   $i = $104;
  }
  $105 = $armsw;
  $106 = $105 & 65535;
  $107 = $armst;
  $108 = $107 & 65535;
  $109 = ($106 | 0) > ($108 | 0);
  if ($109) {
   $110 = $armst;
   $armsw = $110;
   $111 = $c;
   $cw = $111;
  }
  $112 = $c;
  $113 = $112 + 1 << 24 >> 24;
  $c = $113;
 }
 $114 = $cw;
 $115 = $114 & 255;
 $116 = $1;
 $117 = $116 + $115 | 0;
 $118 = HEAP8[$117 >> 0] | 0;
 STACKTOP = sp;
 return $118 | 0;
}

function _BuiltAtkAttr($idx, $pIdx) {
 $idx = $idx | 0;
 $pIdx = $pIdx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0.0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $at = 0, $df = 0, $mModu = 0, $mptr = 0, $pAtk = 0, $pGen = 0, $pTer = 0, $pTyp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $idx;
 $1 = $pIdx;
 $2 = $1;
 $3 = _TransIdxToGen($2) | 0;
 $pGen = $3;
 $4 = $pGen;
 $5 = $4 & 255;
 $6 = ($5 | 0) > 199;
 if ($6) {
  STACKTOP = sp;
  return;
 }
 $7 = $0;
 $8 = $7 & 255;
 $9 = 292 + ($8 * 20 | 0) | 0;
 $pAtk = $9;
 $10 = $pGen;
 $11 = $10 & 255;
 $12 = HEAP32[332 >> 2] | 0;
 $13 = $12 + ($11 * 15 | 0) | 0;
 $pTyp = $13;
 $14 = $pTyp;
 $15 = $14 + 2 | 0;
 $16 = $pAtk;
 HEAP32[$16 >> 2] = $15;
 $17 = $pTyp;
 $18 = $17 + 4 | 0;
 $19 = HEAP8[$18 >> 0] | 0;
 $20 = $19 & 255;
 $21 = $pTyp;
 $22 = $21 + 2 | 0;
 $23 = HEAP8[$22 >> 0] | 0;
 $24 = $23 & 255;
 $25 = $20 + $24 | 0;
 $26 = $25 + 5 | 0;
 $27 = $26 & 255;
 $28 = $pAtk;
 $29 = $28 + 4 | 0;
 HEAP8[$29 >> 0] = $27;
 $30 = $1;
 $31 = $30 & 255;
 $32 = 3500 + ($31 * 7 | 0) | 0;
 $33 = HEAP8[$32 >> 0] | 0;
 $34 = $1;
 $35 = $34 & 255;
 $36 = 3500 + ($35 * 7 | 0) | 0;
 $37 = $36 + 1 | 0;
 $38 = HEAP8[$37 >> 0] | 0;
 $39 = _FgtGetTerrain($33, $38) | 0;
 $pTer = $39;
 $40 = $pTer;
 $41 = $pAtk;
 $42 = $41 + 5 | 0;
 HEAP8[$42 >> 0] = $40;
 $43 = $pAtk;
 $44 = $43 + 6 | 0;
 HEAP8[$44 >> 0] = 0;
 $45 = $pTyp;
 $46 = $45 + 9 | 0;
 $47 = HEAP8[$46 >> 0] | 0;
 $pGen = $47;
 $48 = $pGen;
 $49 = $pAtk;
 $50 = $49 + 7 | 0;
 HEAP8[$50 >> 0] = $48;
 $51 = $pTyp;
 $52 = $51 + 10 | 0;
 $53 = $pAtk;
 $54 = $53 + 12 | 0;
 HEAP32[$54 >> 2] = $52;
 $55 = $pTyp;
 $56 = $55 + 7 | 0;
 $57 = $pAtk;
 $58 = $57 + 8 | 0;
 HEAP32[$58 >> 2] = $56;
 $59 = HEAP32[256 >> 2] | 0;
 $60 = _ResLoadToCon(2, 4, $59) | 0;
 $mptr = $60;
 $61 = $pGen;
 $62 = $61 & 255;
 $63 = $62 << 3;
 $64 = $mptr;
 $65 = $64 + $63 | 0;
 $mptr = $65;
 $66 = $pTer;
 $67 = $66 & 255;
 $68 = $mptr;
 $69 = $68 + $67 | 0;
 $70 = HEAP8[$69 >> 0] | 0;
 $mModu = $70;
 $71 = $pTyp;
 $72 = $71 + 3 | 0;
 $73 = HEAP8[$72 >> 0] | 0;
 $74 = $73 & 255;
 $75 = $74 & 65535;
 $76 = $pTyp;
 $77 = $76 + 2 | 0;
 $78 = HEAP8[$77 >> 0] | 0;
 $79 = $78 & 255;
 $80 = $79 + 10 | 0;
 $81 = Math_imul($75, $80) | 0;
 $82 = +($81 | 0);
 $83 = $pGen;
 $84 = $83 & 255;
 $85 = 160 + ($84 << 2) | 0;
 $86 = +HEAPF32[$85 >> 2];
 $87 = $82 * $86;
 $88 = ~~$87 & 65535;
 $at = $88;
 $89 = $pTyp;
 $90 = $89 + 4 | 0;
 $91 = HEAP8[$90 >> 0] | 0;
 $92 = $91 & 255;
 $93 = $92 & 65535;
 $94 = $pTyp;
 $95 = $94 + 2 | 0;
 $96 = HEAP8[$95 >> 0] | 0;
 $97 = $96 & 255;
 $98 = $97 + 10 | 0;
 $99 = Math_imul($93, $98) | 0;
 $100 = +($99 | 0);
 $101 = $pGen;
 $102 = $101 & 255;
 $103 = 184 + ($102 << 2) | 0;
 $104 = +HEAPF32[$103 >> 2];
 $105 = $100 * $104;
 $106 = ~~$105 & 65535;
 $df = $106;
 $107 = $mModu;
 $108 = $at;
 $109 = _calcAt($107, $108) | 0;
 $110 = $pAtk;
 $111 = $110 + 16 | 0;
 HEAP8[$111 >> 0] = $109 & 255;
 HEAP8[$111 + 1 >> 0] = $109 >> 8;
 $112 = $mModu;
 $113 = $df;
 $114 = _calcAt($112, $113) | 0;
 $115 = $pAtk;
 $116 = $115 + 18 | 0;
 HEAP8[$116 >> 0] = $114 & 255;
 HEAP8[$116 + 1 >> 0] = $114 >> 8;
 $117 = $pTer;
 $118 = $117 & 255;
 $119 = 208 + ($118 << 2) | 0;
 $120 = +HEAPF32[$119 >> 2];
 $121 = $pAtk;
 $122 = $121 + 18 | 0;
 $123 = HEAPU8[$122 >> 0] | HEAPU8[$122 + 1 >> 0] << 8;
 $124 = +($123 & 65535);
 $125 = $124 * $120;
 $126 = ~~$125 & 65535;
 HEAP8[$122 >> 0] = $126 & 255;
 HEAP8[$122 + 1 >> 0] = $126 >> 8;
 STACKTOP = sp;
 return;
}

function _ComputerTacticHarmonize($city) {
 $city = $city | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $c = 0, $ccount = 0, $cptr = 0, $cqptr = 0, $ecount = 0, $eqptr = 0, $i = 0, $j = 0, $order = 0, $pcount = 0, $pqptr = 0, $rnd = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $order = sp + 16 | 0;
 $0 = $city;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3645 + ($2 * 31 | 0) | 0;
 $cptr = $3;
 $4 = HEAP32[384 >> 2] | 0;
 $pqptr = $4;
 $5 = HEAP32[384 >> 2] | 0;
 $6 = $5 + 200 | 0;
 $cqptr = $6;
 $7 = HEAP32[384 >> 2] | 0;
 $8 = $7 + 200 | 0;
 $9 = $8 + 38 | 0;
 $eqptr = $9;
 $10 = $0;
 $11 = $pqptr;
 $12 = _GetCityPersons($10, $11) | 0;
 $pcount = $12;
 $i = 0;
 while (1) {
  $13 = $i;
  $14 = $13 & 255;
  $15 = $pcount;
  $16 = $15 & 255;
  $17 = ($14 | 0) < ($16 | 0);
  if (!$17) {
   break;
  }
  $18 = _rand() | 0;
  $19 = ($18 | 0) % 7 & -1;
  $20 = $19 & 255;
  $rnd = $20;
  $21 = $rnd;
  $22 = $21 & 255;
  switch ($22 | 0) {
  case 0:
   {
    $23 = $cptr;
    HEAP8[$23 >> 0] = 0;
    $24 = $cptr;
    $25 = $24 + 12 | 0;
    $26 = HEAP8[$25 >> 0] | 0;
    $27 = $26 & 255;
    $28 = $27 + 4 | 0;
    $29 = $28 & 255;
    HEAP8[$25 >> 0] = $29;
    $30 = $cptr;
    $31 = $30 + 12 | 0;
    $32 = HEAP8[$31 >> 0] | 0;
    $33 = $32 & 255;
    $34 = ($33 | 0) > 100;
    if ($34) {
     $35 = $cptr;
     $36 = $35 + 12 | 0;
     HEAP8[$36 >> 0] = 100;
    }
    HEAP8[$order >> 0] = 4;
    label = 15;
    break;
   }
  case 6:
  case 4:
  case 3:
  case 2:
  case 1:
   {
    break;
   }
  case 5:
   {
    $37 = $i;
    $38 = $37 & 255;
    $39 = ($38 | 0) < 3;
    if (!$39) {
     $40 = $cptr;
     $41 = $40 + 1 | 0;
     $42 = HEAP8[$41 >> 0] | 0;
     $43 = $42 & 255;
     $44 = $43 - 1 | 0;
     $45 = $44 & 255;
     $46 = $cqptr;
     $47 = _GetKingCitys($45, $46) | 0;
     $ccount = $47;
     $48 = $ccount;
     $49 = $48 & 255;
     $50 = ($49 | 0) < 2;
     if (!$50) {
      $c = 0;
      $j = 0;
      while (1) {
       $51 = $j;
       $52 = $51 & 255;
       $53 = $ccount;
       $54 = $53 & 255;
       $55 = ($52 | 0) < ($54 | 0);
       if (!$55) {
        break;
       }
       $56 = $j;
       $57 = $56 & 255;
       $58 = $cqptr;
       $59 = $58 + $57 | 0;
       $60 = HEAP8[$59 >> 0] | 0;
       $61 = $eqptr;
       $62 = _GetRoundEnemyCity($60, $61) | 0;
       $ecount = $62;
       $63 = $ecount;
       $64 = $63 << 24 >> 24 != 0;
       if ($64) {
        $65 = $j;
        $c = $65;
        $66 = _rand() | 0;
        $67 = ($66 | 0) % 2 & -1;
        $68 = $67 & 255;
        $rnd = $68;
        $69 = $rnd;
        $70 = $69 << 24 >> 24 != 0;
        if ($70) {
         break;
        }
       }
       $71 = $j;
       $72 = $71 + 1 << 24 >> 24;
       $j = $72;
      }
      $73 = $c;
      $74 = $73 & 255;
      $75 = $cqptr;
      $76 = $75 + $74 | 0;
      $77 = HEAP8[$76 >> 0] | 0;
      $78 = $order + 3 | 0;
      HEAP8[$78 >> 0] = $77;
      HEAP8[$order >> 0] = 14;
      label = 15;
     }
    }
    break;
   }
  default:
   {
    label = 15;
   }
  }
  if ((label | 0) == 15) {
   label = 0;
   $79 = $i;
   $80 = $79 & 255;
   $81 = $pqptr;
   $82 = $81 + $80 | 0;
   $83 = HEAP8[$82 >> 0] | 0;
   $84 = $order + 1 | 0;
   HEAP8[$84 >> 0] = $83;
   $85 = $0;
   $86 = $order + 2 | 0;
   HEAP8[$86 >> 0] = $85;
   $87 = $order + 11 | 0;
   HEAP8[$87 >> 0] = 0;
   $88 = _AddOrderHead($order) | 0;
   $89 = $88 << 24 >> 24 != 0;
   if ($89) {
    $90 = $0;
    $91 = $i;
    $92 = $91 & 255;
    $93 = $pqptr;
    $94 = $93 + $92 | 0;
    $95 = HEAP8[$94 >> 0] | 0;
    _DelPerson($90, $95) | 0;
   }
  }
  $96 = $i;
  $97 = $96 + 1 << 24 >> 24;
  $i = $97;
 }
 STACKTOP = sp;
 return;
}

function _FgtViewForce($pForce, $pSIdx) {
 $pForce = $pForce | 0;
 $pSIdx = $pSIdx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $pGIdx = 0, $pPCnt = 0, $provender = 0, $tbuf = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tbuf = sp + 4 | 0;
 $0 = $pForce;
 $1 = $pSIdx;
 $2 = $0;
 $3 = $2 & 255;
 $4 = $3 * 10 | 0;
 $5 = $4 & 255;
 $pGIdx = $5;
 _SysLcdPartClear(80, 0, -97, 95);
 _SysRect(80, 0, -97, 95);
 _SysLine(80, 14, -97, 14);
 _SysLine(80, 28, -97, 28);
 $6 = $pGIdx;
 $7 = _TransIdxToGen3($6) | 0;
 $i = $7;
 $8 = $i;
 $9 = $8 & 255;
 $10 = HEAP32[332 >> 2] | 0;
 $11 = $10 + ($9 * 15 | 0) | 0;
 $12 = $11 + 1 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $14 = $13 & 255;
 $15 = $14 - 1 | 0;
 $16 = $15 & 255;
 _GetPersonName($16, $tbuf);
 $17 = _strlen($tbuf) | 0;
 $18 = $17 & 255;
 $i = $18;
 $19 = $i;
 $20 = $19 & 255;
 $21 = $tbuf + $20 | 0;
 HEAP8[$21 >> 0] = 32;
 $22 = $i;
 $23 = $22 & 255;
 $24 = $tbuf + $23 | 0;
 _FgtLoadToMem3(50, $24);
 $25 = $i;
 $26 = $25 & 255;
 $27 = $26 + 2 | 0;
 $28 = $27 * 6 | 0;
 $29 = ($28 | 0) / 2 & -1;
 $30 = 120 - $29 | 0;
 $31 = $30 & 255;
 $i = $31;
 $32 = $i;
 $33 = $32 & 255;
 $34 = 0 + $33 | 0;
 $35 = $34 & 255;
 _GamStrShowS($35, 2, $tbuf);
 _FgtLoadToMem3(52, $tbuf);
 $36 = $0;
 $37 = $36 << 24 >> 24 != 0;
 do {
  if ($37) {
   $38 = HEAPU8[3449 >> 0] | HEAPU8[3449 + 1 >> 0] << 8;
   $39 = $38 << 16 >> 16 != 0;
   if ($39) {
    $41 = HEAPU8[3449 >> 0] | HEAPU8[3449 + 1 >> 0] << 8;
    $42 = $41 & 65535;
    $43 = $tbuf + 5 | 0;
    _ltoa($42, $43, 10) | 0;
    break;
   } else {
    $40 = $tbuf + 5 | 0;
    _FgtLoadToMem3(53, $40);
    break;
   }
  } else {
   $44 = HEAPU8[3476 >> 0] | HEAPU8[3476 + 1 >> 0] << 8;
   $45 = $44 & 65535;
   $46 = $tbuf + 5 | 0;
   _ltoa($45, $46, 10) | 0;
  }
 } while (0);
 _GamStrShowS(83, 16, $tbuf);
 $pPCnt = 5;
 $47 = $pGIdx;
 $48 = $47 & 255;
 $49 = $1;
 $50 = $49 & 255;
 $51 = $50 + $48 | 0;
 $52 = $51 & 255;
 $1 = $52;
 $i = 0;
 while (1) {
  $53 = $i;
  $54 = $53 & 255;
  $55 = $pPCnt;
  $56 = $55 & 255;
  $57 = ($54 | 0) < ($56 | 0);
  if (!$57) {
   label = 11;
   break;
  }
  $58 = $i;
  $59 = $58 & 255;
  $60 = $1;
  $61 = $60 & 255;
  $62 = $59 + $61 | 0;
  $63 = $62 & 255;
  $tmp = $63;
  $64 = $tmp;
  $65 = $64 & 255;
  $66 = $pGIdx;
  $67 = $66 & 255;
  $68 = $65 - $67 | 0;
  $69 = ($68 | 0) > 10;
  if ($69) {
   label = 11;
   break;
  }
  $70 = $tmp;
  $71 = $70 & 255;
  $72 = 3480 + $71 | 0;
  $73 = HEAP8[$72 >> 0] | 0;
  $tmp = $73;
  $74 = $tmp;
  $75 = $74 << 24 >> 24 != 0;
  if (!$75) {
   label = 11;
   break;
  }
  $76 = $tmp;
  $77 = $76 & 255;
  $78 = $77 - 1 | 0;
  $79 = $78 & 255;
  $tmp = $79;
  $80 = $tmp;
  $81 = $80 & 255;
  $82 = HEAP32[332 >> 2] | 0;
  $83 = $82 + ($81 * 15 | 0) | 0;
  $84 = $83 + 10 | 0;
  $85 = HEAPU8[$84 >> 0] | HEAPU8[$84 + 1 >> 0] << 8;
  $provender = $85;
  $86 = $tmp;
  _GetPersonName($86, $tbuf);
  $87 = _strlen($tbuf) | 0;
  $88 = $87 & 255;
  $tmp = $88;
  $89 = $tmp;
  $90 = $89 & 255;
  $91 = $tbuf + $90 | 0;
  $92 = $tmp;
  $93 = $92 & 255;
  $94 = 20 - $93 | 0;
  _memset($91 | 0, 32, $94 | 0) | 0;
  $95 = $provender;
  $96 = $95 & 65535;
  $97 = $tbuf + 8 | 0;
  _ltoa($96, $97, 10) | 0;
  $98 = $i;
  $99 = $98 & 255;
  $100 = 2 + $99 | 0;
  $101 = $100 * 12 | 0;
  $102 = 0 + $101 | 0;
  $103 = $102 + 6 | 0;
  $104 = $103 & 255;
  _GamStrShowS(83, $104, $tbuf);
  $105 = $i;
  $106 = $105 & 255;
  $107 = $106 + 1 | 0;
  $108 = $107 & 255;
  $i = $108;
 }
 if ((label | 0) == 11) {
  STACKTOP = sp;
  return;
 }
}

function _FgtShowGen($act) {
 $act = $act | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $idx = 0, $pIdx = 0, $pos = 0, $state = 0, $sx = 0, $sy = 0, $tx = 0, $ty = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $act;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = $1 & 255;
  $3 = ($2 | 0) < 20;
  if (!$3) {
   break;
  }
  $4 = $i;
  $5 = $4 & 255;
  $6 = 3500 + ($5 * 7 | 0) | 0;
  $pos = $6;
  $7 = $pos;
  $8 = $7 + 6 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $state = $9;
  $10 = $state;
  $11 = $10 & 255;
  $12 = 8 == ($11 | 0);
  if (!$12) {
   $13 = $pos;
   $14 = HEAP8[$13 >> 0] | 0;
   $tx = $14;
   $15 = $pos;
   $16 = $15 + 1 | 0;
   $17 = HEAP8[$16 >> 0] | 0;
   $ty = $17;
   $18 = $tx;
   $19 = $18 & 255;
   $20 = HEAP8[3455 >> 0] | 0;
   $21 = $20 & 255;
   $22 = ($19 | 0) >= ($21 | 0);
   if ($22) {
    $23 = $tx;
    $24 = $23 & 255;
    $25 = HEAP8[3455 >> 0] | 0;
    $26 = $25 & 255;
    $27 = $26 + 10 | 0;
    $28 = ($24 | 0) < ($27 | 0);
    if ($28) {
     $29 = $ty;
     $30 = $29 & 255;
     $31 = HEAP8[3456 >> 0] | 0;
     $32 = $31 & 255;
     $33 = ($30 | 0) >= ($32 | 0);
     if ($33) {
      $34 = $ty;
      $35 = $34 & 255;
      $36 = HEAP8[3456 >> 0] | 0;
      $37 = $36 & 255;
      $38 = $37 + 5 | 0;
      $39 = ($35 | 0) < ($38 | 0);
      if ($39) {
       $40 = $i;
       $41 = _FgtGenPIdx($40) | 0;
       $idx = $41;
       $42 = $pos;
       $43 = $42 + 5 | 0;
       $44 = HEAP8[$43 >> 0] | 0;
       $45 = $44 & 255;
       $46 = 0 == ($45 | 0);
       if ($46) {
        $47 = $0;
        $48 = $47 & 255;
        $49 = $idx;
        $50 = $49 & 255;
        $51 = $50 + $48 | 0;
        $52 = $51 & 255;
        $idx = $52;
       }
       $53 = $tx;
       $54 = $53 & 255;
       $55 = HEAP8[3455 >> 0] | 0;
       $56 = $55 & 255;
       $57 = $54 - $56 | 0;
       $58 = $57 << 4;
       $59 = $58 + 0 | 0;
       $60 = $59 & 255;
       $sx = $60;
       $61 = $ty;
       $62 = $61 & 255;
       $63 = HEAP8[3456 >> 0] | 0;
       $64 = $63 & 255;
       $65 = $62 - $64 | 0;
       $66 = $65 << 4;
       $67 = $66 + 0 | 0;
       $68 = $67 & 255;
       $sy = $68;
       $69 = $tx;
       $70 = $ty;
       _FgtMapUnitShow($69, $70, 0);
       $71 = $idx;
       $72 = $71 & 255;
       $73 = $72 + 1 | 0;
       $74 = $73 & 255;
       $75 = $sx;
       $76 = $sy;
       _FgtRPicShowV(5, $74, $75, $76);
       $77 = $state;
       $78 = $77 & 255;
       $79 = ($78 | 0) == 2;
       do {
        if ($79) {
         $pIdx = 2;
        } else {
         $80 = $state;
         $81 = $80 & 255;
         $82 = ($81 | 0) == 3;
         if ($82) {
          $pIdx = 4;
          break;
         } else {
          $pIdx = 0;
          break;
         }
        }
       } while (0);
       $83 = $pIdx;
       $84 = $83 << 24 >> 24 != 0;
       if ($84) {
        $85 = $0;
        $86 = $85 & 255;
        $87 = $pIdx;
        $88 = $87 & 255;
        $89 = $88 + $86 | 0;
        $90 = $89 & 255;
        $pIdx = $90;
        $91 = $pIdx;
        $92 = $91 & 255;
        $93 = $92 + 1 | 0;
        $94 = $93 & 255;
        $95 = $sx;
        $96 = $sy;
        _FgtRPicShowV(34, $94, $95, $96);
       }
      }
     }
    }
   }
  }
  $97 = $i;
  $98 = $97 & 255;
  $99 = $98 + 1 | 0;
  $100 = $99 & 255;
  $i = $100;
 }
 STACKTOP = sp;
 return;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$iovs >> 2] = $1;
 $2 = $iovs + 4 | 0;
 $3 = $f + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $4;
 $6 = $5 - $1 | 0;
 HEAP32[$2 >> 2] = $6;
 $7 = $iovs + 8 | 0;
 HEAP32[$7 >> 2] = $buf;
 $8 = $iovs + 12 | 0;
 HEAP32[$8 >> 2] = $len;
 $9 = $6 + $len | 0;
 $10 = $f + 60 | 0;
 $11 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $9;
 while (1) {
  $12 = HEAP32[2024 >> 2] | 0;
  $13 = ($12 | 0) == (0 | 0);
  if ($13) {
   $17 = HEAP32[$10 >> 2] | 0;
   HEAP32[$vararg_buffer3 >> 2] = $17;
   $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
   HEAP32[$vararg_ptr6 >> 2] = $iov$0;
   $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
   HEAP32[$vararg_ptr7 >> 2] = $iovcnt$0;
   $18 = ___syscall146(146, $vararg_buffer3 | 0) | 0;
   $19 = ___syscall_ret($18) | 0;
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push(20 | 0, $f | 0);
   $14 = HEAP32[$10 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $14;
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   HEAP32[$vararg_ptr1 >> 2] = $iov$0;
   $vararg_ptr2 = $vararg_buffer + 8 | 0;
   HEAP32[$vararg_ptr2 >> 2] = $iovcnt$0;
   $15 = ___syscall146(146, $vararg_buffer | 0) | 0;
   $16 = ___syscall_ret($15) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0 | 0) == ($cnt$0 | 0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0 | 0) < 0;
  if ($27) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = $rem$0 - $cnt$0 | 0;
  $36 = $iov$0 + 4 | 0;
  $37 = HEAP32[$36 >> 2] | 0;
  $38 = $cnt$0 >>> 0 > $37 >>> 0;
  if ($38) {
   $39 = HEAP32[$11 >> 2] | 0;
   HEAP32[$0 >> 2] = $39;
   HEAP32[$3 >> 2] = $39;
   $40 = $cnt$0 - $37 | 0;
   $41 = $iov$0 + 8 | 0;
   $42 = $iovcnt$0 + -1 | 0;
   $$phi$trans$insert = $iov$0 + 12 | 0;
   $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
   $50 = $$pre;
   $cnt$1 = $40;
   $iov$1 = $41;
   $iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0 | 0) == 2;
   if ($43) {
    $44 = HEAP32[$0 >> 2] | 0;
    $45 = $44 + $cnt$0 | 0;
    HEAP32[$0 >> 2] = $45;
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = 2;
   } else {
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1 >> 2] | 0;
  $47 = $46 + $cnt$1 | 0;
  HEAP32[$iov$1 >> 2] = $47;
  $48 = $iov$1 + 4 | 0;
  $49 = $50 - $cnt$1 | 0;
  HEAP32[$48 >> 2] = $49;
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $35;
 }
 if ((label | 0) == 6) {
  $21 = HEAP32[$11 >> 2] | 0;
  $22 = $f + 48 | 0;
  $23 = HEAP32[$22 >> 2] | 0;
  $24 = $21 + $23 | 0;
  $25 = $f + 16 | 0;
  HEAP32[$25 >> 2] = $24;
  $26 = $21;
  HEAP32[$0 >> 2] = $26;
  HEAP32[$3 >> 2] = $26;
  $$0 = $len;
 } else if ((label | 0) == 8) {
  $28 = $f + 16 | 0;
  HEAP32[$28 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  $29 = HEAP32[$f >> 2] | 0;
  $30 = $29 | 32;
  HEAP32[$f >> 2] = $30;
  $31 = ($iovcnt$0$lcssa12 | 0) == 2;
  if ($31) {
   $$0 = 0;
  } else {
   $32 = $iov$0$lcssa11 + 4 | 0;
   $33 = HEAP32[$32 >> 2] | 0;
   $34 = $len - $33 | 0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _SysPicture($sX, $sY, $eX, $eY, $pic, $flag) {
 $sX = $sX | 0;
 $sY = $sY | 0;
 $eX = $eX | 0;
 $eY = $eY | 0;
 $pic = $pic | 0;
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $X = 0, $Y = 0, $hgt = 0, $ind = 0, $picPerLine = 0, $pixel0 = 0, $pixel1 = 0, $scrPerLine = 0, $wid = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $0 = $sX;
 $1 = $sY;
 $2 = $eX;
 $3 = $eY;
 $4 = $pic;
 $5 = $flag;
 $6 = $2;
 $7 = $6 & 255;
 $8 = $0;
 $9 = $8 & 255;
 $10 = $7 - $9 | 0;
 $11 = $10 + 1 | 0;
 $wid = $11;
 $12 = $3;
 $13 = $12 & 255;
 $14 = $1;
 $15 = $14 & 255;
 $16 = $13 - $15 | 0;
 $17 = $16 + 1 | 0;
 $hgt = $17;
 $scrPerLine = 160;
 $18 = $wid;
 $19 = $18 + 7 | 0;
 $20 = ($19 | 0) / 8 & -1;
 $picPerLine = $20;
 $y = 0;
 while (1) {
  $21 = $y;
  $22 = $hgt;
  $23 = ($21 | 0) < ($22 | 0);
  if (!$23) {
   break;
  }
  $24 = $1;
  $25 = $24 & 255;
  $26 = $y;
  $27 = $25 + $26 | 0;
  $Y = $27;
  $x = 0;
  while (1) {
   $28 = $x;
   $29 = $wid;
   $30 = ($28 | 0) < ($29 | 0);
   if (!$30) {
    break;
   }
   $31 = $0;
   $32 = $31 & 255;
   $33 = $x;
   $34 = $32 + $33 | 0;
   $X = $34;
   $35 = $scrPerLine;
   $36 = $Y;
   $37 = Math_imul($35, $36) | 0;
   $38 = $X;
   $39 = $37 + $38 | 0;
   $ind = $39;
   $40 = $5;
   $41 = $40 & 255;
   $42 = ($41 | 0) == 4;
   L7 : do {
    if ($42) {
     $pixel1 = 0;
    } else {
     $43 = $4;
     $44 = ($43 | 0) != (0 | 0);
     if ($44) {
      $45 = $picPerLine;
      $46 = $y;
      $47 = Math_imul($45, $46) | 0;
      $48 = $x;
      $49 = ($48 | 0) / 8 & -1;
      $50 = $47 + $49 | 0;
      $51 = $4;
      $52 = $51 + $50 | 0;
      $53 = HEAP8[$52 >> 0] | 0;
      $54 = $53 & 255;
      $55 = $x;
      $56 = ($55 | 0) % 8 & -1;
      $57 = 128 >> $56;
      $58 = $54 & $57;
      $59 = $58 & 255;
      $pixel0 = $59;
     } else {
      $pixel0 = 0;
     }
     $60 = $ind;
     $61 = 366433 + $60 | 0;
     $62 = HEAP8[$61 >> 0] | 0;
     $pixel1 = $62;
     $63 = $5;
     $64 = $63 & 255;
     switch ($64 | 0) {
     case 0:
      {
       $65 = $pixel0;
       $pixel1 = $65;
       break L7;
       break;
      }
     case 1:
      {
       $66 = $pixel0;
       $67 = $66 & 255;
       $68 = ($67 | 0) != 0;
       if ($68) {
        $69 = $pixel1;
        $70 = $69 & 255;
        $71 = ($70 | 0) != 0;
        $73 = $71;
       } else {
        $73 = 0;
       }
       $72 = $73 & 1;
       $74 = $72 & 255;
       $pixel1 = $74;
       break L7;
       break;
      }
     case 2:
      {
       $75 = $pixel0;
       $76 = $75 & 255;
       $77 = ($76 | 0) != 0;
       if ($77) {
        $82 = 1;
       } else {
        $78 = $pixel1;
        $79 = $78 & 255;
        $80 = ($79 | 0) != 0;
        $82 = $80;
       }
       $81 = $82 & 1;
       $83 = $81 & 255;
       $pixel1 = $83;
       break L7;
       break;
      }
     default:
      {
       break L7;
      }
     }
    }
   } while (0);
   $84 = $pixel1;
   $85 = $84 << 24 >> 24 != 0;
   $86 = $85 ^ 1;
   $87 = $86 ^ 1;
   $88 = $87 & 1;
   $89 = $88 & 255;
   $90 = $ind;
   $91 = 366433 + $90 | 0;
   HEAP8[$91 >> 0] = $89;
   $92 = $x;
   $93 = $92 + 1 | 0;
   $x = $93;
  }
  $94 = $y;
  $95 = $94 + 1 | 0;
  $y = $95;
 }
 _logLcd();
 STACKTOP = sp;
 return;
}

function _GamStrShow($x, $y, $buf) {
 $x = $x | 0;
 $y = $y | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $hzCode = 0, $i = 0, $wid = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $buf;
 $i = 0;
 L1 : while (1) {
  $3 = $i;
  $4 = $3 & 255;
  $5 = $2;
  $6 = $5 + $4 | 0;
  $7 = HEAP8[$6 >> 0] | 0;
  $8 = $7 & 255;
  $9 = $8 - 0 | 0;
  $10 = ($9 | 0) != 0;
  if (!$10) {
   label = 16;
   break;
  }
  $11 = $i;
  $12 = $11 & 255;
  $13 = $2;
  $14 = $13 + $12 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $16 = $15 & 255;
  $hzCode = $16;
  $17 = $hzCode;
  $18 = $17 & 65535;
  $19 = ($18 | 0) == 10;
  do {
   if ($19) {
    $20 = HEAP8[3440 >> 0] | 0;
    $0 = $20;
    $21 = $1;
    $22 = $21 & 255;
    $23 = $22 + 12 | 0;
    $24 = $23 & 255;
    $1 = $24;
    $25 = $1;
    $26 = $25 & 255;
    $27 = HEAP8[3443 >> 0] | 0;
    $28 = $27 & 255;
    $29 = ($26 | 0) > ($28 | 0);
    if ($29) {
     label = 16;
     break L1;
    }
   } else {
    $30 = $hzCode;
    $31 = $30 & 65535;
    $32 = ($31 | 0) < 128;
    if ($32) {
     $wid = 5;
    } else {
     $wid = 11;
    }
    $33 = $0;
    $34 = $33 & 255;
    $35 = $wid;
    $36 = $35 & 255;
    $37 = $34 + $36 | 0;
    $38 = HEAP8[3442 >> 0] | 0;
    $39 = $38 & 255;
    $40 = ($37 | 0) > ($39 | 0);
    if ($40) {
     $41 = $wid;
     $42 = $41 & 255;
     $43 = $0;
     $44 = $43 & 255;
     $45 = $44 + $42 | 0;
     $46 = $45 & 255;
     $0 = $46;
    }
    $47 = $0;
    $48 = $47 & 255;
    $49 = HEAP8[3442 >> 0] | 0;
    $50 = $49 & 255;
    $51 = ($48 | 0) > ($50 | 0);
    if ($51) {
     $52 = HEAP8[3440 >> 0] | 0;
     $0 = $52;
     $53 = $1;
     $54 = $53 & 255;
     $55 = $54 + 12 | 0;
     $56 = $55 & 255;
     $1 = $56;
     $57 = $1;
     $58 = $57 & 255;
     $59 = $58 + 12 | 0;
     $60 = HEAP8[3443 >> 0] | 0;
     $61 = $60 & 255;
     $62 = ($59 | 0) > ($61 | 0);
     if ($62) {
      label = 16;
      break L1;
     }
    }
    $63 = $hzCode;
    $64 = $63 & 65535;
    $65 = ($64 | 0) < 128;
    if ($65) {
     $66 = $0;
     $67 = $1;
     $68 = $hzCode;
     $69 = $68 & 255;
     _GamAscii($66, $67, $69);
     $70 = $0;
     $71 = $70 & 255;
     $72 = $71 + 6 | 0;
     $73 = $72 & 255;
     $0 = $73;
     break;
    } else {
     $74 = $i;
     $75 = $74 & 255;
     $76 = $75 + 1 | 0;
     $77 = $76 & 255;
     $i = $77;
     $78 = $hzCode;
     $79 = $78 & 65535;
     $80 = $79 << 8;
     $81 = $80 & 65535;
     $hzCode = $81;
     $82 = $i;
     $83 = $82 & 255;
     $84 = $2;
     $85 = $84 + $83 | 0;
     $86 = HEAP8[$85 >> 0] | 0;
     $87 = $86 & 255;
     $88 = $hzCode;
     $89 = $88 & 65535;
     $90 = $89 + $87 | 0;
     $91 = $90 & 65535;
     $hzCode = $91;
     $92 = $0;
     $93 = $1;
     $94 = $hzCode;
     _GamChinese($92, $93, $94);
     $95 = $0;
     $96 = $95 & 255;
     $97 = $96 + 12 | 0;
     $98 = $97 & 255;
     $0 = $98;
     break;
    }
   }
  } while (0);
  $99 = $i;
  $100 = $99 + 1 << 24 >> 24;
  $i = $100;
 }
 if ((label | 0) == 16) {
  STACKTOP = sp;
  return;
 }
}

function _ComputerTactic() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $TacticOddsD = 0, $TacticOddsIH = 0, $b = 0, $cptr = 0, $i = 0, $rnd = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $TacticOddsIH = sp + 12 | 0;
 $TacticOddsD = sp + 6 | 0;
 _ResItemGet(2, 12, $TacticOddsIH) | 0;
 _ResItemGet(2, 13, $TacticOddsD) | 0;
 $i = 0;
 while (1) {
  $0 = $i;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 38;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 & 255;
  $5 = 3645 + ($4 * 31 | 0) | 0;
  $cptr = $5;
  $6 = $cptr;
  HEAP8[$6 >> 0] = 0;
  $7 = $cptr;
  $8 = $7 + 1 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $b = $9;
  $10 = $b;
  $11 = $10 << 24 >> 24 != 0;
  do {
   if ($11) {
    $12 = $b;
    $13 = $12 & 255;
    $14 = HEAP8[3640 >> 0] | 0;
    $15 = $14 & 255;
    $16 = $15 + 1 | 0;
    $17 = ($13 | 0) == ($16 | 0);
    if (!$17) {
     $18 = $cptr;
     $19 = $18 + 12 | 0;
     $20 = HEAP8[$19 >> 0] | 0;
     $21 = $20 & 255;
     $22 = $21 + 1 | 0;
     $23 = $22 & 255;
     HEAP8[$19 >> 0] = $23;
     $24 = $cptr;
     $25 = $24 + 12 | 0;
     $26 = HEAP8[$25 >> 0] | 0;
     $27 = $26 & 255;
     $28 = ($27 | 0) > 100;
     if ($28) {
      $29 = $cptr;
      $30 = $29 + 12 | 0;
      HEAP8[$30 >> 0] = 100;
     }
     $31 = $cptr;
     $32 = $31 + 23 | 0;
     $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
     $34 = $33 & 65535;
     $35 = ($34 | 0) < 100;
     if ($35) {
      $36 = $cptr;
      $37 = $36 + 23 | 0;
      HEAP8[$37 >> 0] = 500 & 255;
      HEAP8[$37 + 1 >> 0] = 500 >> 8;
     }
     $38 = $cptr;
     $39 = $38 + 21 | 0;
     $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8;
     $41 = $40 & 65535;
     $42 = ($41 | 0) > 1e4;
     if ($42) {
      $43 = $cptr;
      $44 = $43 + 21 | 0;
      $45 = HEAPU8[$44 >> 0] | HEAPU8[$44 + 1 >> 0] << 8;
      $46 = $45 & 65535;
      $47 = ($46 | 0) / 2 & -1;
      $48 = $47 & 65535;
      HEAP8[$44 >> 0] = $48 & 255;
      HEAP8[$44 + 1 >> 0] = $48 >> 8;
     }
     $49 = _rand() | 0;
     $50 = ($49 | 0) % 100 & -1;
     $51 = $50 & 255;
     $rnd = $51;
     $52 = $b;
     $53 = $52 & 255;
     $54 = $53 - 1 | 0;
     $55 = HEAP32[332 >> 2] | 0;
     $56 = $55 + ($54 * 15 | 0) | 0;
     $57 = $56 + 6 | 0;
     $58 = HEAP8[$57 >> 0] | 0;
     $59 = $58 & 255;
     $60 = $TacticOddsIH + $59 | 0;
     $61 = HEAP8[$60 >> 0] | 0;
     $62 = $61 & 255;
     $63 = $rnd;
     $64 = $63 & 255;
     $65 = ($62 | 0) > ($64 | 0);
     if ($65) {
      $66 = $i;
      _ComputerTacticInterior($66);
      $67 = $i;
      _ComputerTacticHarmonize($67);
      break;
     }
     $68 = $b;
     $69 = $68 & 255;
     $70 = $69 - 1 | 0;
     $71 = HEAP32[332 >> 2] | 0;
     $72 = $71 + ($70 * 15 | 0) | 0;
     $73 = $72 + 6 | 0;
     $74 = HEAP8[$73 >> 0] | 0;
     $75 = $74 & 255;
     $76 = $TacticOddsD + $75 | 0;
     $77 = HEAP8[$76 >> 0] | 0;
     $78 = $77 & 255;
     $79 = $rnd;
     $80 = $79 & 255;
     $81 = ($78 | 0) > ($80 | 0);
     $82 = $i;
     if ($81) {
      _ComputerTacticDiplomatism($82);
      break;
     } else {
      _ComputerTacticArmament($82);
      break;
     }
    }
   }
  } while (0);
  $83 = $i;
  $84 = $83 + 1 << 24 >> 24;
  $i = $84;
 }
 STACKTOP = sp;
 return;
}

function _loadCity($city, $raw) {
 $city = $city | 0;
 $raw = $raw | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $raw;
 $2 = $0;
 $3 = $1;
 HEAP8[$2 >> 0] = HEAP8[$3 >> 0] | 0;
 $4 = $1;
 $5 = $4 + 1 | 0;
 $1 = $5;
 $6 = $0;
 $7 = $6 + 1 | 0;
 $8 = $1;
 HEAP8[$7 >> 0] = HEAP8[$8 >> 0] | 0;
 $9 = $1;
 $10 = $9 + 1 | 0;
 $1 = $10;
 $11 = $0;
 $12 = $11 + 2 | 0;
 $13 = $1;
 HEAP8[$12 >> 0] = HEAP8[$13 >> 0] | 0;
 $14 = $1;
 $15 = $14 + 1 | 0;
 $1 = $15;
 $16 = $0;
 $17 = $16 + 3 | 0;
 $18 = $1;
 HEAP8[$17 >> 0] = HEAP8[$18 >> 0] | 0;
 HEAP8[$17 + 1 >> 0] = HEAP8[$18 + 1 >> 0] | 0;
 $19 = $1;
 $20 = $19 + 2 | 0;
 $1 = $20;
 $21 = $0;
 $22 = $21 + 5 | 0;
 $23 = $1;
 HEAP8[$22 >> 0] = HEAP8[$23 >> 0] | 0;
 HEAP8[$22 + 1 >> 0] = HEAP8[$23 + 1 >> 0] | 0;
 $24 = $1;
 $25 = $24 + 2 | 0;
 $1 = $25;
 $26 = $0;
 $27 = $26 + 7 | 0;
 $28 = $1;
 HEAP8[$27 >> 0] = HEAP8[$28 >> 0] | 0;
 HEAP8[$27 + 1 >> 0] = HEAP8[$28 + 1 >> 0] | 0;
 $29 = $1;
 $30 = $29 + 2 | 0;
 $1 = $30;
 $31 = $0;
 $32 = $31 + 9 | 0;
 $33 = $1;
 HEAP8[$32 >> 0] = HEAP8[$33 >> 0] | 0;
 HEAP8[$32 + 1 >> 0] = HEAP8[$33 + 1 >> 0] | 0;
 $34 = $1;
 $35 = $34 + 2 | 0;
 $1 = $35;
 $36 = $0;
 $37 = $36 + 11 | 0;
 $38 = $1;
 HEAP8[$37 >> 0] = HEAP8[$38 >> 0] | 0;
 $39 = $1;
 $40 = $39 + 1 | 0;
 $1 = $40;
 $41 = $0;
 $42 = $41 + 12 | 0;
 $43 = $1;
 HEAP8[$42 >> 0] = HEAP8[$43 >> 0] | 0;
 $44 = $1;
 $45 = $44 + 1 | 0;
 $1 = $45;
 $46 = $0;
 $47 = $46 + 13 | 0;
 $48 = $1;
 HEAP8[$47 >> 0] = HEAP8[$48 >> 0] | 0;
 HEAP8[$47 + 1 >> 0] = HEAP8[$48 + 1 >> 0] | 0;
 HEAP8[$47 + 2 >> 0] = HEAP8[$48 + 2 >> 0] | 0;
 HEAP8[$47 + 3 >> 0] = HEAP8[$48 + 3 >> 0] | 0;
 $49 = $1;
 $50 = $49 + 4 | 0;
 $1 = $50;
 $51 = $0;
 $52 = $51 + 17 | 0;
 $53 = $1;
 HEAP8[$52 >> 0] = HEAP8[$53 >> 0] | 0;
 HEAP8[$52 + 1 >> 0] = HEAP8[$53 + 1 >> 0] | 0;
 HEAP8[$52 + 2 >> 0] = HEAP8[$53 + 2 >> 0] | 0;
 HEAP8[$52 + 3 >> 0] = HEAP8[$53 + 3 >> 0] | 0;
 $54 = $1;
 $55 = $54 + 4 | 0;
 $1 = $55;
 $56 = $0;
 $57 = $56 + 21 | 0;
 $58 = $1;
 HEAP8[$57 >> 0] = HEAP8[$58 >> 0] | 0;
 HEAP8[$57 + 1 >> 0] = HEAP8[$58 + 1 >> 0] | 0;
 $59 = $1;
 $60 = $59 + 2 | 0;
 $1 = $60;
 $61 = $0;
 $62 = $61 + 23 | 0;
 $63 = $1;
 HEAP8[$62 >> 0] = HEAP8[$63 >> 0] | 0;
 HEAP8[$62 + 1 >> 0] = HEAP8[$63 + 1 >> 0] | 0;
 $64 = $1;
 $65 = $64 + 2 | 0;
 $1 = $65;
 $66 = $0;
 $67 = $66 + 25 | 0;
 $68 = $1;
 HEAP8[$67 >> 0] = HEAP8[$68 >> 0] | 0;
 HEAP8[$67 + 1 >> 0] = HEAP8[$68 + 1 >> 0] | 0;
 $69 = $1;
 $70 = $69 + 2 | 0;
 $1 = $70;
 $71 = $0;
 $72 = $71 + 27 | 0;
 $73 = $1;
 HEAP8[$72 >> 0] = HEAP8[$73 >> 0] | 0;
 $74 = $1;
 $75 = $74 + 1 | 0;
 $1 = $75;
 $76 = $0;
 $77 = $76 + 28 | 0;
 $78 = $1;
 HEAP8[$77 >> 0] = HEAP8[$78 >> 0] | 0;
 $79 = $1;
 $80 = $79 + 1 | 0;
 $1 = $80;
 $81 = $0;
 $82 = $81 + 29 | 0;
 $83 = $1;
 HEAP8[$82 >> 0] = HEAP8[$83 >> 0] | 0;
 $84 = $1;
 $85 = $84 + 1 | 0;
 $1 = $85;
 $86 = $0;
 $87 = $86 + 30 | 0;
 $88 = $1;
 HEAP8[$87 >> 0] = HEAP8[$88 >> 0] | 0;
 $89 = $1;
 $90 = $89 + 1 | 0;
 $1 = $90;
 $91 = $1;
 STACKTOP = sp;
 return $91 | 0;
}

function _FgtUnfurlTree($idx, $buf, $len) {
 $idx = $idx | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $i = 0, $plen = 0, $poff = 0, $power = 0, $resistance = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $buf;
 $2 = $len;
 $3 = $2;
 $4 = HEAP8[$3 >> 0] | 0;
 $plen = $4;
 $5 = $0;
 $6 = $5 & 255;
 $7 = HEAP32[284 >> 2] | 0;
 $8 = $7 + $6 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $power = $9;
 $i = 0;
 while (1) {
  $10 = $i;
  $11 = $10 & 255;
  $12 = ($11 | 0) < 4;
  if (!$12) {
   break;
  }
  $tmp = 0;
  $13 = $0;
  $14 = $13 & 255;
  $15 = $i;
  $16 = $15 & 255;
  $17 = 3046 + $16 | 0;
  $18 = HEAP8[$17 >> 0] | 0;
  $19 = $18 & 255;
  $20 = $14 + $19 | 0;
  $21 = $20 & 255;
  $poff = $21;
  $22 = $poff;
  $23 = $22 & 255;
  $24 = ($23 | 0) > 224;
  if (!$24) {
   $25 = $poff;
   $26 = $25 & 255;
   $27 = HEAP32[284 >> 2] | 0;
   $28 = $27 + $26 | 0;
   $29 = HEAP8[$28 >> 0] | 0;
   $resistance = $29;
   $30 = $resistance;
   $31 = $30 & 255;
   $32 = ($31 | 0) < 128;
   if (!$32) {
    $33 = $resistance;
    $34 = $33 & 255;
    $35 = ($34 | 0) == 254;
    if (!$35) {
     $36 = $resistance;
     $37 = $36 & 255;
     $38 = ($37 | 0) == 255;
     if (!$38) {
      $39 = $resistance;
      $40 = $39 & 255;
      $41 = ($40 | 0) > 160;
      do {
       if ($41) {
        $42 = $resistance;
        $43 = $42 & 255;
        $44 = $43 - 160 | 0;
        $45 = $44 & 255;
        $tmp = $45;
        $46 = $power;
        $47 = $46 & 255;
        $48 = $tmp;
        $49 = $48 & 255;
        $50 = ($47 | 0) > ($49 | 0);
        if ($50) {
         $tmp = 1;
         break;
        } else {
         $tmp = 0;
         break;
        }
       }
      } while (0);
      $51 = $tmp;
      $52 = $51 << 24 >> 24 != 0;
      do {
       if (!$52) {
        $53 = $power;
        $54 = $53 & 255;
        $55 = $54 + 128 | 0;
        $56 = $55 & 255;
        $tmp = $56;
        $57 = $tmp;
        $58 = $57 & 255;
        $59 = $resistance;
        $60 = $59 & 255;
        $61 = ($58 | 0) > ($60 | 0);
        if ($61) {
         $62 = $resistance;
         $63 = $62 & 255;
         $64 = $tmp;
         $65 = $64 & 255;
         $66 = $65 - $63 | 0;
         $67 = $66 & 255;
         $tmp = $67;
         break;
        } else {
         $tmp = 0;
         break;
        }
       }
      } while (0);
      $68 = $tmp;
      $69 = $68 << 24 >> 24 != 0;
      if ($69) {
       $70 = $tmp;
       $71 = $poff;
       $72 = $71 & 255;
       $73 = HEAP32[284 >> 2] | 0;
       $74 = $73 + $72 | 0;
       HEAP8[$74 >> 0] = $70;
       $75 = $poff;
       $76 = $plen;
       $77 = $76 & 255;
       $78 = $1;
       $79 = $78 + $77 | 0;
       HEAP8[$79 >> 0] = $75;
       $80 = $plen;
       $81 = $80 & 255;
       $82 = $81 + 1 | 0;
       $83 = $82 & 255;
       $plen = $83;
      }
     }
    }
   }
  }
  $84 = $i;
  $85 = $84 & 255;
  $86 = $85 + 1 | 0;
  $87 = $86 & 255;
  $i = $87;
 }
 $88 = $plen;
 $89 = $2;
 HEAP8[$89 >> 0] = $88;
 STACKTOP = sp;
 return;
}

function _SetCitySatrap() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $c = 0, $i = 0, $k = 0, $pq = 0, $ps = 0, $sp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = 0;
 while (1) {
  $0 = $c;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 38;
  if (!$2) {
   break;
  }
  $3 = $c;
  $4 = $3 & 255;
  $5 = 3645 + ($4 * 31 | 0) | 0;
  $6 = $5 + 1 | 0;
  $7 = HEAP8[$6 >> 0] | 0;
  $k = $7;
  $8 = $k;
  $9 = $8 << 24 >> 24 != 0;
  if ($9) {
   $sp = 0;
   $10 = $c;
   $11 = $10 & 255;
   $12 = 3645 + ($11 * 31 | 0) | 0;
   $13 = $12 + 27 | 0;
   $14 = HEAP8[$13 >> 0] | 0;
   $pq = $14;
   $i = 0;
   L6 : while (1) {
    $15 = $i;
    $16 = $15 & 255;
    $17 = $c;
    $18 = $17 & 255;
    $19 = 3645 + ($18 * 31 | 0) | 0;
    $20 = $19 + 28 | 0;
    $21 = HEAP8[$20 >> 0] | 0;
    $22 = $21 & 255;
    $23 = ($16 | 0) < ($22 | 0);
    if (!$23) {
     break;
    }
    $24 = $pq;
    $25 = $24 & 255;
    $26 = $i;
    $27 = $26 & 255;
    $28 = $25 + $27 | 0;
    $29 = 4823 + $28 | 0;
    $30 = HEAP8[$29 >> 0] | 0;
    $ps = $30;
    $31 = $ps;
    $32 = $31 & 255;
    $33 = HEAP32[332 >> 2] | 0;
    $34 = $33 + ($32 * 15 | 0) | 0;
    $35 = $34 + 1 | 0;
    $36 = HEAP8[$35 >> 0] | 0;
    $37 = $36 & 255;
    $38 = $k;
    $39 = $38 & 255;
    $40 = ($37 | 0) == ($39 | 0);
    do {
     if ($40) {
      $41 = $k;
      $42 = $41 & 255;
      $43 = $ps;
      $44 = $43 & 255;
      $45 = $44 + 1 | 0;
      $46 = ($42 | 0) == ($45 | 0);
      if ($46) {
       label = 8;
       break L6;
      }
      $51 = $sp;
      $52 = $51 << 24 >> 24 != 0;
      if (!$52) {
       $73 = $ps;
       $74 = $73 & 255;
       $75 = $74 + 1 | 0;
       $76 = $75 & 255;
       $sp = $76;
       break;
      }
      $53 = $sp;
      $54 = $53 & 255;
      $55 = $54 - 1 | 0;
      $56 = HEAP32[332 >> 2] | 0;
      $57 = $56 + ($55 * 15 | 0) | 0;
      $58 = $57 + 4 | 0;
      $59 = HEAP8[$58 >> 0] | 0;
      $60 = $59 & 255;
      $61 = $ps;
      $62 = $61 & 255;
      $63 = HEAP32[332 >> 2] | 0;
      $64 = $63 + ($62 * 15 | 0) | 0;
      $65 = $64 + 4 | 0;
      $66 = HEAP8[$65 >> 0] | 0;
      $67 = $66 & 255;
      $68 = ($60 | 0) < ($67 | 0);
      if ($68) {
       $69 = $ps;
       $70 = $69 & 255;
       $71 = $70 + 1 | 0;
       $72 = $71 & 255;
       $sp = $72;
      }
     }
    } while (0);
    $77 = $i;
    $78 = $77 + 1 << 24 >> 24;
    $i = $78;
   }
   if ((label | 0) == 8) {
    label = 0;
    $47 = $ps;
    $48 = $47 & 255;
    $49 = $48 + 1 | 0;
    $50 = $49 & 255;
    $sp = $50;
   }
   $79 = $sp;
   $80 = $c;
   $81 = $80 & 255;
   $82 = 3645 + ($81 * 31 | 0) | 0;
   $83 = $82 + 2 | 0;
   HEAP8[$83 >> 0] = $79;
  } else {
   $84 = $c;
   $85 = $84 & 255;
   $86 = 3645 + ($85 * 31 | 0) | 0;
   $87 = $86 + 2 | 0;
   HEAP8[$87 >> 0] = 0;
  }
  $88 = $c;
  $89 = $88 + 1 << 24 >> 24;
  $c = $89;
 }
 STACKTOP = sp;
 return;
}

function _FgtShowAtRng() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $rng = 0, $sx = 0, $sy = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = HEAP32[288 >> 2] | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $rng = $1;
 $y = 0;
 while (1) {
  $2 = $y;
  $3 = $2 & 255;
  $4 = $rng;
  $5 = $4 & 255;
  $6 = ($3 | 0) < ($5 | 0);
  if (!$6) {
   break;
  }
  $7 = $y;
  $8 = $7 & 255;
  $9 = HEAP32[288 >> 2] | 0;
  $10 = $9 + 2 | 0;
  $11 = HEAP8[$10 >> 0] | 0;
  $12 = $11 & 255;
  $13 = $8 + $12 | 0;
  $14 = $13 & 255;
  $sy = $14;
  $15 = $sy;
  $16 = $15 & 255;
  $17 = HEAP8[3456 >> 0] | 0;
  $18 = $17 & 255;
  $19 = ($16 | 0) < ($18 | 0);
  L4 : do {
   if (!$19) {
    $20 = $sy;
    $21 = $20 & 255;
    $22 = HEAP8[3456 >> 0] | 0;
    $23 = $22 & 255;
    $24 = $23 + 5 | 0;
    $25 = ($21 | 0) >= ($24 | 0);
    if (!$25) {
     $26 = $sy;
     $27 = $26 & 255;
     $28 = HEAP8[3456 >> 0] | 0;
     $29 = $28 & 255;
     $30 = $27 - $29 | 0;
     $31 = $30 << 4;
     $32 = $31 + 0 | 0;
     $33 = $32 & 255;
     $sy = $33;
     $x = 0;
     while (1) {
      $34 = $x;
      $35 = $34 & 255;
      $36 = $rng;
      $37 = $36 & 255;
      $38 = ($35 | 0) < ($37 | 0);
      if (!$38) {
       break L4;
      }
      $39 = $x;
      $40 = $39 & 255;
      $41 = HEAP32[288 >> 2] | 0;
      $42 = $41 + 1 | 0;
      $43 = HEAP8[$42 >> 0] | 0;
      $44 = $43 & 255;
      $45 = $40 + $44 | 0;
      $46 = $45 & 255;
      $sx = $46;
      $47 = $sx;
      $48 = $47 & 255;
      $49 = HEAP8[3455 >> 0] | 0;
      $50 = $49 & 255;
      $51 = ($48 | 0) < ($50 | 0);
      if (!$51) {
       $52 = $sx;
       $53 = $52 & 255;
       $54 = HEAP8[3455 >> 0] | 0;
       $55 = $54 & 255;
       $56 = $55 + 10 | 0;
       $57 = ($53 | 0) >= ($56 | 0);
       if (!$57) {
        $58 = $x;
        $59 = $58 & 255;
        $60 = 3 + $59 | 0;
        $61 = $y;
        $62 = $61 & 255;
        $63 = $rng;
        $64 = $63 & 255;
        $65 = Math_imul($62, $64) | 0;
        $66 = $60 + $65 | 0;
        $67 = HEAP32[288 >> 2] | 0;
        $68 = $67 + $66 | 0;
        $69 = HEAP8[$68 >> 0] | 0;
        $70 = $69 & 255;
        $71 = ($70 | 0) != 1;
        if (!$71) {
         $72 = $sx;
         $73 = $72 & 255;
         $74 = HEAP8[3455 >> 0] | 0;
         $75 = $74 & 255;
         $76 = $73 - $75 | 0;
         $77 = $76 << 4;
         $78 = $77 + 0 | 0;
         $79 = $78 & 255;
         $sx = $79;
         $80 = $sx;
         $81 = $sy;
         _FgtRPicShowV(7, 2, $80, $81);
        }
       }
      }
      $82 = $x;
      $83 = $82 & 255;
      $84 = $83 + 1 | 0;
      $85 = $84 & 255;
      $x = $85;
     }
    }
   }
  } while (0);
  $86 = $y;
  $87 = $86 & 255;
  $88 = $87 + 1 | 0;
  $89 = $88 & 255;
  $y = $89;
 }
 STACKTOP = sp;
 return;
}

function _AlienateDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $ob = 0, $rade = 0, $randint = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 3 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $ob = $3;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $7 = $6 & 255;
 $8 = HEAP32[332 >> 2] | 0;
 $9 = $8 + ($7 * 15 | 0) | 0;
 $10 = $9 + 4 | 0;
 $11 = HEAP8[$10 >> 0] | 0;
 $12 = $11 & 255;
 $13 = $ob;
 $14 = $13 & 255;
 $15 = HEAP32[332 >> 2] | 0;
 $16 = $15 + ($14 * 15 | 0) | 0;
 $17 = $16 + 4 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $19 = $18 & 255;
 $20 = $12 - $19 | 0;
 $21 = $20 & 255;
 $rade = $21;
 $22 = $rade;
 $23 = $22 & 255;
 $24 = $23 + 50 | 0;
 $25 = $24 & 255;
 $rade = $25;
 $26 = _rand() | 0;
 $27 = ($26 | 0) % 100 & -1;
 $28 = $27 & 255;
 $randint = $28;
 $29 = $randint;
 $30 = $29 & 255;
 $31 = $rade;
 $32 = $31 & 255;
 $33 = ($30 | 0) > ($32 | 0);
 do {
  if (!$33) {
   $34 = _rand() | 0;
   $35 = ($34 | 0) % 100 & -1;
   $36 = $35 & 255;
   $randint = $36;
   $37 = $randint;
   $38 = $37 & 255;
   $39 = $ob;
   $40 = $39 & 255;
   $41 = HEAP32[332 >> 2] | 0;
   $42 = $41 + ($40 * 15 | 0) | 0;
   $43 = $42 + 5 | 0;
   $44 = HEAP8[$43 >> 0] | 0;
   $45 = $44 & 255;
   $46 = ($38 | 0) < ($45 | 0);
   if (!$46) {
    $47 = $ob;
    $48 = $47 & 255;
    $49 = HEAP32[332 >> 2] | 0;
    $50 = $49 + ($48 * 15 | 0) | 0;
    $51 = $50 + 6 | 0;
    $52 = HEAP8[$51 >> 0] | 0;
    $53 = $52 & 255;
    switch ($53 | 0) {
    case 4:
     {
      $rade = 5;
      break;
     }
    case 3:
     {
      $rade = 30;
      break;
     }
    case 2:
     {
      $rade = 40;
      break;
     }
    case 1:
     {
      $rade = 30;
      break;
     }
    case 0:
     {
      $rade = 50;
      break;
     }
    default:
     {}
    }
    $54 = _rand() | 0;
    $55 = ($54 | 0) % 100 & -1;
    $56 = $55 & 255;
    $randint = $56;
    $57 = $randint;
    $58 = $57 & 255;
    $59 = $rade;
    $60 = $59 & 255;
    $61 = ($58 | 0) > ($60 | 0);
    if (!$61) {
     $62 = $ob;
     $63 = $62 & 255;
     $64 = HEAP32[332 >> 2] | 0;
     $65 = $64 + ($63 * 15 | 0) | 0;
     $66 = $65 + 5 | 0;
     $67 = HEAP8[$66 >> 0] | 0;
     $68 = $67 & 255;
     $69 = ($68 | 0) > 4;
     $70 = $ob;
     $71 = $70 & 255;
     $72 = HEAP32[332 >> 2] | 0;
     $73 = $72 + ($71 * 15 | 0) | 0;
     $74 = $73 + 5 | 0;
     if ($69) {
      $75 = HEAP8[$74 >> 0] | 0;
      $76 = $75 & 255;
      $77 = $76 - 4 | 0;
      $78 = $77 & 255;
      HEAP8[$74 >> 0] = $78;
      break;
     } else {
      HEAP8[$74 >> 0] = 0;
      break;
     }
    }
   }
  }
 } while (0);
 $79 = $0;
 $80 = $79 + 2 | 0;
 $81 = HEAP8[$80 >> 0] | 0;
 $82 = $0;
 $83 = $82 + 1 | 0;
 $84 = HEAP8[$83 >> 0] | 0;
 _AddPerson($81, $84) | 0;
 STACKTOP = sp;
 return 1;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2 | 0) != 0;
 $4 = ($n | 0) != 0;
 $or$cond18 = $4 & $3;
 L1 : do {
  if ($or$cond18) {
   $5 = $c & 255;
   $$019 = $n;
   $s$020 = $src;
   while (1) {
    $6 = HEAP8[$s$020 >> 0] | 0;
    $7 = $6 << 24 >> 24 == $5 << 24 >> 24;
    if ($7) {
     $$0$lcssa44 = $$019;
     $s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = $s$020 + 1 | 0;
    $9 = $$019 + -1 | 0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11 | 0) != 0;
    $13 = ($9 | 0) != 0;
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;
     $s$020 = $8;
    } else {
     $$0$lcssa = $9;
     $$lcssa = $13;
     $s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;
   $$lcssa = $4;
   $s$0$lcssa = $src;
   label = 5;
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;
   $s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;
   $s$2 = $s$0$lcssa;
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $14 = HEAP8[$s$0$lcssa43 >> 0] | 0;
   $15 = $c & 255;
   $16 = $14 << 24 >> 24 == $15 << 24 >> 24;
   if ($16) {
    $$3 = $$0$lcssa44;
    $s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009) | 0;
    $18 = $$0$lcssa44 >>> 0 > 3;
    L11 : do {
     if ($18) {
      $$110 = $$0$lcssa44;
      $w$011 = $s$0$lcssa43;
      while (1) {
       $19 = HEAP32[$w$011 >> 2] | 0;
       $20 = $19 ^ $17;
       $21 = $20 + -16843009 | 0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24 | 0) == 0;
       if (!$25) {
        $$110$lcssa = $$110;
        $w$011$lcssa = $w$011;
        break;
       }
       $26 = $w$011 + 4 | 0;
       $27 = $$110 + -4 | 0;
       $28 = $27 >>> 0 > 3;
       if ($28) {
        $$110 = $27;
        $w$011 = $26;
       } else {
        $$1$lcssa = $27;
        $w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;
      $s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;
      $w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while (0);
    if ((label | 0) == 11) {
     $29 = ($$1$lcssa | 0) == 0;
     if ($29) {
      $$3 = 0;
      $s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;
      $s$15 = $w$0$lcssa;
     }
    }
    while (1) {
     $30 = HEAP8[$s$15 >> 0] | 0;
     $31 = $30 << 24 >> 24 == $15 << 24 >> 24;
     if ($31) {
      $$3 = $$24;
      $s$2 = $s$15;
      break L8;
     }
     $32 = $s$15 + 1 | 0;
     $33 = $$24 + -1 | 0;
     $34 = ($33 | 0) == 0;
     if ($34) {
      $$3 = 0;
      $s$2 = $32;
      break;
     } else {
      $$24 = $33;
      $s$15 = $32;
     }
    }
   }
  }
 } while (0);
 $35 = ($$3 | 0) != 0;
 $36 = $35 ? $s$2 : 0;
 return $36 | 0;
}

function _CountSklHurt($skl, $arms, $prov) {
 $skl = $skl | 0;
 $arms = $arms | 0;
 $prov = $prov | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $cnt = 0, $count = 0, $eTer = 0, $eTyp = 0, $i = 0, $oTer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $count = sp + 16 | 0;
 $0 = $skl;
 $1 = $arms;
 $2 = $prov;
 $3 = $0;
 $4 = $3 + 2 | 0;
 $5 = HEAPU8[$4 >> 0] | HEAPU8[$4 + 1 >> 0] << 8;
 HEAP8[$count >> 0] = $5 & 255;
 HEAP8[$count + 1 >> 0] = $5 >> 8;
 $6 = $0;
 $7 = $6 + 4 | 0;
 $8 = HEAPU8[$7 >> 0] | HEAPU8[$7 + 1 >> 0] << 8;
 $9 = $count + 2 | 0;
 HEAP8[$9 >> 0] = $8 & 255;
 HEAP8[$9 + 1 >> 0] = $8 >> 8;
 $10 = HEAP8[297 >> 0] | 0;
 $oTer = $10;
 $11 = HEAP8[319 >> 0] | 0;
 $eTyp = $11;
 $12 = HEAP8[317 >> 0] | 0;
 $eTer = $12;
 $i = 0;
 while (1) {
  $13 = $i;
  $14 = $13 & 255;
  $15 = ($14 | 0) < 2;
  if (!$15) {
   break;
  }
  $16 = $i;
  $17 = $16 & 255;
  $18 = $count + ($17 << 1) | 0;
  $19 = HEAPU8[$18 >> 0] | HEAPU8[$18 + 1 >> 0] << 8;
  $cnt = $19;
  $20 = $cnt;
  $21 = $20 << 16 >> 16 != 0;
  if ($21) {
   $22 = HEAP8[3466 >> 0] | 0;
   $23 = $22 & 255;
   $24 = $23 - 1 | 0;
   $25 = $0;
   $26 = $25 + 7 | 0;
   $27 = $26 + $24 | 0;
   $28 = HEAP8[$27 >> 0] | 0;
   $29 = +($28 & 255);
   $30 = $29 / 100.0;
   $31 = $cnt;
   $32 = +($31 & 65535);
   $33 = $32 * $30;
   $34 = ~~$33 & 65535;
   $cnt = $34;
   $35 = $eTyp;
   $36 = $35 & 255;
   $37 = $0;
   $38 = $37 + 28 | 0;
   $39 = $38 + $36 | 0;
   $40 = HEAP8[$39 >> 0] | 0;
   $41 = +($40 & 255);
   $42 = $41 / 100.0;
   $43 = $cnt;
   $44 = +($43 & 65535);
   $45 = $44 * $42;
   $46 = ~~$45 & 65535;
   $cnt = $46;
   $47 = $eTer;
   $48 = $47 & 255;
   $49 = $0;
   $50 = $49 + 12 | 0;
   $51 = $50 + $48 | 0;
   $52 = HEAP8[$51 >> 0] | 0;
   $53 = +($52 & 255);
   $54 = $53 / 100.0;
   $55 = $cnt;
   $56 = +($55 & 65535);
   $57 = $56 * $54;
   $58 = ~~$57 & 65535;
   $cnt = $58;
   $59 = $oTer;
   $60 = $59 & 255;
   $61 = $0;
   $62 = $61 + 20 | 0;
   $63 = $62 + $60 | 0;
   $64 = HEAP8[$63 >> 0] | 0;
   $65 = +($64 & 255);
   $66 = $65 / 100.0;
   $67 = $cnt;
   $68 = +($67 & 65535);
   $69 = $68 * $66;
   $70 = ~~$69 & 65535;
   $cnt = $70;
   $71 = $cnt;
   $72 = $i;
   $73 = $72 & 255;
   $74 = $count + ($73 << 1) | 0;
   HEAP8[$74 >> 0] = $71 & 255;
   HEAP8[$74 + 1 >> 0] = $71 >> 8;
  }
  $75 = $i;
  $76 = $75 & 255;
  $77 = $76 + 1 | 0;
  $78 = $77 & 255;
  $i = $78;
 }
 $79 = HEAPU8[$count >> 0] | HEAPU8[$count + 1 >> 0] << 8;
 $80 = $1;
 HEAP8[$80 >> 0] = $79 & 255;
 HEAP8[$80 + 1 >> 0] = $79 >> 8;
 $81 = $count + 2 | 0;
 $82 = HEAPU8[$81 >> 0] | HEAPU8[$81 + 1 >> 0] << 8;
 $83 = $2;
 HEAP8[$83 >> 0] = $82 & 255;
 HEAP8[$83 + 1 >> 0] = $82 >> 8;
 STACKTOP = sp;
 return;
}

function _GetExcHZMCode($Hz, $hzmCode) {
 $Hz = $Hz | 0;
 $hzmCode = $hzmCode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $buf = 0, $hzmAddr = 0, $i = 0, $j = 0, $k = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $buf = sp + 14 | 0;
 $0 = $Hz;
 $1 = $hzmCode;
 $2 = $0;
 $3 = $2 & 65535;
 $4 = $3 >> 8;
 $5 = $4 & 255;
 $6 = $5 & 255;
 $7 = ($6 | 0) < 161;
 if ($7) {
  $8 = $1;
  dest = $8;
  stop = dest + 24 | 0;
  do {
   HEAP8[dest >> 0] = 0 | 0;
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 }
 $9 = $0;
 $10 = _CountHZMAddrOff($9) | 0;
 $hzmAddr = $10;
 HEAP8[$buf >> 0] = 18 | 0;
 HEAP8[$buf + 1 >> 0] = 18 | 0;
 $11 = HEAP32[264 >> 2] | 0;
 $12 = $hzmAddr;
 _gam_fseek($11, $12, 0) | 0;
 $13 = HEAP32[264 >> 2] | 0;
 _gam_fread($buf, 1, 18, $13) | 0;
 $i = 0;
 while (1) {
  $14 = $i;
  $15 = $14 & 255;
  $16 = ($15 | 0) < 6;
  if (!$16) {
   break;
  }
  $17 = $i;
  $18 = $17 & 255;
  $19 = $18 << 2;
  $20 = $19 & 255;
  $j = $20;
  $21 = $i;
  $22 = $21 & 255;
  $23 = $22 << 1;
  $24 = $i;
  $25 = $24 & 255;
  $26 = $23 + $25 | 0;
  $27 = $26 & 255;
  $k = $27;
  $28 = $k;
  $29 = $28 & 255;
  $30 = $buf + $29 | 0;
  $31 = HEAP8[$30 >> 0] | 0;
  $32 = $j;
  $33 = $32 & 255;
  $34 = $1;
  $35 = $34 + $33 | 0;
  HEAP8[$35 >> 0] = $31;
  $36 = $k;
  $37 = $36 & 255;
  $38 = $37 + 1 | 0;
  $39 = $buf + $38 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $41 = $40 & 255;
  $42 = $41 & 240;
  $43 = $42 & 255;
  $44 = $j;
  $45 = $44 & 255;
  $46 = $45 + 1 | 0;
  $47 = $1;
  $48 = $47 + $46 | 0;
  HEAP8[$48 >> 0] = $43;
  $49 = $k;
  $50 = $49 & 255;
  $51 = $50 + 1 | 0;
  $52 = $buf + $51 | 0;
  $53 = HEAP8[$52 >> 0] | 0;
  $54 = $53 & 255;
  $55 = $54 & 15;
  $56 = $55 << 4;
  $57 = $56 & 255;
  $58 = $j;
  $59 = $58 & 255;
  $60 = $59 + 2 | 0;
  $61 = $1;
  $62 = $61 + $60 | 0;
  HEAP8[$62 >> 0] = $57;
  $63 = $k;
  $64 = $63 & 255;
  $65 = $64 + 2 | 0;
  $66 = $buf + $65 | 0;
  $67 = HEAP8[$66 >> 0] | 0;
  $68 = $67 & 255;
  $69 = $68 & 240;
  $70 = $69 >> 4;
  $71 = $j;
  $72 = $71 & 255;
  $73 = $72 + 2 | 0;
  $74 = $1;
  $75 = $74 + $73 | 0;
  $76 = HEAP8[$75 >> 0] | 0;
  $77 = $76 & 255;
  $78 = $77 + $70 | 0;
  $79 = $78 & 255;
  HEAP8[$75 >> 0] = $79;
  $80 = $k;
  $81 = $80 & 255;
  $82 = $81 + 2 | 0;
  $83 = $buf + $82 | 0;
  $84 = HEAP8[$83 >> 0] | 0;
  $85 = $84 & 255;
  $86 = $85 & 15;
  $87 = $86 << 4;
  $88 = $87 & 255;
  $89 = $j;
  $90 = $89 & 255;
  $91 = $90 + 3 | 0;
  $92 = $1;
  $93 = $92 + $91 | 0;
  HEAP8[$93 >> 0] = $88;
  $94 = $i;
  $95 = $94 + 1 << 24 >> 24;
  $i = $95;
 }
 STACKTOP = sp;
 return;
}

function _FgtShowMvRng() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $dx = 0, $dy = 0, $pic = 0, $sx = 0, $sy = 0, $tmp = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = HEAP8[3455 >> 0] | 0;
 $1 = $0 & 255;
 $2 = HEAP8[3459 >> 0] | 0;
 $3 = $2 & 255;
 $4 = $1 + $3 | 0;
 $5 = HEAP8[3457 >> 0] | 0;
 $6 = $5 & 255;
 $7 = $4 - $6 | 0;
 $8 = $7 & 255;
 $dx = $8;
 $9 = HEAP8[3456 >> 0] | 0;
 $10 = $9 & 255;
 $11 = HEAP8[3460 >> 0] | 0;
 $12 = $11 & 255;
 $13 = $10 + $12 | 0;
 $14 = HEAP8[3458 >> 0] | 0;
 $15 = $14 & 255;
 $16 = $13 - $15 | 0;
 $17 = $16 & 255;
 $dy = $17;
 $18 = HEAP32[256 >> 2] | 0;
 $19 = _ResLoadToCon(7, 1, $18) | 0;
 $pic = $19;
 $20 = $pic;
 $21 = $20 + 6 | 0;
 $pic = $21;
 $22 = HEAP8[3459 >> 0] | 0;
 $x = $22;
 while (1) {
  $23 = $x;
  $24 = $23 & 255;
  $25 = ($24 | 0) < 15;
  if (!$25) {
   break;
  }
  $26 = HEAP8[3460 >> 0] | 0;
  $y = $26;
  while (1) {
   $27 = $y;
   $28 = $27 & 255;
   $29 = ($28 | 0) < 15;
   $30 = $x;
   $31 = $30 & 255;
   if (!$29) {
    break;
   }
   $32 = $dx;
   $33 = $32 & 255;
   $34 = $31 - $33 | 0;
   $35 = $34 & 255;
   $sx = $35;
   $36 = $y;
   $37 = $36 & 255;
   $38 = $dy;
   $39 = $38 & 255;
   $40 = $37 - $39 | 0;
   $41 = $40 & 255;
   $sy = $41;
   $42 = $sx;
   $43 = $42 & 255;
   $44 = ($43 | 0) >= 10;
   if (!$44) {
    $45 = $sy;
    $46 = $45 & 255;
    $47 = ($46 | 0) >= 5;
    if (!$47) {
     $48 = $y;
     $49 = $48 & 255;
     $50 = $49 * 15 | 0;
     $51 = $x;
     $52 = $51 & 255;
     $53 = $50 + $52 | 0;
     $54 = HEAP32[284 >> 2] | 0;
     $55 = $54 + $53 | 0;
     $56 = HEAP8[$55 >> 0] | 0;
     $tmp = $56;
     $57 = $tmp;
     $58 = $57 & 255;
     $59 = ($58 | 0) != 0;
     if ($59) {
      $60 = $tmp;
      $61 = $60 & 255;
      $62 = ($61 | 0) < 128;
      if ($62) {
       $63 = $sx;
       $64 = $63 & 255;
       $65 = $64 << 4;
       $66 = $65 & 255;
       $sx = $66;
       $67 = $sy;
       $68 = $67 & 255;
       $69 = $68 << 4;
       $70 = $69 & 255;
       $sy = $70;
       $71 = $sx;
       $72 = $71 & 255;
       $73 = $72 + 0 | 0;
       $74 = $73 & 255;
       $sx = $74;
       $75 = $sy;
       $76 = $75 & 255;
       $77 = $76 + 0 | 0;
       $78 = $77 & 255;
       $sy = $78;
       $79 = $sx;
       $80 = $sy;
       $81 = $pic;
       $82 = HEAP32[272 >> 2] | 0;
       _GamMPicShowV($79, $80, 16, 16, $81, $82);
      }
     }
    }
   }
   $83 = $y;
   $84 = $83 & 255;
   $85 = $84 + 1 | 0;
   $86 = $85 & 255;
   $y = $86;
  }
  $87 = $31 + 1 | 0;
  $88 = $87 & 255;
  $x = $88;
 }
 STACKTOP = sp;
 return;
}

function _PlcStrShowS($big, $small, $buf) {
 $big = $big | 0;
 $small = $small | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $ex = 0, $ey = 0, $i = 0, $ptr = 0, $sLen = 0, $sx = 0, $sy = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $sx = sp + 32 | 0;
 $sy = sp + 28 | 0;
 $ex = sp + 24 | 0;
 $ey = sp + 20 | 0;
 $0 = $big;
 $1 = $small;
 $2 = $buf;
 $3 = $0;
 $4 = HEAP8[$3 >> 0] | 0;
 $tmp = $4;
 $5 = $tmp;
 HEAP8[$sx >> 0] = $5;
 $6 = $tmp;
 $7 = $sx + 1 | 0;
 HEAP8[$7 >> 0] = $6;
 $8 = $tmp;
 $9 = $sx + 3 | 0;
 HEAP8[$9 >> 0] = $8;
 $10 = $1;
 $11 = $10 + 2 | 0;
 $12 = HEAP8[$11 >> 0] | 0;
 $13 = $sx + 2 | 0;
 HEAP8[$13 >> 0] = $12;
 $14 = $0;
 $15 = $14 + 1 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 HEAP8[$sy >> 0] = $16;
 $17 = $1;
 $18 = $17 + 1 | 0;
 $19 = HEAP8[$18 >> 0] | 0;
 $tmp = $19;
 $20 = $tmp;
 $21 = $sy + 1 | 0;
 HEAP8[$21 >> 0] = $20;
 $22 = $tmp;
 $23 = $sy + 2 | 0;
 HEAP8[$23 >> 0] = $22;
 $24 = $1;
 $25 = $24 + 3 | 0;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $sy + 3 | 0;
 HEAP8[$27 >> 0] = $26;
 $28 = $0;
 $29 = $28 + 2 | 0;
 $30 = HEAP8[$29 >> 0] | 0;
 $tmp = $30;
 $31 = $tmp;
 HEAP8[$ex >> 0] = $31;
 $32 = $tmp;
 $33 = $ex + 2 | 0;
 HEAP8[$33 >> 0] = $32;
 $34 = $tmp;
 $35 = $ex + 3 | 0;
 HEAP8[$35 >> 0] = $34;
 $36 = $1;
 $37 = HEAP8[$36 >> 0] | 0;
 $38 = $ex + 1 | 0;
 HEAP8[$38 >> 0] = $37;
 $39 = $1;
 $40 = $39 + 1 | 0;
 $41 = HEAP8[$40 >> 0] | 0;
 HEAP8[$ey >> 0] = $41;
 $42 = $1;
 $43 = $42 + 3 | 0;
 $44 = HEAP8[$43 >> 0] | 0;
 $tmp = $44;
 $45 = $tmp;
 $46 = $ey + 1 | 0;
 HEAP8[$46 >> 0] = $45;
 $47 = $tmp;
 $48 = $ey + 2 | 0;
 HEAP8[$48 >> 0] = $47;
 $49 = $0;
 $50 = $49 + 3 | 0;
 $51 = HEAP8[$50 >> 0] | 0;
 $52 = $ey + 3 | 0;
 HEAP8[$52 >> 0] = $51;
 $53 = $2;
 $ptr = $53;
 $54 = $2;
 $55 = _strlen($54) | 0;
 $56 = $55 & 65535;
 $sLen = $56;
 $i = 0;
 while (1) {
  $57 = $i;
  $58 = $57 & 255;
  $59 = ($58 | 0) < 4;
  if (!$59) {
   label = 5;
   break;
  }
  $60 = $i;
  $61 = $60 & 255;
  $62 = $sx + $61 | 0;
  $63 = HEAP8[$62 >> 0] | 0;
  $64 = $i;
  $65 = $64 & 255;
  $66 = $sy + $65 | 0;
  $67 = HEAP8[$66 >> 0] | 0;
  $68 = $i;
  $69 = $68 & 255;
  $70 = $ex + $69 | 0;
  $71 = HEAP8[$70 >> 0] | 0;
  $72 = $i;
  $73 = $72 & 255;
  $74 = $ey + $73 | 0;
  $75 = HEAP8[$74 >> 0] | 0;
  $76 = $ptr;
  $77 = _PlcItemShowS($63, $67, $71, $75, $76) | 0;
  $ptr = $77;
  $78 = $ptr;
  $79 = (0 | 0) == ($78 | 0);
  if ($79) {
   label = 5;
   break;
  }
  $80 = $i;
  $81 = $80 & 255;
  $82 = $81 + 1 | 0;
  $83 = $82 & 255;
  $i = $83;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function _AddGoodsPerson($goods, $person) {
 $goods = $goods | 0;
 $person = $person | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $gptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $goods;
 $2 = $person;
 $3 = HEAP32[256 >> 2] | 0;
 $4 = _ResLoadToCon(66, 1, $3) | 0;
 $gptr = $4;
 $5 = $1;
 $6 = $5 & 255;
 $7 = $gptr;
 $8 = $7 + ($6 * 66 | 0) | 0;
 $9 = $8 + 62 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = $10 & 255;
 $12 = $2;
 $13 = $12 & 255;
 $14 = HEAP32[332 >> 2] | 0;
 $15 = $14 + ($13 * 15 | 0) | 0;
 $16 = $15 + 3 | 0;
 $17 = HEAP8[$16 >> 0] | 0;
 $18 = $17 & 255;
 $19 = $18 + $11 | 0;
 $20 = $19 & 255;
 HEAP8[$16 >> 0] = $20;
 $21 = $1;
 $22 = $21 & 255;
 $23 = $gptr;
 $24 = $23 + ($22 * 66 | 0) | 0;
 $25 = $24 + 63 | 0;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $26 & 255;
 $28 = $2;
 $29 = $28 & 255;
 $30 = HEAP32[332 >> 2] | 0;
 $31 = $30 + ($29 * 15 | 0) | 0;
 $32 = $31 + 4 | 0;
 $33 = HEAP8[$32 >> 0] | 0;
 $34 = $33 & 255;
 $35 = $34 + $27 | 0;
 $36 = $35 & 255;
 HEAP8[$32 >> 0] = $36;
 $37 = $1;
 $38 = $37 & 255;
 $39 = $gptr;
 $40 = $39 + ($38 * 66 | 0) | 0;
 $41 = $40 + 65 | 0;
 $42 = HEAP8[$41 >> 0] | 0;
 $43 = $42 & 255;
 L1 : do {
  switch ($43 | 0) {
  case 1:
   {
    $44 = $2;
    $45 = $44 & 255;
    $46 = HEAP32[332 >> 2] | 0;
    $47 = $46 + ($45 * 15 | 0) | 0;
    $48 = $47 + 9 | 0;
    HEAP8[$48 >> 0] = 3;
    break;
   }
  case 2:
   {
    $49 = $2;
    $50 = $49 & 255;
    $51 = HEAP32[332 >> 2] | 0;
    $52 = $51 + ($50 * 15 | 0) | 0;
    $53 = $52 + 4 | 0;
    $54 = HEAP8[$53 >> 0] | 0;
    $55 = $54 & 255;
    $56 = ($55 | 0) > 105;
    if ($56) {
     $57 = $2;
     $58 = $57 & 255;
     $59 = HEAP32[332 >> 2] | 0;
     $60 = $59 + ($58 * 15 | 0) | 0;
     $61 = $60 + 9 | 0;
     HEAP8[$61 >> 0] = 5;
     break L1;
    }
    $0 = -1;
    $81 = $0;
    STACKTOP = sp;
    return $81 | 0;
    break;
   }
  case 3:
   {
    $62 = $2;
    $63 = $62 & 255;
    $64 = HEAP32[332 >> 2] | 0;
    $65 = $64 + ($63 * 15 | 0) | 0;
    $66 = $65 + 3 | 0;
    $67 = HEAP8[$66 >> 0] | 0;
    $68 = $67 & 255;
    $69 = ($68 | 0) > 105;
    if ($69) {
     $70 = $2;
     $71 = $70 & 255;
     $72 = HEAP32[332 >> 2] | 0;
     $73 = $72 + ($71 * 15 | 0) | 0;
     $74 = $73 + 9 | 0;
     HEAP8[$74 >> 0] = 4;
     break L1;
    }
    $0 = -1;
    $81 = $0;
    STACKTOP = sp;
    return $81 | 0;
    break;
   }
  default:
   {}
  }
 } while (0);
 $75 = $1;
 $76 = $75 & 255;
 $77 = $gptr;
 $78 = $77 + ($76 * 66 | 0) | 0;
 $79 = $78 + 1 | 0;
 $80 = HEAP8[$79 >> 0] | 0;
 $0 = $80;
 $81 = $0;
 STACKTOP = sp;
 return $81 | 0;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $dummy = sp;
 $0 = ($st | 0) == (0 | 0);
 $$st = $0 ? 2316 : $st;
 $1 = HEAP32[$$st >> 2] | 0;
 $2 = ($src | 0) == (0 | 0);
 L1 : do {
  if ($2) {
   $3 = ($1 | 0) == 0;
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc | 0) == (0 | 0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n | 0) == 0;
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1 | 0) == 0;
    if ($6) {
     $7 = HEAP8[$src >> 0] | 0;
     $8 = $7 & 255;
     $9 = $7 << 24 >> 24 > -1;
     if ($9) {
      HEAP32[$dummy$wc >> 2] = $8;
      $10 = $7 << 24 >> 24 != 0;
      $11 = $10 & 1;
      $$0 = $11;
      break;
     }
     $12 = $8 + -194 | 0;
     $13 = $12 >>> 0 > 50;
     if ($13) {
      label = 15;
      break;
     }
     $14 = $src + 1 | 0;
     $15 = 2068 + ($12 << 2) | 0;
     $16 = HEAP32[$15 >> 2] | 0;
     $17 = $n + -1 | 0;
     $18 = ($17 | 0) == 0;
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;
      $c$05 = $16;
      $s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;
     $c$05 = $1;
     $s$06 = $src;
     label = 9;
    }
    L11 : do {
     if ((label | 0) == 9) {
      $19 = HEAP8[$s$06 >> 0] | 0;
      $20 = $19 & 255;
      $21 = $20 >>> 3;
      $22 = $21 + -16 | 0;
      $23 = $c$05 >> 26;
      $24 = $21 + $23 | 0;
      $25 = $22 | $24;
      $26 = $25 >>> 0 > 7;
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;
       $30 = $19;
       $c$1 = $c$05;
       $s$1 = $s$06;
      }
      while (1) {
       $27 = $c$1 << 6;
       $28 = $s$1 + 1 | 0;
       $29 = $30 & 255;
       $31 = $29 + -128 | 0;
       $32 = $31 | $27;
       $33 = $$1 + -1 | 0;
       $34 = ($32 | 0) < 0;
       if (!$34) {
        $$lcssa = $32;
        $$lcssa35 = $33;
        break;
       }
       $36 = ($33 | 0) == 0;
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28 >> 0] | 0;
       $38 = $37 & -64;
       $39 = $38 << 24 >> 24 == -128;
       if ($39) {
        $$1 = $33;
        $30 = $37;
        $c$1 = $32;
        $s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st >> 2] = 0;
      HEAP32[$dummy$wc >> 2] = $$lcssa;
      $35 = $n - $$lcssa35 | 0;
      $$0 = $35;
      break L1;
     }
    } while (0);
    HEAP32[$$st >> 2] = $c$2;
    $$0 = -2;
   }
  }
 } while (0);
 if ((label | 0) == 15) {
  HEAP32[$$st >> 2] = 0;
  $40 = ___errno_location() | 0;
  HEAP32[$40 >> 2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _GamPicShowExV($x, $y, $wid, $hgt, $idx, $pic, $vscr) {
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 $hgt = $hgt | 0;
 $idx = $idx | 0;
 $pic = $pic | 0;
 $vscr = $vscr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $mask = 0, $pLen = 0, $phgt = 0, $pwid = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $wid;
 $3 = $hgt;
 $4 = $idx;
 $5 = $pic;
 $6 = $vscr;
 $7 = $5;
 $8 = HEAPU8[$7 >> 0] | HEAPU8[$7 + 1 >> 0] << 8;
 $9 = $8 & 255;
 $pwid = $9;
 $10 = $5;
 $11 = $10 + 2 | 0;
 $12 = HEAPU8[$11 >> 0] | HEAPU8[$11 + 1 >> 0] << 8;
 $13 = $12 & 255;
 $phgt = $13;
 $14 = $5;
 $15 = $14 + 5 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 & 255;
 $18 = $17 & 1;
 $19 = $18 & 255;
 $mask = $19;
 $20 = $pwid;
 $21 = $20 & 255;
 $22 = $21 >> 3;
 $23 = $22 & 65535;
 $pLen = $23;
 $24 = $pwid;
 $25 = $24 & 255;
 $26 = $25 & 7;
 $27 = ($26 | 0) != 0;
 if ($27) {
  $28 = $pLen;
  $29 = $28 & 65535;
  $30 = $29 + 1 | 0;
  $31 = $30 & 65535;
  $pLen = $31;
 }
 $32 = $phgt;
 $33 = $32 & 255;
 $34 = $pLen;
 $35 = $34 & 65535;
 $36 = Math_imul($35, $33) | 0;
 $37 = $36 & 65535;
 $pLen = $37;
 $38 = $pLen;
 $39 = $38 & 65535;
 $40 = $mask;
 $41 = $40 & 255;
 $42 = $39 << $41;
 $43 = $4;
 $44 = $43 & 255;
 $45 = Math_imul($42, $44) | 0;
 $46 = $45 + 6 | 0;
 $47 = $5;
 $48 = $47 + $46 | 0;
 $5 = $48;
 $49 = $mask;
 $50 = $49 & 255;
 $51 = 1 == ($50 | 0);
 $52 = $0;
 $53 = $1;
 if ($51) {
  $54 = $0;
  $55 = $54 & 255;
  $56 = $2;
  $57 = $56 & 255;
  $58 = $55 + $57 | 0;
  $59 = $58 - 1 | 0;
  $60 = $59 & 255;
  $61 = $1;
  $62 = $61 & 255;
  $63 = $3;
  $64 = $63 & 255;
  $65 = $62 + $64 | 0;
  $66 = $65 - 1 | 0;
  $67 = $66 & 255;
  $68 = $5;
  $69 = $6;
  _GamePictureDummy($52, $53, $60, $67, $68, $69, 1);
  $70 = $pLen;
  $71 = $70 & 65535;
  $72 = $5;
  $73 = $72 + $71 | 0;
  $5 = $73;
  $74 = $0;
  $75 = $1;
  $76 = $0;
  $77 = $76 & 255;
  $78 = $2;
  $79 = $78 & 255;
  $80 = $77 + $79 | 0;
  $81 = $80 - 1 | 0;
  $82 = $81 & 255;
  $83 = $1;
  $84 = $83 & 255;
  $85 = $3;
  $86 = $85 & 255;
  $87 = $84 + $86 | 0;
  $88 = $87 - 1 | 0;
  $89 = $88 & 255;
  $90 = $5;
  $91 = $6;
  _GamePictureDummy($74, $75, $82, $89, $90, $91, 2);
  STACKTOP = sp;
  return;
 } else {
  $92 = $2;
  $93 = $3;
  $94 = $5;
  $95 = $6;
  _GamPicShowV($52, $53, $92, $93, $94, $95);
  STACKTOP = sp;
  return;
 }
}

function _GetPersonsCount($king) {
 $king = $king | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, $count = 0, $fp = 0, $fpc = 0, $i = 0, $j = 0, $op = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $king;
 $count = 0;
 $1 = HEAP32[396 >> 2] | 0;
 $op = $1;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 100;
  if (!$4) {
   break;
  }
  $5 = $i;
  $6 = $5 & 255;
  $7 = $op;
  $8 = $7 + ($6 * 12 | 0) | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $10 = $9 & 255;
  $11 = 255 == ($10 | 0);
  L4 : do {
   if (!$11) {
    $12 = $i;
    $13 = $12 & 255;
    $14 = $op;
    $15 = $14 + ($13 * 12 | 0) | 0;
    $16 = $15 + 2 | 0;
    $17 = HEAP8[$16 >> 0] | 0;
    $18 = $17 & 255;
    $19 = 3645 + ($18 * 31 | 0) | 0;
    $20 = $19 + 1 | 0;
    $21 = HEAP8[$20 >> 0] | 0;
    $22 = $21 & 255;
    $23 = $0;
    $24 = $23 & 255;
    $25 = $24 + 1 | 0;
    $26 = ($22 | 0) != ($25 | 0);
    if (!$26) {
     $27 = $i;
     $28 = $27 & 255;
     $29 = $op;
     $30 = $29 + ($28 * 12 | 0) | 0;
     $31 = HEAP8[$30 >> 0] | 0;
     $32 = $31 & 255;
     $33 = 27 == ($32 | 0);
     if (!$33) {
      $64 = $count;
      $65 = $64 & 255;
      $66 = $65 + 1 | 0;
      $67 = $66 & 255;
      $count = $67;
      break;
     }
     $34 = $i;
     $35 = $34 & 255;
     $36 = $op;
     $37 = $36 + ($35 * 12 | 0) | 0;
     $38 = $37 + 1 | 0;
     $39 = HEAP8[$38 >> 0] | 0;
     $40 = $39 & 255;
     $fpc = $40;
     $41 = $fpc;
     $42 = $41 & 65535;
     $43 = $42 * 10 | 0;
     $44 = $43 & 65535;
     $fpc = $44;
     $45 = HEAP32[392 >> 2] | 0;
     $46 = $fpc;
     $47 = $46 & 65535;
     $48 = $45 + $47 | 0;
     $fp = $48;
     $j = 0;
     while (1) {
      $49 = $j;
      $50 = $49 & 255;
      $51 = ($50 | 0) < 10;
      if (!$51) {
       break L4;
      }
      $52 = $j;
      $53 = $52 & 255;
      $54 = $fp;
      $55 = $54 + $53 | 0;
      $56 = HEAP8[$55 >> 0] | 0;
      $57 = $56 << 24 >> 24 != 0;
      if ($57) {
       $58 = $count;
       $59 = $58 & 255;
       $60 = $59 + 1 | 0;
       $61 = $60 & 255;
       $count = $61;
      }
      $62 = $j;
      $63 = $62 + 1 << 24 >> 24;
      $j = $63;
     }
    }
   }
  } while (0);
  $68 = $i;
  $69 = $68 + 1 << 24 >> 24;
  $i = $69;
 }
 $70 = HEAP32[384 >> 2] | 0;
 $fp = $70;
 $71 = $0;
 $72 = $fp;
 $73 = _GetKingPersons($71, $72) | 0;
 $74 = $73 & 255;
 $75 = $count;
 $76 = $75 & 255;
 $77 = $76 + $74 | 0;
 $78 = $77 & 255;
 $count = $78;
 $79 = $count;
 STACKTOP = sp;
 return $79 | 0;
}

function _ResLoadToCon($ResId, $idx, $cbnk) {
 $ResId = $ResId | 0;
 $idx = $idx | 0;
 $cbnk = $cbnk | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $addr = 0, $ptr = 0, $reshead = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $ResId;
 $2 = $idx;
 $3 = $cbnk;
 $4 = $2;
 $5 = $4 << 24 >> 24 != 0;
 if (!$5) {
  $0 = 0;
  $73 = $0;
  STACKTOP = sp;
  return $73 | 0;
 }
 $6 = $2;
 $7 = $6 & 255;
 $8 = $7 - 1 | 0;
 $9 = $8 & 255;
 $2 = $9;
 $10 = $1;
 $11 = _GetResStartAddr($10) | 0;
 $addr = $11;
 $12 = $addr;
 $13 = ($12 | 0) == 0;
 if ($13) {
  $0 = 0;
  $73 = $0;
  STACKTOP = sp;
  return $73 | 0;
 }
 $14 = $3;
 $15 = $addr;
 $16 = HEAP32[260 >> 2] | 0;
 $17 = _gam_fload($14, $15, $16) | 0;
 $ptr = $17;
 $18 = $ptr;
 $reshead = $18;
 $19 = $reshead;
 $20 = $19 + 6 | 0;
 $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8;
 $22 = $21 & 65535;
 $23 = $2;
 $24 = $23 & 255;
 $25 = ($22 | 0) <= ($24 | 0);
 if (!$25) {
  $26 = $reshead;
  $27 = $26 + 10 | 0;
  $28 = HEAP8[$27 >> 0] | 0;
  $29 = $28 & 255;
  $30 = ($29 | 0) != 0;
  if (!$30) {
   $31 = $reshead;
   $32 = $31 + 8 | 0;
   $33 = HEAPU8[$32 >> 0] | HEAPU8[$32 + 1 >> 0] << 8;
   $34 = $33 & 65535;
   $35 = ($34 | 0) != 0;
   do {
    if ($35) {
     $36 = $ptr;
     $37 = $36 + 12 | 0;
     $ptr = $37;
     $38 = $2;
     $39 = $38 & 255;
     $40 = $reshead;
     $41 = $40 + 8 | 0;
     $42 = HEAPU8[$41 >> 0] | HEAPU8[$41 + 1 >> 0] << 8;
     $43 = $42 & 65535;
     $44 = Math_imul($39, $43) | 0;
     $45 = $ptr;
     $46 = $45 + $44 | 0;
     $ptr = $46;
    } else {
     $47 = $reshead;
     $48 = $47 + 6 | 0;
     $49 = HEAPU8[$48 >> 0] | HEAPU8[$48 + 1 >> 0] << 8;
     $50 = $49 & 65535;
     $51 = ($50 | 0) == 1;
     if ($51) {
      $52 = $ptr;
      $53 = $52 + 12 | 0;
      $ptr = $53;
      break;
     } else {
      $54 = $2;
      $55 = $54 & 255;
      $tmp = $55;
      $56 = $tmp;
      $57 = $56 & 65535;
      $58 = $57 << 2;
      $59 = $58 & 65535;
      $tmp = $59;
      $60 = $tmp;
      $61 = $60 & 65535;
      $62 = $61 + 12 | 0;
      $63 = $62 & 65535;
      $tmp = $63;
      $64 = $ptr;
      $65 = $tmp;
      $66 = $65 & 65535;
      $67 = $64 + $66 | 0;
      $68 = HEAPU8[$67 >> 0] | HEAPU8[$67 + 1 >> 0] << 8;
      $69 = $68 & 65535;
      $70 = $ptr;
      $71 = $70 + $69 | 0;
      $ptr = $71;
      break;
     }
    }
   } while (0);
   $72 = $ptr;
   $0 = $72;
   $73 = $0;
   STACKTOP = sp;
   return $73 | 0;
  }
 }
 $0 = 0;
 $73 = $0;
 STACKTOP = sp;
 return $73 | 0;
}

function _DelGoods($city, $goods) {
 $city = $city | 0;
 $goods = $goods | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $cptr = 0, $i = 0, $qnum = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $city;
 $2 = $goods;
 $3 = $1;
 $4 = $3 & 255;
 $5 = ($4 | 0) >= 38;
 if ($5) {
  $0 = 0;
  $82 = $0;
  STACKTOP = sp;
  return $82 | 0;
 }
 $6 = $2;
 $7 = $6 & 255;
 $8 = ($7 | 0) >= 200;
 if ($8) {
  $0 = 0;
  $82 = $0;
  STACKTOP = sp;
  return $82 | 0;
 }
 $9 = $1;
 $10 = $9 & 255;
 $11 = 3645 + ($10 * 31 | 0) | 0;
 $cptr = $11;
 $12 = $cptr;
 $13 = $12 + 29 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $15 = $14 & 255;
 $16 = $cptr;
 $17 = $16 + 30 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $19 = $18 & 255;
 $20 = $15 + $19 | 0;
 $21 = $20 & 255;
 $qnum = $21;
 $22 = $cptr;
 $23 = $22 + 29 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $i = $24;
 while (1) {
  $25 = $i;
  $26 = $25 & 255;
  $27 = $qnum;
  $28 = $27 & 255;
  $29 = ($26 | 0) < ($28 | 0);
  if (!$29) {
   break;
  }
  $30 = $i;
  $31 = $30 & 255;
  $32 = 5023 + $31 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $34 = $33 & 255;
  $35 = $34 & 127;
  $36 = $2;
  $37 = $36 & 255;
  $38 = ($35 | 0) == ($37 | 0);
  if ($38) {
   break;
  }
  $39 = $i;
  $40 = $39 + 1 << 24 >> 24;
  $i = $40;
 }
 $41 = $i;
 $42 = $41 & 255;
 $43 = $qnum;
 $44 = $43 & 255;
 $45 = ($42 | 0) >= ($44 | 0);
 if ($45) {
  $0 = 0;
  $82 = $0;
  STACKTOP = sp;
  return $82 | 0;
 }
 while (1) {
  $46 = $i;
  $47 = $46 & 255;
  $48 = ($47 | 0) < 199;
  if (!$48) {
   break;
  }
  $49 = $i;
  $50 = $49 & 255;
  $51 = $50 + 1 | 0;
  $52 = 5023 + $51 | 0;
  $53 = HEAP8[$52 >> 0] | 0;
  $54 = $i;
  $55 = $54 & 255;
  $56 = 5023 + $55 | 0;
  HEAP8[$56 >> 0] = $53;
  $57 = $i;
  $58 = $57 + 1 << 24 >> 24;
  $i = $58;
 }
 $59 = $cptr;
 $60 = $59 + 30 | 0;
 $61 = HEAP8[$60 >> 0] | 0;
 $62 = $61 & 255;
 $63 = $62 - 1 | 0;
 $64 = $63 & 255;
 HEAP8[$60 >> 0] = $64;
 $65 = $1;
 $66 = $65 & 255;
 $67 = $66 + 1 | 0;
 $68 = $67 & 255;
 $i = $68;
 while (1) {
  $69 = $i;
  $70 = $69 & 255;
  $71 = ($70 | 0) < 38;
  if (!$71) {
   break;
  }
  $72 = $i;
  $73 = $72 & 255;
  $74 = 3645 + ($73 * 31 | 0) | 0;
  $75 = $74 + 29 | 0;
  $76 = HEAP8[$75 >> 0] | 0;
  $77 = $76 & 255;
  $78 = $77 - 1 | 0;
  $79 = $78 & 255;
  HEAP8[$75 >> 0] = $79;
  $80 = $i;
  $81 = $80 + 1 << 24 >> 24;
  $i = $81;
 }
 $0 = 1;
 $82 = $0;
 STACKTOP = sp;
 return $82 | 0;
}

function _DelPerson($city, $person) {
 $city = $city | 0;
 $person = $person | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $cptr = 0, $i = 0, $qnum = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $city;
 $2 = $person;
 $3 = $1;
 $4 = $3 & 255;
 $5 = ($4 | 0) >= 38;
 if ($5) {
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;
  return $81 | 0;
 }
 $6 = $2;
 $7 = $6 & 255;
 $8 = ($7 | 0) >= 200;
 if ($8) {
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;
  return $81 | 0;
 }
 $9 = $1;
 $10 = $9 & 255;
 $11 = 3645 + ($10 * 31 | 0) | 0;
 $cptr = $11;
 $12 = $cptr;
 $13 = $12 + 27 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $15 = $14 & 255;
 $16 = $cptr;
 $17 = $16 + 28 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $19 = $18 & 255;
 $20 = $15 + $19 | 0;
 $21 = $20 & 255;
 $qnum = $21;
 $22 = $cptr;
 $23 = $22 + 27 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $i = $24;
 while (1) {
  $25 = $i;
  $26 = $25 & 255;
  $27 = $qnum;
  $28 = $27 & 255;
  $29 = ($26 | 0) < ($28 | 0);
  if (!$29) {
   break;
  }
  $30 = $i;
  $31 = $30 & 255;
  $32 = 4823 + $31 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $34 = $33 & 255;
  $35 = $2;
  $36 = $35 & 255;
  $37 = ($34 | 0) == ($36 | 0);
  if ($37) {
   break;
  }
  $38 = $i;
  $39 = $38 + 1 << 24 >> 24;
  $i = $39;
 }
 $40 = $i;
 $41 = $40 & 255;
 $42 = $qnum;
 $43 = $42 & 255;
 $44 = ($41 | 0) >= ($43 | 0);
 if ($44) {
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;
  return $81 | 0;
 }
 while (1) {
  $45 = $i;
  $46 = $45 & 255;
  $47 = ($46 | 0) < 199;
  if (!$47) {
   break;
  }
  $48 = $i;
  $49 = $48 & 255;
  $50 = $49 + 1 | 0;
  $51 = 4823 + $50 | 0;
  $52 = HEAP8[$51 >> 0] | 0;
  $53 = $i;
  $54 = $53 & 255;
  $55 = 4823 + $54 | 0;
  HEAP8[$55 >> 0] = $52;
  $56 = $i;
  $57 = $56 + 1 << 24 >> 24;
  $i = $57;
 }
 $58 = $cptr;
 $59 = $58 + 28 | 0;
 $60 = HEAP8[$59 >> 0] | 0;
 $61 = $60 & 255;
 $62 = $61 - 1 | 0;
 $63 = $62 & 255;
 HEAP8[$59 >> 0] = $63;
 $64 = $1;
 $65 = $64 & 255;
 $66 = $65 + 1 | 0;
 $67 = $66 & 255;
 $i = $67;
 while (1) {
  $68 = $i;
  $69 = $68 & 255;
  $70 = ($69 | 0) < 38;
  if (!$70) {
   break;
  }
  $71 = $i;
  $72 = $71 & 255;
  $73 = 3645 + ($72 * 31 | 0) | 0;
  $74 = $73 + 27 | 0;
  $75 = HEAP8[$74 >> 0] | 0;
  $76 = $75 & 255;
  $77 = $76 - 1 | 0;
  $78 = $77 & 255;
  HEAP8[$74 >> 0] = $78;
  $79 = $i;
  $80 = $79 + 1 << 24 >> 24;
  $i = $80;
 }
 $0 = 1;
 $81 = $0;
 STACKTOP = sp;
 return $81 | 0;
}

function _PlcRPicShow($id, $idx, $x, $y, $flag) {
 $id = $id | 0;
 $idx = $idx | 0;
 $x = $x | 0;
 $y = $y | 0;
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $high = 0, $mode = 0, $off = 0, $pic = 0, $wid = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $id;
 $1 = $idx;
 $2 = $x;
 $3 = $y;
 $4 = $flag;
 $5 = $0;
 $6 = HEAP32[256 >> 2] | 0;
 $7 = _ResLoadToCon($5, 1, $6) | 0;
 $pic = $7;
 $8 = $pic;
 $9 = (0 | 0) == ($8 | 0);
 if ($9) {
  STACKTOP = sp;
  return;
 }
 $10 = $1;
 $11 = $10 & 255;
 $12 = $pic;
 $13 = $12 + 4 | 0;
 $14 = HEAP8[$13 >> 0] | 0;
 $15 = $14 & 255;
 $16 = ($11 | 0) > ($15 | 0);
 if ($16) {
  STACKTOP = sp;
  return;
 }
 $17 = $pic;
 $18 = HEAP8[$17 >> 0] | 0;
 $wid = $18;
 $19 = $pic;
 $20 = $19 + 2 | 0;
 $21 = HEAP8[$20 >> 0] | 0;
 $high = $21;
 $22 = $pic;
 $23 = $22 + 5 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $25 = $24 & 255;
 $26 = $25 & 1;
 $27 = $26 & 255;
 $mode = $27;
 $28 = $wid;
 $29 = $28 & 255;
 $30 = $29 >> 3;
 $31 = $30 & 65535;
 $off = $31;
 $32 = $wid;
 $33 = $32 & 255;
 $34 = $33 & 7;
 $35 = ($34 | 0) != 0;
 if ($35) {
  $36 = $off;
  $37 = $36 & 65535;
  $38 = $37 + 1 | 0;
  $39 = $38 & 65535;
  $off = $39;
 }
 $40 = $high;
 $41 = $40 & 255;
 $42 = $off;
 $43 = $42 & 65535;
 $44 = Math_imul($43, $41) | 0;
 $45 = $44 & 65535;
 $off = $45;
 $46 = $mode;
 $47 = $46 & 255;
 $48 = $off;
 $49 = $48 & 65535;
 $50 = $49 << $47;
 $51 = $50 & 65535;
 $off = $51;
 $52 = $1;
 $53 = $52 & 255;
 $54 = $53 - 1 | 0;
 $55 = $off;
 $56 = $55 & 65535;
 $57 = Math_imul($56, $54) | 0;
 $58 = $57 & 65535;
 $off = $58;
 $59 = $off;
 $60 = $59 & 65535;
 $61 = $pic;
 $62 = $61 + $60 | 0;
 $pic = $62;
 $63 = $pic;
 $64 = $63 + 6 | 0;
 $pic = $64;
 $65 = $4;
 $66 = $65 << 24 >> 24 != 0;
 $67 = $mode;
 $68 = $67 << 24 >> 24 != 0;
 $69 = $2;
 $70 = $3;
 $71 = $wid;
 $72 = $high;
 $73 = $pic;
 if ($66) {
  if ($68) {
   _GamMPicShowS($69, $70, $71, $72, $73);
   STACKTOP = sp;
   return;
  } else {
   _GamPicShowS($69, $70, $71, $72, $73);
   STACKTOP = sp;
   return;
  }
 } else {
  $74 = HEAP32[272 >> 2] | 0;
  if ($68) {
   _GamMPicShowV($69, $70, $71, $72, $73, $74);
   STACKTOP = sp;
   return;
  } else {
   _GamPicShowV($69, $70, $71, $72, $73, $74);
   STACKTOP = sp;
   return;
  }
 }
}

function _FgtGetCmdRng($type, $param, $idx) {
 $type = $type | 0;
 $param = $param | 0;
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $id = 0, $item = 0, $offset = 0, $ptr = 0, $rngb = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $type;
 $1 = $param;
 $2 = $idx;
 $item = 0;
 $rngb = 0;
 $offset = 0;
 $id = 0;
 $3 = $0;
 $4 = $3 & 255;
 switch ($4 | 0) {
 case 0:
  {
   $5 = $2;
   $6 = $5 & 255;
   $7 = 3480 + $6 | 0;
   $8 = HEAP8[$7 >> 0] | 0;
   $9 = $8 & 255;
   $10 = $9 - 1 | 0;
   $11 = HEAP32[332 >> 2] | 0;
   $12 = $11 + ($10 * 15 | 0) | 0;
   $13 = $12 + 9 | 0;
   $14 = HEAP8[$13 >> 0] | 0;
   $15 = $14 & 255;
   $16 = $15 & 65535;
   $17 = $16 * 25 | 0;
   $18 = $17 & 65535;
   $offset = $18;
   $id = 2;
   $item = 1;
   $rngb = 5;
   break;
  }
 case 1:
  {
   $19 = $1;
   $20 = $19 & 255;
   $21 = $20 - 1 | 0;
   $22 = $21 & 65535;
   $23 = $22 & 65535;
   $24 = $23 * 9 | 0;
   $25 = $24 * 9 | 0;
   $26 = $25 & 65535;
   $offset = $26;
   $id = 13;
   $item = 1;
   $rngb = 9;
   break;
  }
 default:
  {}
 }
 $27 = $id;
 $28 = $item;
 $29 = HEAP32[256 >> 2] | 0;
 $30 = _ResLoadToCon($27, $28, $29) | 0;
 $31 = $offset;
 $32 = $31 & 65535;
 $33 = $30 + $32 | 0;
 $ptr = $33;
 $34 = $rngb;
 $35 = $34 & 255;
 $36 = $rngb;
 $37 = $36 & 255;
 $38 = Math_imul($35, $37) | 0;
 $39 = ($38 | 0) > 83;
 if ($39) {
  STACKTOP = sp;
  return;
 }
 $40 = HEAP32[288 >> 2] | 0;
 $41 = $40 + 3 | 0;
 $42 = $ptr;
 $43 = $rngb;
 $44 = $43 & 255;
 $45 = $rngb;
 $46 = $45 & 255;
 $47 = Math_imul($44, $46) | 0;
 _memcpy($41 | 0, $42 | 0, $47 | 0) | 0;
 $48 = $rngb;
 $49 = HEAP32[288 >> 2] | 0;
 HEAP8[$49 >> 0] = $48;
 $50 = $2;
 $51 = $50 & 255;
 $52 = 3500 + ($51 * 7 | 0) | 0;
 $53 = HEAP8[$52 >> 0] | 0;
 $54 = $53 & 255;
 $55 = $rngb;
 $56 = $55 & 255;
 $57 = $56 >> 1;
 $58 = $54 - $57 | 0;
 $59 = $58 & 255;
 $60 = HEAP32[288 >> 2] | 0;
 $61 = $60 + 1 | 0;
 HEAP8[$61 >> 0] = $59;
 $62 = $2;
 $63 = $62 & 255;
 $64 = 3500 + ($63 * 7 | 0) | 0;
 $65 = $64 + 1 | 0;
 $66 = HEAP8[$65 >> 0] | 0;
 $67 = $66 & 255;
 $68 = $rngb;
 $69 = $68 & 255;
 $70 = $69 >> 1;
 $71 = $67 - $70 | 0;
 $72 = $71 & 255;
 $73 = HEAP32[288 >> 2] | 0;
 $74 = $73 + 2 | 0;
 HEAP8[$74 >> 0] = $72;
 STACKTOP = sp;
 return;
}

function _PersonUpDatadate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $p = 0, $pinf = 0, $t = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP8[3643 >> 0] | 0;
 $2 = $1 & 255;
 $3 = 1 == ($2 | 0);
 L1 : do {
  if ($3) {
   $p = 0;
   while (1) {
    $4 = $p;
    $5 = $4 & 255;
    $6 = ($5 | 0) < 200;
    if (!$6) {
     break L1;
    }
    $7 = $p;
    $8 = $7 & 255;
    $9 = HEAP32[332 >> 2] | 0;
    $10 = $9 + ($8 * 15 | 0) | 0;
    $11 = $10 + 14 | 0;
    $12 = HEAP8[$11 >> 0] | 0;
    $13 = $12 & 255;
    $14 = $13 + 1 | 0;
    $15 = $14 & 255;
    HEAP8[$11 >> 0] = $15;
    $16 = $p;
    $17 = $16 + 1 << 24 >> 24;
    $p = $17;
   }
  }
 } while (0);
 $18 = HEAP8[3644 >> 0] | 0;
 $19 = HEAP32[256 >> 2] | 0;
 $20 = _ResLoadToCon(63, $18, $19) | 0;
 $pinf = $20;
 $p = 0;
 $t = 0;
 while (1) {
  $21 = $p;
  $22 = $21 & 255;
  $23 = ($22 | 0) < 200;
  if (!$23) {
   label = 16;
   break;
  }
  $24 = $t;
  $25 = $24 & 65535;
  $26 = $pinf;
  $27 = $26 + $25 | 0;
  $28 = HEAP8[$27 >> 0] | 0;
  $29 = $28 & 255;
  $30 = $29 + 16 | 0;
  $31 = HEAPU8[3641 >> 0] | HEAPU8[3641 + 1 >> 0] << 8;
  $32 = $31 & 65535;
  $33 = ($30 | 0) == ($32 | 0);
  if ($33) {
   $34 = $t;
   $35 = $34 & 65535;
   $36 = $35 + 2 | 0;
   $37 = $pinf;
   $38 = $37 + $36 | 0;
   $39 = HEAP8[$38 >> 0] | 0;
   $c = $39;
   $40 = $c;
   $41 = $40 << 24 >> 24 != 0;
   if (!$41) {
    $42 = _rand() | 0;
    $43 = ($42 | 0) % 38 & -1;
    $44 = $43 & 255;
    $c = $44;
   }
   $45 = HEAP8[3396 >> 0] | 0;
   $46 = $45 << 24 >> 24 != 0;
   if ($46) {
    $47 = $c;
    $48 = $47 & 255;
    $49 = $48 - 1 | 0;
    $50 = $49 & 255;
    $c = $50;
   }
   $51 = $c;
   $52 = $p;
   $53 = _AddPerson($51, $52) | 0;
   $54 = $53 << 24 >> 24 != 0;
   if (!$54) {
    label = 13;
    break;
   }
   $55 = $p;
   $56 = $55 & 255;
   $57 = HEAP32[332 >> 2] | 0;
   $58 = $57 + ($56 * 15 | 0) | 0;
   $59 = $58 + 14 | 0;
   HEAP8[$59 >> 0] = 16;
  }
  $60 = $p;
  $61 = $60 + 1 << 24 >> 24;
  $p = $61;
  $62 = $t;
  $63 = $62 & 65535;
  $64 = $63 + 3 | 0;
  $65 = $64 & 65535;
  $t = $65;
 }
 if ((label | 0) == 13) {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;
  return $66 | 0;
 } else if ((label | 0) == 16) {
  $0 = 1;
  $66 = $0;
  STACKTOP = sp;
  return $66 | 0;
 }
 return 0 | 0;
}

function _FgtGetMPos($idx, $pRect) {
 $idx = $idx | 0;
 $pRect = $pRect | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $rey = 0, $rsy = 0, $sx = 0, $sy = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $pRect;
 $tmp = 5;
 $2 = $tmp;
 $3 = $2 & 255;
 $4 = ($3 | 0) < 4;
 if ($4) {
  $tmp = 6;
 } else {
  $tmp = 0;
 }
 $5 = $0;
 $6 = $5 & 255;
 $7 = 3500 + ($6 * 7 | 0) | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $8 & 255;
 $10 = HEAP8[3455 >> 0] | 0;
 $11 = $10 & 255;
 $12 = $9 - $11 | 0;
 $13 = $12 << 4;
 $14 = $13 + 0 | 0;
 $15 = $14 + 16 | 0;
 $16 = $15 + 2 | 0;
 $17 = $16 & 255;
 $sx = $17;
 $18 = $sx;
 $19 = $18 & 255;
 $20 = $19 + 24 | 0;
 $21 = $tmp;
 $22 = $21 & 255;
 $23 = 159 - $22 | 0;
 $24 = ($20 | 0) > ($23 | 0);
 if ($24) {
  $25 = $sx;
  $26 = $25 & 255;
  $27 = $26 - 16 | 0;
  $28 = $tmp;
  $29 = $28 & 255;
  $30 = $27 - $29 | 0;
  $31 = $30 - 24 | 0;
  $32 = $31 & 255;
  $sx = $32;
 }
 $33 = $sx;
 $34 = $1;
 HEAP8[$34 >> 0] = $33;
 $35 = $sx;
 $36 = $35 & 255;
 $37 = $36 + 24 | 0;
 $38 = $37 & 255;
 $39 = $1;
 $40 = $39 + 2 | 0;
 HEAP8[$40 >> 0] = $38;
 $41 = $0;
 $42 = $41 & 255;
 $43 = 3500 + ($42 * 7 | 0) | 0;
 $44 = $43 + 1 | 0;
 $45 = HEAP8[$44 >> 0] | 0;
 $46 = $45 & 255;
 $47 = HEAP8[3456 >> 0] | 0;
 $48 = $47 & 255;
 $49 = $46 - $48 | 0;
 $50 = $49 << 4;
 $51 = $50 + 0 | 0;
 $52 = $51 & 255;
 $sy = $52;
 $53 = $sy;
 $54 = $53 & 255;
 $55 = 95 - $54 | 0;
 $56 = $55 - 24 | 0;
 $57 = ($56 | 0) / 12 & -1;
 $58 = ($57 | 0) < 4;
 if ($58) {
  $sy = 77;
  $rey = 77;
  $59 = $sy;
  $60 = $59 & 255;
  $61 = $60 - 48 | 0;
  $62 = $61 & 255;
  $rsy = $62;
  $72 = $rsy;
  $73 = $1;
  $74 = $73 + 1 | 0;
  HEAP8[$74 >> 0] = $72;
  $75 = $rey;
  $76 = $1;
  $77 = $76 + 3 | 0;
  HEAP8[$77 >> 0] = $75;
  STACKTOP = sp;
  return;
 } else {
  $63 = $sy;
  $64 = $63 & 255;
  $65 = $64 + 4 | 0;
  $66 = $65 & 255;
  $sy = $66;
  $67 = $sy;
  $rsy = $67;
  $68 = $sy;
  $69 = $68 & 255;
  $70 = $69 + 48 | 0;
  $71 = $70 & 255;
  $rey = $71;
  $72 = $rsy;
  $73 = $1;
  $74 = $73 + 1 | 0;
  HEAP8[$74 >> 0] = $72;
  $75 = $rey;
  $76 = $1;
  $77 = $76 + 3 | 0;
  HEAP8[$77 >> 0] = $75;
  STACKTOP = sp;
  return;
 }
}

function _FgtCountWon() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $arms1 = 0, $arms2 = 0, $prov1 = 0, $prov2 = 0, $randv = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _rand() | 0;
 $1 = ($0 | 0) % 101 & -1;
 $2 = $1 & 255;
 $randv = $2;
 $3 = _FgtAllArms(0) | 0;
 $arms1 = $3;
 $4 = $arms1;
 $5 = $4 << 16 >> 16 != 0;
 if (!$5) {
  HEAP8[3465 >> 0] = 2;
 }
 $6 = _FgtAllArms(1) | 0;
 $arms2 = $6;
 $7 = $arms2;
 $8 = $7 << 16 >> 16 != 0;
 if (!$8) {
  HEAP8[3465 >> 0] = 1;
 }
 $9 = HEAPU8[3476 >> 0] | HEAPU8[3476 + 1 >> 0] << 8;
 $prov1 = $9;
 $10 = HEAPU8[3478 >> 0] | HEAPU8[3478 + 1 >> 0] << 8;
 $prov2 = $10;
 $11 = $arms1;
 $12 = $11 & 65535;
 $13 = $arms2;
 $14 = $13 & 65535;
 $15 = ($12 | 0) > ($14 | 0);
 $16 = $arms1;
 $17 = $16 & 65535;
 if ($15) {
  $18 = $17 >> 1;
  $19 = $arms2;
  $20 = $19 & 65535;
  $21 = ($18 | 0) > ($20 | 0);
  if ($21) {
   $22 = $randv;
   $23 = $22 & 255;
   $24 = ($23 | 0) < 30;
   $25 = $24 & 1;
   $26 = $25 + 1 | 0;
   $27 = $26 & 255;
   HEAP8[3465 >> 0] = $27;
   STACKTOP = sp;
   return;
  }
  $28 = $prov1;
  $29 = $28 & 65535;
  $30 = $prov2;
  $31 = $30 & 65535;
  $32 = ($29 | 0) > ($31 | 0);
  $33 = $randv;
  $34 = $33 & 255;
  if ($32) {
   $35 = ($34 | 0) < 40;
   $36 = $35 & 1;
   $37 = $36 + 1 | 0;
   $38 = $37 & 255;
   HEAP8[3465 >> 0] = $38;
   STACKTOP = sp;
   return;
  } else {
   $39 = ($34 | 0) < 60;
   $40 = $39 & 1;
   $41 = $40 + 1 | 0;
   $42 = $41 & 255;
   HEAP8[3465 >> 0] = $42;
   STACKTOP = sp;
   return;
  }
 } else {
  $43 = $arms2;
  $44 = $43 & 65535;
  $45 = $44 >> 1;
  $46 = ($17 | 0) < ($45 | 0);
  if ($46) {
   $47 = $randv;
   $48 = $47 & 255;
   $49 = ($48 | 0) > 2;
   $50 = $49 & 1;
   $51 = $50 + 1 | 0;
   $52 = $51 & 255;
   HEAP8[3465 >> 0] = $52;
   STACKTOP = sp;
   return;
  }
  $53 = $prov1;
  $54 = $53 & 65535;
  $55 = $prov2;
  $56 = $55 & 65535;
  $57 = ($54 | 0) > ($56 | 0);
  $58 = $randv;
  $59 = $58 & 255;
  if ($57) {
   $60 = ($59 | 0) > 30;
   $61 = $60 & 1;
   $62 = $61 + 1 | 0;
   $63 = $62 & 255;
   HEAP8[3465 >> 0] = $63;
   STACKTOP = sp;
   return;
  } else {
   $64 = ($59 | 0) > 10;
   $65 = $64 & 1;
   $66 = $65 + 1 | 0;
   $67 = $66 & 255;
   HEAP8[3465 >> 0] = $67;
   STACKTOP = sp;
   return;
  }
 }
}

function _GetEnemyPersons($king, $pqueue) {
 $king = $king | 0;
 $pqueue = $pqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $c = 0, $count = 0, $i = 0, $p = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $king;
 $1 = $pqueue;
 $count = 0;
 $c = 0;
 while (1) {
  $2 = $c;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 38;
  if (!$4) {
   break;
  }
  $5 = $c;
  $6 = $5 & 255;
  $7 = 3645 + ($6 * 31 | 0) | 0;
  $8 = $7 + 1 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $b = $9;
  $10 = $b;
  $11 = $10 & 255;
  $12 = $0;
  $13 = $12 & 255;
  $14 = $13 + 1 | 0;
  $15 = ($11 | 0) != ($14 | 0);
  L4 : do {
   if ($15) {
    $16 = $b;
    $17 = $16 & 255;
    $18 = ($17 | 0) != 0;
    if ($18) {
     $i = 0;
     while (1) {
      $19 = $i;
      $20 = $19 & 255;
      $21 = $c;
      $22 = $21 & 255;
      $23 = 3645 + ($22 * 31 | 0) | 0;
      $24 = $23 + 28 | 0;
      $25 = HEAP8[$24 >> 0] | 0;
      $26 = $25 & 255;
      $27 = ($20 | 0) < ($26 | 0);
      if (!$27) {
       break L4;
      }
      $28 = $c;
      $29 = $28 & 255;
      $30 = 3645 + ($29 * 31 | 0) | 0;
      $31 = $30 + 27 | 0;
      $32 = HEAP8[$31 >> 0] | 0;
      $33 = $32 & 255;
      $34 = $i;
      $35 = $34 & 255;
      $36 = $33 + $35 | 0;
      $37 = 4823 + $36 | 0;
      $38 = HEAP8[$37 >> 0] | 0;
      $p = $38;
      $39 = $p;
      $40 = $39 & 255;
      $41 = HEAP32[332 >> 2] | 0;
      $42 = $41 + ($40 * 15 | 0) | 0;
      $43 = $42 + 1 | 0;
      $44 = HEAP8[$43 >> 0] | 0;
      $45 = $44 & 255;
      $46 = $b;
      $47 = $46 & 255;
      $48 = ($45 | 0) == ($47 | 0);
      if ($48) {
       $49 = $p;
       $50 = $49 & 255;
       $51 = $50 + 1 | 0;
       $52 = $b;
       $53 = $52 & 255;
       $54 = ($51 | 0) != ($53 | 0);
       if ($54) {
        $55 = $p;
        $56 = $count;
        $57 = $56 & 255;
        $58 = $1;
        $59 = $58 + $57 | 0;
        HEAP8[$59 >> 0] = $55;
        $60 = $count;
        $61 = $60 & 255;
        $62 = $61 + 1 | 0;
        $63 = $62 & 255;
        $count = $63;
       }
      }
      $64 = $i;
      $65 = $64 + 1 << 24 >> 24;
      $i = $65;
     }
    }
   }
  } while (0);
  $66 = $c;
  $67 = $66 + 1 << 24 >> 24;
  $c = $67;
 }
 $68 = $count;
 STACKTOP = sp;
 return $68 | 0;
}

function _AddItem($wid, $hig, $positem, $x, $y) {
 $wid = $wid | 0;
 $hig = $hig | 0;
 $positem = $positem | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $wid;
 $2 = $hig;
 $3 = $positem;
 $4 = $x;
 $5 = $y;
 $6 = $3;
 $7 = $6 + 5 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $8 & 255;
 $10 = $2;
 $11 = $10 & 255;
 $12 = $9 + $11 | 0;
 $13 = $12 - 1 | 0;
 $14 = $3;
 $15 = $14 + 3 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 & 255;
 $18 = ($13 | 0) > ($17 | 0);
 if ($18) {
  $0 = 0;
  $83 = $0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $19 = $3;
 $20 = $19 + 6 | 0;
 $21 = HEAP8[$20 >> 0] | 0;
 $22 = $21 & 255;
 $23 = $1;
 $24 = $23 & 255;
 $25 = $22 + $24 | 0;
 $26 = $25 - 1 | 0;
 $27 = $3;
 $28 = $27 + 2 | 0;
 $29 = HEAP8[$28 >> 0] | 0;
 $30 = $29 & 255;
 $31 = ($26 | 0) > ($30 | 0);
 if ($31) {
  $0 = 0;
  $83 = $0;
  STACKTOP = sp;
  return $83 | 0;
 }
 $32 = $3;
 $33 = $32 + 6 | 0;
 $34 = HEAP8[$33 >> 0] | 0;
 $35 = $34 & 255;
 $36 = $35 + 1 | 0;
 $37 = $36 & 255;
 $38 = $3;
 $39 = $38 + 4 | 0;
 HEAP8[$39 >> 0] = $37;
 $40 = $3;
 $41 = $40 + 4 | 0;
 $42 = HEAP8[$41 >> 0] | 0;
 $43 = $42 & 255;
 $44 = $1;
 $45 = $44 & 255;
 $46 = $43 + $45 | 0;
 $47 = $46 - 1 | 0;
 $48 = $47 & 255;
 $49 = $3;
 $50 = $49 + 6 | 0;
 HEAP8[$50 >> 0] = $48;
 $51 = $3;
 $52 = $51 + 5 | 0;
 $53 = HEAP8[$52 >> 0] | 0;
 $54 = $53 & 255;
 $55 = $2;
 $56 = $55 & 255;
 $57 = $54 + $56 | 0;
 $58 = $57 - 1 | 0;
 $59 = $3;
 $60 = $59 + 7 | 0;
 $61 = HEAP8[$60 >> 0] | 0;
 $62 = $61 & 255;
 $63 = ($58 | 0) > ($62 | 0);
 if ($63) {
  $64 = $3;
  $65 = $64 + 5 | 0;
  $66 = HEAP8[$65 >> 0] | 0;
  $67 = $66 & 255;
  $68 = $2;
  $69 = $68 & 255;
  $70 = $67 + $69 | 0;
  $71 = $70 - 1 | 0;
  $72 = $71 & 255;
  $73 = $3;
  $74 = $73 + 7 | 0;
  HEAP8[$74 >> 0] = $72;
 }
 $75 = $3;
 $76 = $75 + 4 | 0;
 $77 = HEAP8[$76 >> 0] | 0;
 $78 = $4;
 HEAP8[$78 >> 0] = $77;
 $79 = $3;
 $80 = $79 + 5 | 0;
 $81 = HEAP8[$80 >> 0] | 0;
 $82 = $5;
 HEAP8[$82 >> 0] = $81;
 $0 = 1;
 $83 = $0;
 STACKTOP = sp;
 return $83 | 0;
}

function _FgtSetSamPot($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $i = 0, $lps = 0, $off = 0, $pos = 0, $sx = 0, $sy = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = $1 & 255;
 $3 = ($2 | 0) < 10;
 if ($3) {
  $lps = 0;
 } else {
  $lps = 10;
 }
 $4 = HEAP8[3457 >> 0] | 0;
 $5 = $4 & 255;
 $6 = HEAP8[3459 >> 0] | 0;
 $7 = $6 & 255;
 $8 = $5 - $7 | 0;
 $9 = $8 & 255;
 $sx = $9;
 $10 = HEAP8[3458 >> 0] | 0;
 $11 = $10 & 255;
 $12 = HEAP8[3460 >> 0] | 0;
 $13 = $12 & 255;
 $14 = $11 - $13 | 0;
 $15 = $14 & 255;
 $sy = $15;
 $16 = $lps;
 $i = $16;
 while (1) {
  $17 = $i;
  $18 = $17 & 255;
  $19 = $lps;
  $20 = $19 & 255;
  $21 = $20 + 10 | 0;
  $22 = ($18 | 0) < ($21 | 0);
  if (!$22) {
   break;
  }
  $23 = $i;
  $24 = $23 & 255;
  $25 = 3500 + ($24 * 7 | 0) | 0;
  $pos = $25;
  $26 = $pos;
  $27 = $26 + 6 | 0;
  $28 = HEAP8[$27 >> 0] | 0;
  $29 = $28 & 255;
  $30 = 8 == ($29 | 0);
  if (!$30) {
   $31 = $0;
   $32 = $31 & 255;
   $33 = $i;
   $34 = $33 & 255;
   $35 = ($32 | 0) == ($34 | 0);
   if (!$35) {
    $36 = $pos;
    $37 = HEAP8[$36 >> 0] | 0;
    $38 = $37 & 255;
    $39 = $sx;
    $40 = $39 & 255;
    $41 = $38 - $40 | 0;
    $42 = $41 & 255;
    $x = $42;
    $43 = $pos;
    $44 = $43 + 1 | 0;
    $45 = HEAP8[$44 >> 0] | 0;
    $46 = $45 & 255;
    $47 = $sy;
    $48 = $47 & 255;
    $49 = $46 - $48 | 0;
    $50 = $49 & 255;
    $y = $50;
    $51 = $x;
    $52 = $51 & 255;
    $53 = ($52 | 0) > 15;
    if (!$53) {
     $54 = $y;
     $55 = $54 & 255;
     $56 = ($55 | 0) > 15;
     if (!$56) {
      $57 = $y;
      $58 = $57 & 255;
      $59 = $58 * 15 | 0;
      $60 = $x;
      $61 = $60 & 255;
      $62 = $59 + $61 | 0;
      $63 = $62 & 255;
      $off = $63;
      $64 = $off;
      $65 = $64 & 255;
      $66 = ($65 | 0) < 225;
      if ($66) {
       $67 = $off;
       $68 = $67 & 255;
       $69 = HEAP32[284 >> 2] | 0;
       $70 = $69 + $68 | 0;
       HEAP8[$70 >> 0] = -2;
      }
     }
    }
   }
  }
  $71 = $i;
  $72 = $71 & 255;
  $73 = $72 + 1 | 0;
  $74 = $73 & 255;
  $i = $74;
 }
 STACKTOP = sp;
 return;
}

function _ltoa($num, $str, $radix) {
 $num = $num | 0;
 $str = $str | 0;
 $radix = $radix | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $index = 0, $j = 0, $k = 0, $or$cond = 0, $temp = 0, $unum = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $index = sp + 29 | 0;
 $0 = $num;
 $1 = $str;
 $2 = $radix;
 dest = $index;
 src = 3399;
 stop = dest + 37 | 0;
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $i = 0;
 $3 = $2;
 $4 = ($3 | 0) == 10;
 $5 = $0;
 $6 = ($5 | 0) < 0;
 $or$cond = $4 & $6;
 $7 = $0;
 if ($or$cond) {
  $8 = 0 - $7 | 0;
  $unum = $8;
  $9 = $i;
  $10 = $9 + 1 | 0;
  $i = $10;
  $11 = $1;
  $12 = $11 + $9 | 0;
  HEAP8[$12 >> 0] = 45;
 } else {
  $unum = $7;
 }
 while (1) {
  $13 = $unum;
  $14 = $2;
  $15 = ($13 >>> 0) % ($14 >>> 0) & -1;
  $16 = $index + $15 | 0;
  $17 = HEAP8[$16 >> 0] | 0;
  $18 = $i;
  $19 = $18 + 1 | 0;
  $i = $19;
  $20 = $1;
  $21 = $20 + $18 | 0;
  HEAP8[$21 >> 0] = $17;
  $22 = $2;
  $23 = $unum;
  $24 = ($23 >>> 0) / ($22 >>> 0) & -1;
  $unum = $24;
  $25 = $unum;
  $26 = ($25 | 0) != 0;
  if (!$26) {
   break;
  }
 }
 $27 = $i;
 $28 = $1;
 $29 = $28 + $27 | 0;
 HEAP8[$29 >> 0] = 0;
 $30 = $1;
 $31 = HEAP8[$30 >> 0] | 0;
 $32 = $31 << 24 >> 24;
 $33 = ($32 | 0) == 45;
 if ($33) {
  $k = 1;
 } else {
  $k = 0;
 }
 $34 = $k;
 $j = $34;
 while (1) {
  $35 = $j;
  $36 = $i;
  $37 = $36 - 1 | 0;
  $38 = ($37 | 0) / 2 & -1;
  $39 = ($35 | 0) <= ($38 | 0);
  if (!$39) {
   break;
  }
  $40 = $j;
  $41 = $1;
  $42 = $41 + $40 | 0;
  $43 = HEAP8[$42 >> 0] | 0;
  $temp = $43;
  $44 = $i;
  $45 = $44 - 1 | 0;
  $46 = $k;
  $47 = $45 + $46 | 0;
  $48 = $j;
  $49 = $47 - $48 | 0;
  $50 = $1;
  $51 = $50 + $49 | 0;
  $52 = HEAP8[$51 >> 0] | 0;
  $53 = $j;
  $54 = $1;
  $55 = $54 + $53 | 0;
  HEAP8[$55 >> 0] = $52;
  $56 = $temp;
  $57 = $i;
  $58 = $57 - 1 | 0;
  $59 = $k;
  $60 = $58 + $59 | 0;
  $61 = $j;
  $62 = $60 - $61 | 0;
  $63 = $1;
  $64 = $63 + $62 | 0;
  HEAP8[$64 >> 0] = $56;
  $65 = $j;
  $66 = $65 + 1 | 0;
  $j = $66;
 }
 $67 = $1;
 STACKTOP = sp;
 return $67 | 0;
}

function _FgtCountPath($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $aptr = 0, $chi1 = 0, $chi1P = 0, $chi2 = 0, $chi2P = 0, $i = 0, $lp = 0, $sidx = 0, $sptr = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $chi1 = sp + 48 | 0;
 $chi2 = sp + 24 | 0;
 $chi1P = sp + 17 | 0;
 $chi2P = sp + 16 | 0;
 $0 = $idx;
 $1 = $0;
 _FgtGetRelief($1);
 $2 = $0;
 _FgtTransMove($2);
 $3 = $0;
 $4 = $3 & 255;
 $5 = 3500 + ($4 * 7 | 0) | 0;
 $6 = $5 + 4 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $9 = $8 - 1 | 0;
 $10 = $9 << 4;
 $11 = $10 & 255;
 $sidx = $11;
 $12 = $sidx;
 HEAP8[$chi1 >> 0] = $12;
 HEAP8[$chi1P >> 0] = 1;
 HEAP8[$chi2P >> 0] = 0;
 $13 = HEAP8[$chi1P >> 0] | 0;
 $lp = $13;
 $ap = $chi2P;
 $sptr = $chi1;
 $aptr = $chi2;
 while (1) {
  $14 = $lp;
  $15 = $14 << 24 >> 24 != 0;
  if (!$15) {
   break;
  }
  $i = 0;
  while (1) {
   $16 = $i;
   $17 = $16 & 255;
   $18 = $lp;
   $19 = $18 & 255;
   $20 = ($17 | 0) < ($19 | 0);
   if (!$20) {
    break;
   }
   $21 = $i;
   $22 = $21 & 255;
   $23 = $sptr;
   $24 = $23 + $22 | 0;
   $25 = HEAP8[$24 >> 0] | 0;
   $tmp = $25;
   $26 = $tmp;
   $27 = $26 & 255;
   $28 = HEAP32[284 >> 2] | 0;
   $29 = $28 + $27 | 0;
   $30 = HEAP8[$29 >> 0] | 0;
   $31 = $30 & 255;
   $32 = ($31 | 0) < 2;
   if (!$32) {
    $33 = $tmp;
    $34 = $aptr;
    $35 = $ap;
    _FgtUnfurlTree($33, $34, $35);
   }
   $36 = $i;
   $37 = $36 & 255;
   $38 = $37 + 1 | 0;
   $39 = $38 & 255;
   $i = $39;
  }
  $40 = $sptr;
  $41 = ($40 | 0) == ($chi1 | 0);
  if ($41) {
   HEAP8[$chi1P >> 0] = 0;
   $sptr = $chi2;
   $aptr = $chi1;
   $42 = HEAP8[$chi2P >> 0] | 0;
   $lp = $42;
   $ap = $chi1P;
   continue;
  } else {
   HEAP8[$chi2P >> 0] = 0;
   $sptr = $chi1;
   $aptr = $chi2;
   $43 = HEAP8[$chi1P >> 0] | 0;
   $lp = $43;
   $ap = $chi2P;
   continue;
  }
 }
 $44 = $sidx;
 $45 = $44 & 255;
 $46 = HEAP32[284 >> 2] | 0;
 $47 = $46 + $45 | 0;
 HEAP8[$47 >> 0] = 0;
 $48 = $0;
 _FgtSetSamPot($48);
 $49 = $0;
 $50 = $49 & 255;
 $51 = 3500 + ($50 * 7 | 0) | 0;
 $52 = $51 + 6 | 0;
 $53 = HEAP8[$52 >> 0] | 0;
 $54 = $53 & 255;
 $55 = ($54 | 0) == 4;
 if (!$55) {
  STACKTOP = sp;
  return;
 }
 $56 = $0;
 _FgtSetDifPot($56);
 STACKTOP = sp;
 return;
}

function _GetResItem($addr, $idx, $reshead, $rIdx) {
 $addr = $addr | 0;
 $idx = $idx | 0;
 $reshead = $reshead | 0;
 $rIdx = $rIdx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $addr;
 $2 = $idx;
 $3 = $reshead;
 $4 = $rIdx;
 $5 = HEAP32[260 >> 2] | 0;
 $6 = $1;
 _gam_fseek($5, $6, 0) | 0;
 $7 = $3;
 $8 = HEAP32[260 >> 2] | 0;
 _gam_fread($7, 12, 1, $8) | 0;
 $9 = $2;
 $10 = $9 & 255;
 $11 = $10 - 1 | 0;
 $12 = $3;
 $13 = $12 + 6 | 0;
 $14 = HEAPU8[$13 >> 0] | HEAPU8[$13 + 1 >> 0] << 8;
 $15 = $14 & 65535;
 $16 = ($11 | 0) >= ($15 | 0);
 if ($16) {
  $17 = $4;
  HEAP8[$17 >> 0] = 0 & 255;
  HEAP8[$17 + 1 >> 0] = 0 >> 8;
  $18 = $4;
  $19 = $18 + 2 | 0;
  HEAP8[$19 >> 0] = 0 & 255;
  HEAP8[$19 + 1 >> 0] = 0 >> 8;
  $0 = 0;
  $58 = $0;
  STACKTOP = sp;
  return $58 | 0;
 }
 $20 = $3;
 $21 = $20 + 8 | 0;
 $22 = HEAPU8[$21 >> 0] | HEAPU8[$21 + 1 >> 0] << 8;
 $23 = $22 & 65535;
 $24 = ($23 | 0) != 0;
 $25 = $2;
 $26 = $25 & 255;
 $27 = $26 - 1 | 0;
 if ($24) {
  $28 = $27 & 65535;
  $29 = $4;
  HEAP8[$29 >> 0] = $28 & 255;
  HEAP8[$29 + 1 >> 0] = $28 >> 8;
  $30 = $3;
  $31 = $30 + 8 | 0;
  $32 = HEAPU8[$31 >> 0] | HEAPU8[$31 + 1 >> 0] << 8;
  $33 = $32 & 65535;
  $34 = $4;
  $35 = HEAPU8[$34 >> 0] | HEAPU8[$34 + 1 >> 0] << 8;
  $36 = $35 & 65535;
  $37 = Math_imul($36, $33) | 0;
  $38 = $37 & 65535;
  HEAP8[$34 >> 0] = $38 & 255;
  HEAP8[$34 + 1 >> 0] = $38 >> 8;
  $39 = $4;
  $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8;
  $41 = $40 & 65535;
  $42 = $41 + 12 | 0;
  $43 = $42 & 65535;
  HEAP8[$39 >> 0] = $43 & 255;
  HEAP8[$39 + 1 >> 0] = $43 >> 8;
  $44 = $3;
  $45 = $44 + 8 | 0;
  $46 = HEAPU8[$45 >> 0] | HEAPU8[$45 + 1 >> 0] << 8;
  $47 = $4;
  $48 = $47 + 2 | 0;
  HEAP8[$48 >> 0] = $46 & 255;
  HEAP8[$48 + 1 >> 0] = $46 >> 8;
 } else {
  $1 = $27;
  $49 = $1;
  $50 = $49 << 2;
  $1 = $50;
  $51 = HEAP32[260 >> 2] | 0;
  $52 = $1;
  _gam_fseek($51, $52, 1) | 0;
  $53 = $4;
  $54 = HEAP32[260 >> 2] | 0;
  _gam_fread($53, 4, 1, $54) | 0;
 }
 $55 = $4;
 $56 = $55 + 2 | 0;
 $57 = HEAPU8[$56 >> 0] | HEAPU8[$56 + 1 >> 0] << 8;
 $0 = $57;
 $58 = $0;
 STACKTOP = sp;
 return $58 | 0;
}

function _AttackCityRoad($sc, $xs, $ys, $ob, $xo, $yo) {
 $sc = $sc | 0;
 $xs = $xs | 0;
 $ys = $ys | 0;
 $ob = $ob | 0;
 $xo = $xo | 0;
 $yo = $yo | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $clnk = 0, $clnkcount = 0, $d = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $sc;
 $2 = $xs;
 $3 = $ys;
 $4 = $ob;
 $5 = $xo;
 $6 = $yo;
 $7 = HEAP32[256 >> 2] | 0;
 $8 = _ResLoadToCon(59, 1, $7) | 0;
 $clnk = $8;
 $9 = $1;
 $10 = $9 & 255;
 $clnkcount = $10;
 $11 = $clnkcount;
 $12 = $11 & 65535;
 $13 = $12 << 4;
 $14 = $13 & 65535;
 $clnkcount = $14;
 $15 = $clnkcount;
 $16 = $15 & 65535;
 $17 = $clnk;
 $18 = $17 + $16 | 0;
 $clnk = $18;
 $i = 0;
 while (1) {
  $19 = $i;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 8;
  if (!$21) {
   break;
  }
  $22 = $i;
  $23 = $22 & 255;
  $24 = $clnk;
  $25 = $24 + $23 | 0;
  $26 = HEAP8[$25 >> 0] | 0;
  $27 = $26 & 255;
  $28 = $4;
  $29 = $28 & 255;
  $30 = $29 + 1 | 0;
  $31 = ($27 | 0) == ($30 | 0);
  if ($31) {
   break;
  }
  $32 = $i;
  $33 = $32 + 1 << 24 >> 24;
  $i = $33;
 }
 $34 = $i;
 $35 = $34 & 255;
 $36 = ($35 | 0) >= 8;
 if ($36) {
  $0 = -1;
  $76 = $0;
  STACKTOP = sp;
  return $76 | 0;
 }
 $37 = $6;
 $38 = $37 & 255;
 $39 = $3;
 $40 = $39 & 255;
 $41 = ($38 | 0) > ($40 | 0);
 if ($41) {
  $42 = $6;
  $43 = $42 & 255;
  $44 = $3;
  $45 = $44 & 255;
  $46 = $43 - $45 | 0;
  $47 = $46 & 255;
  $d = $47;
 } else {
  $48 = $3;
  $49 = $48 & 255;
  $50 = $6;
  $51 = $50 & 255;
  $52 = $49 - $51 | 0;
  $53 = $52 & 255;
  $d = $53;
 }
 $54 = $5;
 $55 = $54 & 255;
 $56 = $2;
 $57 = $56 & 255;
 $58 = ($55 | 0) > ($57 | 0);
 $59 = $d;
 $60 = $59 & 255;
 if ($58) {
  $61 = $5;
  $62 = $61 & 255;
  $63 = $60 + $62 | 0;
  $64 = $2;
  $65 = $64 & 255;
  $66 = $63 - $65 | 0;
  $67 = $66 & 255;
  $d = $67;
 } else {
  $68 = $2;
  $69 = $68 & 255;
  $70 = $60 + $69 | 0;
  $71 = $5;
  $72 = $71 & 255;
  $73 = $70 - $72 | 0;
  $74 = $73 & 255;
  $d = $74;
 }
 $75 = $d;
 $0 = $75;
 $76 = $0;
 STACKTOP = sp;
 return $76 | 0;
}

function _SysRect($x1, $y1, $x2, $y2) {
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $x2 = $x2 | 0;
 $y2 = $y2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $ind = 0, $ind1 = 0, $ind2 = 0, $ind3 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $x1;
 $1 = $y1;
 $2 = $x2;
 $3 = $y2;
 $4 = $1;
 $y = $4;
 $5 = $0;
 $x = $5;
 while (1) {
  $6 = $x;
  $7 = $6 & 255;
  $8 = $2;
  $9 = $8 & 255;
  $10 = ($7 | 0) <= ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $y;
  $12 = $11 & 255;
  $13 = $12 * 160 | 0;
  $14 = $x;
  $15 = $14 & 255;
  $16 = $13 + $15 | 0;
  $ind = $16;
  $17 = $ind;
  $18 = 366433 + $17 | 0;
  HEAP8[$18 >> 0] = 1;
  $19 = $x;
  $20 = $19 + 1 << 24 >> 24;
  $x = $20;
 }
 $21 = $3;
 $y = $21;
 $22 = $0;
 $x = $22;
 while (1) {
  $23 = $x;
  $24 = $23 & 255;
  $25 = $2;
  $26 = $25 & 255;
  $27 = ($24 | 0) <= ($26 | 0);
  if (!$27) {
   break;
  }
  $28 = $y;
  $29 = $28 & 255;
  $30 = $29 * 160 | 0;
  $31 = $x;
  $32 = $31 & 255;
  $33 = $30 + $32 | 0;
  $ind1 = $33;
  $34 = $ind1;
  $35 = 366433 + $34 | 0;
  HEAP8[$35 >> 0] = 1;
  $36 = $x;
  $37 = $36 + 1 << 24 >> 24;
  $x = $37;
 }
 $38 = $0;
 $x = $38;
 $39 = $1;
 $y = $39;
 while (1) {
  $40 = $y;
  $41 = $40 & 255;
  $42 = $3;
  $43 = $42 & 255;
  $44 = ($41 | 0) <= ($43 | 0);
  if (!$44) {
   break;
  }
  $45 = $y;
  $46 = $45 & 255;
  $47 = $46 * 160 | 0;
  $48 = $x;
  $49 = $48 & 255;
  $50 = $47 + $49 | 0;
  $ind2 = $50;
  $51 = $ind2;
  $52 = 366433 + $51 | 0;
  HEAP8[$52 >> 0] = 1;
  $53 = $y;
  $54 = $53 + 1 << 24 >> 24;
  $y = $54;
 }
 $55 = $2;
 $x = $55;
 $56 = $1;
 $y = $56;
 while (1) {
  $57 = $y;
  $58 = $57 & 255;
  $59 = $3;
  $60 = $59 & 255;
  $61 = ($58 | 0) <= ($60 | 0);
  if (!$61) {
   break;
  }
  $62 = $y;
  $63 = $62 & 255;
  $64 = $63 * 160 | 0;
  $65 = $x;
  $66 = $65 & 255;
  $67 = $64 + $66 | 0;
  $ind3 = $67;
  $68 = $ind3;
  $69 = 366433 + $68 | 0;
  HEAP8[$69 >> 0] = 1;
  $70 = $y;
  $71 = $70 + 1 << 24 >> 24;
  $y = $71;
 }
 _logLcd();
 STACKTOP = sp;
 return;
}

function ___stpcpy($d, $s) {
 $d = $d | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3 | 0) == 0;
 L1 : do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5 | 0) == 0;
   if ($6) {
    $$0$lcssa = $s;
    $$01$lcssa = $d;
   } else {
    $$0115 = $d;
    $$016 = $s;
    while (1) {
     $7 = HEAP8[$$016 >> 0] | 0;
     HEAP8[$$0115 >> 0] = $7;
     $8 = $7 << 24 >> 24 == 0;
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = $$016 + 1 | 0;
     $10 = $$0115 + 1 | 0;
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12 | 0) == 0;
     if ($13) {
      $$0$lcssa = $9;
      $$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;
      $$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa >> 2] | 0;
   $15 = $14 + -16843009 | 0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18 | 0) == 0;
   if ($19) {
    $22 = $14;
    $wd$010 = $$01$lcssa;
    $ws$011 = $$0$lcssa;
    while (1) {
     $20 = $ws$011 + 4 | 0;
     $21 = $wd$010 + 4 | 0;
     HEAP32[$wd$010 >> 2] = $22;
     $23 = HEAP32[$20 >> 2] | 0;
     $24 = $23 + -16843009 | 0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27 | 0) == 0;
     if ($28) {
      $22 = $23;
      $wd$010 = $21;
      $ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;
      $ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;
    $ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;
   $$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;
   $$12$ph = $d;
   label = 8;
  }
 } while (0);
 if ((label | 0) == 8) {
  $29 = HEAP8[$$1$ph >> 0] | 0;
  HEAP8[$$12$ph >> 0] = $29;
  $30 = $29 << 24 >> 24 == 0;
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;
   $$19 = $$1$ph;
   while (1) {
    $31 = $$19 + 1 | 0;
    $32 = $$128 + 1 | 0;
    $33 = HEAP8[$31 >> 0] | 0;
    HEAP8[$32 >> 0] = $33;
    $34 = $33 << 24 >> 24 == 0;
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;
     $$19 = $31;
    }
   }
  }
 }
 return $$03 | 0;
}

function _FgtGetSklBuf($id, $buf) {
 $id = $id | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $ptr = 0, $sklbuf = 0, $type = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $id;
 $1 = $buf;
 $2 = $1;
 dest = $2;
 stop = dest + 11 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $3 = $1;
 $sklbuf = $3;
 $4 = HEAP8[3644 >> 0] | 0;
 $5 = HEAP32[256 >> 2] | 0;
 $6 = _ResLoadToCon(14, $4, $5) | 0;
 $ptr = $6;
 $7 = $0;
 $8 = $7 & 255;
 $9 = $ptr;
 $10 = $9 + $8 | 0;
 $11 = HEAP8[$10 >> 0] | 0;
 $12 = $11 << 24 >> 24 != 0;
 if ($12) {
  $13 = $0;
  $14 = $13 & 255;
  $15 = $ptr;
  $16 = $15 + $14 | 0;
  $17 = HEAP8[$16 >> 0] | 0;
  $18 = $sklbuf;
  HEAP8[$18 >> 0] = $17;
  $19 = $sklbuf;
  $20 = $19 + 1 | 0;
  $sklbuf = $20;
 }
 $21 = $0;
 $22 = $21 & 255;
 $23 = HEAP32[332 >> 2] | 0;
 $24 = $23 + ($22 * 15 | 0) | 0;
 $25 = $24 + 1 | 0;
 $26 = HEAP8[$25 >> 0] | 0;
 $27 = $26 & 255;
 $28 = $0;
 $29 = $28 & 255;
 $30 = $29 + 1 | 0;
 $31 = ($27 | 0) == ($30 | 0);
 if ($31) {
  $32 = $sklbuf;
  HEAP8[$32 >> 0] = 30;
  $33 = $sklbuf;
  $34 = $33 + 1 | 0;
  $sklbuf = $34;
 }
 $35 = HEAP32[256 >> 2] | 0;
 $36 = _ResLoadToCon(2, 2, $35) | 0;
 $ptr = $36;
 $37 = $0;
 $38 = $37 & 255;
 $39 = HEAP32[332 >> 2] | 0;
 $40 = $39 + ($38 * 15 | 0) | 0;
 $41 = $40 + 9 | 0;
 $42 = HEAP8[$41 >> 0] | 0;
 $type = $42;
 $43 = $type;
 $44 = $43 & 255;
 $45 = 3050 + $44 | 0;
 $46 = HEAP8[$45 >> 0] | 0;
 $47 = +($46 & 255);
 $48 = $0;
 $49 = $48 & 255;
 $50 = HEAP32[332 >> 2] | 0;
 $51 = $50 + ($49 * 15 | 0) | 0;
 $52 = $51 + 2 | 0;
 $53 = HEAP8[$52 >> 0] | 0;
 $54 = $53 & 255;
 $55 = +($54 | 0);
 $56 = $47 * $55;
 $57 = $56 / 21.0;
 $58 = $57 + 1.0;
 $59 = ~~$58 & 255;
 $len = $59;
 $60 = $type;
 $61 = $60 & 255;
 $62 = $61 * 10 | 0;
 $63 = $ptr;
 $64 = $63 + $62 | 0;
 $ptr = $64;
 $65 = $sklbuf;
 $66 = $ptr;
 $67 = $len;
 $68 = $67 & 255;
 _memcpy($65 | 0, $66 | 0, $68 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _AddGoods($city, $goods) {
 $city = $city | 0;
 $goods = $goods | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $qnum = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $city;
 $2 = $goods;
 $3 = $1;
 $4 = $3 & 255;
 $5 = ($4 | 0) >= 38;
 if ($5) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $6 = $2;
 $7 = $6 & 255;
 $8 = ($7 | 0) >= 200;
 if ($8) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;
  return $71 | 0;
 }
 $9 = $1;
 $10 = $9 & 255;
 $11 = 3645 + ($10 * 31 | 0) | 0;
 $12 = $11 + 29 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $14 = $13 & 255;
 $15 = $1;
 $16 = $15 & 255;
 $17 = 3645 + ($16 * 31 | 0) | 0;
 $18 = $17 + 30 | 0;
 $19 = HEAP8[$18 >> 0] | 0;
 $20 = $19 & 255;
 $21 = $14 + $20 | 0;
 $22 = $21 & 255;
 $qnum = $22;
 $i = -57;
 while (1) {
  $23 = $i;
  $24 = $23 & 255;
  $25 = $qnum;
  $26 = $25 & 255;
  $27 = ($24 | 0) > ($26 | 0);
  if (!$27) {
   break;
  }
  $28 = $i;
  $29 = $28 & 255;
  $30 = $29 - 1 | 0;
  $31 = 5023 + $30 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  $33 = $i;
  $34 = $33 & 255;
  $35 = 5023 + $34 | 0;
  HEAP8[$35 >> 0] = $32;
  $36 = $i;
  $37 = $36 + -1 << 24 >> 24;
  $i = $37;
 }
 $38 = $2;
 $39 = $qnum;
 $40 = $39 & 255;
 $41 = 5023 + $40 | 0;
 HEAP8[$41 >> 0] = $38;
 $42 = $1;
 $43 = $42 & 255;
 $44 = 3645 + ($43 * 31 | 0) | 0;
 $45 = $44 + 30 | 0;
 $46 = HEAP8[$45 >> 0] | 0;
 $47 = $46 & 255;
 $48 = $47 + 1 | 0;
 $49 = $48 & 255;
 HEAP8[$45 >> 0] = $49;
 $50 = $1;
 $51 = $50 & 255;
 $52 = $51 + 1 | 0;
 $53 = $52 & 255;
 $i = $53;
 while (1) {
  $54 = $i;
  $55 = $54 & 255;
  $56 = ($55 | 0) < 38;
  if (!$56) {
   break;
  }
  $57 = $i;
  $58 = $57 & 255;
  $59 = 3645 + ($58 * 31 | 0) | 0;
  $60 = $59 + 29 | 0;
  $61 = HEAP8[$60 >> 0] | 0;
  $62 = $61 & 255;
  $63 = $62 + 1 | 0;
  $64 = $63 & 255;
  HEAP8[$60 >> 0] = $64;
  $65 = $i;
  $66 = $65 + 1 << 24 >> 24;
  $i = $66;
 }
 $67 = $qnum;
 $68 = $67 & 255;
 $69 = $68 + 1 | 0;
 $70 = $69 & 255;
 $0 = $70;
 $71 = $0;
 STACKTOP = sp;
 return $71 | 0;
}

function _vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $vacopy_currentptr = HEAP32[$ap >> 2] | 0;
 HEAP32[$ap2 >> 2] = $vacopy_currentptr;
 $0 = _printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 $1 = ($0 | 0) < 0;
 if ($1) {
  $$0 = -1;
 } else {
  $2 = $f + 76 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  $4 = ($3 | 0) > -1;
  if ($4) {
   $5 = ___lockfile($f) | 0;
   $33 = $5;
  } else {
   $33 = 0;
  }
  $6 = HEAP32[$f >> 2] | 0;
  $7 = $6 & 32;
  $8 = $f + 74 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $10 = $9 << 24 >> 24 < 1;
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f >> 2] = $11;
  }
  $12 = $f + 48 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = ($13 | 0) == 0;
  if ($14) {
   $16 = $f + 44 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   HEAP32[$16 >> 2] = $internal_buf;
   $18 = $f + 28 | 0;
   HEAP32[$18 >> 2] = $internal_buf;
   $19 = $f + 20 | 0;
   HEAP32[$19 >> 2] = $internal_buf;
   HEAP32[$12 >> 2] = 80;
   $20 = $internal_buf + 80 | 0;
   $21 = $f + 16 | 0;
   HEAP32[$21 >> 2] = $20;
   $22 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   $23 = ($17 | 0) == (0 | 0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = $f + 36 | 0;
    $25 = HEAP32[$24 >> 2] | 0;
    FUNCTION_TABLE_iiii[$25 & 31]($f, 0, 0) | 0;
    $26 = HEAP32[$19 >> 2] | 0;
    $27 = ($26 | 0) == (0 | 0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16 >> 2] = $17;
    HEAP32[$12 >> 2] = 0;
    HEAP32[$21 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
    HEAP32[$19 >> 2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
   $ret$1 = $15;
  }
  $28 = HEAP32[$f >> 2] | 0;
  $29 = $28 & 32;
  $30 = ($29 | 0) == 0;
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f >> 2] = $31;
  $32 = ($33 | 0) == 0;
  if (!$32) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _ShowPersonProStr($pro, $x, $y, $wid) {
 $pro = $pro | 0;
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $positem = 0, $ptr = 0, $str = 0, $sx = 0, $sy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $sx = sp + 37 | 0;
 $sy = sp + 36 | 0;
 $str = sp + 24 | 0;
 $ptr = sp + 10 | 0;
 $positem = sp;
 $1 = $pro;
 $2 = $x;
 $3 = $y;
 $4 = $wid;
 $5 = $2;
 $6 = $3;
 $7 = $2;
 $8 = $7 & 255;
 $9 = $4;
 $10 = $9 & 255;
 $11 = $8 + $10 | 0;
 $12 = $11 - 1 | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 & 255;
 $16 = $15 + 12 | 0;
 $17 = $16 & 255;
 _InitItem($5, $6, $13, $17, $positem);
 $18 = _AddItem(49, 12, $positem, $sx, $sy) | 0;
 $19 = $18 << 24 >> 24 != 0;
 if (!$19) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;
  return $57 | 0;
 }
 _ResLoadToMem(64, 23, $str) | 0;
 $20 = HEAP8[$sx >> 0] | 0;
 $21 = $20 & 255;
 $22 = $21 + 24 | 0;
 $23 = $22 & 255;
 $24 = HEAP8[$sy >> 0] | 0;
 _PlcMidShowStr($23, $24, $str);
 _ResItemGet(2, 8, $ptr) | 0;
 $25 = $1;
 $i = $25;
 while (1) {
  $26 = $i;
  $27 = $26 & 255;
  $28 = ($27 | 0) < 13;
  $29 = $i;
  if (!$28) {
   label = 8;
   break;
  }
  $30 = $29 & 255;
  $31 = $ptr + $30 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  $33 = $32 & 255;
  $34 = $33 * 6 | 0;
  $35 = $34 + 1 | 0;
  $36 = $35 & 255;
  $37 = _AddItem($36, 12, $positem, $sx, $sy) | 0;
  $38 = $37 << 24 >> 24 != 0;
  $39 = $i;
  if (!$38) {
   label = 7;
   break;
  }
  $40 = $39 & 255;
  $41 = 24 + $40 | 0;
  $42 = $41 & 255;
  _ResLoadToMem(64, $42, $str) | 0;
  $43 = HEAP8[$sx >> 0] | 0;
  $44 = $43 & 255;
  $45 = $i;
  $46 = $45 & 255;
  $47 = $ptr + $46 | 0;
  $48 = HEAP8[$47 >> 0] | 0;
  $49 = $48 & 255;
  $50 = $49 * 6 | 0;
  $51 = ($50 | 0) / 2 & -1;
  $52 = $44 + $51 | 0;
  $53 = $52 & 255;
  $54 = HEAP8[$sy >> 0] | 0;
  _PlcMidShowStr($53, $54, $str);
  $55 = $i;
  $56 = $55 + 1 << 24 >> 24;
  $i = $56;
 }
 if ((label | 0) == 7) {
  $0 = $39;
  $57 = $0;
  STACKTOP = sp;
  return $57 | 0;
 } else if ((label | 0) == 8) {
  $0 = $29;
  $57 = $0;
  STACKTOP = sp;
  return $57 | 0;
 }
 return 0 | 0;
}

function _ShowGoodsProStr($pro, $x, $y, $wid) {
 $pro = $pro | 0;
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $positem = 0, $ptr = 0, $str = 0, $sx = 0, $sy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $sx = sp + 29 | 0;
 $sy = sp + 28 | 0;
 $str = sp + 16 | 0;
 $ptr = sp + 9 | 0;
 $positem = sp;
 $1 = $pro;
 $2 = $x;
 $3 = $y;
 $4 = $wid;
 $5 = $2;
 $6 = $3;
 $7 = $2;
 $8 = $7 & 255;
 $9 = $4;
 $10 = $9 & 255;
 $11 = $8 + $10 | 0;
 $12 = $11 - 1 | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 & 255;
 $16 = $15 + 12 | 0;
 $17 = $16 & 255;
 _InitItem($5, $6, $13, $17, $positem);
 $18 = _AddItem(61, 12, $positem, $sx, $sy) | 0;
 $19 = $18 << 24 >> 24 != 0;
 if (!$19) {
  $0 = 0;
  $57 = $0;
  STACKTOP = sp;
  return $57 | 0;
 }
 _ResLoadToMem(64, 65, $str) | 0;
 $20 = HEAP8[$sx >> 0] | 0;
 $21 = $20 & 255;
 $22 = $21 + 30 | 0;
 $23 = $22 & 255;
 $24 = HEAP8[$sy >> 0] | 0;
 _PlcMidShowStr($23, $24, $str);
 _ResItemGet(2, 7, $ptr) | 0;
 $25 = $1;
 $i = $25;
 while (1) {
  $26 = $i;
  $27 = $26 & 255;
  $28 = ($27 | 0) < 5;
  $29 = $i;
  if (!$28) {
   label = 8;
   break;
  }
  $30 = $29 & 255;
  $31 = $ptr + $30 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  $33 = $32 & 255;
  $34 = $33 * 6 | 0;
  $35 = $34 + 1 | 0;
  $36 = $35 & 255;
  $37 = _AddItem($36, 12, $positem, $sx, $sy) | 0;
  $38 = $37 << 24 >> 24 != 0;
  $39 = $i;
  if (!$38) {
   label = 7;
   break;
  }
  $40 = $39 & 255;
  $41 = 66 + $40 | 0;
  $42 = $41 & 255;
  _ResLoadToMem(64, $42, $str) | 0;
  $43 = HEAP8[$sx >> 0] | 0;
  $44 = $43 & 255;
  $45 = $i;
  $46 = $45 & 255;
  $47 = $ptr + $46 | 0;
  $48 = HEAP8[$47 >> 0] | 0;
  $49 = $48 & 255;
  $50 = $49 * 6 | 0;
  $51 = ($50 | 0) / 2 & -1;
  $52 = $44 + $51 | 0;
  $53 = $52 & 255;
  $54 = HEAP8[$sy >> 0] | 0;
  _PlcMidShowStr($53, $54, $str);
  $55 = $i;
  $56 = $55 + 1 << 24 >> 24;
  $i = $56;
 }
 if ((label | 0) == 7) {
  $0 = $39;
  $57 = $0;
  STACKTOP = sp;
  return $57 | 0;
 } else if ((label | 0) == 8) {
  $0 = $29;
  $57 = $0;
  STACKTOP = sp;
  return $57 | 0;
 }
 return 0 | 0;
}

function _gamPrintNum($x, $y, $num, $base, $sign) {
 $x = $x | 0;
 $y = $y | 0;
 $num = $num | 0;
 $base = $base | 0;
 $sign = $sign | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $index = 0, $n = 0, $or$cond = 0, $toPrint = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $toPrint = sp + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $num;
 $3 = $base;
 $4 = $sign;
 $5 = $4;
 $6 = $5 & 255;
 $7 = ($6 | 0) == 1;
 $8 = $2;
 $9 = ($8 | 0) < 0;
 $or$cond = $7 & $9;
 if ($or$cond) {
  $10 = $0;
  $11 = $1;
  _SysAscii($10, $11, 45);
  $12 = $0;
  $13 = $12 & 255;
  $14 = $13 + 8 | 0;
  $15 = $14 & 255;
  $0 = $15;
  $16 = $2;
  $17 = 0 - $16 | 0;
  $2 = $17;
 }
 $count = 0;
 while (1) {
  $18 = $2;
  $19 = $3;
  $20 = $19 & 255;
  $21 = ($18 >>> 0) / ($20 >>> 0) & -1;
  $n = $21;
  $22 = $21 >>> 0 > 0;
  $23 = $2;
  if (!$22) {
   break;
  }
  $24 = $n;
  $25 = $3;
  $26 = $25 & 255;
  $27 = Math_imul($24, $26) | 0;
  $28 = $23 - $27 | 0;
  $29 = $28 & 255;
  $30 = $count;
  $31 = $30 & 65535;
  $32 = $toPrint + $31 | 0;
  HEAP8[$32 >> 0] = $29;
  $33 = $count;
  $34 = $33 & 65535;
  $35 = $34 + 1 | 0;
  $36 = $35 & 65535;
  $count = $36;
  $37 = $n;
  $2 = $37;
 }
 $38 = $23 & 255;
 $39 = $count;
 $40 = $39 & 65535;
 $41 = $toPrint + $40 | 0;
 HEAP8[$41 >> 0] = $38;
 $42 = $count;
 $43 = $42 & 65535;
 $44 = $43 + 1 | 0;
 $45 = $44 & 65535;
 $count = $45;
 $n = 0;
 while (1) {
  $46 = $n;
  $47 = $count;
  $48 = $47 & 65535;
  $49 = $46 >>> 0 < $48 >>> 0;
  if (!$49) {
   break;
  }
  $50 = $count;
  $51 = $50 & 65535;
  $52 = $n;
  $53 = $52 + 1 | 0;
  $54 = $51 - $53 | 0;
  $55 = $toPrint + $54 | 0;
  $56 = HEAP8[$55 >> 0] | 0;
  $57 = $56 & 255;
  $index = $57;
  $58 = $0;
  $59 = $1;
  $60 = $index;
  $61 = 3379 + $60 | 0;
  $62 = HEAP8[$61 >> 0] | 0;
  _SysAscii($58, $59, $62);
  $63 = $0;
  $64 = $63 & 255;
  $65 = $64 + 8 | 0;
  $66 = $65 & 255;
  $0 = $66;
  $67 = $n;
  $68 = $67 + 1 | 0;
  $n = $68;
 }
 STACKTOP = sp;
 return;
}

function _GamRcdIFace() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fnam = 0, $fp = 0, $idx = 0, $king = 0, $pbak = 0, $tbuf = 0, $verFlag = 0, $year = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $king = sp + 40 | 0;
 $fnam = sp + 20 | 0;
 $tbuf = sp + 8 | 0;
 $year = sp + 6 | 0;
 $verFlag = sp + 4 | 0;
 _PlcRPicShow(46, 1, 0, 0, 1);
 $0 = HEAP8[3644 >> 0] | 0;
 $pbak = $0;
 $idx = 0;
 while (1) {
  $1 = $idx;
  $2 = $1 & 255;
  $3 = ($2 | 0) < 3;
  if (!$3) {
   break;
  }
  _ResLoadToMem(1, 64, $fnam) | 0;
  $4 = $idx;
  $5 = $4 & 255;
  $6 = $5 << 1;
  $7 = $6 + 48 | 0;
  $8 = $7 & 255;
  $9 = $fnam + 5 | 0;
  HEAP8[$9 >> 0] = $8;
  $10 = _sav_fopen($fnam, 114) | 0;
  $fp = $10;
  $11 = $fp;
  $12 = (0 | 0) == ($11 | 0);
  if ($12) {
   _ResLoadToMem(1, 66, $fnam) | 0;
  } else {
   $13 = $fp;
   _gam_fread($verFlag, 1, 1, $13) | 0;
   $14 = HEAP8[$verFlag >> 0] | 0;
   $15 = $14 & 255;
   $16 = $15 & 128;
   $17 = ($16 | 0) != 0;
   if ($17) {
    $18 = $fp;
    _gam_fread(3644, 1, 1, $18) | 0;
   } else {
    $19 = HEAP8[$verFlag >> 0] | 0;
    HEAP8[3644 >> 0] = $19;
   }
   $20 = $fp;
   _gam_fread($king, 1, 1, $20) | 0;
   $21 = $fp;
   _gam_fread($year, 1, 2, $21) | 0;
   $22 = $fp;
   _gam_fclose($22) | 0;
   _ResLoadToMem(1, 65, $fnam) | 0;
   $23 = HEAP8[$king >> 0] | 0;
   _GetPersonName($23, $tbuf);
   $24 = _strlen($tbuf) | 0;
   $25 = $24 & 255;
   HEAP8[$king >> 0] = $25;
   $26 = HEAP8[$king >> 0] | 0;
   $27 = $26 & 255;
   _memcpy($fnam | 0, $tbuf | 0, $27 | 0) | 0;
   $28 = HEAPU8[$year >> 0] | HEAPU8[$year + 1 >> 0] << 8;
   $29 = $28 & 65535;
   _itoa($29, $tbuf, 10) | 0;
   $30 = _strlen($tbuf) | 0;
   $31 = $30 + 1 | 0;
   $32 = $31 & 255;
   HEAP8[$king >> 0] = $32;
   $33 = $fnam + 10 | 0;
   $34 = HEAP8[$king >> 0] | 0;
   $35 = $34 & 255;
   _memcpy($33 | 0, $tbuf | 0, $35 | 0) | 0;
  }
  $36 = $idx;
  $37 = $36 & 255;
  $38 = $37 * 14 | 0;
  $39 = 34 + $38 | 0;
  $40 = $39 & 255;
  _GamStrShowS(31, $40, $fnam);
  $41 = $idx;
  $42 = $41 & 255;
  $43 = $42 + 1 | 0;
  $44 = $43 & 255;
  $idx = $44;
 }
 $45 = $pbak;
 HEAP8[3644 >> 0] = $45;
 STACKTOP = sp;
 return;
}

function _AddPerson($city, $person) {
 $city = $city | 0;
 $person = $person | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $qnum = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $city;
 $2 = $person;
 $3 = $1;
 $4 = $3 & 255;
 $5 = ($4 | 0) >= 38;
 if ($5) {
  $0 = 0;
  $67 = $0;
  STACKTOP = sp;
  return $67 | 0;
 }
 $6 = $2;
 $7 = $6 & 255;
 $8 = ($7 | 0) >= 200;
 if ($8) {
  $0 = 0;
  $67 = $0;
  STACKTOP = sp;
  return $67 | 0;
 }
 $9 = $1;
 $10 = $9 & 255;
 $11 = 3645 + ($10 * 31 | 0) | 0;
 $12 = $11 + 27 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $14 = $13 & 255;
 $15 = $1;
 $16 = $15 & 255;
 $17 = 3645 + ($16 * 31 | 0) | 0;
 $18 = $17 + 28 | 0;
 $19 = HEAP8[$18 >> 0] | 0;
 $20 = $19 & 255;
 $21 = $14 + $20 | 0;
 $22 = $21 & 255;
 $qnum = $22;
 $i = -57;
 while (1) {
  $23 = $i;
  $24 = $23 & 255;
  $25 = $qnum;
  $26 = $25 & 255;
  $27 = ($24 | 0) > ($26 | 0);
  if (!$27) {
   break;
  }
  $28 = $i;
  $29 = $28 & 255;
  $30 = $29 - 1 | 0;
  $31 = 4823 + $30 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  $33 = $i;
  $34 = $33 & 255;
  $35 = 4823 + $34 | 0;
  HEAP8[$35 >> 0] = $32;
  $36 = $i;
  $37 = $36 + -1 << 24 >> 24;
  $i = $37;
 }
 $38 = $2;
 $39 = $qnum;
 $40 = $39 & 255;
 $41 = 4823 + $40 | 0;
 HEAP8[$41 >> 0] = $38;
 $42 = $1;
 $43 = $42 & 255;
 $44 = 3645 + ($43 * 31 | 0) | 0;
 $45 = $44 + 28 | 0;
 $46 = HEAP8[$45 >> 0] | 0;
 $47 = $46 & 255;
 $48 = $47 + 1 | 0;
 $49 = $48 & 255;
 HEAP8[$45 >> 0] = $49;
 $50 = $1;
 $51 = $50 & 255;
 $52 = $51 + 1 | 0;
 $53 = $52 & 255;
 $i = $53;
 while (1) {
  $54 = $i;
  $55 = $54 & 255;
  $56 = ($55 | 0) < 38;
  if (!$56) {
   break;
  }
  $57 = $i;
  $58 = $57 & 255;
  $59 = 3645 + ($58 * 31 | 0) | 0;
  $60 = $59 + 27 | 0;
  $61 = HEAP8[$60 >> 0] | 0;
  $62 = $61 & 255;
  $63 = $62 + 1 | 0;
  $64 = $63 & 255;
  HEAP8[$60 >> 0] = $64;
  $65 = $i;
  $66 = $65 + 1 << 24 >> 24;
  $i = $66;
 }
 $0 = 1;
 $67 = $0;
 STACKTOP = sp;
 return $67 | 0;
}

function _CountMoveP($i) {
 $i = $i | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $arm = 0, $lp = 0, $per = 0, $pos = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $i;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3500 + ($2 * 7 | 0) | 0;
 $pos = $3;
 $4 = $0;
 $5 = _TransIdxToGen($4) | 0;
 $0 = $5;
 $6 = $0;
 $7 = $6 & 255;
 $8 = HEAP32[332 >> 2] | 0;
 $9 = $8 + ($7 * 15 | 0) | 0;
 $per = $9;
 $10 = $per;
 $11 = $10 + 9 | 0;
 $12 = HEAP8[$11 >> 0] | 0;
 $arm = $12;
 $13 = $arm;
 $14 = $13 & 255;
 $15 = 3040 + $14 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $pos;
 $18 = $17 + 4 | 0;
 HEAP8[$18 >> 0] = $16;
 $lp = 0;
 while (1) {
  $19 = $lp;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 2;
  if (!$21) {
   break;
  }
  $22 = $lp;
  $23 = $22 & 255;
  $24 = $per;
  $25 = $24 + 12 | 0;
  $26 = $25 + $23 | 0;
  $27 = HEAP8[$26 >> 0] | 0;
  $0 = $27;
  $28 = $0;
  $29 = $28 << 24 >> 24 != 0;
  if ($29) {
   $30 = HEAP32[256 >> 2] | 0;
   $31 = _ResLoadToCon(66, 1, $30) | 0;
   $32 = $0;
   $33 = $32 & 255;
   $34 = $33 - 1 | 0;
   $35 = $34 & 65535;
   $36 = $35 & 65535;
   $37 = $36 * 66 | 0;
   $38 = $31 + $37 | 0;
   $ptr = $38;
   $39 = $ptr;
   $40 = (0 | 0) == ($39 | 0);
   if (!$40) {
    $41 = $ptr;
    $42 = $41 + 64 | 0;
    $43 = HEAP8[$42 >> 0] | 0;
    $44 = $43 & 255;
    $45 = ($44 | 0) != 0;
    if ($45) {
     $46 = $ptr;
     $47 = $46 + 64 | 0;
     $48 = HEAP8[$47 >> 0] | 0;
     $49 = $48 & 255;
     $50 = $pos;
     $51 = $50 + 4 | 0;
     $52 = HEAP8[$51 >> 0] | 0;
     $53 = $52 & 255;
     $54 = $53 + $49 | 0;
     $55 = $54 & 255;
     HEAP8[$51 >> 0] = $55;
    }
   }
  }
  $56 = $lp;
  $57 = $56 & 255;
  $58 = $57 + 1 | 0;
  $59 = $58 & 255;
  $lp = $59;
 }
 $60 = $pos;
 $61 = $60 + 4 | 0;
 $62 = HEAP8[$61 >> 0] | 0;
 $63 = $62 & 255;
 $64 = ($63 | 0) > 8;
 if (!$64) {
  STACKTOP = sp;
  return;
 }
 $65 = $pos;
 $66 = $65 + 4 | 0;
 HEAP8[$66 >> 0] = 8;
 STACKTOP = sp;
 return;
}

function _sav_fwrite($buf, $size, $count, $fp_) {
 $buf = $buf | 0;
 $size = $size | 0;
 $count = $count | 0;
 $fp_ = $fp_ | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $len = 0, $new_len = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $buf;
 $1 = $size;
 $2 = $count;
 $3 = $fp_;
 $4 = $3;
 $fp = $4;
 $5 = $1;
 $6 = $5 & 255;
 $7 = $2;
 $8 = $7 & 65535;
 $9 = Math_imul($6, $8) | 0;
 $len = $9;
 $10 = $fp;
 $11 = $10 + 20 | 0;
 $12 = HEAPU8[$11 >> 0] | HEAPU8[$11 + 1 >> 0] << 8 | HEAPU8[$11 + 2 >> 0] << 16 | HEAPU8[$11 + 3 >> 0] << 24;
 $13 = $len;
 $14 = $12 + $13 | 0;
 $15 = $fp;
 $16 = $15 + 36 | 0;
 $17 = HEAPU8[$16 >> 0] | HEAPU8[$16 + 1 >> 0] << 8 | HEAPU8[$16 + 2 >> 0] << 16 | HEAPU8[$16 + 3 >> 0] << 24;
 $18 = $14 >>> 0 > $17 >>> 0;
 if ($18) {
  $19 = $fp;
  $20 = $19 + 20 | 0;
  $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8 | HEAPU8[$20 + 2 >> 0] << 16 | HEAPU8[$20 + 3 >> 0] << 24;
  $22 = $len;
  $23 = $21 + $22 | 0;
  $24 = $23 + 1024 | 0;
  $new_len = $24;
  $25 = $fp;
  $26 = $25 + 28 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $28 = $new_len;
  $29 = _realloc($27, $28) | 0;
  $30 = $fp;
  $31 = $30 + 28 | 0;
  HEAP32[$31 >> 2] = $29;
  $32 = $new_len;
  $33 = $fp;
  $34 = $33 + 36 | 0;
  HEAP8[$34 >> 0] = $32 & 255;
  HEAP8[$34 + 1 >> 0] = $32 >> 8 & 255;
  HEAP8[$34 + 2 >> 0] = $32 >> 16 & 255;
  HEAP8[$34 + 3 >> 0] = $32 >> 24;
 }
 $35 = $fp;
 $36 = $35 + 28 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 $38 = $fp;
 $39 = $38 + 20 | 0;
 $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8 | HEAPU8[$39 + 2 >> 0] << 16 | HEAPU8[$39 + 3 >> 0] << 24;
 $41 = $37 + $40 | 0;
 $42 = $0;
 $43 = $len;
 _memcpy($41 | 0, $42 | 0, $43 | 0) | 0;
 $44 = $len;
 $45 = $fp;
 $46 = $45 + 20 | 0;
 $47 = HEAPU8[$46 >> 0] | HEAPU8[$46 + 1 >> 0] << 8 | HEAPU8[$46 + 2 >> 0] << 16 | HEAPU8[$46 + 3 >> 0] << 24;
 $48 = $47 + $44 | 0;
 HEAP8[$46 >> 0] = $48 & 255;
 HEAP8[$46 + 1 >> 0] = $48 >> 8 & 255;
 HEAP8[$46 + 2 >> 0] = $48 >> 16 & 255;
 HEAP8[$46 + 3 >> 0] = $48 >> 24;
 $49 = $2;
 $50 = $49 & 65535;
 STACKTOP = sp;
 return $50 | 0;
}

function _loadPerson($person, $raw) {
 $person = $person | 0;
 $raw = $raw | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $person;
 $1 = $raw;
 $2 = $0;
 $3 = $1;
 HEAP8[$2 >> 0] = HEAP8[$3 >> 0] | 0;
 $4 = $1;
 $5 = $4 + 1 | 0;
 $1 = $5;
 $6 = $0;
 $7 = $6 + 1 | 0;
 $8 = $1;
 HEAP8[$7 >> 0] = HEAP8[$8 >> 0] | 0;
 $9 = $1;
 $10 = $9 + 1 | 0;
 $1 = $10;
 $11 = $0;
 $12 = $11 + 2 | 0;
 $13 = $1;
 HEAP8[$12 >> 0] = HEAP8[$13 >> 0] | 0;
 $14 = $1;
 $15 = $14 + 1 | 0;
 $1 = $15;
 $16 = $0;
 $17 = $16 + 3 | 0;
 $18 = $1;
 HEAP8[$17 >> 0] = HEAP8[$18 >> 0] | 0;
 $19 = $1;
 $20 = $19 + 1 | 0;
 $1 = $20;
 $21 = $0;
 $22 = $21 + 4 | 0;
 $23 = $1;
 HEAP8[$22 >> 0] = HEAP8[$23 >> 0] | 0;
 $24 = $1;
 $25 = $24 + 1 | 0;
 $1 = $25;
 $26 = $0;
 $27 = $26 + 5 | 0;
 $28 = $1;
 HEAP8[$27 >> 0] = HEAP8[$28 >> 0] | 0;
 $29 = $1;
 $30 = $29 + 1 | 0;
 $1 = $30;
 $31 = $0;
 $32 = $31 + 6 | 0;
 $33 = $1;
 HEAP8[$32 >> 0] = HEAP8[$33 >> 0] | 0;
 $34 = $1;
 $35 = $34 + 1 | 0;
 $1 = $35;
 $36 = $0;
 $37 = $36 + 7 | 0;
 $38 = $1;
 HEAP8[$37 >> 0] = HEAP8[$38 >> 0] | 0;
 $39 = $1;
 $40 = $39 + 1 | 0;
 $1 = $40;
 $41 = $0;
 $42 = $41 + 8 | 0;
 $43 = $1;
 HEAP8[$42 >> 0] = HEAP8[$43 >> 0] | 0;
 $44 = $1;
 $45 = $44 + 1 | 0;
 $1 = $45;
 $46 = $0;
 $47 = $46 + 9 | 0;
 $48 = $1;
 HEAP8[$47 >> 0] = HEAP8[$48 >> 0] | 0;
 $49 = $1;
 $50 = $49 + 1 | 0;
 $1 = $50;
 $51 = $0;
 $52 = $51 + 10 | 0;
 $53 = $1;
 HEAP8[$52 >> 0] = HEAP8[$53 >> 0] | 0;
 HEAP8[$52 + 1 >> 0] = HEAP8[$53 + 1 >> 0] | 0;
 $54 = $1;
 $55 = $54 + 2 | 0;
 $1 = $55;
 $56 = $0;
 $57 = $56 + 12 | 0;
 $58 = $1;
 HEAP8[$57 >> 0] = HEAP8[$58 >> 0] | 0;
 HEAP8[$57 + 1 >> 0] = HEAP8[$58 + 1 >> 0] | 0;
 $59 = $1;
 $60 = $59 + 2 | 0;
 $1 = $60;
 $61 = $0;
 $62 = $61 + 14 | 0;
 $63 = $1;
 HEAP8[$62 >> 0] = HEAP8[$63 >> 0] | 0;
 $64 = $1;
 $65 = $64 + 1 | 0;
 $1 = $65;
 $66 = $1;
 STACKTOP = sp;
 return $66 | 0;
}

function _GetRoundEnemyCity($city, $cqueue) {
 $city = $city | 0;
 $cqueue = $cqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0, $clnkcount = 0, $count = 0, $cp = 0, $i = 0, $inf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $cqueue;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(59, 1, $2) | 0;
 $inf = $3;
 $4 = $0;
 $5 = $4 & 255;
 $clnkcount = $5;
 $6 = $clnkcount;
 $7 = $6 & 65535;
 $8 = $7 << 4;
 $9 = $8 & 65535;
 $clnkcount = $9;
 $10 = $clnkcount;
 $11 = $10 & 65535;
 $12 = $inf;
 $13 = $12 + $11 | 0;
 $inf = $13;
 $count = 0;
 $14 = $0;
 $15 = $14 & 255;
 $16 = 3645 + ($15 * 31 | 0) | 0;
 $17 = $16 + 1 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $cb = $18;
 $i = 0;
 while (1) {
  $19 = $i;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 8;
  if (!$21) {
   break;
  }
  $22 = $i;
  $23 = $22 & 255;
  $24 = $inf;
  $25 = $24 + $23 | 0;
  $26 = HEAP8[$25 >> 0] | 0;
  $27 = $26 << 24 >> 24 != 0;
  if ($27) {
   $28 = $i;
   $29 = $28 & 255;
   $30 = $inf;
   $31 = $30 + $29 | 0;
   $32 = HEAP8[$31 >> 0] | 0;
   $33 = $32 & 255;
   $34 = $33 - 1 | 0;
   $35 = 3645 + ($34 * 31 | 0) | 0;
   $36 = $35 + 1 | 0;
   $37 = HEAP8[$36 >> 0] | 0;
   $cp = $37;
   $38 = $cp;
   $39 = $38 & 255;
   $40 = ($39 | 0) != 0;
   if ($40) {
    $41 = $cp;
    $42 = $41 & 255;
    $43 = $cb;
    $44 = $43 & 255;
    $45 = ($42 | 0) != ($44 | 0);
    if ($45) {
     $46 = $i;
     $47 = $46 & 255;
     $48 = $inf;
     $49 = $48 + $47 | 0;
     $50 = HEAP8[$49 >> 0] | 0;
     $51 = $50 & 255;
     $52 = $51 - 1 | 0;
     $53 = $52 & 255;
     $54 = $count;
     $55 = $54 & 255;
     $56 = $1;
     $57 = $56 + $55 | 0;
     HEAP8[$57 >> 0] = $53;
     $58 = $count;
     $59 = $58 & 255;
     $60 = $59 + 1 | 0;
     $61 = $60 & 255;
     $count = $61;
    }
   }
  }
  $62 = $i;
  $63 = $62 + 1 << 24 >> 24;
  $i = $63;
 }
 $64 = $count;
 STACKTOP = sp;
 return $64 | 0;
}

function _BeOccupied($person, $city) {
 $person = $person | 0;
 $city = $city | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, $pcount = 0, $pptr = 0, $pqptr = 0, $rev = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $person;
 $1 = $city;
 $2 = HEAP32[384 >> 2] | 0;
 $pqptr = $2;
 $3 = $1;
 $4 = $pqptr;
 $5 = _GetCityPersons($3, $4) | 0;
 $pcount = $5;
 $6 = $0;
 $7 = $6 & 255;
 $8 = HEAP32[332 >> 2] | 0;
 $9 = $8 + ($7 * 15 | 0) | 0;
 $10 = $9 + 1 | 0;
 $11 = HEAP8[$10 >> 0] | 0;
 $12 = $1;
 $13 = $12 & 255;
 $14 = 3645 + ($13 * 31 | 0) | 0;
 $15 = $14 + 1 | 0;
 HEAP8[$15 >> 0] = $11;
 $16 = $0;
 $17 = $16 & 255;
 $18 = $17 + 1 | 0;
 $19 = $18 & 255;
 $20 = $1;
 $21 = $20 & 255;
 $22 = 3645 + ($21 * 31 | 0) | 0;
 $23 = $22 + 2 | 0;
 HEAP8[$23 >> 0] = $19;
 $rev = -1;
 $i = 0;
 while (1) {
  $24 = $i;
  $25 = $24 & 255;
  $26 = $pcount;
  $27 = $26 & 255;
  $28 = ($25 | 0) < ($27 | 0);
  if (!$28) {
   break;
  }
  $29 = $i;
  $30 = $29 & 255;
  $31 = $pqptr;
  $32 = $31 + $30 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $p = $33;
  $34 = $p;
  $35 = $34 & 255;
  $36 = HEAP32[332 >> 2] | 0;
  $37 = $36 + ($35 * 15 | 0) | 0;
  $pptr = $37;
  $38 = $pptr;
  $39 = $38 + 1 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $41 = $40 & 255;
  $42 = $p;
  $43 = $42 & 255;
  $44 = $43 + 1 | 0;
  $45 = ($41 | 0) == ($44 | 0);
  if ($45) {
   $46 = $p;
   $rev = $46;
   $47 = $p;
   HEAP8[5275 >> 0] = $47;
   $48 = HEAP8[5276 >> 0] | 0;
   $49 = $48 & 255;
   $50 = $49 + 1 | 0;
   $51 = $50 & 255;
   HEAP8[5276 >> 0] = $51;
   $52 = $pptr;
   $53 = $52 + 1 | 0;
   HEAP8[$53 >> 0] = -1;
  } else {
   $54 = $pptr;
   $55 = $54 + 1 | 0;
   HEAP8[$55 >> 0] = 0;
  }
  $56 = $pptr;
  $57 = $56 + 10 | 0;
  HEAP8[$57 >> 0] = 0 & 255;
  HEAP8[$57 + 1 >> 0] = 0 >> 8;
  $58 = $i;
  $59 = $58 + 1 << 24 >> 24;
  $i = $59;
 }
 $60 = $rev;
 STACKTOP = sp;
 return $60 | 0;
}

function _ShowPersonPro($person, $pro, $x, $y, $wid) {
 $person = $person | 0;
 $pro = $pro | 0;
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $positem = 0, $ptr = 0, $str = 0, $sx = 0, $sy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $sx = sp + 45 | 0;
 $sy = sp + 44 | 0;
 $str = sp + 24 | 0;
 $ptr = sp + 10 | 0;
 $positem = sp;
 $0 = $person;
 $1 = $pro;
 $2 = $x;
 $3 = $y;
 $4 = $wid;
 $5 = $2;
 $6 = $3;
 $7 = $2;
 $8 = $7 & 255;
 $9 = $4;
 $10 = $9 & 255;
 $11 = $8 + $10 | 0;
 $12 = $11 - 1 | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 & 255;
 $16 = $15 + 12 | 0;
 $17 = $16 & 255;
 _InitItem($5, $6, $13, $17, $positem);
 $18 = _AddItem(49, 12, $positem, $sx, $sy) | 0;
 $19 = $18 << 24 >> 24 != 0;
 if (!$19) {
  STACKTOP = sp;
  return;
 }
 $20 = $0;
 _GetPersonName($20, $str);
 $21 = HEAP8[$sx >> 0] | 0;
 $22 = $21 & 255;
 $23 = $22 + 24 | 0;
 $24 = $23 & 255;
 $25 = HEAP8[$sy >> 0] | 0;
 _PlcMidShowStr($24, $25, $str);
 _ResLoadToMem(2, 8, $ptr) | 0;
 $26 = $1;
 $i = $26;
 while (1) {
  $27 = $i;
  $28 = $27 & 255;
  $29 = ($28 | 0) < 13;
  if (!$29) {
   label = 6;
   break;
  }
  $30 = $i;
  $31 = $30 & 255;
  $32 = $ptr + $31 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $34 = $33 & 255;
  $35 = $34 * 6 | 0;
  $36 = $35 + 1 | 0;
  $37 = $36 & 255;
  $38 = _AddItem($37, 12, $positem, $sx, $sy) | 0;
  $39 = $38 << 24 >> 24 != 0;
  if (!$39) {
   label = 6;
   break;
  }
  $40 = $0;
  $41 = $i;
  _GetPersonProStr($40, $41, $str);
  $42 = HEAP8[$sx >> 0] | 0;
  $43 = $42 & 255;
  $44 = $i;
  $45 = $44 & 255;
  $46 = $ptr + $45 | 0;
  $47 = HEAP8[$46 >> 0] | 0;
  $48 = $47 & 255;
  $49 = $48 * 6 | 0;
  $50 = ($49 | 0) / 2 & -1;
  $51 = $43 + $50 | 0;
  $52 = $51 & 255;
  $53 = HEAP8[$sy >> 0] | 0;
  _PlcMidShowStr($52, $53, $str);
  $54 = $i;
  $55 = $54 + 1 << 24 >> 24;
  $i = $55;
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return;
 }
}

function _ShowGoodsPro($goods, $pro, $x, $y, $wid) {
 $goods = $goods | 0;
 $pro = $pro | 0;
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $positem = 0, $ptr = 0, $str = 0, $sx = 0, $sy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $sx = sp + 37 | 0;
 $sy = sp + 36 | 0;
 $str = sp + 16 | 0;
 $ptr = sp + 8 | 0;
 $positem = sp;
 $0 = $goods;
 $1 = $pro;
 $2 = $x;
 $3 = $y;
 $4 = $wid;
 $5 = $2;
 $6 = $3;
 $7 = $2;
 $8 = $7 & 255;
 $9 = $4;
 $10 = $9 & 255;
 $11 = $8 + $10 | 0;
 $12 = $11 - 1 | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 & 255;
 $16 = $15 + 12 | 0;
 $17 = $16 & 255;
 _InitItem($5, $6, $13, $17, $positem);
 $18 = _AddItem(61, 12, $positem, $sx, $sy) | 0;
 $19 = $18 << 24 >> 24 != 0;
 if (!$19) {
  STACKTOP = sp;
  return;
 }
 $20 = $0;
 _GetGoodsName($20, $str);
 $21 = HEAP8[$sx >> 0] | 0;
 $22 = $21 & 255;
 $23 = $22 + 30 | 0;
 $24 = $23 & 255;
 $25 = HEAP8[$sy >> 0] | 0;
 _PlcMidShowStr($24, $25, $str);
 _ResItemGet(2, 7, $ptr) | 0;
 $26 = $1;
 $i = $26;
 while (1) {
  $27 = $i;
  $28 = $27 & 255;
  $29 = ($28 | 0) < 5;
  if (!$29) {
   label = 6;
   break;
  }
  $30 = $i;
  $31 = $30 & 255;
  $32 = $ptr + $31 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $34 = $33 & 255;
  $35 = $34 * 6 | 0;
  $36 = $35 + 1 | 0;
  $37 = $36 & 255;
  $38 = _AddItem($37, 12, $positem, $sx, $sy) | 0;
  $39 = $38 << 24 >> 24 != 0;
  if (!$39) {
   label = 6;
   break;
  }
  $40 = $0;
  $41 = $i;
  _GetGoodsProStr($40, $41, $str);
  $42 = HEAP8[$sx >> 0] | 0;
  $43 = $42 & 255;
  $44 = $i;
  $45 = $44 & 255;
  $46 = $ptr + $45 | 0;
  $47 = HEAP8[$46 >> 0] | 0;
  $48 = $47 & 255;
  $49 = $48 * 6 | 0;
  $50 = ($49 | 0) / 2 & -1;
  $51 = $43 + $50 | 0;
  $52 = $51 & 255;
  $53 = HEAP8[$sy >> 0] | 0;
  _PlcMidShowStr($52, $53, $str);
  $54 = $i;
  $55 = $54 + 1 << 24 >> 24;
  $i = $55;
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return;
 }
}

function _LoadPeriod($period) {
 $period = $period | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $length = 0, $ptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $period;
 $1 = $0;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(57, $1, $2) | 0;
 $ptr = $3;
 $4 = $ptr;
 $5 = _loadCities(3645, $4) | 0;
 $ptr = $5;
 $6 = $ptr;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 HEAP8[3641 >> 0] = $7 & 255;
 HEAP8[3641 + 1 >> 0] = $7 >> 8;
 $8 = $0;
 $9 = _ResGetItemLen(61, $8) | 0;
 $length = $9;
 $10 = $0;
 $11 = HEAP32[256 >> 2] | 0;
 $12 = _ResLoadToCon(61, $10, $11) | 0;
 $ptr = $12;
 $13 = HEAP32[332 >> 2] | 0;
 $14 = $ptr;
 $15 = $length;
 _loadPersons($13, $14, $15) | 0;
 $16 = $0;
 _ResItemGet(65, $16, 4823) | 0;
 $17 = $0;
 _ResItemGet(68, $17, 5023) | 0;
 $18 = HEAP32[388 >> 2] | 0;
 dest = $18;
 stop = dest + 30 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $19 = HEAP32[396 >> 2] | 0;
 _memset($19 | 0, -1, 1200) | 0;
 $20 = $0;
 HEAP8[3644 >> 0] = $20;
 $i = 0;
 while (1) {
  $21 = $i;
  $22 = $21 & 255;
  $23 = ($22 | 0) < 38;
  if (!$23) {
   break;
  }
  $24 = $i;
  $25 = $24 & 255;
  $26 = 3645 + ($25 * 31 | 0) | 0;
  HEAP8[$26 >> 0] = 0;
  $27 = $i;
  $28 = $27 + 1 << 24 >> 24;
  $i = $28;
 }
 $i = 0;
 while (1) {
  $29 = $i;
  $30 = $29 & 255;
  $31 = ($30 | 0) < 200;
  if (!$31) {
   break;
  }
  $32 = $i;
  $33 = $32 & 255;
  $34 = HEAP32[332 >> 2] | 0;
  $35 = $34 + ($33 * 15 | 0) | 0;
  $36 = $35 + 8 | 0;
  HEAP8[$36 >> 0] = 100;
  $37 = $i;
  $38 = $37 & 255;
  $39 = HEAP32[332 >> 2] | 0;
  $40 = $39 + ($38 * 15 | 0) | 0;
  $41 = $40 + 10 | 0;
  HEAP8[$41 >> 0] = 100 & 255;
  HEAP8[$41 + 1 >> 0] = 100 >> 8;
  $42 = $i;
  $43 = $42 & 255;
  $44 = HEAP32[332 >> 2] | 0;
  $45 = $44 + ($43 * 15 | 0) | 0;
  HEAP8[$45 >> 0] = 0;
  $46 = $i;
  $47 = $46 + 1 << 24 >> 24;
  $i = $47;
 }
 HEAP8[3643 >> 0] = 1;
 STACKTOP = sp;
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == 0;
 if ($2) {
  label = 3;
 } else {
  $3 = $f + 108 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = ($4 | 0) < ($1 | 0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  $7 = ($6 | 0) < 0;
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0 >> 2] | 0;
   $10 = ($9 | 0) == 0;
   $$phi$trans$insert = $f + 8 | 0;
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
    $11 = $$pre;
    $26 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $13 = $f + 4 | 0;
    $14 = HEAP32[$13 >> 2] | 0;
    $15 = $12;
    $16 = $14;
    $17 = $15 - $16 | 0;
    $18 = $f + 108 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    $20 = $9 - $19 | 0;
    $21 = $20 + -1 | 0;
    $22 = ($17 | 0) > ($21 | 0);
    if ($22) {
     $23 = $14 + $21 | 0;
     $24 = $f + 100 | 0;
     HEAP32[$24 >> 2] = $23;
     $28 = $12;
    } else {
     $26 = $15;
     $41 = $12;
     label = 9;
    }
   }
   if ((label | 0) == 9) {
    $25 = $f + 100 | 0;
    HEAP32[$25 >> 2] = $26;
    $28 = $41;
   }
   $27 = ($28 | 0) == (0 | 0);
   $$phi$trans$insert3 = $f + 4 | 0;
   $$pre4 = HEAP32[$$phi$trans$insert3 >> 2] | 0;
   if (!$27) {
    $29 = $28;
    $30 = $$pre4;
    $31 = $f + 108 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    $33 = $29 + 1 | 0;
    $34 = $33 - $30 | 0;
    $35 = $34 + $32 | 0;
    HEAP32[$31 >> 2] = $35;
   }
   $36 = $$pre4 + -1 | 0;
   $37 = HEAP8[$36 >> 0] | 0;
   $38 = $37 & 255;
   $39 = ($38 | 0) == ($6 | 0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6 & 255;
    HEAP8[$36 >> 0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label | 0) == 4) {
  $8 = $f + 100 | 0;
  HEAP32[$8 >> 2] = 0;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _GetRoundSelfCity($city, $cqueue) {
 $city = $city | 0;
 $cqueue = $cqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $cb = 0, $clnkcount = 0, $count = 0, $cp = 0, $i = 0, $inf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $cqueue;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(59, 1, $2) | 0;
 $inf = $3;
 $4 = $0;
 $5 = $4 & 255;
 $clnkcount = $5;
 $6 = $clnkcount;
 $7 = $6 & 65535;
 $8 = $7 << 4;
 $9 = $8 & 65535;
 $clnkcount = $9;
 $10 = $clnkcount;
 $11 = $10 & 65535;
 $12 = $inf;
 $13 = $12 + $11 | 0;
 $inf = $13;
 $count = 0;
 $14 = $0;
 $15 = $14 & 255;
 $16 = 3645 + ($15 * 31 | 0) | 0;
 $17 = $16 + 1 | 0;
 $18 = HEAP8[$17 >> 0] | 0;
 $cb = $18;
 $i = 0;
 while (1) {
  $19 = $i;
  $20 = $19 & 255;
  $21 = ($20 | 0) < 8;
  if (!$21) {
   break;
  }
  $22 = $i;
  $23 = $22 & 255;
  $24 = $inf;
  $25 = $24 + $23 | 0;
  $26 = HEAP8[$25 >> 0] | 0;
  $27 = $26 << 24 >> 24 != 0;
  if ($27) {
   $28 = $i;
   $29 = $28 & 255;
   $30 = $inf;
   $31 = $30 + $29 | 0;
   $32 = HEAP8[$31 >> 0] | 0;
   $33 = $32 & 255;
   $34 = $33 - 1 | 0;
   $35 = 3645 + ($34 * 31 | 0) | 0;
   $36 = $35 + 1 | 0;
   $37 = HEAP8[$36 >> 0] | 0;
   $cp = $37;
   $38 = $cp;
   $39 = $38 & 255;
   $40 = $cb;
   $41 = $40 & 255;
   $42 = ($39 | 0) == ($41 | 0);
   if ($42) {
    $43 = $i;
    $44 = $43 & 255;
    $45 = $inf;
    $46 = $45 + $44 | 0;
    $47 = HEAP8[$46 >> 0] | 0;
    $48 = $47 & 255;
    $49 = $48 - 1 | 0;
    $50 = $49 & 255;
    $51 = $count;
    $52 = $51 & 255;
    $53 = $1;
    $54 = $53 + $52 | 0;
    HEAP8[$54 >> 0] = $50;
    $55 = $count;
    $56 = $55 & 255;
    $57 = $56 + 1 | 0;
    $58 = $57 & 255;
    $count = $58;
   }
  }
  $59 = $i;
  $60 = $59 + 1 << 24 >> 24;
  $i = $60;
 }
 $61 = $count;
 STACKTOP = sp;
 return $61 | 0;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0, $i$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  $3 = ___towrite($f) | 0;
  $4 = ($3 | 0) == 0;
  if ($4) {
   $$pre = HEAP32[$0 >> 2] | 0;
   $8 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $8 = $1;
  label = 4;
 }
 L4 : do {
  if ((label | 0) == 4) {
   $5 = $f + 20 | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   $7 = $8;
   $9 = $6;
   $10 = $7 - $9 | 0;
   $11 = $10 >>> 0 < $l >>> 0;
   if ($11) {
    $12 = $f + 36 | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    $14 = FUNCTION_TABLE_iiii[$13 & 31]($f, $s, $l) | 0;
    $$0 = $14;
    break;
   }
   $15 = $f + 75 | 0;
   $16 = HEAP8[$15 >> 0] | 0;
   $17 = $16 << 24 >> 24 > -1;
   L9 : do {
    if ($17) {
     $i$0 = $l;
     while (1) {
      $18 = ($i$0 | 0) == 0;
      if ($18) {
       $$01 = $l;
       $$02 = $s;
       $29 = $6;
       $i$1 = 0;
       break L9;
      }
      $19 = $i$0 + -1 | 0;
      $20 = $s + $19 | 0;
      $21 = HEAP8[$20 >> 0] | 0;
      $22 = $21 << 24 >> 24 == 10;
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = $f + 36 | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $25 = FUNCTION_TABLE_iiii[$24 & 31]($f, $s, $i$0$lcssa10) | 0;
     $26 = $25 >>> 0 < $i$0$lcssa10 >>> 0;
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = $s + $i$0$lcssa10 | 0;
     $28 = $l - $i$0$lcssa10 | 0;
     $$pre6 = HEAP32[$5 >> 2] | 0;
     $$01 = $28;
     $$02 = $27;
     $29 = $$pre6;
     $i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;
     $$02 = $s;
     $29 = $6;
     $i$1 = 0;
    }
   } while (0);
   _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
   $30 = HEAP32[$5 >> 2] | 0;
   $31 = $30 + $$01 | 0;
   HEAP32[$5 >> 2] = $31;
   $32 = $i$1 + $$01 | 0;
   $$0 = $32;
  }
 } while (0);
 return $$0 | 0;
}

function _FgtTransMove($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $lp = 0, $mptr = 0, $type = 0, $x = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3480 + $2 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 & 255;
 $6 = $5 - 1 | 0;
 $7 = HEAP32[332 >> 2] | 0;
 $8 = $7 + ($6 * 15 | 0) | 0;
 $9 = $8 + 9 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $type = $10;
 $11 = HEAP32[256 >> 2] | 0;
 $12 = _ResLoadToCon(2, 3, $11) | 0;
 $mptr = $12;
 $13 = $type;
 $14 = $13 & 255;
 $15 = $14 * 46 | 0;
 $16 = $mptr;
 $17 = $16 + $15 | 0;
 $mptr = $17;
 $lp = 0;
 while (1) {
  $18 = $lp;
  $19 = $18 & 255;
  $20 = ($19 | 0) < 225;
  if (!$20) {
   break;
  }
  $21 = $lp;
  $22 = $21 & 255;
  $23 = HEAP32[284 >> 2] | 0;
  $24 = $23 + $22 | 0;
  $25 = HEAP8[$24 >> 0] | 0;
  $i = $25;
  $26 = $i;
  $27 = $26 & 255;
  $28 = 255 == ($27 | 0);
  if (!$28) {
   $29 = $i;
   $30 = $29 & 255;
   $31 = $mptr;
   $32 = $31 + $30 | 0;
   $33 = HEAP8[$32 >> 0] | 0;
   $34 = $lp;
   $35 = $34 & 255;
   $36 = HEAP32[284 >> 2] | 0;
   $37 = $36 + $35 | 0;
   HEAP8[$37 >> 0] = $33;
  }
  $38 = $lp;
  $39 = $38 & 255;
  $40 = $39 + 1 | 0;
  $41 = $40 & 255;
  $lp = $41;
 }
 $42 = $0;
 _FgtSetDifPot($42);
 $43 = $0;
 $44 = $43 & 255;
 $45 = 3500 + ($44 * 7 | 0) | 0;
 $46 = $45 + 4 | 0;
 $47 = HEAP8[$46 >> 0] | 0;
 $48 = $47 & 255;
 $49 = $48 - 1 | 0;
 $50 = $49 & 255;
 $x = $50;
 $51 = $x;
 $52 = $51 & 255;
 $53 = $52 << 4;
 $54 = $53 & 255;
 $lp = $54;
 $55 = $0;
 $56 = $55 & 255;
 $57 = 3500 + ($56 * 7 | 0) | 0;
 $58 = $57 + 4 | 0;
 $59 = HEAP8[$58 >> 0] | 0;
 $60 = $lp;
 $61 = $60 & 255;
 $62 = HEAP32[284 >> 2] | 0;
 $63 = $62 + $61 | 0;
 HEAP8[$63 >> 0] = $59;
 STACKTOP = sp;
 return;
}

function _FgtGetMapDat($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $maptr = 0, $ptr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = HEAP8[3451 >> 0] | 0;
 $3 = $2 & 255;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $5 + 10 | 0;
 $7 = ($3 | 0) < ($6 | 0);
 if ($7) {
  $8 = HEAP8[3451 >> 0] | 0;
  $9 = $8 & 255;
  $10 = $9 - 10 | 0;
  $11 = $10 & 255;
  $0 = $11;
 }
 $12 = HEAP8[3452 >> 0] | 0;
 $13 = $12 & 255;
 $14 = $1;
 $15 = $14 & 255;
 $16 = $15 + 5 | 0;
 $17 = ($13 | 0) < ($16 | 0);
 if ($17) {
  $18 = HEAP8[3452 >> 0] | 0;
  $19 = $18 & 255;
  $20 = $19 - 5 | 0;
  $21 = $20 & 255;
  $1 = $21;
 }
 $22 = $0;
 HEAP8[3455 >> 0] = $22;
 $23 = $1;
 HEAP8[3456 >> 0] = $23;
 $24 = HEAPU8[3474 >> 0] | HEAPU8[3474 + 1 >> 0] << 8;
 $25 = _FgtLoadToCon($24, 1) | 0;
 $26 = $25 + 16 | 0;
 $ptr = $26;
 $27 = HEAP32[280 >> 2] | 0;
 $maptr = $27;
 $28 = HEAP8[3451 >> 0] | 0;
 $29 = $28 & 255;
 $count = $29;
 $30 = $1;
 $31 = $30 & 255;
 $32 = $count;
 $33 = $32 & 65535;
 $34 = Math_imul($31, $33) | 0;
 $35 = $ptr;
 $36 = $35 + $34 | 0;
 $ptr = $36;
 $37 = $0;
 $38 = $37 & 255;
 $39 = $ptr;
 $40 = $39 + $38 | 0;
 $ptr = $40;
 $i = 0;
 while (1) {
  $41 = $i;
  $42 = $41 & 255;
  $43 = ($42 | 0) < 5;
  if (!$43) {
   break;
  }
  $44 = $maptr;
  $45 = $ptr;
  dest = $44;
  src = $45;
  stop = dest + 10 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $46 = $maptr;
  $47 = $46 + 10 | 0;
  $maptr = $47;
  $48 = HEAP8[3451 >> 0] | 0;
  $49 = $48 & 255;
  $50 = $ptr;
  $51 = $50 + $49 | 0;
  $ptr = $51;
  $52 = $i;
  $53 = $52 & 255;
  $54 = $53 + 1 | 0;
  $55 = $54 & 255;
  $i = $55;
 }
 STACKTOP = sp;
 return;
}

function _CountBaseAttr($i) {
 $i = $i | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $at = 0, $df = 0, $idx = 0, $lev = 0, $per = 0, $pos = 0, $thew = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $i;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3500 + ($2 * 7 | 0) | 0;
 $pos = $3;
 $4 = $0;
 $5 = _TransIdxToGen($4) | 0;
 $idx = $5;
 $6 = $idx;
 $7 = $6 & 255;
 $8 = HEAP32[332 >> 2] | 0;
 $9 = $8 + ($7 * 15 | 0) | 0;
 $per = $9;
 $10 = $per;
 $11 = $10 + 3 | 0;
 $12 = HEAP8[$11 >> 0] | 0;
 $13 = $12 & 255;
 $at = $13;
 $14 = $per;
 $15 = $14 + 4 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 & 255;
 $df = $17;
 $18 = $per;
 $19 = $18 + 2 | 0;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $20 & 255;
 $lev = $21;
 $22 = $per;
 $23 = $22 + 8 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $25 = $24 & 255;
 $thew = $25;
 $26 = $at;
 $27 = $26 & 65535;
 $28 = $27 * 80 | 0;
 $29 = ($28 | 0) / 100 & -1;
 $30 = $df;
 $31 = $30 & 65535;
 $32 = $31 * 30 | 0;
 $33 = ($32 | 0) / 100 & -1;
 $34 = $29 + $33 | 0;
 $35 = $lev;
 $36 = $35 & 65535;
 $37 = $34 + $36 | 0;
 $38 = $thew;
 $39 = $38 & 65535;
 $40 = Math_imul($37, $39) | 0;
 $41 = ($40 | 0) / 100 & -1;
 $42 = $41 & 255;
 $43 = $pos;
 $44 = $43 + 2 | 0;
 HEAP8[$44 >> 0] = $42;
 $45 = $df;
 $46 = $45 & 65535;
 $47 = $46 * 80 | 0;
 $48 = ($47 | 0) / 100 & -1;
 $49 = $at;
 $50 = _PlcExtract($49) | 0;
 $51 = $50 & 255;
 $52 = $51 >> 1;
 $53 = $48 + $52 | 0;
 $54 = $lev;
 $55 = $54 & 65535;
 $56 = $53 + $55 | 0;
 $57 = $thew;
 $58 = $57 & 65535;
 $59 = Math_imul($56, $58) | 0;
 $60 = ($59 | 0) / 100 & -1;
 $61 = $60 & 255;
 $62 = $pos;
 $63 = $62 + 3 | 0;
 HEAP8[$63 >> 0] = $61;
 $64 = $0;
 _CountMoveP($64);
 STACKTOP = sp;
 return;
}

function _rom_fread($buf, $size, $count, $fp) {
 $buf = $buf | 0;
 $size = $size | 0;
 $count = $count | 0;
 $fp = $fp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_fp = 0, $l = 0, $remain = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $buf;
 $1 = $size;
 $2 = $count;
 $3 = $fp;
 $4 = $3;
 $_fp = $4;
 $5 = $_fp;
 $6 = $5 + 24 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8 | HEAPU8[$6 + 2 >> 0] << 16 | HEAPU8[$6 + 3 >> 0] << 24;
 $8 = $_fp;
 $9 = $8 + 20 | 0;
 $10 = HEAPU8[$9 >> 0] | HEAPU8[$9 + 1 >> 0] << 8 | HEAPU8[$9 + 2 >> 0] << 16 | HEAPU8[$9 + 3 >> 0] << 24;
 $11 = $7 - $10 | 0;
 $remain = $11;
 $12 = $1;
 $13 = $12 & 255;
 $14 = $2;
 $15 = $14 & 65535;
 $16 = Math_imul($13, $15) | 0;
 $17 = $remain;
 $18 = $16 >>> 0 < $17 >>> 0;
 if ($18) {
  $19 = $1;
  $20 = $19 & 255;
  $21 = $2;
  $22 = $21 & 65535;
  $23 = Math_imul($20, $22) | 0;
  $25 = $23;
 } else {
  $24 = $remain;
  $25 = $24;
 }
 $l = $25;
 $26 = $l;
 $27 = $26 >>> 0 > 0;
 if (!$27) {
  $42 = $l;
  $43 = $1;
  $44 = $43 & 255;
  $45 = ($42 >>> 0) / ($44 >>> 0) & -1;
  STACKTOP = sp;
  return $45 | 0;
 }
 $28 = $0;
 $29 = $_fp;
 $30 = $29 + 28 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 $32 = $_fp;
 $33 = $32 + 20 | 0;
 $34 = HEAPU8[$33 >> 0] | HEAPU8[$33 + 1 >> 0] << 8 | HEAPU8[$33 + 2 >> 0] << 16 | HEAPU8[$33 + 3 >> 0] << 24;
 $35 = $31 + $34 | 0;
 $36 = $l;
 _memcpy($28 | 0, $35 | 0, $36 | 0) | 0;
 $37 = $l;
 $38 = $_fp;
 $39 = $38 + 20 | 0;
 $40 = HEAPU8[$39 >> 0] | HEAPU8[$39 + 1 >> 0] << 8 | HEAPU8[$39 + 2 >> 0] << 16 | HEAPU8[$39 + 3 >> 0] << 24;
 $41 = $40 + $37 | 0;
 HEAP8[$39 >> 0] = $41 & 255;
 HEAP8[$39 + 1 >> 0] = $41 >> 8 & 255;
 HEAP8[$39 + 2 >> 0] = $41 >> 16 & 255;
 HEAP8[$39 + 3 >> 0] = $41 >> 24;
 $42 = $l;
 $43 = $1;
 $44 = $43 & 255;
 $45 = ($42 >>> 0) / ($44 >>> 0) & -1;
 STACKTOP = sp;
 return $45 | 0;
}

function _GetGoodsProStr($goods, $pro, $str) {
 $goods = $goods | 0;
 $pro = $pro | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gptr = 0, $idx = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $goods;
 $1 = $pro;
 $2 = $str;
 $idx = 0;
 $3 = HEAP32[256 >> 2] | 0;
 $4 = _ResLoadToCon(66, 1, $3) | 0;
 $gptr = $4;
 $5 = $0;
 $6 = $5 & 255;
 $7 = $gptr;
 $8 = $7 + ($6 * 66 | 0) | 0;
 $gptr = $8;
 $9 = $1;
 $10 = $9 & 255;
 switch ($10 | 0) {
 case 0:
  {
   $11 = $gptr;
   $12 = $11 + 1 | 0;
   $13 = HEAP8[$12 >> 0] | 0;
   $14 = $13 & 255;
   switch ($14 | 0) {
   case 0:
    {
     $idx = 71;
     break;
    }
   case 1:
    {
     $idx = 72;
     break;
    }
   default:
    {}
   }
   $15 = $idx;
   $16 = $2;
   _ResLoadToMem(64, $15, $16) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $17 = $gptr;
   $18 = $17 + 62 | 0;
   $19 = HEAP8[$18 >> 0] | 0;
   $20 = $19 & 255;
   $21 = $2;
   _itoa($20, $21, 10) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $22 = $gptr;
   $23 = $22 + 63 | 0;
   $24 = HEAP8[$23 >> 0] | 0;
   $25 = $24 & 255;
   $26 = $2;
   _itoa($25, $26, 10) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $27 = $gptr;
   $28 = $27 + 64 | 0;
   $29 = HEAP8[$28 >> 0] | 0;
   $30 = $29 & 255;
   $31 = $2;
   _itoa($30, $31, 10) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 4:
  {
   $32 = $gptr;
   $33 = $32 + 65 | 0;
   $34 = HEAP8[$33 >> 0] | 0;
   $35 = $34 & 255;
   switch ($35 | 0) {
   case 0:
    {
     $idx = 50;
     break;
    }
   case 1:
    {
     $idx = 73;
     break;
    }
   case 2:
    {
     $idx = 74;
     break;
    }
   case 3:
    {
     $idx = 75;
     break;
    }
   default:
    {}
   }
   $36 = $idx;
   $37 = $2;
   _ResLoadToMem(64, $36, $37) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _GetEnemyKing($king, $kqueue) {
 $king = $king | 0;
 $kqueue = $kqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $c = 0, $count = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $king;
 $1 = $kqueue;
 $count = 0;
 $c = 0;
 while (1) {
  $2 = $c;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 38;
  if (!$4) {
   break;
  }
  $5 = $c;
  $6 = $5 & 255;
  $7 = 3645 + ($6 * 31 | 0) | 0;
  $8 = $7 + 1 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $b = $9;
  $10 = $b;
  $11 = $10 & 255;
  $12 = ($11 | 0) != 0;
  if ($12) {
   $13 = $b;
   $14 = $13 & 255;
   $15 = $0;
   $16 = $15 & 255;
   $17 = $16 + 1 | 0;
   $18 = ($14 | 0) != ($17 | 0);
   if ($18) {
    $i = 0;
    while (1) {
     $19 = $i;
     $20 = $19 & 255;
     $21 = $count;
     $22 = $21 & 255;
     $23 = ($20 | 0) < ($22 | 0);
     if (!$23) {
      break;
     }
     $24 = $i;
     $25 = $24 & 255;
     $26 = $1;
     $27 = $26 + $25 | 0;
     $28 = HEAP8[$27 >> 0] | 0;
     $29 = $28 & 255;
     $30 = $b;
     $31 = $30 & 255;
     $32 = $31 - 1 | 0;
     $33 = ($29 | 0) == ($32 | 0);
     if ($33) {
      break;
     }
     $34 = $i;
     $35 = $34 + 1 << 24 >> 24;
     $i = $35;
    }
    $36 = $i;
    $37 = $36 & 255;
    $38 = $count;
    $39 = $38 & 255;
    $40 = ($37 | 0) < ($39 | 0);
    if (!$40) {
     $41 = $b;
     $42 = $41 & 255;
     $43 = $42 - 1 | 0;
     $44 = $43 & 255;
     $45 = $count;
     $46 = $45 & 255;
     $47 = $1;
     $48 = $47 + $46 | 0;
     HEAP8[$48 >> 0] = $44;
     $49 = $count;
     $50 = $49 & 255;
     $51 = $50 + 1 | 0;
     $52 = $51 & 255;
     $count = $52;
    }
   }
  }
  $53 = $c;
  $54 = $53 + 1 << 24 >> 24;
  $c = $54;
 }
 $55 = $count;
 STACKTOP = sp;
 return $55 | 0;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($s | 0) == (0 | 0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = $wc >>> 0 < 128;
   if ($1) {
    $2 = $wc & 255;
    HEAP8[$s >> 0] = $2;
    $$0 = 1;
    break;
   }
   $3 = $wc >>> 0 < 2048;
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5 & 255;
    $7 = $s + 1 | 0;
    HEAP8[$s >> 0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9 & 255;
    HEAP8[$7 >> 0] = $10;
    $$0 = 2;
    break;
   }
   $11 = $wc >>> 0 < 55296;
   $12 = $wc & -8192;
   $13 = ($12 | 0) == 57344;
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15 & 255;
    $17 = $s + 1 | 0;
    HEAP8[$s >> 0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20 & 255;
    $22 = $s + 2 | 0;
    HEAP8[$17 >> 0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24 & 255;
    HEAP8[$22 >> 0] = $25;
    $$0 = 3;
    break;
   }
   $26 = $wc + -65536 | 0;
   $27 = $26 >>> 0 < 1048576;
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29 & 255;
    $31 = $s + 1 | 0;
    HEAP8[$s >> 0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34 & 255;
    $36 = $s + 2 | 0;
    HEAP8[$31 >> 0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39 & 255;
    $41 = $s + 3 | 0;
    HEAP8[$36 >> 0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43 & 255;
    HEAP8[$41 >> 0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = ___errno_location() | 0;
    HEAP32[$45 >> 2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _FgtGetTerrain($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, $offset = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $x;
 $2 = $y;
 $3 = HEAPU8[3474 >> 0] | HEAPU8[3474 + 1 >> 0] << 8;
 $4 = HEAP32[256 >> 2] | 0;
 $5 = _ResLoadToCon($3, 1, $4) | 0;
 $ptr = $5;
 $6 = $ptr;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $offset = $8;
 $9 = $2;
 $10 = $9 & 255;
 $11 = $offset;
 $12 = $11 & 65535;
 $13 = Math_imul($12, $10) | 0;
 $14 = $13 & 65535;
 $offset = $14;
 $15 = $1;
 $16 = $15 & 255;
 $17 = $offset;
 $18 = $17 & 65535;
 $19 = $18 + $16 | 0;
 $20 = $19 & 65535;
 $offset = $20;
 $21 = $ptr;
 $22 = $21 + 16 | 0;
 $ptr = $22;
 $23 = $offset;
 $24 = $23 & 65535;
 $25 = $ptr;
 $26 = $25 + $24 | 0;
 $27 = HEAP8[$26 >> 0] | 0;
 $idx = $27;
 $28 = $idx;
 $29 = $28 & 255;
 $30 = ($29 | 0) > 15;
 $31 = $idx;
 $32 = $31 & 255;
 do {
  if ($30) {
   $33 = ($32 | 0) == 41;
   if ($33) {
    $0 = 6;
    break;
   } else {
    $0 = 7;
    break;
   }
  } else {
   $34 = ($32 | 0) > 5;
   if ($34) {
    $0 = 2;
    break;
   }
   $35 = $idx;
   $36 = $35 & 255;
   $37 = ($36 | 0) > 4;
   if ($37) {
    $0 = 3;
    break;
   }
   $38 = $idx;
   $39 = $38 & 255;
   $40 = ($39 | 0) > 3;
   if ($40) {
    $0 = 4;
    break;
   }
   $41 = $idx;
   $42 = $41 & 255;
   $43 = ($42 | 0) > 2;
   if ($43) {
    $0 = 5;
    break;
   }
   $44 = $idx;
   $45 = $44 & 255;
   $46 = ($45 | 0) > 1;
   if ($46) {
    $0 = 0;
    break;
   }
   $47 = $idx;
   $48 = $47 & 255;
   $49 = ($48 | 0) > 0;
   if ($49) {
    $0 = 1;
    break;
   } else {
    $0 = -1;
    break;
   }
  }
 } while (0);
 $50 = $0;
 STACKTOP = sp;
 return $50 | 0;
}

function _GamAscii($x, $y, $asc) {
 $x = $x | 0;
 $y = $y | 0;
 $asc = $asc | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ascCode = 0, $i = 0, $zmCode = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $zmCode = sp + 8 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $asc;
 $3 = $2;
 $4 = $3 & 255;
 $5 = ($4 | 0) <= 32;
 L1 : do {
  if ($5) {
   dest = $zmCode;
   stop = dest + 24 | 0;
   do {
    HEAP8[dest >> 0] = 0 | 0;
    dest = dest + 1 | 0;
   } while ((dest | 0) < (stop | 0));
  } else {
   $ascCode = 164;
   $6 = $ascCode;
   $7 = $6 & 65535;
   $8 = $7 << 8;
   $9 = $8 & 65535;
   $ascCode = $9;
   $10 = $2;
   $11 = $10 & 255;
   $12 = $11 - 33 | 0;
   $13 = $12 + 161 | 0;
   $14 = $ascCode;
   $15 = $14 & 65535;
   $16 = $15 + $13 | 0;
   $17 = $16 & 65535;
   $ascCode = $17;
   $18 = $ascCode;
   _GetExcHZMCode($18, $zmCode);
   $i = 0;
   while (1) {
    $19 = $i;
    $20 = $19 & 255;
    $21 = ($20 | 0) < 12;
    if (!$21) {
     break L1;
    }
    $22 = $i;
    $23 = $22 & 255;
    $24 = $23 << 1;
    $25 = $zmCode + $24 | 0;
    $26 = HEAP8[$25 >> 0] | 0;
    $27 = $i;
    $28 = $27 & 255;
    $29 = $zmCode + $28 | 0;
    HEAP8[$29 >> 0] = $26;
    $30 = $i;
    $31 = $30 + 1 << 24 >> 24;
    $i = $31;
   }
  }
 } while (0);
 $32 = HEAP32[268 >> 2] | 0;
 $33 = ($32 | 0) == (0 | 0);
 $34 = $0;
 $35 = $1;
 $36 = $0;
 $37 = $36 & 255;
 $38 = $37 + 6 | 0;
 $39 = $38 - 1 | 0;
 $40 = $39 & 255;
 $41 = $1;
 $42 = $41 & 255;
 $43 = $42 + 12 | 0;
 $44 = $43 - 1 | 0;
 $45 = $44 & 255;
 if ($33) {
  _SysPicture($34, $35, $40, $45, $zmCode, 0);
  STACKTOP = sp;
  return;
 } else {
  $46 = HEAP32[268 >> 2] | 0;
  _GamePictureDummy($34, $35, $40, $45, $zmCode, $46, 0);
  STACKTOP = sp;
  return;
 }
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($f | 0) == (0 | 0);
 do {
  if ($0) {
   $7 = HEAP32[2276 >> 2] | 0;
   $8 = ($7 | 0) == (0 | 0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[2276 >> 2] | 0;
    $10 = _fflush($9) | 0;
    $27 = $10;
   }
   ___lock(2052 | 0);
   $$012 = HEAP32[2048 >> 2] | 0;
   $11 = ($$012 | 0) == (0 | 0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;
    $r$03 = $27;
    while (1) {
     $12 = $$014 + 76 | 0;
     $13 = HEAP32[$12 >> 2] | 0;
     $14 = ($13 | 0) > -1;
     if ($14) {
      $15 = ___lockfile($$014) | 0;
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = $$014 + 20 | 0;
     $17 = HEAP32[$16 >> 2] | 0;
     $18 = $$014 + 28 | 0;
     $19 = HEAP32[$18 >> 2] | 0;
     $20 = $17 >>> 0 > $19 >>> 0;
     if ($20) {
      $21 = ___fflush_unlocked($$014) | 0;
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24 | 0) == 0;
     if (!$23) {
      ___unlockfile($$014);
     }
     $25 = $$014 + 56 | 0;
     $$01 = HEAP32[$25 >> 2] | 0;
     $26 = ($$01 | 0) == (0 | 0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;
      $r$03 = $r$1;
     }
    }
   }
   ___unlock(2052 | 0);
   $$0 = $r$0$lcssa;
  } else {
   $1 = $f + 76 | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   $3 = ($2 | 0) > -1;
   if (!$3) {
    $4 = ___fflush_unlocked($f) | 0;
    $$0 = $4;
    break;
   }
   $5 = ___lockfile($f) | 0;
   $phitmp = ($5 | 0) == 0;
   $6 = ___fflush_unlocked($f) | 0;
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _rom_fseek($fp, $offset, $fromwhere) {
 $fp = $fp | 0;
 $offset = $offset | 0;
 $fromwhere = $fromwhere | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_fp = 0, $loc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $fp;
 $2 = $offset;
 $3 = $fromwhere;
 $4 = $1;
 $_fp = $4;
 $5 = $3;
 $6 = $5 & 255;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $8 = $2;
  $9 = $_fp;
  $10 = $9 + 24 | 0;
  $11 = HEAPU8[$10 >> 0] | HEAPU8[$10 + 1 >> 0] << 8 | HEAPU8[$10 + 2 >> 0] << 16 | HEAPU8[$10 + 3 >> 0] << 24;
  $12 = $8 >>> 0 < $11 >>> 0;
  if ($12) {
   $13 = $2;
   $14 = $_fp;
   $15 = $14 + 20 | 0;
   HEAP8[$15 >> 0] = $13 & 255;
   HEAP8[$15 + 1 >> 0] = $13 >> 8 & 255;
   HEAP8[$15 + 2 >> 0] = $13 >> 16 & 255;
   HEAP8[$15 + 3 >> 0] = $13 >> 24;
   $0 = 0;
   $32 = $0;
   STACKTOP = sp;
   return $32 | 0;
  } else {
   $0 = -1;
   $32 = $0;
   STACKTOP = sp;
   return $32 | 0;
  }
 }
 $16 = $3;
 $17 = $16 & 255;
 $18 = ($17 | 0) == 1;
 if (!$18) {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;
  return $32 | 0;
 }
 $19 = $_fp;
 $20 = $19 + 20 | 0;
 $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8 | HEAPU8[$20 + 2 >> 0] << 16 | HEAPU8[$20 + 3 >> 0] << 24;
 $22 = $2;
 $23 = $21 + $22 | 0;
 $loc = $23;
 $24 = $loc;
 $25 = $_fp;
 $26 = $25 + 24 | 0;
 $27 = HEAPU8[$26 >> 0] | HEAPU8[$26 + 1 >> 0] << 8 | HEAPU8[$26 + 2 >> 0] << 16 | HEAPU8[$26 + 3 >> 0] << 24;
 $28 = $24 >>> 0 < $27 >>> 0;
 if ($28) {
  $29 = $loc;
  $30 = $_fp;
  $31 = $30 + 20 | 0;
  HEAP8[$31 >> 0] = $29 & 255;
  HEAP8[$31 + 1 >> 0] = $29 >> 8 & 255;
  HEAP8[$31 + 2 >> 0] = $29 >> 16 & 255;
  HEAP8[$31 + 3 >> 0] = $29 >> 24;
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;
  return $32 | 0;
 } else {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;
  return $32 | 0;
 }
 return 0 | 0;
}

function _FgtGetHurtMax($h, $a) {
 $h = $h | 0;
 $a = $a | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aidx = 0, $hurt = 0, $i = 0, $max = 0, $pos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $h;
 $1 = $a;
 $aidx = -1;
 $max = 0;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 10;
  if (!$4) {
   label = 10;
   break;
  }
  $5 = $i;
  $6 = $5 & 255;
  $7 = 3500 + ($6 * 7 | 0) | 0;
  $pos = $7;
  $8 = $pos;
  $9 = $8 + 6 | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $10 & 255;
  $12 = 8 == ($11 | 0);
  if (!$12) {
   $13 = $pos;
   $14 = HEAP8[$13 >> 0] | 0;
   $15 = $pos;
   $16 = $15 + 1 | 0;
   $17 = HEAP8[$16 >> 0] | 0;
   $18 = _FgtChkAkRng($14, $17) | 0;
   $19 = $18 << 24 >> 24 != 0;
   if ($19) {
    $20 = $i;
    $21 = $20 & 255;
    $22 = HEAP8[3468 >> 0] | 0;
    $23 = $22 & 255;
    $24 = ($21 | 0) == ($23 | 0);
    $25 = $i;
    if ($24) {
     break;
    }
    _BuiltAtkAttr(1, $25);
    $26 = _CountAtkHurt() | 0;
    $hurt = $26;
    $27 = $max;
    $28 = $27 & 65535;
    $29 = $hurt;
    $30 = $29 & 65535;
    $31 = ($28 | 0) < ($30 | 0);
    if ($31) {
     $32 = $hurt;
     $max = $32;
     $33 = $i;
     $aidx = $33;
    }
   }
  }
  $34 = $i;
  $35 = $34 & 255;
  $36 = $35 + 1 | 0;
  $37 = $36 & 255;
  $i = $37;
 }
 if ((label | 0) == 10) {
  $38 = $max;
  $39 = $0;
  HEAP8[$39 >> 0] = $38 & 255;
  HEAP8[$39 + 1 >> 0] = $38 >> 8;
  $40 = $aidx;
  $41 = $1;
  HEAP8[$41 >> 0] = $40;
  STACKTOP = sp;
  return;
 }
 $aidx = $25;
 $max = -1;
 $38 = $max;
 $39 = $0;
 HEAP8[$39 >> 0] = $38 & 255;
 HEAP8[$39 + 1 >> 0] = $38 >> 8;
 $40 = $aidx;
 $41 = $1;
 HEAP8[$41 >> 0] = $40;
 STACKTOP = sp;
 return;
}

function _PlcNumShow($x, $y, $num, $dig, $vs) {
 $x = $x | 0;
 $y = $y | 0;
 $num = $num | 0;
 $dig = $dig | 0;
 $vs = $vs | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $numb = 0, $ptr = 0, $slen = 0, $tnum = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $buf = sp + 28 | 0;
 $numb = sp + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $num;
 $3 = $dig;
 $4 = $vs;
 $ptr = $buf;
 dest = $buf;
 stop = dest + 12 | 0;
 do {
  HEAP8[dest >> 0] = 48 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $5 = $2;
 $6 = $3;
 $7 = $6 & 255;
 $8 = 3244 + ($7 << 2) | 0;
 $9 = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8 | HEAPU8[$8 + 2 >> 0] << 16 | HEAPU8[$8 + 3 >> 0] << 24;
 $10 = ($5 >>> 0) % ($9 >>> 0) & -1;
 $tnum = $10;
 $11 = $tnum;
 _ltoa($11, $numb, 10) | 0;
 $12 = _strlen($numb) | 0;
 $13 = $12 & 255;
 $slen = $13;
 $14 = $slen;
 $15 = $14 & 255;
 $16 = $3;
 $17 = $16 & 255;
 $18 = ($15 | 0) <= ($17 | 0);
 if ($18) {
  $19 = $2;
  $20 = $3;
  $21 = $20 & 255;
  $22 = 3244 + ($21 << 2) | 0;
  $23 = HEAPU8[$22 >> 0] | HEAPU8[$22 + 1 >> 0] << 8 | HEAPU8[$22 + 2 >> 0] << 16 | HEAPU8[$22 + 3 >> 0] << 24;
  $24 = $19 >>> 0 >= $23 >>> 0;
  if ($24) {
   $25 = $3;
   $26 = $25 & 255;
   $27 = $slen;
   $28 = $27 & 255;
   $29 = $26 - $28 | 0;
   $30 = $ptr;
   $31 = $30 + $29 | 0;
   $ptr = $31;
  }
 }
 $32 = $ptr;
 $33 = $slen;
 $34 = $33 & 255;
 $35 = $34 + 1 | 0;
 _memcpy($32 | 0, $numb | 0, $35 | 0) | 0;
 $36 = $4;
 $37 = ($36 | 0) == (0 | 0);
 $38 = $0;
 $39 = $1;
 if ($37) {
  _GamStrShowS($38, $39, $buf);
  STACKTOP = sp;
  return;
 } else {
  $40 = $4;
  _GamStrShowV($38, $39, $buf, $40);
  STACKTOP = sp;
  return;
 }
}

function _hex_decode($s, $length) {
 $s = $s | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $c = 0, $i = 0, $l = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $c = sp + 4 | 0;
 $1 = $s;
 $2 = $length;
 $3 = $1;
 $4 = _strlen($3) | 0;
 $l = $4;
 $5 = $l;
 $6 = ($5 >>> 0) % 2 & -1;
 $7 = ($6 | 0) != 0;
 if ($7) {
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;
  return $33 | 0;
 }
 $8 = $l;
 $9 = ($8 >>> 0) / 2 & -1;
 $10 = $9 + 1 | 0;
 $11 = _calloc(1, $10) | 0;
 $buffer = $11;
 $i = 0;
 while (1) {
  $12 = $i;
  $13 = $l;
  $14 = $12 >>> 0 < $13 >>> 0;
  if (!$14) {
   label = 8;
   break;
  }
  HEAP8[$c >> 0] = 0 & 255;
  HEAP8[$c + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$c + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$c + 3 >> 0] = 0 >> 24;
  $15 = $1;
  $16 = $i;
  $17 = $15 + $16 | 0;
  HEAP32[$vararg_buffer >> 2] = $c;
  $18 = _sscanf($17, 5396, $vararg_buffer) | 0;
  $19 = ($18 | 0) != 1;
  if ($19) {
   label = 6;
   break;
  }
  $21 = HEAPU8[$c >> 0] | HEAPU8[$c + 1 >> 0] << 8 | HEAPU8[$c + 2 >> 0] << 16 | HEAPU8[$c + 3 >> 0] << 24;
  $22 = $21 & 255;
  $23 = $i;
  $24 = ($23 | 0) / 2 & -1;
  $25 = $buffer;
  $26 = $25 + $24 | 0;
  HEAP8[$26 >> 0] = $22;
  $27 = $i;
  $28 = $27 + 2 | 0;
  $i = $28;
 }
 if ((label | 0) == 6) {
  $20 = $buffer;
  _free($20);
  $0 = 0;
  $33 = $0;
  STACKTOP = sp;
  return $33 | 0;
 } else if ((label | 0) == 8) {
  $29 = $l;
  $30 = ($29 >>> 0) / 2 & -1;
  $31 = $2;
  HEAP8[$31 >> 0] = $30 & 255;
  HEAP8[$31 + 1 >> 0] = $30 >> 8 & 255;
  HEAP8[$31 + 2 >> 0] = $30 >> 16 & 255;
  HEAP8[$31 + 3 >> 0] = $30 >> 24;
  $32 = $buffer;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;
  return $33 | 0;
 }
 return 0 | 0;
}

function _GamConInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _GuiInit() | 0;
 _FlashInit();
 _SysMemInit(11264, 5120);
 _SysIconAllClear();
 $1 = _GuiGetKbdState() | 0;
 HEAP8[3437 >> 0] = $1 & 255;
 HEAP8[3437 + 1 >> 0] = $1 >> 8;
 _GuiSetInputFilter(3);
 _GuiSetKbdType(3);
 $2 = _SysGetKeySound() | 0;
 HEAP8[3436 >> 0] = $2;
 _SysSetKeySound(0);
 _SysTimer1Open(50);
 _DataBankSwitch(4, 1, 4);
 $3 = HEAP32[240 >> 2] | 0;
 $4 = _gam_fopen($3, 114) | 0;
 HEAP32[264 >> 2] = $4;
 $5 = HEAP32[264 >> 2] | 0;
 $6 = (0 | 0) == ($5 | 0);
 if ($6) {
  $0 = 1;
  $25 = $0;
  STACKTOP = sp;
  return $25 | 0;
 }
 $7 = HEAP32[244 >> 2] | 0;
 $8 = ($7 | 0) != (0 | 0);
 if ($8) {
  $9 = HEAP32[244 >> 2] | 0;
  $10 = _gam_fopen($9, 114) | 0;
  HEAP32[260 >> 2] = $10;
 }
 $11 = HEAP32[260 >> 2] | 0;
 $12 = (0 | 0) == ($11 | 0);
 if ($12) {
  $13 = HEAP32[248 >> 2] | 0;
  $14 = _gam_fopen($13, 114) | 0;
  HEAP32[260 >> 2] = $14;
 } else {
  _printf(3344, $vararg_buffer) | 0;
 }
 $15 = HEAP32[260 >> 2] | 0;
 $16 = (0 | 0) == ($15 | 0);
 if ($16) {
  $0 = 1;
  $25 = $0;
  STACKTOP = sp;
  return $25 | 0;
 } else {
  $17 = HEAP32[260 >> 2] | 0;
  $18 = _gam_freadall($17) | 0;
  HEAP32[256 >> 2] = $18;
  $19 = _SysGetSecond() | 0;
  $i = $19;
  $20 = $i;
  $21 = $20 & 255;
  _srand($21);
  _GetDataBankNumber(9, 3444);
  HEAP8[3439 >> 0] = 1;
  HEAP8[3440 >> 0] = 0;
  HEAP8[3441 >> 0] = 0;
  HEAP8[3442 >> 0] = -97;
  HEAP8[3443 >> 0] = 95;
  $22 = HEAP32[376 >> 2] | 0;
  HEAP32[272 >> 2] = $22;
  $23 = HEAP32[380 >> 2] | 0;
  HEAP32[276 >> 2] = $23;
  $24 = HEAP32[272 >> 2] | 0;
  _memset($24 | 0, 0, 1920) | 0;
  $0 = 0;
  $25 = $0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0 | 0;
}

function _GamMPicShowV($x, $y, $wid, $hgt, $pic, $vscr) {
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 $hgt = $hgt | 0;
 $pic = $pic | 0;
 $vscr = $vscr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $pLen = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $wid;
 $3 = $hgt;
 $4 = $pic;
 $5 = $vscr;
 $6 = $0;
 $7 = $1;
 $8 = $0;
 $9 = $8 & 255;
 $10 = $2;
 $11 = $10 & 255;
 $12 = $9 + $11 | 0;
 $13 = $12 - 1 | 0;
 $14 = $13 & 255;
 $15 = $1;
 $16 = $15 & 255;
 $17 = $3;
 $18 = $17 & 255;
 $19 = $16 + $18 | 0;
 $20 = $19 - 1 | 0;
 $21 = $20 & 255;
 $22 = $4;
 $23 = $5;
 _GamePictureDummy($6, $7, $14, $21, $22, $23, 1);
 $24 = $2;
 $25 = $24 & 255;
 $26 = $25 >> 3;
 $27 = $26 & 65535;
 $pLen = $27;
 $28 = $2;
 $29 = $28 & 255;
 $30 = $29 & 7;
 $31 = ($30 | 0) != 0;
 if ($31) {
  $32 = $pLen;
  $33 = $32 & 65535;
  $34 = $33 + 1 | 0;
  $35 = $34 & 65535;
  $pLen = $35;
 }
 $36 = $3;
 $37 = $36 & 255;
 $38 = $pLen;
 $39 = $38 & 65535;
 $40 = Math_imul($39, $37) | 0;
 $41 = $40 & 65535;
 $pLen = $41;
 $42 = $0;
 $43 = $1;
 $44 = $0;
 $45 = $44 & 255;
 $46 = $2;
 $47 = $46 & 255;
 $48 = $45 + $47 | 0;
 $49 = $48 - 1 | 0;
 $50 = $49 & 255;
 $51 = $1;
 $52 = $51 & 255;
 $53 = $3;
 $54 = $53 & 255;
 $55 = $52 + $54 | 0;
 $56 = $55 - 1 | 0;
 $57 = $56 & 255;
 $58 = $4;
 $59 = $pLen;
 $60 = $59 & 65535;
 $61 = $58 + $60 | 0;
 $62 = $5;
 _GamePictureDummy($42, $43, $50, $57, $61, $62, 2);
 STACKTOP = sp;
 return;
}

function _PlcItemShowS($sx, $sy, $ex, $ey, $buf) {
 $sx = $sx | 0;
 $sy = $sy | 0;
 $ex = $ex | 0;
 $ey = $ey | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $sx;
 $2 = $sy;
 $3 = $ex;
 $4 = $ey;
 $5 = $buf;
 $6 = $3;
 $7 = $6 & 255;
 $8 = $1;
 $9 = $8 & 255;
 $10 = $7 - $9 | 0;
 $11 = ($10 | 0) / 6 & -1;
 $12 = $11 & 255;
 $len = $12;
 $13 = $len;
 $14 = $13 & 255;
 $15 = $4;
 $16 = $15 & 255;
 $17 = $2;
 $18 = $17 & 255;
 $19 = $16 - $18 | 0;
 $20 = ($19 | 0) / 12 & -1;
 $21 = Math_imul($14, $20) | 0;
 $22 = $21 & 255;
 $len = $22;
 $23 = $5;
 $24 = _strlen($23) | 0;
 $25 = $len;
 $26 = $25 & 255;
 $27 = $24 >>> 0 < $26 >>> 0;
 do {
  if ($27) {
   $ptr = 0;
  } else {
   $28 = $5;
   $29 = $len;
   $30 = _strlchr($28, $29, 124) | 0;
   $ptr = $30;
   $31 = $ptr;
   $32 = (0 | 0) == ($31 | 0);
   if (!$32) {
    $39 = $ptr;
    HEAP8[$39 >> 0] = 0;
    $40 = $ptr;
    $41 = $40 + 1 | 0;
    $ptr = $41;
    break;
   }
   $33 = $len;
   $34 = $33 << 24 >> 24 != 0;
   $35 = $5;
   if ($34) {
    $36 = $len;
    $37 = $36 & 255;
    $38 = $35 + $37 | 0;
    $ptr = $38;
    break;
   }
   $0 = $35;
   $50 = $0;
   STACKTOP = sp;
   return $50 | 0;
  }
 } while (0);
 $42 = $1;
 HEAP8[3440 >> 0] = $42;
 $43 = $2;
 HEAP8[3441 >> 0] = $43;
 $44 = $3;
 HEAP8[3442 >> 0] = $44;
 $45 = $4;
 HEAP8[3443 >> 0] = $45;
 $46 = $1;
 $47 = $2;
 $48 = $5;
 _GamStrShowS($46, $47, $48);
 $49 = $ptr;
 $0 = $49;
 $50 = $0;
 STACKTOP = sp;
 return $50 | 0;
}

function _sav_fopen346($fname, $pmode) {
 $fname = $fname | 0;
 $pmode = $pmode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $f_data = 0, $fp = 0, $fp1 = 0, $length = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $length = sp + 12 | 0;
 $1 = $fname;
 $2 = $pmode;
 $3 = $2;
 $4 = $3 & 255;
 $5 = ($4 | 0) == 114;
 if (!$5) {
  $24 = $2;
  $25 = $24 & 255;
  $26 = ($25 | 0) == 119;
  if ($26) {
   $27 = _calloc(1, 40) | 0;
   $fp1 = $27;
   $28 = $fp1;
   $29 = $1;
   _sav_finit_w($28, $29);
   $30 = $fp1;
   $0 = $30;
   $31 = $0;
   STACKTOP = sp;
   return $31 | 0;
  } else {
   $0 = 0;
   $31 = $0;
   STACKTOP = sp;
   return $31 | 0;
  }
 }
 $6 = $1;
 $7 = _getValue($6) | 0;
 $data = $7;
 $8 = $data;
 $9 = ($8 | 0) != (0 | 0);
 if ($9) {
  HEAP8[$length >> 0] = 0 & 255;
  HEAP8[$length + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$length + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$length + 3 >> 0] = 0 >> 24;
  $10 = $data;
  $11 = _hex_decode($10, $length) | 0;
  $f_data = $11;
  $12 = $data;
  _free($12);
  $13 = $f_data;
  $14 = ($13 | 0) != (0 | 0);
  if ($14) {
   $15 = _rom_fnew() | 0;
   $fp = $15;
   $16 = $fp;
   HEAP32[$16 >> 2] = 8;
   $17 = $f_data;
   $18 = $fp;
   $19 = $18 + 28 | 0;
   HEAP32[$19 >> 2] = $17;
   $20 = HEAPU8[$length >> 0] | HEAPU8[$length + 1 >> 0] << 8 | HEAPU8[$length + 2 >> 0] << 16 | HEAPU8[$length + 3 >> 0] << 24;
   $21 = $fp;
   $22 = $21 + 24 | 0;
   HEAP8[$22 >> 0] = $20 & 255;
   HEAP8[$22 + 1 >> 0] = $20 >> 8 & 255;
   HEAP8[$22 + 2 >> 0] = $20 >> 16 & 255;
   HEAP8[$22 + 3 >> 0] = $20 >> 24;
   $23 = $fp;
   $0 = $23;
   $31 = $0;
   STACKTOP = sp;
   return $31 | 0;
  }
 }
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;
 return $31 | 0;
}

function _FgtJNChkAim($param, $same, $aidx) {
 $param = $param | 0;
 $same = $same | 0;
 $aidx = $aidx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $skl = 0, $terrain = 0, $type = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $param;
 $2 = $same;
 $3 = $aidx;
 $4 = $3;
 $5 = $4 & 255;
 $6 = 3480 + $5 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $9 = $8 - 1 | 0;
 $10 = HEAP32[332 >> 2] | 0;
 $11 = $10 + ($9 * 15 | 0) | 0;
 $12 = $11 + 9 | 0;
 $13 = HEAP8[$12 >> 0] | 0;
 $type = $13;
 $14 = $3;
 $15 = _FgtGetGenTer($14) | 0;
 $terrain = $15;
 $16 = $1;
 $17 = _FgtGetJNPtr($16) | 0;
 $skl = $17;
 $18 = $type;
 $19 = $18 & 255;
 $20 = $skl;
 $21 = $20 + 28 | 0;
 $22 = $21 + $19 | 0;
 $23 = HEAP8[$22 >> 0] | 0;
 $24 = $23 << 24 >> 24 != 0;
 if (!$24) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $25 = $terrain;
 $26 = $25 & 255;
 $27 = $skl;
 $28 = $27 + 12 | 0;
 $29 = $28 + $26 | 0;
 $30 = HEAP8[$29 >> 0] | 0;
 $31 = $30 << 24 >> 24 != 0;
 if (!$31) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;
  return $45 | 0;
 }
 $32 = $skl;
 $33 = HEAP8[$32 >> 0] | 0;
 $34 = $33 & 255;
 $35 = ($34 | 0) != 1;
 $36 = $2;
 $37 = $36 << 24 >> 24 != 0;
 $or$cond = $35 | $37;
 do {
  if ($or$cond) {
   $38 = $skl;
   $39 = HEAP8[$38 >> 0] | 0;
   $40 = $39 & 255;
   $41 = ($40 | 0) == 0;
   if ($41) {
    $42 = $2;
    $43 = $42 & 255;
    $44 = ($43 | 0) != 0;
    if ($44) {
     break;
    }
   }
   $0 = 1;
   $45 = $0;
   STACKTOP = sp;
   return $45 | 0;
  }
 } while (0);
 $0 = 0;
 $45 = $0;
 STACKTOP = sp;
 return $45 | 0;
}

function _FgtMapUnitShow($tx, $ty, $flag) {
 $tx = $tx | 0;
 $ty = $ty | 0;
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $poff = 0, $ptr = 0, $tile = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $tx;
 $1 = $ty;
 $2 = $flag;
 $3 = $1;
 $4 = $3 & 255;
 $5 = HEAP8[3456 >> 0] | 0;
 $6 = $5 & 255;
 $7 = $4 - $6 | 0;
 $8 = $7 * 10 | 0;
 $9 = $0;
 $10 = $9 & 255;
 $11 = $8 + $10 | 0;
 $12 = HEAP8[3455 >> 0] | 0;
 $13 = $12 & 255;
 $14 = $11 - $13 | 0;
 $15 = $14 & 255;
 $tile = $15;
 $16 = $tile;
 $17 = $16 & 255;
 $18 = HEAP32[280 >> 2] | 0;
 $19 = $18 + $17 | 0;
 $20 = HEAP8[$19 >> 0] | 0;
 $21 = $20 & 255;
 $22 = $21 & 65535;
 $23 = $22 << 5;
 $24 = $23 & 65535;
 $poff = $24;
 $25 = HEAPU8[3447 >> 0] | HEAPU8[3447 + 1 >> 0] << 8;
 $26 = _FgtLoadToCon($25, 1) | 0;
 $27 = $26 + 6 | 0;
 $28 = $poff;
 $29 = $28 & 65535;
 $30 = $27 + $29 | 0;
 $ptr = $30;
 $31 = $0;
 $32 = $31 & 255;
 $33 = HEAP8[3455 >> 0] | 0;
 $34 = $33 & 255;
 $35 = $32 - $34 | 0;
 $36 = $35 << 4;
 $37 = $36 + 0 | 0;
 $38 = $37 & 255;
 $0 = $38;
 $39 = $1;
 $40 = $39 & 255;
 $41 = HEAP8[3456 >> 0] | 0;
 $42 = $41 & 255;
 $43 = $40 - $42 | 0;
 $44 = $43 << 4;
 $45 = $44 + 0 | 0;
 $46 = $45 & 255;
 $1 = $46;
 $47 = $2;
 $48 = $47 << 24 >> 24 != 0;
 $49 = $0;
 $50 = $1;
 $51 = $ptr;
 if ($48) {
  _GamPicShowS($49, $50, 16, 16, $51);
  STACKTOP = sp;
  return;
 } else {
  $52 = HEAP32[272 >> 2] | 0;
  _GamPicShowV($49, $50, 16, 16, $51, $52);
  STACKTOP = sp;
  return;
 }
}

function _AddFightOrder($Order, $Fighters) {
 $Order = $Order | 0;
 $Fighters = $Fighters | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clen = 0, $fiptr = 0, $fptr = 0, $i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $Order;
 $2 = $Fighters;
 $3 = HEAP32[388 >> 2] | 0;
 $fiptr = $3;
 $i = 0;
 while (1) {
  $4 = $i;
  $5 = $4 & 255;
  $6 = ($5 | 0) < 30;
  if (!$6) {
   label = 7;
   break;
  }
  $7 = $i;
  $8 = $7 & 255;
  $9 = $fiptr;
  $10 = $9 + $8 | 0;
  $11 = HEAP8[$10 >> 0] | 0;
  $12 = $11 << 24 >> 24 != 0;
  if (!$12) {
   $13 = $i;
   $14 = $1;
   $15 = $14 + 1 | 0;
   HEAP8[$15 >> 0] = $13;
   $16 = $1;
   $17 = _AddOrderEnd($16) | 0;
   $18 = $17 << 24 >> 24 != 0;
   if ($18) {
    label = 5;
    break;
   }
  }
  $35 = $i;
  $36 = $35 + 1 << 24 >> 24;
  $i = $36;
 }
 if ((label | 0) == 5) {
  $19 = $i;
  $20 = $19 & 255;
  $21 = $fiptr;
  $22 = $21 + $20 | 0;
  HEAP8[$22 >> 0] = 1;
  $23 = HEAP32[392 >> 2] | 0;
  $fptr = $23;
  $clen = 10;
  $24 = $i;
  $25 = $24 & 255;
  $26 = $clen;
  $27 = $26 & 65535;
  $28 = Math_imul($27, $25) | 0;
  $29 = $28 & 65535;
  $clen = $29;
  $30 = $clen;
  $31 = $30 & 65535;
  $32 = $fptr;
  $33 = $32 + $31 | 0;
  $34 = $2;
  dest = $33;
  src = $34;
  stop = dest + 10 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $0 = 1;
  $37 = $0;
  STACKTOP = sp;
  return $37 | 0;
 } else if ((label | 0) == 7) {
  _GamMsgBox(3284, 5);
  $0 = 0;
  $37 = $0;
  STACKTOP = sp;
  return $37 | 0;
 }
 return 0 | 0;
}

function _FgtGetNearGen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ax = 0, $ay = 0, $i = 0, $idx = 0, $min = 0, $pos = 0, $state = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ax = sp + 7 | 0;
 $ay = sp + 6 | 0;
 $min = -1;
 $idx = -1;
 _FgtGetAimPos($ax, $ay);
 $i = 10;
 while (1) {
  $0 = $i;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 20;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 & 255;
  $5 = 3500 + ($4 * 7 | 0) | 0;
  $pos = $5;
  $6 = $pos;
  $7 = $6 + 6 | 0;
  $8 = HEAP8[$7 >> 0] | 0;
  $state = $8;
  $9 = $state;
  $10 = $9 & 255;
  $11 = 8 == ($10 | 0);
  if (!$11) {
   $12 = $state;
   $13 = $12 & 255;
   $14 = 1 == ($13 | 0);
   if (!$14) {
    $15 = $state;
    $16 = $15 & 255;
    $17 = 6 == ($16 | 0);
    if (!$17) {
     $18 = $pos;
     $19 = $18 + 5 | 0;
     $20 = HEAP8[$19 >> 0] | 0;
     $21 = $20 & 255;
     $22 = 1 == ($21 | 0);
     if (!$22) {
      $23 = $pos;
      $24 = HEAP8[$23 >> 0] | 0;
      $25 = $pos;
      $26 = $25 + 1 | 0;
      $27 = HEAP8[$26 >> 0] | 0;
      $28 = HEAP8[$ax >> 0] | 0;
      $29 = HEAP8[$ay >> 0] | 0;
      $30 = _FgtCntInterval($24, $27, $28, $29) | 0;
      $state = $30;
      $31 = $min;
      $32 = $31 & 255;
      $33 = $state;
      $34 = $33 & 255;
      $35 = ($32 | 0) > ($34 | 0);
      if ($35) {
       $36 = $state;
       $min = $36;
       $37 = $i;
       $idx = $37;
      }
     }
    }
   }
  }
  $38 = $i;
  $39 = $38 & 255;
  $40 = $39 + 1 | 0;
  $41 = $40 & 255;
  $i = $41;
 }
 $42 = $idx;
 STACKTOP = sp;
 return $42 | 0;
}

function _GetAllKing($kings) {
 $kings = $kings | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $c = 0, $count = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $kings;
 $count = 0;
 $c = 0;
 while (1) {
  $1 = $c;
  $2 = $1 & 255;
  $3 = ($2 | 0) < 38;
  if (!$3) {
   break;
  }
  $4 = $c;
  $5 = $4 & 255;
  $6 = 3645 + ($5 * 31 | 0) | 0;
  $7 = $6 + 1 | 0;
  $8 = HEAP8[$7 >> 0] | 0;
  $b = $8;
  $9 = $b;
  $10 = $9 << 24 >> 24 != 0;
  if ($10) {
   $i = 0;
   while (1) {
    $11 = $i;
    $12 = $11 & 255;
    $13 = $count;
    $14 = $13 & 255;
    $15 = ($12 | 0) < ($14 | 0);
    if (!$15) {
     break;
    }
    $16 = $i;
    $17 = $16 & 255;
    $18 = $0;
    $19 = $18 + $17 | 0;
    $20 = HEAP8[$19 >> 0] | 0;
    $21 = $20 & 255;
    $22 = $b;
    $23 = $22 & 255;
    $24 = $23 - 1 | 0;
    $25 = ($21 | 0) == ($24 | 0);
    if ($25) {
     break;
    }
    $26 = $i;
    $27 = $26 + 1 << 24 >> 24;
    $i = $27;
   }
   $28 = $i;
   $29 = $28 & 255;
   $30 = $count;
   $31 = $30 & 255;
   $32 = ($29 | 0) < ($31 | 0);
   if (!$32) {
    $33 = $b;
    $34 = $33 & 255;
    $35 = $34 - 1 | 0;
    $36 = $35 & 255;
    $37 = $count;
    $38 = $37 & 255;
    $39 = $0;
    $40 = $39 + $38 | 0;
    HEAP8[$40 >> 0] = $36;
    $41 = $count;
    $42 = $41 & 255;
    $43 = $42 + 1 | 0;
    $44 = $43 & 255;
    $count = $44;
   }
  }
  $45 = $c;
  $46 = $45 + 1 << 24 >> 24;
  $c = $46;
 }
 $47 = $count;
 STACKTOP = sp;
 return $47 | 0;
}

function _FgtCheckIdx() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pos = 0, $state = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = $1 & 255;
  $3 = ($2 | 0) < 10;
  if (!$3) {
   label = 13;
   break;
  }
  $4 = $i;
  $5 = $4 & 255;
  $6 = 3500 + ($5 * 7 | 0) | 0;
  $pos = $6;
  $7 = $pos;
  $8 = $7 + 6 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $state = $9;
  $10 = $state;
  $11 = $10 & 255;
  $12 = 8 == ($11 | 0);
  if (!$12) {
   $13 = $pos;
   $14 = HEAP8[$13 >> 0] | 0;
   $15 = $14 & 255;
   $16 = HEAP8[3453 >> 0] | 0;
   $17 = $16 & 255;
   $18 = ($15 | 0) != ($17 | 0);
   if (!$18) {
    $19 = $pos;
    $20 = $19 + 1 | 0;
    $21 = HEAP8[$20 >> 0] | 0;
    $22 = $21 & 255;
    $23 = HEAP8[3454 >> 0] | 0;
    $24 = $23 & 255;
    $25 = ($22 | 0) != ($24 | 0);
    if (!$25) {
     break;
    }
   }
  }
  $38 = $i;
  $39 = $38 & 255;
  $40 = $39 + 1 | 0;
  $41 = $40 & 255;
  $i = $41;
 }
 if ((label | 0) == 13) {
  $0 = -1;
  $42 = $0;
  STACKTOP = sp;
  return $42 | 0;
 }
 $26 = $pos;
 $27 = $26 + 5 | 0;
 $28 = HEAP8[$27 >> 0] | 0;
 $29 = $28 & 255;
 $30 = 0 != ($29 | 0);
 if ($30) {
  $0 = -1;
  $42 = $0;
  STACKTOP = sp;
  return $42 | 0;
 }
 $31 = $state;
 $32 = $31 & 255;
 $33 = 1 == ($32 | 0);
 if (!$33) {
  $34 = $state;
  $35 = $34 & 255;
  $36 = 6 == ($35 | 0);
  if (!$36) {
   $37 = $i;
   $0 = $37;
   $42 = $0;
   STACKTOP = sp;
   return $42 | 0;
  }
 }
 $0 = -1;
 $42 = $0;
 STACKTOP = sp;
 return $42 | 0;
}

function _GamPicShowExS($x, $y, $wid, $hgt, $idx, $pic) {
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 $hgt = $hgt | 0;
 $idx = $idx | 0;
 $pic = $pic | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask = 0, $pLen = 0, $phgt = 0, $pwid = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $wid;
 $3 = $hgt;
 $4 = $idx;
 $5 = $pic;
 $6 = $5;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 $8 = $7 & 255;
 $pwid = $8;
 $9 = $5;
 $10 = $9 + 2 | 0;
 $11 = HEAPU8[$10 >> 0] | HEAPU8[$10 + 1 >> 0] << 8;
 $12 = $11 & 255;
 $phgt = $12;
 $13 = $5;
 $14 = $13 + 5 | 0;
 $15 = HEAP8[$14 >> 0] | 0;
 $mask = $15;
 $16 = $pwid;
 $17 = $16 & 255;
 $18 = $17 >> 3;
 $19 = $18 & 65535;
 $pLen = $19;
 $20 = $pwid;
 $21 = $20 & 255;
 $22 = $21 & 7;
 $23 = ($22 | 0) != 0;
 if ($23) {
  $24 = $pLen;
  $25 = $24 & 65535;
  $26 = $25 + 1 | 0;
  $27 = $26 & 65535;
  $pLen = $27;
 }
 $28 = $phgt;
 $29 = $28 & 255;
 $30 = $pLen;
 $31 = $30 & 65535;
 $32 = Math_imul($31, $29) | 0;
 $33 = $32 & 65535;
 $pLen = $33;
 $34 = $pLen;
 $35 = $34 & 65535;
 $36 = $4;
 $37 = $36 & 255;
 $38 = Math_imul($35, $37) | 0;
 $39 = $38 + 6 | 0;
 $40 = $5;
 $41 = $40 + $39 | 0;
 $5 = $41;
 $42 = $mask;
 $43 = $42 & 255;
 $44 = 1 == ($43 | 0);
 if ($44) {
  STACKTOP = sp;
  return;
 }
 $45 = $0;
 $46 = $1;
 $47 = $2;
 $48 = $3;
 $49 = $5;
 _GamPicShowS($45, $46, $47, $48, $49);
 STACKTOP = sp;
 return;
}

function _GamRevCity($cycnt, $tbuf, $pos) {
 $cycnt = $cycnt | 0;
 $tbuf = $tbuf | 0;
 $pos = $pos | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $sx = 0, $sy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $cycnt;
 $1 = $tbuf;
 $2 = $pos;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $3 & 255;
  $5 = $0;
  $6 = $5 & 255;
  $7 = ($4 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $8 & 255;
  $10 = $1;
  $11 = $10 + $9 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  $13 = $12 & 255;
  $14 = $13 << 1;
  $15 = $14 & 255;
  $sx = $15;
  $16 = $sx;
  $17 = $16 & 255;
  $18 = $17 + 1 | 0;
  $19 = $2;
  $20 = $19 + $18 | 0;
  $21 = HEAP8[$20 >> 0] | 0;
  $22 = $21 & 255;
  $23 = $22 * 7 | 0;
  $24 = $23 + 0 | 0;
  $25 = $24 + 20 | 0;
  $26 = $25 + 3 | 0;
  $27 = $26 & 255;
  $sy = $27;
  $28 = $sx;
  $29 = $28 & 255;
  $30 = $2;
  $31 = $30 + $29 | 0;
  $32 = HEAP8[$31 >> 0] | 0;
  $33 = $32 & 255;
  $34 = $33 * 7 | 0;
  $35 = $34 + 0 | 0;
  $36 = $35 + 60 | 0;
  $37 = $36 + 3 | 0;
  $38 = $37 & 255;
  $sx = $38;
  $39 = $sx;
  $40 = $sy;
  $41 = $sx;
  $42 = $41 & 255;
  $43 = $42 + 1 | 0;
  $44 = $43 & 255;
  $45 = $sy;
  $46 = $45 & 255;
  $47 = $46 + 1 | 0;
  $48 = $47 & 255;
  _SysLcdReverse($39, $40, $44, $48);
  $49 = $i;
  $50 = $49 & 255;
  $51 = $50 + 1 | 0;
  $52 = $51 & 255;
  $i = $52;
 }
 STACKTOP = sp;
 return;
}

function _GetCityPersons($city, $pqueue) {
 $city = $city | 0;
 $pqueue = $pqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $p = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $pqueue;
 $count = 0;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $2 & 255;
  $4 = $0;
  $5 = $4 & 255;
  $6 = 3645 + ($5 * 31 | 0) | 0;
  $7 = $6 + 28 | 0;
  $8 = HEAP8[$7 >> 0] | 0;
  $9 = $8 & 255;
  $10 = ($3 | 0) < ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $0;
  $12 = $11 & 255;
  $13 = 3645 + ($12 * 31 | 0) | 0;
  $14 = $13 + 27 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $16 = $15 & 255;
  $17 = $i;
  $18 = $17 & 255;
  $19 = $16 + $18 | 0;
  $20 = 4823 + $19 | 0;
  $21 = HEAP8[$20 >> 0] | 0;
  $p = $21;
  $22 = $p;
  $23 = $22 & 255;
  $24 = HEAP32[332 >> 2] | 0;
  $25 = $24 + ($23 * 15 | 0) | 0;
  $26 = $25 + 1 | 0;
  $27 = HEAP8[$26 >> 0] | 0;
  $28 = $27 & 255;
  $29 = $0;
  $30 = $29 & 255;
  $31 = 3645 + ($30 * 31 | 0) | 0;
  $32 = $31 + 1 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $34 = $33 & 255;
  $35 = ($28 | 0) == ($34 | 0);
  if ($35) {
   $36 = $p;
   $37 = $count;
   $38 = $37 & 255;
   $39 = $1;
   $40 = $39 + $38 | 0;
   HEAP8[$40 >> 0] = $36;
   $41 = $count;
   $42 = $41 & 255;
   $43 = $42 + 1 | 0;
   $44 = $43 & 255;
   $count = $44;
  }
  $45 = $i;
  $46 = $45 + 1 << 24 >> 24;
  $i = $46;
 }
 $47 = $count;
 STACKTOP = sp;
 return $47 | 0;
}

function _FgtResumeMp($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $maxmp = 0, $per = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = _TransIdxToGen1($1) | 0;
 $maxmp = $2;
 $3 = $maxmp;
 $4 = $3 & 255;
 $5 = HEAP32[332 >> 2] | 0;
 $6 = $5 + ($4 * 15 | 0) | 0;
 $per = $6;
 $7 = $per;
 $8 = $7 + 4 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $10 = $9 & 255;
 $11 = $10 & 65535;
 $12 = $11 * 80 | 0;
 $13 = ($12 | 0) / 100 & -1;
 $14 = $per;
 $15 = $14 + 3 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 & 255;
 $18 = _PlcExtract($17) | 0;
 $19 = $18 & 255;
 $20 = $19 >> 1;
 $21 = $13 + $20 | 0;
 $22 = $per;
 $23 = $22 + 2 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $25 = $24 & 255;
 $26 = $21 + $25 | 0;
 $27 = $per;
 $28 = $27 + 8 | 0;
 $29 = HEAP8[$28 >> 0] | 0;
 $30 = $29 & 255;
 $31 = Math_imul($26, $30) | 0;
 $32 = ($31 | 0) / 100 & -1;
 $33 = $32 & 255;
 $maxmp = $33;
 $34 = $0;
 $35 = $34 & 255;
 $36 = 3500 + ($35 * 7 | 0) | 0;
 $37 = $36 + 3 | 0;
 $38 = HEAP8[$37 >> 0] | 0;
 $39 = $38 & 255;
 $40 = $maxmp;
 $41 = $40 & 255;
 $42 = ($39 | 0) < ($41 | 0);
 if (!$42) {
  STACKTOP = sp;
  return;
 }
 $43 = $0;
 $44 = $43 & 255;
 $45 = 3500 + ($44 * 7 | 0) | 0;
 $46 = $45 + 3 | 0;
 $47 = HEAP8[$46 >> 0] | 0;
 $48 = $47 & 255;
 $49 = $48 + 1 | 0;
 $50 = $49 & 255;
 HEAP8[$46 >> 0] = $50;
 STACKTOP = sp;
 return;
}

function _FgtGenPIdx($i) {
 $i = $i | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx = 0, $pos = 0, $state = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $i;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3500 + ($2 * 7 | 0) | 0;
 $pos = $3;
 $4 = $0;
 $5 = _TransIdxToGen1($4) | 0;
 $idx = $5;
 $6 = $pos;
 $7 = $6 + 6 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $state = $8;
 $9 = $state;
 $10 = $9 & 255;
 $11 = ($10 | 0) == 6;
 do {
  if ($11) {
   label = 3;
  } else {
   $12 = $state;
   $13 = $12 & 255;
   $14 = ($13 | 0) == 1;
   if ($14) {
    label = 3;
   } else {
    $15 = $pos;
    $16 = HEAP8[$15 >> 0] | 0;
    $17 = $pos;
    $18 = $17 + 1 | 0;
    $19 = HEAP8[$18 >> 0] | 0;
    $20 = _FgtGetTerrain($16, $19) | 0;
    $21 = $20 & 255;
    $22 = ($21 | 0) == 7;
    if ($22) {
     $idx = 12;
     break;
    } else {
     $23 = $idx;
     $24 = $23 & 255;
     $25 = HEAP32[332 >> 2] | 0;
     $26 = $25 + ($24 * 15 | 0) | 0;
     $27 = $26 + 9 | 0;
     $28 = HEAP8[$27 >> 0] | 0;
     $idx = $28;
     $29 = $idx;
     $30 = $29 & 255;
     $31 = $30 << 1;
     $32 = $31 & 255;
     $idx = $32;
     break;
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $idx = 14;
 }
 $33 = $0;
 $34 = $33 & 255;
 $35 = ($34 | 0) > 9;
 if (!$35) {
  $40 = $idx;
  STACKTOP = sp;
  return $40 | 0;
 }
 $36 = $idx;
 $37 = $36 & 255;
 $38 = $37 + 16 | 0;
 $39 = $38 & 255;
 $idx = $39;
 $40 = $idx;
 STACKTOP = sp;
 return $40 | 0;
}

function _FgtGetBaseXY($sym) {
 $sym = $sym | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $sym;
 $2 = HEAP8[3451 >> 0] | 0;
 $3 = $2 & 255;
 $4 = $3 - 5 | 0;
 $5 = $4 & 255;
 $x = $5;
 $6 = HEAP8[3452 >> 0] | 0;
 $7 = $6 & 255;
 $8 = $7 - 5 | 0;
 $9 = $8 & 255;
 $y = $9;
 $10 = HEAP8[3473 >> 0] | 0;
 $11 = $10 & 255;
 switch ($11 | 0) {
 case 7:
  {
   $x = 0;
   $y = 0;
   break;
  }
 case 0:
  {
   $12 = HEAP8[3451 >> 0] | 0;
   $13 = $12 & 255;
   $14 = $13 >> 1;
   $15 = $14 - 2 | 0;
   $16 = $15 & 255;
   $x = $16;
   $y = 0;
   break;
  }
 case 1:
  {
   $y = 2;
   break;
  }
 case 2:
  {
   $17 = HEAP8[3452 >> 0] | 0;
   $18 = $17 & 255;
   $19 = $18 >> 1;
   $20 = $19 - 2 | 0;
   $21 = $20 & 255;
   $y = $21;
   break;
  }
 case 4:
  {
   $22 = HEAP8[3451 >> 0] | 0;
   $23 = $22 & 255;
   $24 = $23 >> 1;
   $25 = $24 - 2 | 0;
   $26 = $25 & 255;
   $x = $26;
   break;
  }
 case 5:
  {
   $x = 2;
   break;
  }
 case 6:
  {
   $x = 2;
   $27 = HEAP8[3452 >> 0] | 0;
   $28 = $27 & 255;
   $29 = $28 >> 1;
   $30 = $29 - 2 | 0;
   $31 = $30 & 255;
   $y = $31;
   break;
  }
 default:
  {}
 }
 $32 = $1;
 $33 = $32 & 255;
 $34 = 120 == ($33 | 0);
 if ($34) {
  $35 = $x;
  $0 = $35;
  $37 = $0;
  STACKTOP = sp;
  return $37 | 0;
 } else {
  $36 = $y;
  $0 = $36;
  $37 = $0;
  STACKTOP = sp;
  return $37 | 0;
 }
 return 0 | 0;
}

function _FgtRefrashMap() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[3453 >> 0] | 0;
 $1 = $0 & 255;
 $2 = HEAP8[3455 >> 0] | 0;
 $3 = $2 & 255;
 $4 = ($1 | 0) < ($3 | 0);
 do {
  if ($4) {
   $5 = HEAP8[3455 >> 0] | 0;
   $6 = $5 & 255;
   $7 = $6 - 1 | 0;
   $8 = $7 & 255;
   HEAP8[3455 >> 0] = $8;
  } else {
   $9 = HEAP8[3454 >> 0] | 0;
   $10 = $9 & 255;
   $11 = HEAP8[3456 >> 0] | 0;
   $12 = $11 & 255;
   $13 = ($10 | 0) < ($12 | 0);
   if ($13) {
    $14 = HEAP8[3456 >> 0] | 0;
    $15 = $14 & 255;
    $16 = $15 - 1 | 0;
    $17 = $16 & 255;
    HEAP8[3456 >> 0] = $17;
    break;
   }
   $18 = HEAP8[3453 >> 0] | 0;
   $19 = $18 & 255;
   $20 = HEAP8[3455 >> 0] | 0;
   $21 = $20 & 255;
   $22 = $21 + 10 | 0;
   $23 = ($19 | 0) >= ($22 | 0);
   if ($23) {
    $24 = HEAP8[3455 >> 0] | 0;
    $25 = $24 & 255;
    $26 = $25 + 1 | 0;
    $27 = $26 & 255;
    HEAP8[3455 >> 0] = $27;
    break;
   }
   $28 = HEAP8[3454 >> 0] | 0;
   $29 = $28 & 255;
   $30 = HEAP8[3456 >> 0] | 0;
   $31 = $30 & 255;
   $32 = $31 + 5 | 0;
   $33 = ($29 | 0) >= ($32 | 0);
   if ($33) {
    $34 = HEAP8[3456 >> 0] | 0;
    $35 = $34 & 255;
    $36 = $35 + 1 | 0;
    $37 = $36 & 255;
    HEAP8[3456 >> 0] = $37;
    break;
   } else {
    return;
   }
  }
 } while (0);
 $38 = HEAP8[3455 >> 0] | 0;
 $39 = HEAP8[3456 >> 0] | 0;
 _FgtShowMap($38, $39);
 return;
}

function _ResLoadToMem($ResId, $idx, $ptr) {
 $ResId = $ResId | 0;
 $idx = $idx | 0;
 $ptr = $ptr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $plen = 0, $rIdx = 0, $reshead = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $rIdx = sp + 24 | 0;
 $reshead = sp + 12 | 0;
 $1 = $ResId;
 $2 = $idx;
 $3 = $ptr;
 $4 = $1;
 $5 = _GetResStartAddr($4) | 0;
 $addr = $5;
 $6 = $addr;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $0 = 1;
  $35 = $0;
  STACKTOP = sp;
  return $35 | 0;
 }
 $8 = $addr;
 $9 = $2;
 _GetResItem($8, $9, $reshead, $rIdx) | 0;
 $10 = HEAPU8[$rIdx >> 0] | HEAPU8[$rIdx + 1 >> 0] << 8;
 $11 = $10 & 65535;
 $12 = $addr;
 $13 = $12 + $11 | 0;
 $addr = $13;
 $14 = $rIdx + 2 | 0;
 $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
 $plen = $15;
 $16 = $plen;
 $17 = $16 & 65535;
 $18 = ($17 | 0) == 0;
 if ($18) {
  $0 = 2;
  $35 = $0;
  STACKTOP = sp;
  return $35 | 0;
 }
 $19 = HEAP32[260 >> 2] | 0;
 $20 = $addr;
 _gam_fseek($19, $20, 0) | 0;
 $21 = $3;
 $22 = $plen;
 $23 = HEAP32[260 >> 2] | 0;
 _gam_fread($21, 1, $22, $23) | 0;
 $24 = $plen;
 $25 = $24 & 65535;
 $26 = $3;
 $27 = $26 + $25 | 0;
 HEAP8[$27 >> 0] = 0;
 $28 = $reshead + 10 | 0;
 $29 = HEAP8[$28 >> 0] | 0;
 $30 = $29 << 24 >> 24 != 0;
 if ($30) {
  $31 = $3;
  $32 = $reshead + 10 | 0;
  $33 = HEAP8[$32 >> 0] | 0;
  $34 = $plen;
  _ExpDataWithKey($31, $33, $34);
 }
 $0 = 0;
 $35 = $0;
 STACKTOP = sp;
 return $35 | 0;
}

function _FgtChkAkRng($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rng = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $x;
 $2 = $y;
 $3 = HEAP32[288 >> 2] | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $rng = $4;
 $5 = HEAP32[288 >> 2] | 0;
 $6 = $5 + 1 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $9 = $1;
 $10 = $9 & 255;
 $11 = $10 - $8 | 0;
 $12 = $11 & 255;
 $1 = $12;
 $13 = HEAP32[288 >> 2] | 0;
 $14 = $13 + 2 | 0;
 $15 = HEAP8[$14 >> 0] | 0;
 $16 = $15 & 255;
 $17 = $2;
 $18 = $17 & 255;
 $19 = $18 - $16 | 0;
 $20 = $19 & 255;
 $2 = $20;
 $21 = $2;
 $22 = $21 & 255;
 $23 = $rng;
 $24 = $23 & 255;
 $25 = ($22 | 0) >= ($24 | 0);
 if (!$25) {
  $26 = $1;
  $27 = $26 & 255;
  $28 = $rng;
  $29 = $28 & 255;
  $30 = ($27 | 0) >= ($29 | 0);
  if (!$30) {
   $31 = $2;
   $32 = $31 & 255;
   $33 = $32 & 65535;
   $34 = $rng;
   $35 = $34 & 255;
   $36 = Math_imul($33, $35) | 0;
   $37 = $1;
   $38 = $37 & 255;
   $39 = $36 + $38 | 0;
   $40 = $39 + 3 | 0;
   $41 = HEAP32[288 >> 2] | 0;
   $42 = $41 + $40 | 0;
   $43 = HEAP8[$42 >> 0] | 0;
   $44 = $43 & 255;
   $45 = ($44 | 0) == 1;
   $46 = $45 & 1;
   $47 = $46 & 255;
   $0 = $47;
   $48 = $0;
   STACKTOP = sp;
   return $48 | 0;
  }
 }
 $0 = 0;
 $48 = $0;
 STACKTOP = sp;
 return $48 | 0;
}

function _GetEnemySatraps($king, $squeue) {
 $king = $king | 0;
 $squeue = $squeue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $c = 0, $count = 0, $s = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $king;
 $1 = $squeue;
 $count = 0;
 $c = 0;
 while (1) {
  $2 = $c;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 38;
  if (!$4) {
   break;
  }
  $5 = $c;
  $6 = $5 & 255;
  $7 = 3645 + ($6 * 31 | 0) | 0;
  $8 = $7 + 1 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $b = $9;
  $10 = $b;
  $11 = $10 << 24 >> 24 != 0;
  if ($11) {
   $12 = $c;
   $13 = $12 & 255;
   $14 = 3645 + ($13 * 31 | 0) | 0;
   $15 = $14 + 2 | 0;
   $16 = HEAP8[$15 >> 0] | 0;
   $s = $16;
   $17 = $b;
   $18 = $17 & 255;
   $19 = $0;
   $20 = $19 & 255;
   $21 = $20 + 1 | 0;
   $22 = ($18 | 0) != ($21 | 0);
   if ($22) {
    $23 = $s;
    $24 = $23 & 255;
    $25 = $b;
    $26 = $25 & 255;
    $27 = ($24 | 0) != ($26 | 0);
    if ($27) {
     $28 = $s;
     $29 = $28 & 255;
     $30 = $29 - 1 | 0;
     $31 = $30 & 255;
     $32 = $count;
     $33 = $32 & 255;
     $34 = $1;
     $35 = $34 + $33 | 0;
     HEAP8[$35 >> 0] = $31;
     $36 = $count;
     $37 = $36 & 255;
     $38 = $37 + 1 | 0;
     $39 = $38 & 255;
     $count = $39;
    }
   }
  }
  $40 = $c;
  $41 = $40 + 1 << 24 >> 24;
  $c = $41;
 }
 $42 = $count;
 STACKTOP = sp;
 return $42 | 0;
}

function _FgtChkRng() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $rng = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[288 >> 2] | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $rng = $2;
 $3 = HEAP8[3453 >> 0] | 0;
 $4 = $3 & 255;
 $5 = HEAP32[288 >> 2] | 0;
 $6 = $5 + 1 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $9 = $4 - $8 | 0;
 $10 = $9 & 255;
 $x = $10;
 $11 = HEAP8[3454 >> 0] | 0;
 $12 = $11 & 255;
 $13 = HEAP32[288 >> 2] | 0;
 $14 = $13 + 2 | 0;
 $15 = HEAP8[$14 >> 0] | 0;
 $16 = $15 & 255;
 $17 = $12 - $16 | 0;
 $18 = $17 & 255;
 $y = $18;
 $19 = $y;
 $20 = $19 & 255;
 $21 = $rng;
 $22 = $21 & 255;
 $23 = ($20 | 0) >= ($22 | 0);
 if (!$23) {
  $24 = $x;
  $25 = $24 & 255;
  $26 = $rng;
  $27 = $26 & 255;
  $28 = ($25 | 0) >= ($27 | 0);
  if (!$28) {
   $29 = $y;
   $30 = $29 & 255;
   $31 = $30 & 65535;
   $32 = $rng;
   $33 = $32 & 255;
   $34 = Math_imul($31, $33) | 0;
   $35 = $x;
   $36 = $35 & 255;
   $37 = $34 + $36 | 0;
   $38 = $37 + 3 | 0;
   $39 = HEAP32[288 >> 2] | 0;
   $40 = $39 + $38 | 0;
   $41 = HEAP8[$40 >> 0] | 0;
   $42 = $41 & 255;
   $43 = ($42 | 0) == 1;
   $44 = $43 & 1;
   $45 = $44 & 255;
   $0 = $45;
   $46 = $0;
   STACKTOP = sp;
   return $46 | 0;
  }
 }
 $0 = 0;
 $46 = $0;
 STACKTOP = sp;
 return $46 | 0;
}

function _fmt_u($0, $1, $s) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $s = $s | 0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $2 = $1 >>> 0 > 0;
 $3 = $0 >>> 0 > 4294967295;
 $4 = ($1 | 0) == 0;
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;
  $7 = $0;
  $8 = $1;
  while (1) {
   $9 = ___uremdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11 & 255;
   $13 = $$05 + -1 | 0;
   HEAP8[$13 >> 0] = $12;
   $14 = ___udivdi3($7 | 0, $8 | 0, 10, 0) | 0;
   $15 = tempRet0;
   $16 = $8 >>> 0 > 9;
   $17 = $7 >>> 0 > 4294967295;
   $18 = ($8 | 0) == 9;
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;
    $7 = $14;
    $8 = $15;
   } else {
    $$lcssa20 = $13;
    $28 = $14;
    $29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;
  $$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;
  $$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0 | 0) == 0;
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;
  $y$03 = $$01$lcssa$off0;
  while (1) {
   $22 = ($y$03 >>> 0) % 10 & -1;
   $23 = $22 | 48;
   $24 = $23 & 255;
   $25 = $$12 + -1 | 0;
   HEAP8[$25 >> 0] = $24;
   $26 = ($y$03 >>> 0) / 10 & -1;
   $27 = $y$03 >>> 0 < 10;
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;
    $y$03 = $26;
   }
  }
 }
 return $$1$lcssa | 0;
}

function _logLcd() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $perLine = 0, $pixel = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr8 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[2020 >> 2] | 0;
 $1 = ($0 | 0) != (0 | 0);
 if ($1) {
  HEAP8[366432 >> 0] = 1;
  STACKTOP = sp;
  return;
 }
 $perLine = 160;
 $y = 0;
 while (1) {
  $2 = $y;
  $3 = ($2 | 0) < 96;
  if (!$3) {
   break;
  }
  $x = 0;
  while (1) {
   $4 = $x;
   $5 = ($4 | 0) < 160;
   if (!$5) {
    break;
   }
   $6 = $perLine;
   $7 = $y;
   $8 = Math_imul($6, $7) | 0;
   $9 = $x;
   $10 = $8 + $9 | 0;
   $11 = 366433 + $10 | 0;
   $12 = HEAP8[$11 >> 0] | 0;
   $pixel = $12;
   $13 = $pixel;
   $14 = $13 << 24 >> 24;
   $15 = ($14 | 0) != 0;
   $16 = $15 ? 381793 : 381796;
   HEAP32[$vararg_buffer >> 2] = $16;
   _printf(381799, $vararg_buffer) | 0;
   $17 = $x;
   $18 = $17 + 1 | 0;
   $x = $18;
  }
  _printf(381803, $vararg_buffer1) | 0;
  $19 = $y;
  $20 = $19 + 1 | 0;
  $y = $20;
 }
 _printf(381803, $vararg_buffer3) | 0;
 HEAP32[$vararg_buffer5 >> 2] = 160;
 $vararg_ptr8 = $vararg_buffer5 + 4 | 0;
 HEAP32[$vararg_ptr8 >> 2] = 96;
 _printf(381805, $vararg_buffer5) | 0;
 _printf(381803, $vararg_buffer9) | 0;
 STACKTOP = sp;
 return;
}

function _strlen($s) {
 $s = $s | 0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1 | 0) == 0;
 L1 : do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;
   $21 = $0;
   while (1) {
    $3 = HEAP8[$$014 >> 0] | 0;
    $4 = $3 << 24 >> 24 == 0;
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = $$014 + 1 | 0;
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7 | 0) == 0;
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;
     $21 = $6;
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $w$0 = $$01$lcssa;
  while (1) {
   $9 = HEAP32[$w$0 >> 2] | 0;
   $10 = $9 + -16843009 | 0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13 | 0) == 0;
   $15 = $w$0 + 4 | 0;
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;
    $w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20 & 255;
  $17 = $16 << 24 >> 24 == 0;
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while (1) {
    $18 = $$pn15 + 1 | 0;
    $$pre = HEAP8[$18 >> 0] | 0;
    $19 = $$pre << 24 >> 24 == 0;
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = $$pn - $0 | 0;
 return $$0 | 0;
}

function _GetCityPGoods($city, $gqueue) {
 $city = $city | 0;
 $gqueue = $gqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $j = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $gqueue;
 $count = 0;
 $2 = $0;
 $3 = $2 & 255;
 $4 = 3645 + ($3 * 31 | 0) | 0;
 $5 = $4 + 29 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $j = $6;
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $7 & 255;
  $9 = $0;
  $10 = $9 & 255;
  $11 = 3645 + ($10 * 31 | 0) | 0;
  $12 = $11 + 30 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $14 = $13 & 255;
  $15 = ($8 | 0) < ($14 | 0);
  if (!$15) {
   break;
  }
  $16 = $j;
  $17 = $16 & 255;
  $18 = 5023 + $17 | 0;
  $19 = HEAP8[$18 >> 0] | 0;
  $20 = $19 & 255;
  $21 = $20 & 128;
  $22 = ($21 | 0) != 0;
  if ($22) {
   $23 = $j;
   $24 = $23 & 255;
   $25 = 5023 + $24 | 0;
   $26 = HEAP8[$25 >> 0] | 0;
   $27 = $26 & 255;
   $28 = $27 & 127;
   $29 = $28 & 255;
   $30 = $count;
   $31 = $30 & 255;
   $32 = $1;
   $33 = $32 + $31 | 0;
   HEAP8[$33 >> 0] = $29;
   $34 = $count;
   $35 = $34 & 255;
   $36 = $35 + 1 | 0;
   $37 = $36 & 255;
   $count = $37;
  }
  $38 = $i;
  $39 = $38 + 1 << 24 >> 24;
  $i = $39;
  $40 = $j;
  $41 = $40 + 1 << 24 >> 24;
  $j = $41;
 }
 $42 = $count;
 STACKTOP = sp;
 return $42 | 0;
}

function _GoodsUpDatadate() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $ginf = 0, $l = 0, $t = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP8[3644 >> 0] | 0;
 $2 = _ResGetItemLen(67, $1) | 0;
 $l = $2;
 $3 = HEAP8[3644 >> 0] | 0;
 $4 = HEAP32[256 >> 2] | 0;
 $5 = _ResLoadToCon(67, $3, $4) | 0;
 $ginf = $5;
 $g = 0;
 $t = 0;
 while (1) {
  $6 = $t;
  $7 = $6 & 65535;
  $8 = $l;
  $9 = $8 & 65535;
  $10 = ($7 | 0) < ($9 | 0);
  if (!$10) {
   label = 7;
   break;
  }
  $11 = $t;
  $12 = $11 & 65535;
  $13 = $ginf;
  $14 = $13 + $12 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $16 = $15 & 255;
  $17 = HEAPU8[3641 >> 0] | HEAPU8[3641 + 1 >> 0] << 8;
  $18 = $17 & 65535;
  $19 = ($16 | 0) == ($18 | 0);
  if ($19) {
   $20 = $t;
   $21 = $20 & 65535;
   $22 = $21 + 2 | 0;
   $23 = $ginf;
   $24 = $23 + $22 | 0;
   $25 = HEAP8[$24 >> 0] | 0;
   $26 = $g;
   $27 = _AddGoods($25, $26) | 0;
   $28 = $27 << 24 >> 24 != 0;
   if (!$28) {
    label = 5;
    break;
   }
  }
  $29 = $g;
  $30 = $29 + 1 << 24 >> 24;
  $g = $30;
  $31 = $t;
  $32 = $31 & 65535;
  $33 = $32 + 3 | 0;
  $34 = $33 & 65535;
  $t = $34;
 }
 if ((label | 0) == 5) {
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;
  return $35 | 0;
 } else if ((label | 0) == 7) {
  $0 = 1;
  $35 = $0;
  STACKTOP = sp;
  return $35 | 0;
 }
 return 0 | 0;
}

function _GamVarInit() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 HEAP8[3446 >> 0] = 0;
 $1 = HEAP32[388 >> 2] | 0;
 dest = $1;
 stop = dest + 30 | 0;
 do {
  HEAP8[dest >> 0] = 0 | 0;
  dest = dest + 1 | 0;
 } while ((dest | 0) < (stop | 0));
 $2 = HEAP32[396 >> 2] | 0;
 _memset($2 | 0, -1, 1200) | 0;
 $3 = _calloc(1, 50) | 0;
 HEAP32[280 >> 2] = $3;
 $4 = HEAP32[280 >> 2] | 0;
 $5 = (0 | 0) == ($4 | 0);
 if ($5) {
  $0 = 1;
  $15 = $0;
  STACKTOP = sp;
  return $15 | 0;
 }
 $6 = _calloc(1, 250) | 0;
 HEAP32[284 >> 2] = $6;
 $7 = HEAP32[284 >> 2] | 0;
 $8 = (0 | 0) == ($7 | 0);
 if ($8) {
  $0 = 1;
  $15 = $0;
  STACKTOP = sp;
  return $15 | 0;
 }
 $9 = _calloc(1, 86) | 0;
 HEAP32[288 >> 2] = $9;
 $10 = HEAP32[288 >> 2] | 0;
 $11 = (0 | 0) == ($10 | 0);
 if ($11) {
  $0 = 1;
  $15 = $0;
  STACKTOP = sp;
  return $15 | 0;
 }
 $12 = _calloc(1, 3004) | 0;
 HEAP32[332 >> 2] = $12;
 $13 = HEAP32[332 >> 2] | 0;
 $14 = (0 | 0) == ($13 | 0);
 if ($14) {
  $0 = 1;
  $15 = $0;
  STACKTOP = sp;
  return $15 | 0;
 } else {
  HEAP32[336 >> 2] = 0;
  HEAP32[340 >> 2] = 0;
  HEAP8[3640 >> 0] = 0;
  HEAP8[5223 >> 0] = 0;
  HEAP8[5224 >> 0] = 0;
  HEAP8[5225 >> 0] = 0;
  HEAP8[5226 >> 0] = 0;
  HEAP8[3641 >> 0] = 0 & 255;
  HEAP8[3641 + 1 >> 0] = 0 >> 8;
  HEAP8[3643 >> 0] = 1;
  HEAP8[3469 >> 0] = 1;
  HEAP8[3470 >> 0] = 1;
  HEAP8[3471 >> 0] = 1;
  $0 = 0;
  $15 = $0;
  STACKTOP = sp;
  return $15 | 0;
 }
 return 0 | 0;
}

function _GetResStartAddr($id) {
 $id = $id | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $addr = sp;
 $1 = $id;
 $2 = $1;
 $3 = $2 & 65535;
 $4 = ($3 | 0) == 0;
 if ($4) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;
  return $16 | 0;
 }
 $5 = $1;
 $6 = $5 & 65535;
 $7 = $6 - 1 | 0;
 HEAP8[$addr >> 0] = $7 & 255;
 HEAP8[$addr + 1 >> 0] = $7 >> 8 & 255;
 HEAP8[$addr + 2 >> 0] = $7 >> 16 & 255;
 HEAP8[$addr + 3 >> 0] = $7 >> 24;
 $8 = HEAPU8[$addr >> 0] | HEAPU8[$addr + 1 >> 0] << 8 | HEAPU8[$addr + 2 >> 0] << 16 | HEAPU8[$addr + 3 >> 0] << 24;
 $9 = $8 << 2;
 HEAP8[$addr >> 0] = $9 & 255;
 HEAP8[$addr + 1 >> 0] = $9 >> 8 & 255;
 HEAP8[$addr + 2 >> 0] = $9 >> 16 & 255;
 HEAP8[$addr + 3 >> 0] = $9 >> 24;
 $10 = HEAP32[260 >> 2] | 0;
 $11 = HEAPU8[$addr >> 0] | HEAPU8[$addr + 1 >> 0] << 8 | HEAPU8[$addr + 2 >> 0] << 16 | HEAPU8[$addr + 3 >> 0] << 24;
 _gam_fseek($10, $11, 0) | 0;
 $12 = HEAP32[260 >> 2] | 0;
 _gam_fread($addr, 4, 1, $12) | 0;
 $13 = HEAPU8[$addr >> 0] | HEAPU8[$addr + 1 >> 0] << 8 | HEAPU8[$addr + 2 >> 0] << 16 | HEAPU8[$addr + 3 >> 0] << 24;
 $14 = ($13 | 0) == -1;
 if ($14) {
  HEAP8[$addr >> 0] = 0 & 255;
  HEAP8[$addr + 1 >> 0] = 0 >> 8 & 255;
  HEAP8[$addr + 2 >> 0] = 0 >> 16 & 255;
  HEAP8[$addr + 3 >> 0] = 0 >> 24;
 }
 $15 = HEAPU8[$addr >> 0] | HEAPU8[$addr + 1 >> 0] << 8 | HEAPU8[$addr + 2 >> 0] << 16 | HEAPU8[$addr + 3 >> 0] << 24;
 $0 = $15;
 $16 = $0;
 STACKTOP = sp;
 return $16 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 2320;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $n + -1 | 0;
 $1 = $0 >>> 0 > 2147483646;
 if ($1) {
  $2 = ($n | 0) == 0;
  if ($2) {
   $$01 = $b;
   $$02 = 1;
   label = 4;
  } else {
   $3 = ___errno_location() | 0;
   HEAP32[$3 >> 2] = 75;
   $$0 = -1;
  }
 } else {
  $$01 = $s;
  $$02 = $n;
  label = 4;
 }
 if ((label | 0) == 4) {
  $4 = $$01;
  $5 = -2 - $4 | 0;
  $6 = $$02 >>> 0 > $5 >>> 0;
  $$$02 = $6 ? $5 : $$02;
  $7 = $f + 48 | 0;
  HEAP32[$7 >> 2] = $$$02;
  $8 = $f + 20 | 0;
  HEAP32[$8 >> 2] = $$01;
  $9 = $f + 44 | 0;
  HEAP32[$9 >> 2] = $$01;
  $10 = $$01 + $$$02 | 0;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $10;
  $12 = $f + 28 | 0;
  HEAP32[$12 >> 2] = $10;
  $13 = _vfprintf($f, $fmt, $ap) | 0;
  $14 = ($$$02 | 0) == 0;
  if ($14) {
   $$0 = $13;
  } else {
   $15 = HEAP32[$8 >> 2] | 0;
   $16 = HEAP32[$11 >> 2] | 0;
   $17 = ($15 | 0) == ($16 | 0);
   $18 = $17 << 31 >> 31;
   $19 = $15 + $18 | 0;
   HEAP8[$19 >> 0] = 0;
   $$0 = $13;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _GetCityCaptives($city, $pqueue) {
 $city = $city | 0;
 $pqueue = $pqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $p = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $pqueue;
 $count = 0;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $2 & 255;
  $4 = $0;
  $5 = $4 & 255;
  $6 = 3645 + ($5 * 31 | 0) | 0;
  $7 = $6 + 28 | 0;
  $8 = HEAP8[$7 >> 0] | 0;
  $9 = $8 & 255;
  $10 = ($3 | 0) < ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $0;
  $12 = $11 & 255;
  $13 = 3645 + ($12 * 31 | 0) | 0;
  $14 = $13 + 27 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $16 = $15 & 255;
  $17 = $i;
  $18 = $17 & 255;
  $19 = $16 + $18 | 0;
  $20 = 4823 + $19 | 0;
  $21 = HEAP8[$20 >> 0] | 0;
  $p = $21;
  $22 = $p;
  $23 = $22 & 255;
  $24 = HEAP32[332 >> 2] | 0;
  $25 = $24 + ($23 * 15 | 0) | 0;
  $26 = $25 + 1 | 0;
  $27 = HEAP8[$26 >> 0] | 0;
  $28 = $27 & 255;
  $29 = 255 == ($28 | 0);
  if ($29) {
   $30 = $p;
   $31 = $count;
   $32 = $31 & 255;
   $33 = $1;
   $34 = $33 + $32 | 0;
   HEAP8[$34 >> 0] = $30;
   $35 = $count;
   $36 = $35 & 255;
   $37 = $36 + 1 | 0;
   $38 = $37 & 255;
   $count = $38;
  }
  $39 = $i;
  $40 = $39 + 1 << 24 >> 24;
  $i = $40;
 }
 $41 = $count;
 STACKTOP = sp;
 return $41 | 0;
}

function _FgtShowMap($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $0;
 $3 = $1;
 _FgtGetMapDat($2, $3);
 $4 = HEAPU8[3447 >> 0] | HEAPU8[3447 + 1 >> 0] << 8;
 $5 = _FgtLoadToCon($4, 1) | 0;
 $6 = $5 + 6 | 0;
 $ptr = $6;
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $7 & 255;
  $9 = ($8 | 0) < 50;
  if (!$9) {
   break;
  }
  $10 = $i;
  $11 = $10 & 255;
  $12 = HEAP32[280 >> 2] | 0;
  $13 = $12 + $11 | 0;
  $14 = HEAP8[$13 >> 0] | 0;
  $15 = $14 & 255;
  $count = $15;
  $16 = $count;
  $17 = $16 & 65535;
  $18 = $17 << 5;
  $19 = $18 & 65535;
  $count = $19;
  $20 = $i;
  $21 = $20 & 255;
  $22 = ($21 | 0) / 10 & -1;
  $23 = $22 << 4;
  $24 = $23 + 0 | 0;
  $25 = $24 & 255;
  $1 = $25;
  $26 = $i;
  $27 = $26 & 255;
  $28 = ($27 | 0) % 10 & -1;
  $29 = $28 << 4;
  $30 = $29 + 0 | 0;
  $31 = $30 & 255;
  $0 = $31;
  $32 = $0;
  $33 = $1;
  $34 = $ptr;
  $35 = $count;
  $36 = $35 & 65535;
  $37 = $34 + $36 | 0;
  $38 = HEAP32[272 >> 2] | 0;
  _GamPicShowV($32, $33, 16, 16, $37, $38);
  $39 = $i;
  $40 = $39 & 255;
  $41 = $40 + 1 | 0;
  $42 = $41 & 255;
  $i = $42;
 }
 STACKTOP = sp;
 return;
}

function _ResItemGet($ResId, $idx, $ptr) {
 $ResId = $ResId | 0;
 $idx = $idx | 0;
 $ptr = $ptr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $plen = 0, $rIdx = 0, $reshead = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $rIdx = sp + 24 | 0;
 $reshead = sp + 12 | 0;
 $1 = $ResId;
 $2 = $idx;
 $3 = $ptr;
 $4 = $1;
 $5 = _GetResStartAddr($4) | 0;
 $addr = $5;
 $6 = $addr;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $0 = 1;
  $31 = $0;
  STACKTOP = sp;
  return $31 | 0;
 }
 $8 = $addr;
 $9 = $2;
 _GetResItem($8, $9, $reshead, $rIdx) | 0;
 $10 = HEAPU8[$rIdx >> 0] | HEAPU8[$rIdx + 1 >> 0] << 8;
 $11 = $10 & 65535;
 $12 = $addr;
 $13 = $12 + $11 | 0;
 $addr = $13;
 $14 = $rIdx + 2 | 0;
 $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
 $plen = $15;
 $16 = $plen;
 $17 = $16 & 65535;
 $18 = ($17 | 0) == 0;
 if ($18) {
  $0 = 2;
  $31 = $0;
  STACKTOP = sp;
  return $31 | 0;
 }
 $19 = HEAP32[260 >> 2] | 0;
 $20 = $addr;
 _gam_fseek($19, $20, 0) | 0;
 $21 = $3;
 $22 = $plen;
 $23 = HEAP32[260 >> 2] | 0;
 _gam_fread($21, 1, $22, $23) | 0;
 $24 = $reshead + 10 | 0;
 $25 = HEAP8[$24 >> 0] | 0;
 $26 = $25 << 24 >> 24 != 0;
 if ($26) {
  $27 = $3;
  $28 = $reshead + 10 | 0;
  $29 = HEAP8[$28 >> 0] | 0;
  $30 = $plen;
  _ExpDataWithKey($27, $29, $30);
 }
 $0 = 0;
 $31 = $0;
 STACKTOP = sp;
 return $31 | 0;
}

function _GetCityOutPersons($city, $pqueue) {
 $city = $city | 0;
 $pqueue = $pqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $p = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $pqueue;
 $count = 0;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $2 & 255;
  $4 = $0;
  $5 = $4 & 255;
  $6 = 3645 + ($5 * 31 | 0) | 0;
  $7 = $6 + 28 | 0;
  $8 = HEAP8[$7 >> 0] | 0;
  $9 = $8 & 255;
  $10 = ($3 | 0) < ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $0;
  $12 = $11 & 255;
  $13 = 3645 + ($12 * 31 | 0) | 0;
  $14 = $13 + 27 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $16 = $15 & 255;
  $17 = $i;
  $18 = $17 & 255;
  $19 = $16 + $18 | 0;
  $20 = 4823 + $19 | 0;
  $21 = HEAP8[$20 >> 0] | 0;
  $p = $21;
  $22 = $p;
  $23 = $22 & 255;
  $24 = HEAP32[332 >> 2] | 0;
  $25 = $24 + ($23 * 15 | 0) | 0;
  $26 = $25 + 1 | 0;
  $27 = HEAP8[$26 >> 0] | 0;
  $28 = $27 << 24 >> 24 != 0;
  if (!$28) {
   $29 = $p;
   $30 = $count;
   $31 = $30 & 255;
   $32 = $1;
   $33 = $32 + $31 | 0;
   HEAP8[$33 >> 0] = $29;
   $34 = $count;
   $35 = $34 & 255;
   $36 = $35 + 1 | 0;
   $37 = $36 & 255;
   $count = $37;
  }
  $38 = $i;
  $39 = $38 + 1 << 24 >> 24;
  $i = $39;
 }
 $40 = $count;
 STACKTOP = sp;
 return $40 | 0;
}

function _GetPersonCity($person) {
 $person = $person | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i = 0, $j = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $person;
 $c = 0;
 L1 : while (1) {
  $2 = $c;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 38;
  if (!$4) {
   label = 9;
   break;
  }
  $5 = $c;
  $6 = $5 & 255;
  $7 = 3645 + ($6 * 31 | 0) | 0;
  $8 = $7 + 27 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $j = $9;
  $i = 0;
  while (1) {
   $10 = $i;
   $11 = $10 & 255;
   $12 = $c;
   $13 = $12 & 255;
   $14 = 3645 + ($13 * 31 | 0) | 0;
   $15 = $14 + 28 | 0;
   $16 = HEAP8[$15 >> 0] | 0;
   $17 = $16 & 255;
   $18 = ($11 | 0) < ($17 | 0);
   if (!$18) {
    break;
   }
   $19 = $j;
   $20 = $19 & 255;
   $21 = 4823 + $20 | 0;
   $22 = HEAP8[$21 >> 0] | 0;
   $23 = $22 & 255;
   $24 = $1;
   $25 = $24 & 255;
   $26 = ($23 | 0) == ($25 | 0);
   if ($26) {
    label = 6;
    break L1;
   }
   $28 = $i;
   $29 = $28 + 1 << 24 >> 24;
   $i = $29;
   $30 = $j;
   $31 = $30 + 1 << 24 >> 24;
   $j = $31;
  }
  $32 = $c;
  $33 = $32 + 1 << 24 >> 24;
  $c = $33;
 }
 if ((label | 0) == 6) {
  $27 = $c;
  $0 = $27;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 } else if ((label | 0) == 9) {
  $0 = -1;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 }
 return 0 | 0;
}

function _FgtChkEnd($flag) {
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $start = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $flag;
 $1 = HEAP8[3465 >> 0] | 0;
 $2 = $1 << 24 >> 24 != 0;
 if ($2) {
  STACKTOP = sp;
  return;
 }
 $3 = HEAP8[3468 >> 0] | 0;
 $4 = $3 & 255;
 $5 = 3500 + ($4 * 7 | 0) | 0;
 $6 = $5 + 6 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $9 = 8 == ($8 | 0);
 if ($9) {
  $10 = HEAP8[3468 >> 0] | 0;
  $11 = $10 & 255;
  $12 = 10 == ($11 | 0);
  if ($12) {
   HEAP8[3465 >> 0] = 1;
   STACKTOP = sp;
   return;
  } else {
   HEAP8[3465 >> 0] = 2;
   STACKTOP = sp;
   return;
  }
 }
 $13 = $0;
 $14 = $13 << 24 >> 24 != 0;
 if ($14) {
  $start = 0;
  HEAP8[3465 >> 0] = 2;
 } else {
  $start = 10;
  HEAP8[3465 >> 0] = 1;
 }
 $15 = $start;
 $i = $15;
 while (1) {
  $16 = $i;
  $17 = $16 & 255;
  $18 = ($17 | 0) < 20;
  if (!$18) {
   label = 14;
   break;
  }
  $19 = $i;
  $20 = $19 & 255;
  $21 = 3500 + ($20 * 7 | 0) | 0;
  $22 = $21 + 6 | 0;
  $23 = HEAP8[$22 >> 0] | 0;
  $24 = $23 & 255;
  $25 = 8 == ($24 | 0);
  if (!$25) {
   break;
  }
  $26 = $i;
  $27 = $26 & 255;
  $28 = $27 + 1 | 0;
  $29 = $28 & 255;
  $i = $29;
 }
 if ((label | 0) == 14) {
  STACKTOP = sp;
  return;
 }
 HEAP8[3465 >> 0] = 0;
 STACKTOP = sp;
 return;
}

function _FgtGetExp($hurt) {
 $hurt = $hurt | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exp = 0, $lec = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $hurt;
 $1 = HEAP32[292 >> 2] | 0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 & 255;
 $4 = HEAP32[312 >> 2] | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 & 255;
 $7 = $3 - $6 | 0;
 $8 = $7 & 255;
 $lec = $8;
 $9 = $0;
 $10 = _PlcExtract($9) | 0;
 $11 = $10 & 255;
 $12 = $11 >> 2;
 $13 = $12 & 255;
 $exp = $13;
 $14 = $lec;
 $15 = $14 & 255;
 $16 = ($15 | 0) > 128;
 do {
  if ($16) {
   $17 = $lec;
   $18 = $17 & 255;
   $19 = $exp;
   $20 = $19 & 255;
   $21 = $20 - $18 | 0;
   $22 = $21 & 255;
   $exp = $22;
  } else {
   $23 = $exp;
   $24 = $23 & 255;
   $25 = $lec;
   $26 = $25 & 255;
   $27 = ($24 | 0) > ($26 | 0);
   if ($27) {
    $28 = $lec;
    $29 = $28 & 255;
    $30 = $exp;
    $31 = $30 & 255;
    $32 = $31 - $29 | 0;
    $33 = $32 & 255;
    $exp = $33;
    break;
   } else {
    $exp = 0;
    break;
   }
  }
 } while (0);
 $34 = $exp;
 $35 = $34 & 255;
 $36 = $35 + 2 | 0;
 $37 = $36 & 255;
 $exp = $37;
 $38 = $exp;
 $39 = $38 & 255;
 $40 = ($39 | 0) % 100 & -1;
 $41 = $40 & 255;
 STACKTOP = sp;
 return $41 | 0;
}

function _GetCityDispGoods($city, $gqueue) {
 $city = $city | 0;
 $gqueue = $gqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $i = 0, $j = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $gqueue;
 $count = 0;
 $2 = $0;
 $3 = $2 & 255;
 $4 = 3645 + ($3 * 31 | 0) | 0;
 $5 = $4 + 29 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 $j = $6;
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $7 & 255;
  $9 = $0;
  $10 = $9 & 255;
  $11 = 3645 + ($10 * 31 | 0) | 0;
  $12 = $11 + 30 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $14 = $13 & 255;
  $15 = ($8 | 0) < ($14 | 0);
  if (!$15) {
   break;
  }
  $16 = $j;
  $17 = $16 & 255;
  $18 = 5023 + $17 | 0;
  $19 = HEAP8[$18 >> 0] | 0;
  $20 = $19 & 255;
  $21 = $20 & 128;
  $22 = ($21 | 0) != 0;
  if (!$22) {
   $23 = $j;
   $24 = $23 & 255;
   $25 = 5023 + $24 | 0;
   $26 = HEAP8[$25 >> 0] | 0;
   $27 = $count;
   $28 = $27 & 255;
   $29 = $1;
   $30 = $29 + $28 | 0;
   HEAP8[$30 >> 0] = $26;
   $31 = $count;
   $32 = $31 & 255;
   $33 = $32 + 1 | 0;
   $34 = $33 & 255;
   $count = $34;
  }
  $35 = $i;
  $36 = $35 + 1 << 24 >> 24;
  $i = $36;
  $37 = $j;
  $38 = $37 + 1 << 24 >> 24;
  $j = $38;
 }
 $39 = $count;
 STACKTOP = sp;
 return $39 | 0;
}

function _rom_fopen($fname, $pmode) {
 $fname = $fname | 0;
 $pmode = $pmode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $fp1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $1 = $fname;
 $2 = $pmode;
 $3 = $2;
 $4 = $3 & 255;
 $5 = ($4 | 0) != 114;
 if ($5) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;
  return $24 | 0;
 }
 $6 = $1;
 $7 = _strcmp($6, 366359) | 0;
 $8 = 0 == ($7 | 0);
 if ($8) {
  $9 = _rom_fnew() | 0;
  $fp = $9;
  $10 = $fp;
  $11 = $10 + 28 | 0;
  HEAP32[$11 >> 2] = 5616;
  $12 = $fp;
  $13 = $12 + 24 | 0;
  HEAP8[$13 >> 0] = 163840 & 255;
  HEAP8[$13 + 1 >> 0] = 163840 >> 8 & 255;
  HEAP8[$13 + 2 >> 0] = 163840 >> 16 & 255;
  HEAP8[$13 + 3 >> 0] = 163840 >> 24;
  $14 = $fp;
  $0 = $14;
  $24 = $0;
  STACKTOP = sp;
  return $24 | 0;
 }
 $15 = $1;
 $16 = _strcmp($15, 366346) | 0;
 $17 = 0 == ($16 | 0);
 if ($17) {
  $18 = _rom_fnew() | 0;
  $fp1 = $18;
  $19 = $fp1;
  $20 = $19 + 28 | 0;
  HEAP32[$20 >> 2] = 169456;
  $21 = $fp1;
  $22 = $21 + 24 | 0;
  HEAP8[$22 >> 0] = 196890 & 255;
  HEAP8[$22 + 1 >> 0] = 196890 >> 8 & 255;
  HEAP8[$22 + 2 >> 0] = 196890 >> 16 & 255;
  HEAP8[$22 + 3 >> 0] = 196890 >> 24;
  $23 = $fp1;
  $0 = $23;
  $24 = $0;
  STACKTOP = sp;
  return $24 | 0;
 } else {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;
  return $24 | 0;
 }
 return 0 | 0;
}

function _CountInitGen() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $cnt = 0;
 $i = 0;
 while (1) {
  $0 = $i;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 20;
  if (!$2) {
   label = 10;
   break;
  }
  $3 = $i;
  $4 = $3 & 255;
  $5 = ($4 | 0) % 10 & -1;
  $6 = ($5 | 0) != 0;
  if (!$6) {
   $cnt = 0;
  }
  $7 = $i;
  $8 = $7 & 255;
  $9 = 3500 + ($8 * 7 | 0) | 0;
  $10 = $9 + 6 | 0;
  HEAP8[$10 >> 0] = 0;
  $11 = $i;
  $12 = _TransIdxToGen($11) | 0;
  $13 = $12 & 255;
  $14 = ($13 | 0) == 255;
  if ($14) {
   $15 = $cnt;
   $16 = $15 & 255;
   $17 = $16 + 1 | 0;
   $18 = $17 & 255;
   $cnt = $18;
   $19 = $i;
   $20 = $19 & 255;
   $21 = 3500 + ($20 * 7 | 0) | 0;
   $22 = $21 + 6 | 0;
   HEAP8[$22 >> 0] = 8;
   $23 = $cnt;
   $24 = $23 & 255;
   $25 = ($24 | 0) == 10;
   if ($25) {
    break;
   }
  } else {
   $31 = $i;
   _CountBaseAttr($31);
  }
  $32 = $i;
  $33 = $32 & 255;
  $34 = $33 + 1 | 0;
  $35 = $34 & 255;
  $i = $35;
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return;
 }
 $26 = $i;
 $27 = $26 & 255;
 $28 = ($27 | 0) / 10 & -1;
 $29 = 2 - $28 | 0;
 $30 = $29 & 255;
 HEAP8[3465 >> 0] = $30;
 STACKTOP = sp;
 return;
}

function _FgtCanUse($param, $idx) {
 $param = $param | 0;
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos = 0, $skl = 0, $terrain = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $param;
 $2 = $idx;
 $3 = $2;
 $4 = $3 & 255;
 $5 = 3500 + ($4 * 7 | 0) | 0;
 $pos = $5;
 $6 = $2;
 $7 = _FgtGetGenTer($6) | 0;
 $terrain = $7;
 $8 = $1;
 $9 = _FgtGetJNPtr($8) | 0;
 $skl = $9;
 $10 = $skl;
 $11 = $10 + 6 | 0;
 $12 = HEAP8[$11 >> 0] | 0;
 $13 = $12 & 255;
 $14 = $pos;
 $15 = $14 + 3 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 & 255;
 $18 = ($13 | 0) > ($17 | 0);
 if ($18) {
  $0 = 6;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 }
 $19 = $terrain;
 $20 = $19 & 255;
 $21 = $skl;
 $22 = $21 + 20 | 0;
 $23 = $22 + $20 | 0;
 $24 = HEAP8[$23 >> 0] | 0;
 $25 = $24 << 24 >> 24 != 0;
 if (!$25) {
  $0 = 5;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 }
 $26 = HEAP8[3466 >> 0] | 0;
 $27 = $26 & 255;
 $28 = $27 - 1 | 0;
 $29 = $skl;
 $30 = $29 + 7 | 0;
 $31 = $30 + $28 | 0;
 $32 = HEAP8[$31 >> 0] | 0;
 $33 = $32 << 24 >> 24 != 0;
 if ($33) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 } else {
  $0 = 4;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 }
 return 0 | 0;
}

function _FgtAllArms($flag) {
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $idx = 0, $rev = 0, $start = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $flag;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 * 10 | 0;
 $4 = $3 & 255;
 $start = $4;
 $rev = 0;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $5 & 255;
  $7 = ($6 | 0) < 10;
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $8 & 255;
  $10 = $start;
  $11 = $10 & 255;
  $12 = $9 + $11 | 0;
  $13 = $12 & 255;
  $idx = $13;
  $14 = $idx;
  $15 = $14 & 255;
  $16 = 3500 + ($15 * 7 | 0) | 0;
  $17 = $16 + 6 | 0;
  $18 = HEAP8[$17 >> 0] | 0;
  $19 = $18 & 255;
  $20 = 8 == ($19 | 0);
  if (!$20) {
   $21 = $idx;
   $22 = _TransIdxToGen($21) | 0;
   $idx = $22;
   $23 = $idx;
   $24 = $23 & 255;
   $25 = HEAP32[332 >> 2] | 0;
   $26 = $25 + ($24 * 15 | 0) | 0;
   $27 = $26 + 10 | 0;
   $28 = HEAPU8[$27 >> 0] | HEAPU8[$27 + 1 >> 0] << 8;
   $29 = $28 & 65535;
   $30 = $rev;
   $31 = $30 & 65535;
   $32 = $31 + $29 | 0;
   $33 = $32 & 65535;
   $rev = $33;
  }
  $34 = $i;
  $35 = $34 & 255;
  $36 = $35 + 1 | 0;
  $37 = $36 & 255;
  $i = $37;
 }
 $38 = $rev;
 STACKTOP = sp;
 return $38 | 0;
}

function _FgtCntInterval($x1, $y1, $x2, $y2) {
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $x2 = $x2 | 0;
 $y2 = $y2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dx = 0, $dy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x1;
 $1 = $y1;
 $2 = $x2;
 $3 = $y2;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $2;
 $7 = $6 & 255;
 $8 = $5 - $7 | 0;
 $9 = $8 & 255;
 $dx = $9;
 $10 = $0;
 $11 = $10 & 255;
 $12 = $2;
 $13 = $12 & 255;
 $14 = ($11 | 0) < ($13 | 0);
 if ($14) {
  $15 = $dx;
  $16 = $15 & 255;
  $17 = 0 - $16 | 0;
  $18 = $17 & 255;
  $dx = $18;
 }
 $19 = $1;
 $20 = $19 & 255;
 $21 = $3;
 $22 = $21 & 255;
 $23 = $20 - $22 | 0;
 $24 = $23 & 255;
 $dy = $24;
 $25 = $1;
 $26 = $25 & 255;
 $27 = $3;
 $28 = $27 & 255;
 $29 = ($26 | 0) < ($28 | 0);
 if (!$29) {
  $34 = $dx;
  $35 = $34 & 255;
  $36 = $dy;
  $37 = $36 & 255;
  $38 = $35 + $37 | 0;
  $39 = $38 & 255;
  STACKTOP = sp;
  return $39 | 0;
 }
 $30 = $dy;
 $31 = $30 & 255;
 $32 = 0 - $31 | 0;
 $33 = $32 & 255;
 $dy = $33;
 $34 = $dx;
 $35 = $34 & 255;
 $36 = $dy;
 $37 = $36 & 255;
 $38 = $35 + $37 | 0;
 $39 = $38 & 255;
 STACKTOP = sp;
 return $39 | 0;
}

function _SetGoods($goods) {
 $goods = $goods | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $qc = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $goods;
 $1 = HEAP8[4821 >> 0] | 0;
 $2 = $1 & 255;
 $3 = HEAP8[4822 >> 0] | 0;
 $4 = $3 & 255;
 $5 = $2 + $4 | 0;
 $6 = $5 & 255;
 $qc = $6;
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $7 & 255;
  $9 = $qc;
  $10 = $9 & 255;
  $11 = ($8 | 0) < ($10 | 0);
  if (!$11) {
   label = 7;
   break;
  }
  $12 = $i;
  $13 = $12 & 255;
  $14 = 5023 + $13 | 0;
  $15 = HEAP8[$14 >> 0] | 0;
  $16 = $15 & 255;
  $17 = $16 & 127;
  $18 = $0;
  $19 = $18 & 255;
  $20 = ($17 | 0) == ($19 | 0);
  if ($20) {
   $21 = $i;
   $22 = $21 & 255;
   $23 = 5023 + $22 | 0;
   $24 = HEAP8[$23 >> 0] | 0;
   $25 = $24 & 255;
   $26 = $25 & 128;
   $27 = ($26 | 0) != 0;
   if (!$27) {
    break;
   }
  }
  $35 = $i;
  $36 = $35 + 1 << 24 >> 24;
  $i = $36;
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return;
 }
 $28 = $i;
 $29 = $28 & 255;
 $30 = 5023 + $29 | 0;
 $31 = HEAP8[$30 >> 0] | 0;
 $32 = $31 & 255;
 $33 = $32 | 128;
 $34 = $33 & 255;
 HEAP8[$30 >> 0] = $34;
 STACKTOP = sp;
 return;
}

function _pad($f, $c, $w, $l, $fl) {
 $f = $f | 0;
 $c = $c | 0;
 $w = $w | 0;
 $l = $l | 0;
 $fl = $fl | 0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0 | 0) == 0;
 $2 = ($w | 0) > ($l | 0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = $w - $l | 0;
   $4 = $3 >>> 0 > 256;
   $5 = $4 ? 256 : $3;
   _memset($pad | 0, $c | 0, $5 | 0) | 0;
   $6 = $3 >>> 0 > 255;
   $7 = HEAP32[$f >> 2] | 0;
   $8 = $7 & 32;
   $9 = ($8 | 0) == 0;
   if ($6) {
    $10 = $w - $l | 0;
    $$02 = $3;
    $17 = $7;
    $18 = $9;
    while (1) {
     if ($18) {
      ___fwritex($pad, 256, $f) | 0;
      $$pre = HEAP32[$f >> 2] | 0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = $$02 + -256 | 0;
     $12 = $11 >>> 0 > 255;
     $13 = $14 & 32;
     $15 = ($13 | 0) == 0;
     if ($12) {
      $$02 = $11;
      $17 = $14;
      $18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   ___fwritex($pad, $$0$lcssa6, $f) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return;
}

function _FgtFormatStr($buf, $num) {
 $buf = $buf | 0;
 $num = $num | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $len = 0, $ptr = 0, $tbuf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tbuf = sp + 14 | 0;
 $0 = $buf;
 $1 = $num;
 $2 = $0;
 $3 = _strlen($2) | 0;
 $4 = $3 & 65535;
 $len = $4;
 $ptr = 0;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $5 & 65535;
  $7 = $len;
  $8 = $7 & 65535;
  $9 = ($6 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $i;
  $11 = $10 & 65535;
  $12 = $0;
  $13 = $12 + $11 | 0;
  $14 = HEAP8[$13 >> 0] | 0;
  $15 = $14 & 255;
  $16 = ($15 | 0) == 37;
  if ($16) {
   label = 4;
   break;
  }
  $21 = $i;
  $22 = $21 & 65535;
  $23 = $22 + 1 | 0;
  $24 = $23 & 65535;
  $i = $24;
 }
 if ((label | 0) == 4) {
  $17 = $0;
  $18 = $i;
  $19 = $18 & 65535;
  $20 = $17 + $19 | 0;
  $ptr = $20;
 }
 $25 = $ptr;
 $26 = (0 | 0) == ($25 | 0);
 if ($26) {
  STACKTOP = sp;
  return;
 }
 $27 = $1;
 $28 = $27 & 65535;
 _itoa($28, $tbuf, 10) | 0;
 $29 = _strlen($tbuf) | 0;
 $30 = $29 & 65535;
 $len = $30;
 $31 = $ptr;
 $32 = $len;
 $33 = $32 & 65535;
 _memcpy($31 | 0, $tbuf | 0, $33 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _FgtGetGenIdx($x, $y) {
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $x;
 $2 = $y;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $3 & 255;
  $5 = ($4 | 0) < 20;
  if (!$5) {
   label = 8;
   break;
  }
  $6 = $i;
  $7 = $6 & 255;
  $8 = 3500 + ($7 * 7 | 0) | 0;
  $pos = $8;
  $9 = $pos;
  $10 = $9 + 6 | 0;
  $11 = HEAP8[$10 >> 0] | 0;
  $12 = $11 & 255;
  $13 = 8 == ($12 | 0);
  if (!$13) {
   $14 = $1;
   $15 = $14 & 255;
   $16 = $pos;
   $17 = HEAP8[$16 >> 0] | 0;
   $18 = $17 & 255;
   $19 = ($15 | 0) == ($18 | 0);
   if ($19) {
    $20 = $2;
    $21 = $20 & 255;
    $22 = $pos;
    $23 = $22 + 1 | 0;
    $24 = HEAP8[$23 >> 0] | 0;
    $25 = $24 & 255;
    $26 = ($21 | 0) == ($25 | 0);
    if ($26) {
     label = 6;
     break;
    }
   }
  }
  $28 = $i;
  $29 = $28 & 255;
  $30 = $29 + 1 | 0;
  $31 = $30 & 255;
  $i = $31;
 }
 if ((label | 0) == 6) {
  $27 = $i;
  $0 = $27;
  $32 = $0;
  STACKTOP = sp;
  return $32 | 0;
 } else if ((label | 0) == 8) {
  $0 = -1;
  $32 = $0;
  STACKTOP = sp;
  return $32 | 0;
 }
 return 0 | 0;
}

function _msg_queue_put($q, $pMsg) {
 $q = $q | 0;
 $pMsg = $pMsg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $first = 0, $last = 0, $node = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = $q;
 $1 = $pMsg;
 $2 = _msg_new() | 0;
 $node = $2;
 $3 = $node;
 $4 = ($3 | 0) == (0 | 0);
 if ($4) {
  STACKTOP = sp;
  return;
 }
 $5 = $node;
 $6 = $5 + 8 | 0;
 $7 = $1;
 HEAP8[$6 >> 0] = HEAP8[$7 >> 0] | 0;
 HEAP8[$6 + 1 >> 0] = HEAP8[$7 + 1 >> 0] | 0;
 HEAP8[$6 + 2 >> 0] = HEAP8[$7 + 2 >> 0] | 0;
 $8 = $0;
 $9 = $8 + 12 | 0;
 $10 = HEAP32[$9 >> 2] | 0;
 _gam_lock_lock($10);
 $11 = $0;
 $12 = HEAP32[$11 >> 2] | 0;
 $first = $12;
 $13 = $0;
 $14 = $13 + 4 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $last = $15;
 $16 = $node;
 $17 = $0;
 $18 = $17 + 4 | 0;
 HEAP32[$18 >> 2] = $16;
 $19 = $last;
 $20 = $node;
 $21 = $20 + 4 | 0;
 HEAP32[$21 >> 2] = $19;
 $22 = $0;
 $23 = $node;
 HEAP32[$23 >> 2] = $22;
 $24 = $node;
 $25 = $last;
 HEAP32[$25 >> 2] = $24;
 $26 = $0;
 $27 = $26 + 12 | 0;
 $28 = HEAP32[$27 >> 2] | 0;
 _gam_lock_unlock($28);
 $29 = $0;
 $30 = $29 + 8 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 _gam_sem_signal($31);
 STACKTOP = sp;
 return;
}

function _CountProvUse() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arms = 0, $armsp = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $i = 0;
 while (1) {
  $0 = $i;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 2;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = _FgtAllArms($3) | 0;
  $arms = $4;
  $5 = $arms;
  $6 = _PlcExtract($5) | 0;
  $7 = $6 & 255;
  $8 = ($7 | 0) / 3 & -1;
  $9 = $8 & 65535;
  $arms = $9;
  $10 = $i;
  $11 = $10 << 24 >> 24 != 0;
  if ($11) {
   $armsp = 3478;
  } else {
   $armsp = 3476;
  }
  $12 = $arms;
  $13 = $12 & 65535;
  $14 = $armsp;
  $15 = HEAPU8[$14 >> 0] | HEAPU8[$14 + 1 >> 0] << 8;
  $16 = $15 & 65535;
  $17 = ($13 | 0) > ($16 | 0);
  if ($17) {
   $18 = $armsp;
   HEAP8[$18 >> 0] = 0 & 255;
   HEAP8[$18 + 1 >> 0] = 0 >> 8;
  } else {
   $19 = $arms;
   $20 = $19 & 65535;
   $21 = $armsp;
   $22 = HEAPU8[$21 >> 0] | HEAPU8[$21 + 1 >> 0] << 8;
   $23 = $22 & 65535;
   $24 = $23 - $20 | 0;
   $25 = $24 & 65535;
   HEAP8[$21 >> 0] = $25 & 255;
   HEAP8[$21 + 1 >> 0] = $25 >> 8;
  }
  $26 = $i;
  $27 = $26 & 255;
  $28 = $27 + 1 | 0;
  $29 = $28 & 255;
  $i = $29;
 }
 STACKTOP = sp;
 return;
}

function _strncmp($_l, $_r, $n) {
 $_l = $_l | 0;
 $_r = $_r | 0;
 $n = $n | 0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n | 0) == 0;
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l >> 0] | 0;
  $2 = $1 << 24 >> 24 == 0;
  L3 : do {
   if ($2) {
    $13 = 0;
    $r$0$lcssa = $_r;
   } else {
    $$08$in = $n;
    $7 = $1;
    $l$06 = $_l;
    $r$07 = $_r;
    while (1) {
     $$08 = $$08$in + -1 | 0;
     $3 = HEAP8[$r$07 >> 0] | 0;
     $4 = $3 << 24 >> 24 != 0;
     $5 = ($$08 | 0) != 0;
     $or$cond = $5 & $4;
     $6 = $7 << 24 >> 24 == $3 << 24 >> 24;
     $or$cond4 = $6 & $or$cond;
     if (!$or$cond4) {
      $13 = $7;
      $r$0$lcssa = $r$07;
      break L3;
     }
     $8 = $l$06 + 1 | 0;
     $9 = $r$07 + 1 | 0;
     $10 = HEAP8[$8 >> 0] | 0;
     $11 = $10 << 24 >> 24 == 0;
     if ($11) {
      $13 = 0;
      $r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;
      $7 = $10;
      $l$06 = $8;
      $r$07 = $9;
     }
    }
   }
  } while (0);
  $12 = $13 & 255;
  $14 = HEAP8[$r$0$lcssa >> 0] | 0;
  $15 = $14 & 255;
  $16 = $12 - $15 | 0;
  $$03 = $16;
 }
 return $$03 | 0;
}

function _SysLcdReverse($x1, $y1, $x2, $y2) {
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $x2 = $x2 | 0;
 $y2 = $y2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ind = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x1;
 $1 = $y1;
 $2 = $x2;
 $3 = $y2;
 $4 = $1;
 $y = $4;
 while (1) {
  $5 = $y;
  $6 = $5 & 255;
  $7 = $3;
  $8 = $7 & 255;
  $9 = ($6 | 0) <= ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $0;
  $x = $10;
  while (1) {
   $11 = $x;
   $12 = $11 & 255;
   $13 = $2;
   $14 = $13 & 255;
   $15 = ($12 | 0) <= ($14 | 0);
   $16 = $y;
   if (!$15) {
    break;
   }
   $17 = $16 & 255;
   $18 = $17 * 160 | 0;
   $19 = $x;
   $20 = $19 & 255;
   $21 = $18 + $20 | 0;
   $ind = $21;
   $22 = $ind;
   $23 = 366433 + $22 | 0;
   $24 = HEAP8[$23 >> 0] | 0;
   $25 = $24 << 24 >> 24 != 0;
   $26 = $25 ^ 1;
   $27 = $26 & 1;
   $28 = $27 & 255;
   $29 = $ind;
   $30 = 366433 + $29 | 0;
   HEAP8[$30 >> 0] = $28;
   $31 = $x;
   $32 = $31 + 1 << 24 >> 24;
   $x = $32;
  }
  $33 = $16 + 1 << 24 >> 24;
  $y = $33;
 }
 _logLcd();
 STACKTOP = sp;
 return;
}

function _DelGoodsPerson($goods, $person) {
 $goods = $goods | 0;
 $person = $person | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $goods;
 $1 = $person;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(66, 1, $2) | 0;
 $gptr = $3;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $gptr;
 $7 = $6 + ($5 * 66 | 0) | 0;
 $8 = $7 + 62 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $10 = $9 & 255;
 $11 = $1;
 $12 = $11 & 255;
 $13 = HEAP32[332 >> 2] | 0;
 $14 = $13 + ($12 * 15 | 0) | 0;
 $15 = $14 + 3 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 & 255;
 $18 = $17 - $10 | 0;
 $19 = $18 & 255;
 HEAP8[$15 >> 0] = $19;
 $20 = $0;
 $21 = $20 & 255;
 $22 = $gptr;
 $23 = $22 + ($21 * 66 | 0) | 0;
 $24 = $23 + 63 | 0;
 $25 = HEAP8[$24 >> 0] | 0;
 $26 = $25 & 255;
 $27 = $1;
 $28 = $27 & 255;
 $29 = HEAP32[332 >> 2] | 0;
 $30 = $29 + ($28 * 15 | 0) | 0;
 $31 = $30 + 4 | 0;
 $32 = HEAP8[$31 >> 0] | 0;
 $33 = $32 & 255;
 $34 = $33 - $26 | 0;
 $35 = $34 & 255;
 HEAP8[$31 >> 0] = $35;
 STACKTOP = sp;
 return;
}

function _msg_new() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $msg = 0, $new_msg = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $msg = sp + 4 | 0;
 $1 = HEAP32[400 >> 2] | 0;
 $2 = ($1 | 0) == -1;
 if ($2) {
  $i = 0;
  while (1) {
   $3 = $i;
   $4 = ($3 | 0) < 100;
   if (!$4) {
    break;
   }
   $5 = $i;
   $6 = $i;
   $7 = 404 + ($6 << 2) | 0;
   HEAP32[$7 >> 2] = $5;
   $8 = $i;
   $9 = $8 + 1 | 0;
   $i = $9;
  }
  HEAP32[400 >> 2] = 0;
 } else {
  $10 = HEAP32[400 >> 2] | 0;
  $11 = ($10 | 0) == 100;
  if ($11) {
   $0 = 0;
   $20 = $0;
   STACKTOP = sp;
   return $20 | 0;
  }
 }
 HEAP32[$msg >> 2] = 0 | 0;
 HEAP32[$msg + 4 >> 2] = 0 | 0;
 HEAP32[$msg + 8 >> 2] = 0 | 0;
 $12 = HEAP32[400 >> 2] | 0;
 $13 = 404 + ($12 << 2) | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = 804 + ($14 * 12 | 0) | 0;
 $new_msg = $15;
 $16 = $new_msg;
 HEAP32[$16 >> 2] = HEAP32[$msg >> 2] | 0;
 HEAP32[$16 + 4 >> 2] = HEAP32[$msg + 4 >> 2] | 0;
 HEAP32[$16 + 8 >> 2] = HEAP32[$msg + 8 >> 2] | 0;
 $17 = HEAP32[400 >> 2] | 0;
 $18 = $17 + 1 | 0;
 HEAP32[400 >> 2] = $18;
 $19 = $new_msg;
 $0 = $19;
 $20 = $0;
 STACKTOP = sp;
 return $20 | 0;
}

function _MoveDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $ob = 0, $pb = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 3 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $ob = $3;
 $4 = $ob;
 $5 = $4 & 255;
 $6 = 3645 + ($5 * 31 | 0) | 0;
 $7 = $6 + 1 | 0;
 $b = $7;
 $8 = $0;
 $9 = $8 + 1 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = $10 & 255;
 $12 = HEAP32[332 >> 2] | 0;
 $13 = $12 + ($11 * 15 | 0) | 0;
 $14 = $13 + 1 | 0;
 $15 = HEAP8[$14 >> 0] | 0;
 $pb = $15;
 $16 = $b;
 $17 = HEAP8[$16 >> 0] | 0;
 $18 = $17 << 24 >> 24 != 0;
 if ($18) {
  $21 = $b;
  $22 = HEAP8[$21 >> 0] | 0;
  $23 = $22 & 255;
  $24 = $pb;
  $25 = $24 & 255;
  $26 = ($23 | 0) != ($25 | 0);
  if ($26) {
   $27 = $0;
   $28 = $27 + 2 | 0;
   $29 = HEAP8[$28 >> 0] | 0;
   $ob = $29;
  }
 } else {
  $19 = $pb;
  $20 = $b;
  HEAP8[$20 >> 0] = $19;
 }
 $30 = $ob;
 $31 = $0;
 $32 = $31 + 1 | 0;
 $33 = HEAP8[$32 >> 0] | 0;
 _AddPerson($30, $33) | 0;
 STACKTOP = sp;
 return 1;
}

function _FgtShowInf() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $idx = 0, $sbuf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $buf = sp + 8 | 0;
 $sbuf = sp;
 $0 = HEAP32[272 >> 2] | 0;
 _GamePictureDummy(74, 82, 122, 94, 0, $0, 4);
 $1 = HEAP8[3453 >> 0] | 0;
 $2 = HEAP8[3454 >> 0] | 0;
 $3 = _FgtGetGenIdx($1, $2) | 0;
 $idx = $3;
 $4 = $idx;
 $5 = $4 & 255;
 $6 = 255 == ($5 | 0);
 if ($6) {
  $7 = HEAP8[3453 >> 0] | 0;
  $8 = HEAP8[3454 >> 0] | 0;
  $9 = _FgtGetTerrain($7, $8) | 0;
  $10 = $9 & 255;
  $11 = $10 << 2;
  $12 = $11 & 255;
  $idx = $12;
  _FgtLoadToMem(7, $buf);
  $13 = $idx;
  $14 = $13 & 255;
  $15 = $buf + $14 | 0;
  HEAP8[$sbuf >> 0] = HEAP8[$15 >> 0] | 0;
  HEAP8[$sbuf + 1 >> 0] = HEAP8[$15 + 1 >> 0] | 0;
  HEAP8[$sbuf + 2 >> 0] = HEAP8[$15 + 2 >> 0] | 0;
  HEAP8[$sbuf + 3 >> 0] = HEAP8[$15 + 3 >> 0] | 0;
  $16 = $sbuf + 4 | 0;
  HEAP8[$16 >> 0] = 0;
  _FgtStrShowV(74, 82, $sbuf);
  STACKTOP = sp;
  return;
 } else {
  $17 = $idx;
  $18 = _TransIdxToGen2($17) | 0;
  $idx = $18;
  $19 = $idx;
  _GetPersonName($19, $sbuf);
  _FgtStrShowV(74, 82, $sbuf);
  STACKTOP = sp;
  return;
 }
}

function _FgtSetFocus($foc) {
 $foc = $foc | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sx = 0, $sy = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $foc;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3500 + ($2 * 7 | 0) | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $sx = $4;
 $5 = $0;
 $6 = $5 & 255;
 $7 = 3500 + ($6 * 7 | 0) | 0;
 $8 = $7 + 1 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $sy = $9;
 $10 = $sx;
 HEAP8[3453 >> 0] = $10;
 $11 = $sy;
 HEAP8[3454 >> 0] = $11;
 $12 = $sx;
 $13 = $12 & 255;
 $14 = ($13 | 0) < 5;
 if ($14) {
  $sx = 0;
 } else {
  $15 = $sx;
  $16 = $15 & 255;
  $17 = $16 - 5 | 0;
  $18 = $17 & 255;
  $sx = $18;
 }
 $19 = $sy;
 $20 = $19 & 255;
 $21 = ($20 | 0) < 2;
 if ($21) {
  $sy = 0;
  $26 = $sx;
  $27 = $sy;
  _FgtShowMap($26, $27);
  _FgtShowGen(0);
  _FgtShowInf();
  _FgtShowFrame();
  STACKTOP = sp;
  return;
 } else {
  $22 = $sy;
  $23 = $22 & 255;
  $24 = $23 - 2 | 0;
  $25 = $24 & 255;
  $sy = $25;
  $26 = $sx;
  $27 = $sy;
  _FgtShowMap($26, $27);
  _FgtShowGen(0);
  _FgtShowInf();
  _FgtShowFrame();
  STACKTOP = sp;
  return;
 }
}

function _GetDirect($sc, $oc) {
 $sc = $sc | 0;
 $oc = $oc | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $clnk = 0, $clnkcount = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $sc;
 $1 = $oc;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(59, 1, $2) | 0;
 $clnk = $3;
 $4 = $0;
 $5 = $4 & 255;
 $clnkcount = $5;
 $6 = $clnkcount;
 $7 = $6 & 65535;
 $8 = $7 << 4;
 $9 = $8 & 65535;
 $clnkcount = $9;
 $10 = $clnkcount;
 $11 = $10 & 65535;
 $12 = $clnk;
 $13 = $12 + $11 | 0;
 $clnk = $13;
 $i = 0;
 while (1) {
  $14 = $i;
  $15 = $14 & 255;
  $16 = ($15 | 0) < 8;
  if (!$16) {
   label = 5;
   break;
  }
  $17 = $i;
  $18 = $17 & 255;
  $19 = $clnk;
  $20 = $19 + $18 | 0;
  $21 = HEAP8[$20 >> 0] | 0;
  $22 = $21 & 255;
  $23 = $1;
  $24 = $23 & 255;
  $25 = $24 + 1 | 0;
  $26 = ($22 | 0) == ($25 | 0);
  if ($26) {
   label = 5;
   break;
  }
  $27 = $i;
  $28 = $27 + 1 << 24 >> 24;
  $i = $28;
 }
 if ((label | 0) == 5) {
  $29 = $i;
  STACKTOP = sp;
  return $29 | 0;
 }
 return 0 | 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n | 0) > 1023;
 if ($0) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  $3 = ($2 | 0) > 1023;
  if ($3) {
   $4 = $1 * 8988465674311579538646525.0e283;
   $5 = $n + -2046 | 0;
   $6 = ($5 | 0) > 1023;
   $$ = $6 ? 1023 : $5;
   $$0 = $$;
   $y$0 = $4;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else {
  $7 = ($n | 0) < -1022;
  if ($7) {
   $8 = $x * 2.2250738585072014e-308;
   $9 = $n + 1022 | 0;
   $10 = ($9 | 0) < -1022;
   if ($10) {
    $11 = $8 * 2.2250738585072014e-308;
    $12 = $n + 2044 | 0;
    $13 = ($12 | 0) < -1022;
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;
    $y$0 = $11;
   } else {
    $$0 = $9;
    $y$0 = $8;
   }
  } else {
   $$0 = $n;
   $y$0 = $x;
  }
 }
 $14 = $$0 + 1023 | 0;
 $15 = _bitshift64Shl($14 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 $17 = +HEAPF64[tempDoublePtr >> 3];
 $18 = $y$0 * $17;
 return +$18;
}

function _CountOverAdd($a, $v, $up) {
 $a = $a | 0;
 $v = $v | 0;
 $up = $up | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $a;
 $1 = $v;
 $2 = $up;
 $3 = $0;
 $4 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8;
 $tmp = $4;
 $5 = $tmp;
 $6 = $5 & 65535;
 $7 = $1;
 $8 = $7 & 65535;
 $9 = $6 + $8 | 0;
 $10 = $2;
 $11 = $10 & 65535;
 $12 = ($9 | 0) > ($11 | 0);
 if ($12) {
  $13 = $2;
  $14 = $13 & 65535;
  $15 = $tmp;
  $16 = $15 & 65535;
  $17 = $14 - $16 | 0;
  $18 = $17 & 65535;
  $1 = $18;
  $19 = $2;
  $tmp = $19;
  $26 = $tmp;
  $27 = $0;
  HEAP8[$27 >> 0] = $26 & 255;
  HEAP8[$27 + 1 >> 0] = $26 >> 8;
  $28 = $1;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  $20 = $1;
  $21 = $20 & 65535;
  $22 = $tmp;
  $23 = $22 & 65535;
  $24 = $23 + $21 | 0;
  $25 = $24 & 65535;
  $tmp = $25;
  $26 = $tmp;
  $27 = $0;
  HEAP8[$27 >> 0] = $26 & 255;
  HEAP8[$27 + 1 >> 0] = $26 >> 8;
  $28 = $1;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0 | 0;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($oldmem | 0) == (0 | 0);
 if ($0) {
  $1 = _malloc($bytes) | 0;
  $mem$0 = $1;
  return $mem$0 | 0;
 }
 $2 = $bytes >>> 0 > 4294967231;
 if ($2) {
  $3 = ___errno_location() | 0;
  HEAP32[$3 >> 2] = 12;
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $4 = $bytes >>> 0 < 11;
 $5 = $bytes + 11 | 0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = $oldmem + -8 | 0;
 $9 = _try_realloc_chunk($8, $7) | 0;
 $10 = ($9 | 0) == (0 | 0);
 if (!$10) {
  $11 = $9 + 8 | 0;
  $mem$0 = $11;
  return $mem$0 | 0;
 }
 $12 = _malloc($bytes) | 0;
 $13 = ($12 | 0) == (0 | 0);
 if ($13) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $14 = $oldmem + -4 | 0;
 $15 = HEAP32[$14 >> 2] | 0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17 | 0) == 0;
 $19 = $18 ? 8 : 4;
 $20 = $16 - $19 | 0;
 $21 = $20 >>> 0 < $bytes >>> 0;
 $22 = $21 ? $20 : $bytes;
 _memcpy($12 | 0, $oldmem | 0, $22 | 0) | 0;
 _free($oldmem);
 $mem$0 = $12;
 return $mem$0 | 0;
}

function _AddOrderHead($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $inode = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $Order;
 $2 = HEAP32[396 >> 2] | 0;
 $inode = $2;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $3 & 255;
  $5 = ($4 | 0) < 100;
  if (!$5) {
   label = 6;
   break;
  }
  $6 = $i;
  $7 = $6 & 255;
  $8 = $inode;
  $9 = $8 + ($7 * 12 | 0) | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $10 & 255;
  $12 = 255 == ($11 | 0);
  $13 = $i;
  if ($12) {
   label = 4;
   break;
  }
  $18 = $13 + 1 << 24 >> 24;
  $i = $18;
 }
 if ((label | 0) == 4) {
  $14 = $13 & 255;
  $15 = $inode;
  $16 = $15 + ($14 * 12 | 0) | 0;
  $17 = $1;
  dest = $16;
  src = $17;
  stop = dest + 12 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 } else if ((label | 0) == 6) {
  _GamMsgBox(3317, 5);
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0 | 0;
}

function _AddOrderEnd($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $inode = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $Order;
 $2 = HEAP32[396 >> 2] | 0;
 $inode = $2;
 $i = 70;
 while (1) {
  $3 = $i;
  $4 = $3 & 255;
  $5 = ($4 | 0) < 100;
  if (!$5) {
   label = 6;
   break;
  }
  $6 = $i;
  $7 = $6 & 255;
  $8 = $inode;
  $9 = $8 + ($7 * 12 | 0) | 0;
  $10 = HEAP8[$9 >> 0] | 0;
  $11 = $10 & 255;
  $12 = 255 == ($11 | 0);
  $13 = $i;
  if ($12) {
   label = 4;
   break;
  }
  $18 = $13 + 1 << 24 >> 24;
  $i = $18;
 }
 if ((label | 0) == 4) {
  $14 = $13 & 255;
  $15 = $inode;
  $16 = $15 + ($14 * 12 | 0) | 0;
  $17 = $1;
  dest = $16;
  src = $17;
  stop = dest + 12 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 } else if ((label | 0) == 6) {
  _GamMsgBox(3317, 5);
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0 | 0;
}

function _strerror($e) {
 $e = $e | 0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while (1) {
  $1 = 381846 + $i$03 | 0;
  $2 = HEAP8[$1 >> 0] | 0;
  $3 = $2 & 255;
  $4 = ($3 | 0) == ($e | 0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = $i$03 + 1 | 0;
  $6 = ($5 | 0) == 87;
  if ($6) {
   $i$12 = 87;
   $s$01 = 381934;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label | 0) == 2) {
  $0 = ($i$03$lcssa | 0) == 0;
  if ($0) {
   $s$0$lcssa = 381934;
  } else {
   $i$12 = $i$03$lcssa;
   $s$01 = 381934;
   label = 5;
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0;
   $s$1 = $s$01;
   while (1) {
    $7 = HEAP8[$s$1 >> 0] | 0;
    $8 = $7 << 24 >> 24 == 0;
    $9 = $s$1 + 1 | 0;
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = $i$12 + -1 | 0;
   $11 = ($10 | 0) == 0;
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;
    $s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return $s$0$lcssa | 0;
}

function _LostEscape($person, $city) {
 $person = $person | 0;
 $city = $city | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cqptr = 0, $pcount = 0, $rnd = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $person;
 $2 = $city;
 $3 = HEAP32[384 >> 2] | 0;
 $cqptr = $3;
 $4 = $1;
 $5 = $4 & 255;
 $6 = HEAP32[332 >> 2] | 0;
 $7 = $6 + ($5 * 15 | 0) | 0;
 $8 = $7 + 1 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $10 = $9 & 255;
 $11 = $10 - 1 | 0;
 $12 = $11 & 255;
 $13 = $cqptr;
 $14 = _GetKingCitys($12, $13) | 0;
 $pcount = $14;
 $15 = $pcount;
 $16 = $15 << 24 >> 24 != 0;
 if ($16) {
  $17 = _rand() | 0;
  $18 = $pcount;
  $19 = $18 & 255;
  $20 = ($17 | 0) % ($19 | 0) & -1;
  $21 = $20 & 255;
  $rnd = $21;
  $22 = $rnd;
  $23 = $22 & 255;
  $24 = $cqptr;
  $25 = $24 + $23 | 0;
  $26 = HEAP8[$25 >> 0] | 0;
  $27 = $1;
  _AddPerson($26, $27) | 0;
  $0 = 1;
  $28 = $0;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0 | 0;
}

function _FgtShowSNum2($sym, $idx, $num) {
 $sym = $sym | 0;
 $idx = $idx | 0;
 $num = $num | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sx = 0, $sy = 0, $tbuf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tbuf = sp + 2 | 0;
 $0 = $sym;
 $1 = $idx;
 $2 = $num;
 $3 = $0;
 HEAP8[$tbuf >> 0] = $3;
 $4 = $2;
 $5 = $4 & 65535;
 $6 = $tbuf + 1 | 0;
 _itoa($5, $6, 10) | 0;
 $7 = $1;
 $8 = $7 & 255;
 $9 = 3500 + ($8 * 7 | 0) | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = $10 & 255;
 $12 = HEAP8[3455 >> 0] | 0;
 $13 = $12 & 255;
 $14 = $11 - $13 | 0;
 $15 = $14 << 4;
 $16 = $15 + 0 | 0;
 $17 = $16 & 255;
 $sx = $17;
 $18 = $1;
 $19 = $18 & 255;
 $20 = 3500 + ($19 * 7 | 0) | 0;
 $21 = $20 + 1 | 0;
 $22 = HEAP8[$21 >> 0] | 0;
 $23 = $22 & 255;
 $24 = HEAP8[3456 >> 0] | 0;
 $25 = $24 & 255;
 $26 = $23 - $25 | 0;
 $27 = $26 << 4;
 $28 = $27 + 0 | 0;
 $29 = $28 & 255;
 $sy = $29;
 $30 = $sx;
 $31 = $sy;
 _GamStrShowS($30, $31, $tbuf);
 STACKTOP = sp;
 return;
}

function _HarvestryFood() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = 0;
 while (1) {
  $0 = $c;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 38;
  if (!$2) {
   break;
  }
  $3 = $c;
  $4 = $3 & 255;
  $5 = 3645 + ($4 * 31 | 0) | 0;
  $6 = $5 + 23 | 0;
  $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
  $8 = $7 & 65535;
  $9 = ($8 | 0) < 3e4;
  if ($9) {
   $10 = $c;
   $11 = $10 & 255;
   $12 = 3645 + ($11 * 31 | 0) | 0;
   $13 = $12 + 5 | 0;
   $14 = HEAPU8[$13 >> 0] | HEAPU8[$13 + 1 >> 0] << 8;
   $15 = $14 & 65535;
   $16 = ($15 | 0) / 4 & -1;
   $17 = $c;
   $18 = $17 & 255;
   $19 = 3645 + ($18 * 31 | 0) | 0;
   $20 = $19 + 23 | 0;
   $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8;
   $22 = $21 & 65535;
   $23 = $22 + $16 | 0;
   $24 = $23 & 65535;
   HEAP8[$20 >> 0] = $24 & 255;
   HEAP8[$20 + 1 >> 0] = $24 >> 8;
  }
  $25 = $c;
  $26 = $25 + 1 << 24 >> 24;
  $c = $26;
 }
 STACKTOP = sp;
 return;
}

function _calcAt($mModu, $at) {
 $mModu = $mModu | 0;
 $at = $at | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $mModu;
 $2 = $at;
 $3 = $1;
 $4 = $3 << 24 >> 24;
 $5 = 0 <= ($4 | 0);
 if ($5) {
  $6 = $1;
  $7 = $6 << 24 >> 24;
  $8 = ($7 | 0) <= 3;
  if ($8) {
   $9 = $2;
   $10 = $9 & 65535;
   $11 = $1;
   $12 = $11 << 24 >> 24;
   $13 = $10 >> $12;
   $14 = $13 & 65535;
   $0 = $14;
   $31 = $0;
   STACKTOP = sp;
   return $31 | 0;
  }
 }
 $15 = $1;
 $16 = $15 << 24 >> 24;
 $17 = ($16 | 0) > 99;
 if ($17) {
  $1 = 99;
 }
 $18 = $1;
 $19 = $18 << 24 >> 24;
 $20 = ($19 | 0) < -99;
 if ($20) {
  $1 = -99;
 }
 $21 = $2;
 $22 = $21 & 65535;
 $23 = $2;
 $24 = $23 & 65535;
 $25 = $1;
 $26 = $25 << 24 >> 24;
 $27 = Math_imul($24, $26) | 0;
 $28 = ($27 >>> 0) / 100 & -1;
 $29 = $22 - $28 | 0;
 $30 = $29 & 65535;
 $0 = $30;
 $31 = $0;
 STACKTOP = sp;
 return $31 | 0;
}

function _RevenueMoney() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = 0;
 while (1) {
  $0 = $c;
  $1 = $0 & 255;
  $2 = ($1 | 0) < 38;
  if (!$2) {
   break;
  }
  $3 = $c;
  $4 = $3 & 255;
  $5 = 3645 + ($4 * 31 | 0) | 0;
  $6 = $5 + 21 | 0;
  $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
  $8 = $7 & 65535;
  $9 = ($8 | 0) < 3e4;
  if ($9) {
   $10 = $c;
   $11 = $10 & 255;
   $12 = 3645 + ($11 * 31 | 0) | 0;
   $13 = $12 + 9 | 0;
   $14 = HEAPU8[$13 >> 0] | HEAPU8[$13 + 1 >> 0] << 8;
   $15 = $14 & 65535;
   $16 = ($15 | 0) / 2 & -1;
   $17 = $c;
   $18 = $17 & 255;
   $19 = 3645 + ($18 * 31 | 0) | 0;
   $20 = $19 + 21 | 0;
   $21 = HEAPU8[$20 >> 0] | HEAPU8[$20 + 1 >> 0] << 8;
   $22 = $21 & 65535;
   $23 = $22 + $16 | 0;
   $24 = $23 & 65535;
   HEAP8[$20 >> 0] = $24 & 255;
   HEAP8[$20 + 1 >> 0] = $24 >> 8;
  }
  $25 = $c;
  $26 = $25 + 1 << 24 >> 24;
  $c = $26;
 }
 STACKTOP = sp;
 return;
}

function _gam_freadall($fhandle) {
 $fhandle = $fhandle | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alloced = 0, $buf = 0, $cnt = 0, $offset = 0, $rv = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $buf = sp + 24 | 0;
 $0 = $fhandle;
 $alloced = 409600;
 $1 = $alloced;
 $2 = _malloc($1) | 0;
 $rv = $2;
 $offset = 0;
 $cnt = 0;
 while (1) {
  $3 = $0;
  $4 = _gam_fread($buf, 1, 1024, $3) | 0;
  $cnt = $4;
  $5 = $offset;
  $6 = $cnt;
  $7 = $5 + $6 | 0;
  $8 = $alloced;
  $9 = $7 >>> 0 > $8 >>> 0;
  if ($9) {
   $10 = $alloced;
   $11 = $10 << 1;
   $alloced = $11;
   $12 = $rv;
   $13 = $alloced;
   $14 = _realloc($12, $13) | 0;
   $rv = $14;
  }
  $15 = $rv;
  $16 = $offset;
  $17 = $15 + $16 | 0;
  $18 = $cnt;
  _memcpy($17 | 0, $buf | 0, $18 | 0) | 0;
  $19 = $cnt;
  $20 = $offset;
  $21 = $20 + $19 | 0;
  $offset = $21;
  $22 = $cnt;
  $23 = $22 >>> 0 > 0;
  if (!$23) {
   break;
  }
 }
 $24 = $rv;
 STACKTOP = sp;
 return $24 | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 74 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $2 = $1 << 24 >> 24;
 $3 = $2 + 255 | 0;
 $4 = $3 | $2;
 $5 = $4 & 255;
 HEAP8[$0 >> 0] = $5;
 $6 = $f + 20 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 $8 = $f + 44 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $7 >>> 0 > $9 >>> 0;
 if ($10) {
  $11 = $f + 36 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  FUNCTION_TABLE_iiii[$12 & 31]($f, 0, 0) | 0;
 }
 $13 = $f + 16 | 0;
 HEAP32[$13 >> 2] = 0;
 $14 = $f + 28 | 0;
 HEAP32[$14 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 $16 = $15 & 20;
 $17 = ($16 | 0) == 0;
 if ($17) {
  $21 = HEAP32[$8 >> 2] | 0;
  $22 = $f + 8 | 0;
  HEAP32[$22 >> 2] = $21;
  $23 = $f + 4 | 0;
  HEAP32[$23 >> 2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18 | 0) == 0;
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f >> 2] = $20;
   $$0 = -1;
  }
 }
 return $$0 | 0;
}

function _GetKingPersons($king, $pqueue) {
 $king = $king | 0;
 $pqueue = $pqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $count = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $king;
 $1 = $pqueue;
 $count = 0;
 $c = 0;
 while (1) {
  $2 = $c;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 38;
  if (!$4) {
   break;
  }
  $5 = $c;
  $6 = $5 & 255;
  $7 = 3645 + ($6 * 31 | 0) | 0;
  $8 = $7 + 1 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $10 = $9 & 255;
  $11 = $0;
  $12 = $11 & 255;
  $13 = $12 + 1 | 0;
  $14 = ($10 | 0) == ($13 | 0);
  if ($14) {
   $15 = $c;
   $16 = $count;
   $17 = $16 & 255;
   $18 = $1;
   $19 = $18 + $17 | 0;
   $20 = _GetCityPersons($15, $19) | 0;
   $21 = $20 & 255;
   $22 = $count;
   $23 = $22 & 255;
   $24 = $23 + $21 | 0;
   $25 = $24 & 255;
   $count = $25;
  }
  $26 = $c;
  $27 = $26 + 1 << 24 >> 24;
  $c = $27;
 }
 $28 = $count;
 STACKTOP = sp;
 return $28 | 0;
}

function _strlchr($buf, $len, $ch) {
 $buf = $buf | 0;
 $len = $len | 0;
 $ch = $ch | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $buf;
 $2 = $len;
 $3 = $ch;
 $4 = $2;
 $i = $4;
 while (1) {
  $5 = $i;
  $6 = $5 & 255;
  $7 = $6 - 0 | 0;
  $8 = ($7 | 0) > 0;
  if (!$8) {
   label = 6;
   break;
  }
  $9 = $i;
  $10 = $9 & 255;
  $11 = $1;
  $12 = $11 + $10 | 0;
  $13 = HEAP8[$12 >> 0] | 0;
  $14 = $13 & 255;
  $15 = $3;
  $16 = $15 & 255;
  $17 = ($14 | 0) == ($16 | 0);
  if ($17) {
   label = 4;
   break;
  }
  $22 = $i;
  $23 = $22 & 255;
  $24 = $23 - 1 | 0;
  $25 = $24 & 255;
  $i = $25;
 }
 if ((label | 0) == 4) {
  $18 = $1;
  $19 = $i;
  $20 = $19 & 255;
  $21 = $18 + $20 | 0;
  $0 = $21;
  $26 = $0;
  STACKTOP = sp;
  return $26 | 0;
 } else if ((label | 0) == 6) {
  $0 = 0;
  $26 = $0;
  STACKTOP = sp;
  return $26 | 0;
 }
 return 0 | 0;
}

function _SysLcdPartClear($x1, $y1, $x2, $y2) {
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $x2 = $x2 | 0;
 $y2 = $y2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ind = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x1;
 $1 = $y1;
 $2 = $x2;
 $3 = $y2;
 $4 = $1;
 $y = $4;
 while (1) {
  $5 = $y;
  $6 = $5 & 255;
  $7 = $3;
  $8 = $7 & 255;
  $9 = ($6 | 0) <= ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $0;
  $x = $10;
  while (1) {
   $11 = $x;
   $12 = $11 & 255;
   $13 = $2;
   $14 = $13 & 255;
   $15 = ($12 | 0) <= ($14 | 0);
   $16 = $y;
   if (!$15) {
    break;
   }
   $17 = $16 & 255;
   $18 = $17 * 160 | 0;
   $19 = $x;
   $20 = $19 & 255;
   $21 = $18 + $20 | 0;
   $ind = $21;
   $22 = $ind;
   $23 = 366433 + $22 | 0;
   HEAP8[$23 >> 0] = 0;
   $24 = $x;
   $25 = $24 + 1 << 24 >> 24;
   $x = $25;
  }
  $26 = $16 + 1 << 24 >> 24;
  $y = $26;
 }
 _logLcd();
 STACKTOP = sp;
 return;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 20 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 28 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 >>> 0 > $3 >>> 0;
 if ($4) {
  $5 = $f + 36 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  FUNCTION_TABLE_iiii[$6 & 31]($f, 0, 0) | 0;
  $7 = HEAP32[$0 >> 2] | 0;
  $8 = ($7 | 0) == (0 | 0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = HEAP32[$9 >> 2] | 0;
  $11 = $f + 8 | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  $13 = $10 >>> 0 < $12 >>> 0;
  if ($13) {
   $14 = $f + 40 | 0;
   $15 = HEAP32[$14 >> 2] | 0;
   $16 = $10;
   $17 = $12;
   $18 = $16 - $17 | 0;
   FUNCTION_TABLE_iiii[$15 & 31]($f, $18, 1) | 0;
  }
  $19 = $f + 16 | 0;
  HEAP32[$19 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$11 >> 2] = 0;
  HEAP32[$9 >> 2] = 0;
  $$0 = 0;
 }
 return $$0 | 0;
}

function _CountAtkHurt() {
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hurt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = HEAPU8[308 >> 0] | HEAPU8[308 + 1 >> 0] << 8;
 $1 = +($0 & 65535);
 $2 = HEAPU8[330 >> 0] | HEAPU8[330 + 1 >> 0] << 8;
 $3 = $2 & 65535;
 $4 = +($3 | 0);
 $5 = $1 / $4;
 $6 = HEAP32[304 >> 2] | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8;
 $8 = $7 & 65535;
 $9 = $8 >> 3;
 $10 = +($9 | 0);
 $11 = $5 * $10;
 $12 = ~~$11 & 65535;
 $hurt = $12;
 $13 = HEAP8[319 >> 0] | 0;
 $14 = $13 & 255;
 $15 = HEAP8[299 >> 0] | 0;
 $16 = $15 & 255;
 $17 = 16 + ($16 * 24 | 0) | 0;
 $18 = $17 + ($14 << 2) | 0;
 $19 = +HEAPF32[$18 >> 2];
 $20 = $hurt;
 $21 = +($20 & 65535);
 $22 = $21 * $19;
 $23 = ~~$22 & 65535;
 $hurt = $23;
 $24 = $hurt;
 $25 = $24 & 65535;
 $26 = $25 + 10 | 0;
 $27 = $26 & 65535;
 STACKTOP = sp;
 return $27 | 0;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4 | 0) {
 case 0:
  {
   $5 = $x != 0.0;
   if ($5) {
    $6 = $x * 18446744073709551616.0;
    $7 = +_frexp($6, $e);
    $8 = HEAP32[$e >> 2] | 0;
    $9 = $8 + -64 | 0;
    $$01 = $7;
    $storemerge = $9;
   } else {
    $$01 = $x;
    $storemerge = 0;
   }
   HEAP32[$e >> 2] = $storemerge;
   $$0 = $$01;
   break;
  }
 case 2047:
  {
   $$0 = $x;
   break;
  }
 default:
  {
   $10 = $4 + -1022 | 0;
   HEAP32[$e >> 2] = $10;
   $11 = $1 & -2146435073;
   $12 = $11 | 1071644672;
   HEAP32[tempDoublePtr >> 2] = $0;
   HEAP32[tempDoublePtr + 4 >> 2] = $12;
   $13 = +HEAPF64[tempDoublePtr >> 3];
   $$0 = $13;
  }
 }
 return +$$0;
}

function _CountHZMAddrOff($Hz) {
 $Hz = $Hz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset = 0, $pCode = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Hz;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $2 >> 8;
 $4 = $3 & 255;
 $5 = $4 & 255;
 $6 = $5 - 161 | 0;
 $pCode = $6;
 $7 = $pCode;
 $8 = $7 << 6;
 $offset = $8;
 $9 = $pCode;
 $10 = $9 << 5;
 $11 = $offset;
 $12 = $11 + $10 | 0;
 $offset = $12;
 $13 = $offset;
 $14 = $pCode;
 $15 = $14 << 1;
 $16 = $13 - $15 | 0;
 $offset = $16;
 $17 = $0;
 $18 = $17 & 255;
 $19 = $18 & 255;
 $20 = $19 - 161 | 0;
 $21 = $offset;
 $22 = $21 + $20 | 0;
 $offset = $22;
 $23 = $offset;
 $pCode = $23;
 $24 = $offset;
 $25 = $24 << 4;
 $offset = $25;
 $26 = $pCode;
 $27 = $26 << 1;
 $28 = $offset;
 $29 = $28 + $27 | 0;
 $offset = $29;
 $30 = $offset;
 STACKTOP = sp;
 return $30 | 0;
}

function _ShowPersonHead($x, $y, $id) {
 $x = $x | 0;
 $y = $y | 0;
 $id = $id | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pic = 0, $tbuf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $tbuf = sp + 4 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $id;
 $3 = HEAP8[3644 >> 0] | 0;
 $4 = $3 & 255;
 $5 = 47 + $4 | 0;
 $6 = $5 & 65535;
 $7 = HEAP32[256 >> 2] | 0;
 $8 = _ResLoadToCon($6, 1, $7) | 0;
 $pic = $8;
 $9 = $0;
 $10 = $9 & 255;
 $11 = $10 + 13 | 0;
 $12 = $11 & 255;
 $13 = $1;
 $14 = $13 & 255;
 $15 = $14 + 2 | 0;
 $16 = $15 & 255;
 $17 = $2;
 $18 = $pic;
 _GamPicShowExS($12, $16, 24, 24, $17, $18);
 $19 = $2;
 _GetPersonName($19, $tbuf);
 $20 = $0;
 $21 = $20 & 255;
 $22 = $21 + 26 | 0;
 $23 = $22 & 255;
 $24 = $1;
 $25 = $24 & 255;
 $26 = $25 + 28 | 0;
 $27 = $26 & 255;
 _PlcMidShowStr($23, $27, $tbuf);
 STACKTOP = sp;
 return;
}

function _GetKingCitys($king, $cqueue) {
 $king = $king | 0;
 $cqueue = $cqueue | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $count = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $king;
 $1 = $cqueue;
 $count = 0;
 $c = 0;
 while (1) {
  $2 = $c;
  $3 = $2 & 255;
  $4 = ($3 | 0) < 38;
  if (!$4) {
   break;
  }
  $5 = $c;
  $6 = $5 & 255;
  $7 = 3645 + ($6 * 31 | 0) | 0;
  $8 = $7 + 1 | 0;
  $9 = HEAP8[$8 >> 0] | 0;
  $10 = $9 & 255;
  $11 = $0;
  $12 = $11 & 255;
  $13 = $12 + 1 | 0;
  $14 = ($10 | 0) == ($13 | 0);
  if ($14) {
   $15 = $c;
   $16 = $count;
   $17 = $16 & 255;
   $18 = $1;
   $19 = $18 + $17 | 0;
   HEAP8[$19 >> 0] = $15;
   $20 = $count;
   $21 = $20 + 1 << 24 >> 24;
   $count = $21;
  }
  $22 = $c;
  $23 = $22 + 1 << 24 >> 24;
  $c = $23;
 }
 $24 = $count;
 STACKTOP = sp;
 return $24 | 0;
}

function _InitItem($x0, $y0, $x1, $y1, $positem) {
 $x0 = $x0 | 0;
 $y0 = $y0 | 0;
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $positem = $positem | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x0;
 $1 = $y0;
 $2 = $x1;
 $3 = $y1;
 $4 = $positem;
 $5 = $0;
 $6 = $4;
 HEAP8[$6 >> 0] = $5;
 $7 = $1;
 $8 = $4;
 $9 = $8 + 1 | 0;
 HEAP8[$9 >> 0] = $7;
 $10 = $2;
 $11 = $4;
 $12 = $11 + 2 | 0;
 HEAP8[$12 >> 0] = $10;
 $13 = $3;
 $14 = $4;
 $15 = $14 + 3 | 0;
 HEAP8[$15 >> 0] = $13;
 $16 = $0;
 $17 = $4;
 $18 = $17 + 4 | 0;
 HEAP8[$18 >> 0] = $16;
 $19 = $1;
 $20 = $4;
 $21 = $20 + 5 | 0;
 HEAP8[$21 >> 0] = $19;
 $22 = $0;
 $23 = $4;
 $24 = $23 + 6 | 0;
 HEAP8[$24 >> 0] = $22;
 $25 = $1;
 $26 = $4;
 $27 = $26 + 7 | 0;
 HEAP8[$27 >> 0] = $25;
 STACKTOP = sp;
 return;
}

function _hex_encode($s, $length) {
 $s = $s | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $0 = $s;
 $1 = $length;
 $2 = $1;
 $3 = $2 << 1;
 $4 = $3 + 1 | 0;
 $5 = _calloc(1, $4) | 0;
 $buffer = $5;
 $6 = $1;
 $7 = $6 << 1;
 $8 = $buffer;
 $9 = $8 + $7 | 0;
 HEAP8[$9 >> 0] = 0;
 $i = 0;
 while (1) {
  $10 = $i;
  $11 = $1;
  $12 = $10 >>> 0 < $11 >>> 0;
  $13 = $buffer;
  if (!$12) {
   break;
  }
  $14 = $i;
  $15 = $14 << 1;
  $16 = $13 + $15 | 0;
  $17 = $i;
  $18 = $0;
  $19 = $18 + $17 | 0;
  $20 = HEAP8[$19 >> 0] | 0;
  $21 = $20 & 255;
  HEAP32[$vararg_buffer >> 2] = $21;
  _sprintf($16, 5396, $vararg_buffer) | 0;
  $22 = $i;
  $23 = $22 + 1 | 0;
  $i = $23;
 }
 STACKTOP = sp;
 return $13 | 0;
}

function _GamPicShowV($x, $y, $wid, $hgt, $pic, $vscr) {
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 $hgt = $hgt | 0;
 $pic = $pic | 0;
 $vscr = $vscr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $wid;
 $3 = $hgt;
 $4 = $pic;
 $5 = $vscr;
 $6 = $2;
 $7 = $6 & 255;
 $8 = $7 - 1 | 0;
 $9 = $8 & 255;
 $2 = $9;
 $10 = $3;
 $11 = $10 & 255;
 $12 = $11 - 1 | 0;
 $13 = $12 & 255;
 $3 = $13;
 $14 = $0;
 $15 = $1;
 $16 = $0;
 $17 = $16 & 255;
 $18 = $2;
 $19 = $18 & 255;
 $20 = $17 + $19 | 0;
 $21 = $20 & 255;
 $22 = $1;
 $23 = $22 & 255;
 $24 = $3;
 $25 = $24 & 255;
 $26 = $23 + $25 | 0;
 $27 = $26 & 255;
 $28 = $4;
 $29 = $5;
 _GamePictureDummy($14, $15, $21, $27, $28, $29, 0);
 STACKTOP = sp;
 return;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 $0 = $f + 60 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $1;
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 HEAP32[$vararg_ptr1 >> 2] = 0;
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 HEAP32[$vararg_ptr2 >> 2] = $off;
 $vararg_ptr3 = $vararg_buffer + 12 | 0;
 HEAP32[$vararg_ptr3 >> 2] = $ret;
 $vararg_ptr4 = $vararg_buffer + 16 | 0;
 HEAP32[$vararg_ptr4 >> 2] = $whence;
 $2 = ___syscall140(140, $vararg_buffer | 0) | 0;
 $3 = ___syscall_ret($2) | 0;
 $4 = ($3 | 0) < 0;
 if ($4) {
  HEAP32[$ret >> 2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret >> 2] | 0;
  $5 = $$pre;
 }
 STACKTOP = sp;
 return $5 | 0;
}

function _gamPause() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gMsg = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $gMsg = sp;
 while (1) {
  HEAP8[$gMsg >> 0] = 1;
  $0 = _SysGetKey() | 0;
  $1 = $0 & 255;
  $2 = $gMsg + 1 | 0;
  HEAP8[$2 >> 0] = $1 & 255;
  HEAP8[$2 + 1 >> 0] = $1 >> 8;
  $3 = _GuiTranslateMsg($gMsg) | 0;
  $4 = $3 << 24 >> 24 != 0;
  if (!$4) {
   continue;
  }
  $5 = HEAP8[$gMsg >> 0] | 0;
  $6 = $5 & 255;
  $7 = ($6 | 0) != 5;
  if ($7) {
   continue;
  }
  $8 = $gMsg + 1 | 0;
  $9 = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8;
  $10 = $9 & 65535;
  $11 = ($10 | 0) == 39;
  if ($11) {
   label = 6;
   break;
  }
  $12 = $gMsg + 1 | 0;
  $13 = HEAPU8[$12 >> 0] | HEAPU8[$12 + 1 >> 0] << 8;
  $14 = $13 & 65535;
  $15 = ($14 | 0) == 40;
  if ($15) {
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) {
  STACKTOP = sp;
  return;
 }
}

function _PlcExtract($num) {
 $num = $num | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $gen = 0, $step = 0, $tcnt = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $num;
 $gen = 0;
 $step = 10;
 while (1) {
  $1 = $step;
  $2 = $1 << 24 >> 24 != 0;
  $3 = $gen;
  if (!$2) {
   break;
  }
  $4 = $3 & 255;
  $5 = $step;
  $6 = $5 & 255;
  $7 = $4 + $6 | 0;
  $8 = $7 & 255;
  $tcnt = $8;
  $9 = $tcnt;
  $10 = $9 & 255;
  $11 = $10 & 65535;
  $12 = $tcnt;
  $13 = $12 & 255;
  $14 = Math_imul($11, $13) | 0;
  $15 = $0;
  $16 = $15 & 65535;
  $17 = ($14 | 0) < ($16 | 0);
  if ($17) {
   $18 = $tcnt;
   $gen = $18;
   continue;
  } else {
   $19 = $step;
   $20 = $19 & 255;
   $21 = $20 - 1 | 0;
   $22 = $21 & 255;
   $step = $22;
   continue;
  }
 }
 STACKTOP = sp;
 return $3 | 0;
}

function _FgtMakeSklNam($buf) {
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $ptr = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $buf;
 $1 = $0;
 $2 = $1 + 10 | 0;
 $3 = $2 + 1 | 0;
 $ptr = $3;
 $i = 0;
 while (1) {
  $4 = $i;
  $5 = $4 & 255;
  $6 = ($5 | 0) < 10;
  if (!$6) {
   label = 5;
   break;
  }
  $7 = $i;
  $8 = $7 & 255;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = HEAP8[$10 >> 0] | 0;
  $tmp = $11;
  $12 = $tmp;
  $13 = $12 << 24 >> 24 != 0;
  if (!$13) {
   label = 5;
   break;
  }
  $14 = $tmp;
  $15 = $ptr;
  _ResLoadToMem(11, $14, $15) | 0;
  $16 = $ptr;
  $17 = $16 + 4 | 0;
  $ptr = $17;
  $18 = $i;
  $19 = $18 & 255;
  $20 = $19 + 1 | 0;
  $21 = $20 & 255;
  $i = $21;
 }
 if ((label | 0) == 5) {
  STACKTOP = sp;
  return;
 }
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function _FgtGetAtkRng($idx, $x, $y) {
 $idx = $idx | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bakx = 0, $baky = 0, $pos = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 $4 = $3 & 255;
 $5 = 3500 + ($4 * 7 | 0) | 0;
 $pos = $5;
 $6 = $pos;
 $7 = HEAP8[$6 >> 0] | 0;
 $bakx = $7;
 $8 = $pos;
 $9 = $8 + 1 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $baky = $10;
 $11 = $1;
 $12 = $pos;
 HEAP8[$12 >> 0] = $11;
 $13 = $2;
 $14 = $pos;
 $15 = $14 + 1 | 0;
 HEAP8[$15 >> 0] = $13;
 $16 = $0;
 _BuiltAtkAttr(0, $16);
 $17 = $0;
 _FgtGetCmdRng(0, 0, $17);
 $18 = $bakx;
 $19 = $pos;
 HEAP8[$19 >> 0] = $18;
 $20 = $baky;
 $21 = $pos;
 $22 = $21 + 1 | 0;
 HEAP8[$22 >> 0] = $20;
 STACKTOP = sp;
 return;
}

function _GamPicShowS($x, $y, $wid, $hgt, $pic) {
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 $hgt = $hgt | 0;
 $pic = $pic | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $wid;
 $3 = $hgt;
 $4 = $pic;
 $5 = $2;
 $6 = $5 & 255;
 $7 = $6 - 1 | 0;
 $8 = $7 & 255;
 $2 = $8;
 $9 = $3;
 $10 = $9 & 255;
 $11 = $10 - 1 | 0;
 $12 = $11 & 255;
 $3 = $12;
 $13 = $0;
 $14 = $1;
 $15 = $0;
 $16 = $15 & 255;
 $17 = $2;
 $18 = $17 & 255;
 $19 = $16 + $18 | 0;
 $20 = $19 & 255;
 $21 = $1;
 $22 = $21 & 255;
 $23 = $3;
 $24 = $23 & 255;
 $25 = $22 + $24 | 0;
 $26 = $25 & 255;
 $27 = $4;
 _SysPicture($13, $14, $20, $26, $27, 0);
 STACKTOP = sp;
 return;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 74 | 0;
 $1 = HEAP8[$0 >> 0] | 0;
 $2 = $1 << 24 >> 24;
 $3 = $2 + 255 | 0;
 $4 = $3 | $2;
 $5 = $4 & 255;
 HEAP8[$0 >> 0] = $5;
 $6 = HEAP32[$f >> 2] | 0;
 $7 = $6 & 8;
 $8 = ($7 | 0) == 0;
 if ($8) {
  $10 = $f + 8 | 0;
  HEAP32[$10 >> 2] = 0;
  $11 = $f + 4 | 0;
  HEAP32[$11 >> 2] = 0;
  $12 = $f + 44 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $14 = $f + 28 | 0;
  HEAP32[$14 >> 2] = $13;
  $15 = $f + 20 | 0;
  HEAP32[$15 >> 2] = $13;
  $16 = $13;
  $17 = $f + 48 | 0;
  $18 = HEAP32[$17 >> 2] | 0;
  $19 = $16 + $18 | 0;
  $20 = $f + 16 | 0;
  HEAP32[$20 >> 2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f >> 2] = $9;
  $$0 = -1;
 }
 return $$0 | 0;
}

function _HoldCaptive($person, $city) {
 $person = $person | 0;
 $city = $city | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $person;
 $1 = $city;
 $2 = $0;
 $3 = $2 & 255;
 $4 = HEAP32[332 >> 2] | 0;
 $5 = $4 + ($3 * 15 | 0) | 0;
 $pptr = $5;
 $6 = $pptr;
 $7 = $6 + 1 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $pptr;
 HEAP8[$9 >> 0] = $8;
 $10 = $pptr;
 $11 = $10 + 1 | 0;
 HEAP8[$11 >> 0] = -1;
 $12 = $pptr;
 $13 = $12 + 10 | 0;
 HEAP8[$13 >> 0] = 0 & 255;
 HEAP8[$13 + 1 >> 0] = 0 >> 8;
 $14 = $0;
 HEAP8[5275 >> 0] = $14;
 $15 = HEAP8[5276 >> 0] | 0;
 $16 = $15 & 255;
 $17 = $16 + 1 | 0;
 $18 = $17 & 255;
 HEAP8[5276 >> 0] = $18;
 $19 = $1;
 $20 = $0;
 _AddPerson($19, $20) | 0;
 STACKTOP = sp;
 return;
}

function _FgtGetAimPos($aimx, $aimy) {
 $aimx = $aimx | 0;
 $aimy = $aimy | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $aimx;
 $1 = $aimy;
 $2 = HEAP8[3472 >> 0] | 0;
 $3 = $2 & 255;
 $4 = 1 == ($3 | 0);
 if ($4) {
  $5 = HEAP8[3468 >> 0] | 0;
  $6 = $5 & 255;
  $7 = 3500 + ($6 * 7 | 0) | 0;
  $8 = HEAP8[$7 >> 0] | 0;
  $9 = $0;
  HEAP8[$9 >> 0] = $8;
  $10 = HEAP8[3468 >> 0] | 0;
  $11 = $10 & 255;
  $12 = 3500 + ($11 * 7 | 0) | 0;
  $13 = $12 + 1 | 0;
  $14 = HEAP8[$13 >> 0] | 0;
  $15 = $1;
  HEAP8[$15 >> 0] = $14;
  STACKTOP = sp;
  return;
 } else {
  $16 = HEAP8[3463 >> 0] | 0;
  $17 = $0;
  HEAP8[$17 >> 0] = $16;
  $18 = HEAP8[3464 >> 0] | 0;
  $19 = $1;
  HEAP8[$19 >> 0] = $18;
  STACKTOP = sp;
  return;
 }
}

function _sav_fclose_w($fp_) {
 $fp_ = $fp_ | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fp = 0, $hex_data = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp_;
 $1 = $0;
 $fp = $1;
 $2 = $fp;
 $3 = $2 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $fp;
 $6 = $5 + 20 | 0;
 $7 = HEAPU8[$6 >> 0] | HEAPU8[$6 + 1 >> 0] << 8 | HEAPU8[$6 + 2 >> 0] << 16 | HEAPU8[$6 + 3 >> 0] << 24;
 $8 = _hex_encode($4, $7) | 0;
 $hex_data = $8;
 $9 = $fp;
 $10 = $9 + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 _free($11);
 $12 = $fp;
 $13 = $12 + 32 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 $15 = $hex_data;
 _setValue($14, $15);
 $16 = $hex_data;
 _free($16);
 $17 = $fp;
 $18 = $17 + 32 | 0;
 $19 = HEAP32[$18 >> 2] | 0;
 _free($19);
 $20 = $fp;
 _free($20);
 STACKTOP = sp;
 return 0;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 $2 = $0 << 24 >> 24 != $1 << 24 >> 24;
 $3 = $0 << 24 >> 24 == 0;
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  while (1) {
   $4 = $$014 + 1 | 0;
   $5 = $$05 + 1 | 0;
   $6 = HEAP8[$4 >> 0] | 0;
   $7 = HEAP8[$5 >> 0] | 0;
   $8 = $6 << 24 >> 24 != $7 << 24 >> 24;
   $9 = $6 << 24 >> 24 == 0;
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;
    $$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;
    $$05 = $5;
   }
  }
 }
 $10 = $$lcssa & 255;
 $11 = $$lcssa2 & 255;
 $12 = $10 - $11 | 0;
 return $12 | 0;
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer = sp;
 $tio = sp + 12 | 0;
 $0 = $f + 36 | 0;
 HEAP32[$0 >> 2] = 21;
 $1 = HEAP32[$f >> 2] | 0;
 $2 = $1 & 64;
 $3 = ($2 | 0) == 0;
 if ($3) {
  $4 = $f + 60 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $5;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = 21505;
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  HEAP32[$vararg_ptr2 >> 2] = $tio;
  $6 = ___syscall54(54, $vararg_buffer | 0) | 0;
  $7 = ($6 | 0) == 0;
  if (!$7) {
   $8 = $f + 75 | 0;
   HEAP8[$8 >> 0] = -1;
  }
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _PlcArmsMax($id) {
 $id = $id | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $per = 0, $up = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $id;
 $1 = $0;
 $2 = $1 & 255;
 $3 = HEAP32[332 >> 2] | 0;
 $4 = $3 + ($2 * 15 | 0) | 0;
 $per = $4;
 $5 = $per;
 $6 = $5 + 3 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $9 = $per;
 $10 = $9 + 4 | 0;
 $11 = HEAP8[$10 >> 0] | 0;
 $12 = $11 & 255;
 $13 = $8 + $12 | 0;
 $14 = $13 & 65535;
 $15 = $14 & 65535;
 $16 = $15 * 10 | 0;
 $17 = $per;
 $18 = $17 + 2 | 0;
 $19 = HEAP8[$18 >> 0] | 0;
 $20 = $19 & 255;
 $21 = $20 & 65535;
 $22 = $21 * 100 | 0;
 $23 = $16 + $22 | 0;
 $24 = $23 & 65535;
 $up = $24;
 $25 = $up;
 STACKTOP = sp;
 return $25 | 0;
}

function _rom_finit($fp) {
 $fp = $fp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp;
 $1 = $0;
 HEAP32[$1 >> 2] = 11;
 $2 = $0;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = 12;
 $4 = $0;
 $5 = $4 + 8 | 0;
 HEAP32[$5 >> 2] = 13;
 $6 = $0;
 $7 = $6 + 12 | 0;
 HEAP32[$7 >> 2] = 14;
 $8 = $0;
 $9 = $8 + 16 | 0;
 HEAP32[$9 >> 2] = 15;
 $10 = $0;
 $11 = $10 + 20 | 0;
 HEAP8[$11 >> 0] = 0 & 255;
 HEAP8[$11 + 1 >> 0] = 0 >> 8 & 255;
 HEAP8[$11 + 2 >> 0] = 0 >> 16 & 255;
 HEAP8[$11 + 3 >> 0] = 0 >> 24;
 $12 = $0;
 $13 = $12 + 24 | 0;
 HEAP8[$13 >> 0] = 0 & 255;
 HEAP8[$13 + 1 >> 0] = 0 >> 8 & 255;
 HEAP8[$13 + 2 >> 0] = 0 >> 16 & 255;
 HEAP8[$13 + 3 >> 0] = 0 >> 24;
 $14 = $0;
 $15 = $14 + 28 | 0;
 HEAP32[$15 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function _FgtStatGen($flag) {
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pSIdx = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $flag;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 * 10 | 0;
 $4 = $3 & 255;
 $pSIdx = $4;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $5 & 255;
  $7 = ($6 | 0) < 10;
  if (!$7) {
   label = 5;
   break;
  }
  $8 = $i;
  $9 = $8 & 255;
  $10 = $pSIdx;
  $11 = $10 & 255;
  $12 = $9 + $11 | 0;
  $13 = 3480 + $12 | 0;
  $14 = HEAP8[$13 >> 0] | 0;
  $15 = $14 << 24 >> 24 != 0;
  if (!$15) {
   label = 5;
   break;
  }
  $16 = $i;
  $17 = $16 & 255;
  $18 = $17 + 1 | 0;
  $19 = $18 & 255;
  $i = $19;
 }
 if ((label | 0) == 5) {
  $20 = $i;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0 | 0;
}

function _IsManual($person, $order) {
 $person = $person | 0;
 $order = $order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $person;
 $2 = $order;
 $3 = HEAP32[256 >> 2] | 0;
 $4 = _ResLoadToCon(2, 10, $3) | 0;
 $ptr = $4;
 $5 = $1;
 $6 = $5 & 255;
 $7 = HEAP32[332 >> 2] | 0;
 $8 = $7 + ($6 * 15 | 0) | 0;
 $9 = $8 + 8 | 0;
 $10 = HEAP8[$9 >> 0] | 0;
 $11 = $10 & 255;
 $12 = $2;
 $13 = $12 & 255;
 $14 = $ptr;
 $15 = $14 + $13 | 0;
 $16 = HEAP8[$15 >> 0] | 0;
 $17 = $16 & 255;
 $18 = ($11 | 0) >= ($17 | 0);
 if ($18) {
  $0 = 1;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 } else {
  $0 = 0;
  $19 = $0;
  STACKTOP = sp;
  return $19 | 0;
 }
 return 0 | 0;
}

function _GamChinese($x, $y, $Hz) {
 $x = $x | 0;
 $y = $y | 0;
 $Hz = $Hz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $zmCode = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $zmCode = sp + 8 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $Hz;
 $3 = $2;
 _GetExcHZMCode($3, $zmCode);
 $4 = HEAP32[268 >> 2] | 0;
 $5 = ($4 | 0) == (0 | 0);
 $6 = $0;
 $7 = $1;
 $8 = $0;
 $9 = $8 & 255;
 $10 = $9 + 12 | 0;
 $11 = $10 - 1 | 0;
 $12 = $11 & 255;
 $13 = $1;
 $14 = $13 & 255;
 $15 = $14 + 12 | 0;
 $16 = $15 - 1 | 0;
 $17 = $16 & 255;
 if ($5) {
  _SysPicture($6, $7, $12, $17, $zmCode, 0);
  STACKTOP = sp;
  return;
 } else {
  $18 = HEAP32[268 >> 2] | 0;
  _GamePictureDummy($6, $7, $12, $17, $zmCode, $18, 0);
  STACKTOP = sp;
  return;
 }
}

function _IsMoney($city, $order) {
 $city = $city | 0;
 $order = $order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $city;
 $2 = $order;
 $3 = HEAP32[256 >> 2] | 0;
 $4 = _ResLoadToCon(2, 11, $3) | 0;
 $ptr = $4;
 $5 = $1;
 $6 = $5 & 255;
 $7 = 3645 + ($6 * 31 | 0) | 0;
 $8 = $7 + 21 | 0;
 $9 = HEAPU8[$8 >> 0] | HEAPU8[$8 + 1 >> 0] << 8;
 $10 = $9 & 65535;
 $11 = $2;
 $12 = $11 & 255;
 $13 = $ptr;
 $14 = $13 + $12 | 0;
 $15 = HEAP8[$14 >> 0] | 0;
 $16 = $15 & 255;
 $17 = ($10 | 0) >= ($16 | 0);
 if ($17) {
  $0 = 1;
  $18 = $0;
  STACKTOP = sp;
  return $18 | 0;
 } else {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;
  return $18 | 0;
 }
 return 0 | 0;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($n_elements | 0) == 0;
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  $2 = $elem_size | $n_elements;
  $3 = $2 >>> 0 > 65535;
  if ($3) {
   $4 = ($1 >>> 0) / ($n_elements >>> 0) & -1;
   $5 = ($4 | 0) == ($elem_size | 0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = _malloc($req$0) | 0;
 $7 = ($6 | 0) == (0 | 0);
 if ($7) {
  return $6 | 0;
 }
 $8 = $6 + -4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $9 & 3;
 $11 = ($10 | 0) == 0;
 if ($11) {
  return $6 | 0;
 }
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function _FgtAtkCmd($pcmd) {
 $pcmd = $pcmd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $aidx = 0, $hurt = 0, $idx = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $aidx = sp + 6 | 0;
 $hurt = sp + 4 | 0;
 $1 = $pcmd;
 $2 = $1;
 $3 = $2 + 2 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $idx = $4;
 $5 = $idx;
 _FgtGetCmdRng(0, 0, $5);
 $6 = $idx;
 _BuiltAtkAttr(0, $6);
 _FgtGetHurtMax($hurt, $aidx);
 $7 = HEAP8[$aidx >> 0] | 0;
 $8 = $7 & 255;
 $9 = ($8 | 0) != 255;
 if ($9) {
  $10 = $1;
  HEAP8[$10 >> 0] = 0;
  $11 = HEAP8[$aidx >> 0] | 0;
  $12 = $1;
  $13 = $12 + 3 | 0;
  HEAP8[$13 >> 0] = $11;
  $0 = 1;
  $14 = $0;
  STACKTOP = sp;
  return $14 | 0;
 } else {
  $0 = 0;
  $14 = $0;
  STACKTOP = sp;
  return $14 | 0;
 }
 return 0 | 0;
}

function _TransIdxToGen($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $idx;
 $2 = $1;
 $3 = $2 & 255;
 $4 = ($3 | 0) > 19;
 do {
  if ($4) {
   $0 = -1;
  } else {
   $5 = $1;
   $6 = $5 & 255;
   $7 = 3500 + ($6 * 7 | 0) | 0;
   $8 = $7 + 6 | 0;
   $9 = HEAP8[$8 >> 0] | 0;
   $10 = $9 & 255;
   $11 = 8 == ($10 | 0);
   if ($11) {
    $0 = -1;
    break;
   } else {
    $12 = $1;
    $13 = $12 & 255;
    $14 = 3480 + $13 | 0;
    $15 = HEAP8[$14 >> 0] | 0;
    $16 = $15 & 255;
    $17 = $16 - 1 | 0;
    $18 = $17 & 255;
    $0 = $18;
    break;
   }
  }
 } while (0);
 $19 = $0;
 STACKTOP = sp;
 return $19 | 0;
}

function _loadPersons($person, $raw, $length) {
 $person = $person | 0;
 $raw = $raw | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $pcount = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $person;
 $1 = $raw;
 $2 = $length;
 $3 = $2;
 $4 = $3 & 65535;
 $5 = ($4 >>> 0) / 15 & -1;
 $6 = $5 & 65535;
 $pcount = $6;
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $pcount;
  $9 = $8 & 65535;
  $10 = ($7 | 0) < ($9 | 0);
  if (!$10) {
   break;
  }
  $11 = $0;
  $12 = $i;
  $13 = $11 + ($12 * 15 | 0) | 0;
  $14 = $1;
  $15 = _loadPerson($13, $14) | 0;
  $1 = $15;
  $16 = $i;
  $17 = $16 + 1 | 0;
  $i = $17;
 }
 $18 = $1;
 STACKTOP = sp;
 return $18 | 0;
}

function _ExpDataWithKey($ptr, $key, $len) {
 $ptr = $ptr | 0;
 $key = $key | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $ptr;
 $1 = $key;
 $2 = $len;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $3 & 65535;
  $5 = $2;
  $6 = $5 & 65535;
  $7 = ($4 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $1;
  $9 = $8 & 255;
  $10 = $i;
  $11 = $10 & 65535;
  $12 = $0;
  $13 = $12 + $11 | 0;
  $14 = HEAP8[$13 >> 0] | 0;
  $15 = $14 & 255;
  $16 = $15 - $9 | 0;
  $17 = $16 & 255;
  HEAP8[$13 >> 0] = $17;
  $18 = $i;
  $19 = $18 + 1 << 16 >> 16;
  $i = $19;
 }
 STACKTOP = sp;
 return;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
 $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}

function _OrderConsumeMoney($city, $order) {
 $city = $city | 0;
 $order = $order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $order;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(2, 11, $2) | 0;
 $ptr = $3;
 $4 = $1;
 $5 = $4 & 255;
 $6 = $ptr;
 $7 = $6 + $5 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $8 & 255;
 $10 = $0;
 $11 = $10 & 255;
 $12 = 3645 + ($11 * 31 | 0) | 0;
 $13 = $12 + 21 | 0;
 $14 = HEAPU8[$13 >> 0] | HEAPU8[$13 + 1 >> 0] << 8;
 $15 = $14 & 65535;
 $16 = $15 - $9 | 0;
 $17 = $16 & 65535;
 HEAP8[$13 >> 0] = $17 & 255;
 HEAP8[$13 + 1 >> 0] = $17 >> 8;
 STACKTOP = sp;
 return;
}

function _CountPlusSub($a, $v) {
 $a = $a | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $a;
 $1 = $v;
 $2 = $0;
 $3 = HEAPU8[$2 >> 0] | HEAPU8[$2 + 1 >> 0] << 8;
 $tmp = $3;
 $4 = $tmp;
 $5 = $4 & 65535;
 $6 = $1;
 $7 = $6 & 65535;
 $8 = ($5 | 0) > ($7 | 0);
 if ($8) {
  $9 = $1;
  $10 = $9 & 65535;
  $11 = $tmp;
  $12 = $11 & 65535;
  $13 = $12 - $10 | 0;
  $14 = $13 & 65535;
  $tmp = $14;
 } else {
  $15 = $tmp;
  $1 = $15;
  $tmp = 0;
 }
 $16 = $tmp;
 $17 = $0;
 HEAP8[$17 >> 0] = $16 & 255;
 HEAP8[$17 + 1 >> 0] = $16 >> 8;
 $18 = $1;
 STACKTOP = sp;
 return $18 | 0;
}

function _OrderConsumeThew($person, $order) {
 $person = $person | 0;
 $order = $order | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $person;
 $1 = $order;
 $2 = HEAP32[256 >> 2] | 0;
 $3 = _ResLoadToCon(2, 10, $2) | 0;
 $ptr = $3;
 $4 = $1;
 $5 = $4 & 255;
 $6 = $ptr;
 $7 = $6 + $5 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 $9 = $8 & 255;
 $10 = $0;
 $11 = $10 & 255;
 $12 = HEAP32[332 >> 2] | 0;
 $13 = $12 + ($11 * 15 | 0) | 0;
 $14 = $13 + 8 | 0;
 $15 = HEAP8[$14 >> 0] | 0;
 $16 = $15 & 255;
 $17 = $16 - $9 | 0;
 $18 = $17 & 255;
 HEAP8[$14 >> 0] = $18;
 STACKTOP = sp;
 return;
}

function _sav_finit_w($fp, $fname) {
 $fp = $fp | 0;
 $fname = $fname | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp;
 $1 = $fname;
 $2 = $0;
 _rom_finit($2);
 $3 = _calloc(1, 1024) | 0;
 $4 = $0;
 $5 = $4 + 28 | 0;
 HEAP32[$5 >> 2] = $3;
 $6 = $0;
 $7 = $6 + 36 | 0;
 HEAP8[$7 >> 0] = 1024 & 255;
 HEAP8[$7 + 1 >> 0] = 1024 >> 8 & 255;
 HEAP8[$7 + 2 >> 0] = 1024 >> 16 & 255;
 HEAP8[$7 + 3 >> 0] = 1024 >> 24;
 $8 = $0;
 HEAP32[$8 >> 2] = 9;
 $9 = $0;
 $10 = $9 + 12 | 0;
 HEAP32[$10 >> 2] = 10;
 $11 = $1;
 $12 = ___strdup($11) | 0;
 $13 = $0;
 $14 = $13 + 32 | 0;
 HEAP32[$14 >> 2] = $12;
 STACKTOP = sp;
 return;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = _memchr($1, 0, $2) | 0;
 $4 = ($3 | 0) == (0 | 0);
 $5 = $3;
 $6 = $1;
 $7 = $5 - $6 | 0;
 $k$0 = $4 ? $2 : $7;
 $8 = $k$0 >>> 0 < $len >>> 0;
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0;
 $9 = $1 + $k$0$len | 0;
 $10 = $f + 4 | 0;
 HEAP32[$10 >> 2] = $9;
 $11 = $1 + $k$0 | 0;
 $12 = $f + 8 | 0;
 HEAP32[$12 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 return $k$0$len | 0;
}

function _gam_fopen($fname, $pmode) {
 $fname = $fname | 0;
 $pmode = $pmode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = $fname;
 $2 = $pmode;
 $3 = $1;
 $4 = _strncmp(5277, $3, 5) | 0;
 $5 = ($4 | 0) == 0;
 $6 = $1;
 do {
  if ($5) {
   $7 = $2;
   $8 = _rom_fopen($6, $7) | 0;
   $0 = $8;
  } else {
   $9 = _strncmp(5283, $6, 6) | 0;
   $10 = ($9 | 0) == 0;
   if ($10) {
    $11 = $1;
    $12 = $2;
    $13 = _sav_fopen346($11, $12) | 0;
    $0 = $13;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while (0);
 $14 = $0;
 STACKTOP = sp;
 return $14 | 0;
}

function _PlcMidShowStr($x, $y, $buf) {
 $x = $x | 0;
 $y = $y | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pLen = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $buf;
 $3 = $2;
 $4 = _strlen($3) | 0;
 $5 = $4 * 6 | 0;
 $6 = $5 & 255;
 $pLen = $6;
 $7 = $pLen;
 $8 = $7 & 255;
 $9 = $8 >> 1;
 $10 = $9 & 255;
 $pLen = $10;
 $11 = $pLen;
 $12 = $11 & 255;
 $13 = $0;
 $14 = $13 & 255;
 $15 = $14 - $12 | 0;
 $16 = $15 & 255;
 $0 = $16;
 $17 = $0;
 $18 = $1;
 $19 = $2;
 _GamStrShowS($17, $18, $19);
 STACKTOP = sp;
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 $0 = $f + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  $3 = ___toread($f) | 0;
  $4 = ($3 | 0) == 0;
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $5 = $f + 32 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $7 = FUNCTION_TABLE_iiii[$6 & 31]($f, $c, 1) | 0;
  $8 = ($7 | 0) == 1;
  if ($8) {
   $9 = HEAP8[$c >> 0] | 0;
   $10 = $9 & 255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _GamMPicShowS($x, $y, $wid, $hgt, $pic) {
 $x = $x | 0;
 $y = $y | 0;
 $wid = $wid | 0;
 $hgt = $hgt | 0;
 $pic = $pic | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $wid;
 $3 = $hgt;
 $4 = $pic;
 $5 = $0;
 $6 = $1;
 $7 = $0;
 $8 = $7 & 255;
 $9 = $2;
 $10 = $9 & 255;
 $11 = $8 + $10 | 0;
 $12 = $11 & 255;
 $13 = $1;
 $14 = $13 & 255;
 $15 = $3;
 $16 = $15 & 255;
 $17 = $14 + $16 | 0;
 $18 = $17 & 255;
 $19 = $4;
 _SysPicture($5, $6, $12, $18, $19, 0);
 STACKTOP = sp;
 return;
}

function _GetCityState($city, $str) {
 $city = $city | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $state = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $str;
 $state = 0;
 $2 = $0;
 $3 = $2 & 255;
 $4 = 3645 + ($3 * 31 | 0) | 0;
 $5 = HEAP8[$4 >> 0] | 0;
 $6 = $5 & 255;
 switch ($6 | 0) {
 case 0:
  {
   $state = 12;
   break;
  }
 case 1:
  {
   $state = 13;
   break;
  }
 case 2:
  {
   $state = 14;
   break;
  }
 case 3:
  {
   $state = 15;
   break;
  }
 case 4:
  {
   $state = 16;
   break;
  }
 default:
  {}
 }
 $7 = $state;
 $8 = $1;
 _ResLoadToMem(64, $7, $8) | 0;
 STACKTOP = sp;
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2] | 0;
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _FgtShowCursor() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = HEAP8[3453 >> 0] | 0;
 $1 = $0 & 255;
 $2 = HEAP8[3455 >> 0] | 0;
 $3 = $2 & 255;
 $4 = $1 - $3 | 0;
 $5 = $4 << 4;
 $6 = $5 + 0 | 0;
 $7 = $6 & 255;
 $x = $7;
 $8 = HEAP8[3454 >> 0] | 0;
 $9 = $8 & 255;
 $10 = HEAP8[3456 >> 0] | 0;
 $11 = $10 & 255;
 $12 = $9 - $11 | 0;
 $13 = $12 << 4;
 $14 = $13 + 0 | 0;
 $15 = $14 & 255;
 $y = $15;
 $16 = $x;
 $17 = $y;
 _FgtRPicShowV(7, 5, $16, $17);
 STACKTOP = sp;
 return;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 104 | 0;
 HEAP32[$0 >> 2] = $lim;
 $1 = $f + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $f + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $2;
 $6 = $4;
 $7 = $5 - $6 | 0;
 $8 = $f + 108 | 0;
 HEAP32[$8 >> 2] = $7;
 $9 = ($lim | 0) != 0;
 $10 = ($7 | 0) > ($lim | 0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $4 + $lim | 0;
  $12 = $f + 100 | 0;
  HEAP32[$12 >> 2] = $11;
 } else {
  $13 = $f + 100 | 0;
  HEAP32[$13 >> 2] = $5;
 }
 return;
}

function _GetPersonName($person, $str) {
 $person = $person | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $person;
 $1 = $str;
 $l = 0;
 $2 = HEAP8[3644 >> 0] | 0;
 $3 = $2 & 255;
 switch ($3 | 0) {
 case 1:
  {
   $l = 62;
   break;
  }
 case 2:
  {
   $l = 70;
   break;
  }
 case 3:
  {
   $l = 71;
   break;
  }
 case 4:
  {
   $l = 72;
   break;
  }
 default:
  {}
 }
 $4 = $l;
 $5 = $4 & 255;
 $6 = $0;
 $7 = $6 & 255;
 $8 = $7 + 1 | 0;
 $9 = $8 & 255;
 $10 = $1;
 _ResLoadToMem($5, $9, $10) | 0;
 STACKTOP = sp;
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function _ResGetItemLen($ResId, $idx) {
 $ResId = $ResId | 0;
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addr = 0, $rIdx = 0, $reshead = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $rIdx = sp + 20 | 0;
 $reshead = sp + 8 | 0;
 $1 = $ResId;
 $2 = $idx;
 $3 = $1;
 $4 = _GetResStartAddr($3) | 0;
 $addr = $4;
 $5 = $addr;
 $6 = ($5 | 0) == 0;
 if ($6) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;
  return $10 | 0;
 } else {
  $7 = $addr;
  $8 = $2;
  $9 = _GetResItem($7, $8, $reshead, $rIdx) | 0;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;
  return $10 | 0;
 }
 return 0 | 0;
}

function __timer_cb($t) {
 $t = $t | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $timer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $t;
 $1 = $0;
 $timer = $1;
 $2 = $timer;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) != 0;
 if ($5) {
  $6 = $timer;
  $7 = $6 + 12 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = ($8 | 0) != (0 | 0);
  if ($9) {
   $10 = $timer;
   $11 = $10 + 12 | 0;
   $12 = HEAP32[$11 >> 2] | 0;
   FUNCTION_TABLE_v[$12 & 31]();
  }
 }
 $13 = $timer;
 _schedule_timer($13);
 STACKTOP = sp;
 return;
}

function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = 8;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0 + 4 | 0;
 $4 = $3;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = ___muldi3($2 | 0, $5 | 0, 1284865837, 1481765933) | 0;
 $7 = tempRet0;
 $8 = _i64Add($6 | 0, $7 | 0, 1, 0) | 0;
 $9 = tempRet0;
 $10 = 8;
 $11 = $10;
 HEAP32[$11 >> 2] = $8;
 $12 = $10 + 4 | 0;
 $13 = $12;
 HEAP32[$13 >> 2] = $9;
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 $15 = tempRet0;
 return $14 | 0;
}

function _FgtGetJNPtr($param) {
 $param = $param | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $poff = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $param;
 $poff = 34;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 - 1 | 0;
 $4 = $poff;
 $5 = $4 & 65535;
 $6 = Math_imul($5, $3) | 0;
 $7 = $6 & 65535;
 $poff = $7;
 $8 = HEAP32[256 >> 2] | 0;
 $9 = _ResLoadToCon(10, 1, $8) | 0;
 $10 = $poff;
 $11 = $10 & 65535;
 $12 = $9 + $11 | 0;
 $ptr = $12;
 $13 = $ptr;
 STACKTOP = sp;
 return $13 | 0;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 dest = $f;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0 | 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f + 32 | 0;
 HEAP32[$0 >> 2] = 22;
 $1 = $f + 44 | 0;
 HEAP32[$1 >> 2] = $s;
 $2 = $f + 76 | 0;
 HEAP32[$2 >> 2] = -1;
 $3 = $f + 84 | 0;
 HEAP32[$3 >> 2] = $s;
 $4 = _vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _msg_free($msg) {
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ind = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $msg;
 $1 = $0;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  STACKTOP = sp;
  return;
 }
 $3 = $0;
 $4 = $3;
 $5 = $4 - 804 | 0;
 $6 = ($5 | 0) / 12 & -1;
 $ind = $6;
 $7 = HEAP32[400 >> 2] | 0;
 $8 = $7 - 1 | 0;
 HEAP32[400 >> 2] = $8;
 $9 = $ind;
 $10 = HEAP32[400 >> 2] | 0;
 $11 = 404 + ($10 << 2) | 0;
 HEAP32[$11 >> 2] = $9;
 STACKTOP = sp;
 return;
}

function _gamTracel($num) {
 $num = $num | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $num;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = $1 & 255;
  $3 = ($2 | 0) < 8;
  if (!$3) {
   break;
  }
  $4 = $i;
  $5 = $4 & 255;
  $6 = $5 << 3;
  $7 = $6 & 255;
  _SysAscii($7, 0, 32);
  $8 = $i;
  $9 = $8 & 255;
  $10 = $9 + 1 | 0;
  $11 = $10 & 255;
  $i = $11;
 }
 $12 = $0;
 _gamPrintNum(0, 0, $12, 16, 0);
 STACKTOP = sp;
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 $7 = +HEAPF64[tempDoublePtr >> 3];
 return +$7;
}

function _GamStrShowV($x, $y, $str, $vscr) {
 $x = $x | 0;
 $y = $y | 0;
 $str = $str | 0;
 $vscr = $vscr | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $bakBnk = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $bakBnk = sp + 8 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $str;
 $3 = $vscr;
 _GetDataBankNumber(9, $bakBnk);
 $4 = $3;
 HEAP32[268 >> 2] = $4;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _GamStrShow($5, $6, $7);
 $8 = HEAPU8[$bakBnk >> 0] | HEAPU8[$bakBnk + 1 >> 0] << 8;
 _GamResumeSet($8);
 STACKTOP = sp;
 return;
}

function _loadCities($cities, $raw) {
 $cities = $cities | 0;
 $raw = $raw | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $cities;
 $1 = $raw;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = ($2 | 0) < 38;
  if (!$3) {
   break;
  }
  $4 = $0;
  $5 = $i;
  $6 = $4 + ($5 * 31 | 0) | 0;
  $7 = $1;
  $8 = _loadCity($6, $7) | 0;
  $1 = $8;
  $9 = $i;
  $10 = $9 + 1 | 0;
  $i = $10;
 }
 $11 = $1;
 STACKTOP = sp;
 return $11 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
 return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}

function _gam_fwrite($buf, $size, $count, $fp) {
 $buf = $buf | 0;
 $size = $size | 0;
 $count = $count | 0;
 $fp = $fp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $buf;
 $1 = $size;
 $2 = $count;
 $3 = $fp;
 $4 = $3;
 $5 = $4 + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = FUNCTION_TABLE_iiiii[$6 & 15]($7, $8, $9, $10) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _gam_fread($buf, $size, $count, $fp) {
 $buf = $buf | 0;
 $size = $size | 0;
 $count = $count | 0;
 $fp = $fp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $buf;
 $1 = $size;
 $2 = $count;
 $3 = $fp;
 $4 = $3;
 $5 = $4 + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = FUNCTION_TABLE_iiiii[$6 & 15]($7, $8, $9, $10) | 0;
 STACKTOP = sp;
 return $11 | 0;
}

function _SysPutPixel($x, $y, $data) {
 $x = $x | 0;
 $y = $y | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ind = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $data;
 $3 = $1;
 $4 = $3 & 255;
 $5 = $4 * 160 | 0;
 $6 = $0;
 $7 = $6 & 255;
 $8 = $5 + $7 | 0;
 $ind = $8;
 $9 = $2;
 $10 = $ind;
 $11 = 366433 + $10 | 0;
 HEAP8[$11 >> 0] = $9;
 _logLcd();
 STACKTOP = sp;
 return;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1;
 $5 = $3;
 $6 = $4 - $5 | 0;
 $7 = $6 >>> 0 > $l >>> 0;
 $l$ = $7 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 $8 = HEAP32[$2 >> 2] | 0;
 $9 = $8 + $l$ | 0;
 HEAP32[$2 >> 2] = $9;
 return $l | 0;
}

function _sav_fopen($filename, $mode) {
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $pathBuf = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2064 | 0;
 $pathBuf = sp + 8 | 0;
 $0 = $filename;
 $1 = $mode;
 HEAP8[$pathBuf >> 0] = 0;
 $2 = HEAP32[252 >> 2] | 0;
 _strcat($pathBuf, $2) | 0;
 _strcat($pathBuf, 3397) | 0;
 $3 = $0;
 _strcat($pathBuf, $3) | 0;
 $4 = $1;
 $5 = _gam_fopen($pathBuf, $4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _GamStrShowS($x, $y, $str) {
 $x = $x | 0;
 $y = $y | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $bakBnk = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $bakBnk = sp + 4 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $str;
 _GetDataBankNumber(9, $bakBnk);
 HEAP32[268 >> 2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _GamStrShow($3, $4, $5);
 $6 = HEAPU8[$bakBnk >> 0] | HEAPU8[$bakBnk + 1 >> 0] << 8;
 _GamResumeSet($6);
 STACKTOP = sp;
 return;
}

function _SetGoodsByIndex($index) {
 $index = $index | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $index;
 $1 = $0;
 $2 = $1 & 255;
 $3 = ($2 | 0) == 255;
 if ($3) {
  STACKTOP = sp;
  return;
 }
 $4 = $0;
 $5 = $4 & 255;
 $6 = 5023 + $5 | 0;
 $7 = HEAP8[$6 >> 0] | 0;
 $8 = $7 & 255;
 $9 = $8 | 128;
 $10 = $9 & 255;
 HEAP8[$6 >> 0] = $10;
 STACKTOP = sp;
 return;
}

function _gam_fseek($fp, $offset, $fromwhere) {
 $fp = $fp | 0;
 $offset = $offset | 0;
 $fromwhere = $fromwhere | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp;
 $1 = $offset;
 $2 = $fromwhere;
 $3 = $0;
 $4 = $3 + 4 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = FUNCTION_TABLE_iiii[$5 & 31]($6, $7, $8) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _FgtGetGenTer($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3500 + ($2 * 7 | 0) | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $0;
 $6 = $5 & 255;
 $7 = 3500 + ($6 * 7 | 0) | 0;
 $8 = $7 + 1 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 $10 = _FgtGetTerrain($4, $9) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function __timer_open($timer) {
 $timer = $timer | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $timer;
 $1 = $0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = 1;
 $3 = $0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = ($4 | 0) != 0;
 if ($5) {
  STACKTOP = sp;
  return;
 }
 $6 = $0;
 HEAP32[$6 >> 2] = 1;
 $7 = $0;
 _schedule_timer($7);
 STACKTOP = sp;
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}

function _GamResumeSet($bakBnk) {
 $bakBnk = $bakBnk | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $bakBnk;
 $1 = $0;
 _DataBankSwitch(9, 4, $1);
 $2 = HEAP8[3439 >> 0] | 0;
 $3 = $2 << 24 >> 24 != 0;
 if (!$3) {
  STACKTOP = sp;
  return;
 }
 HEAP8[3440 >> 0] = 0;
 HEAP8[3441 >> 0] = 0;
 HEAP8[3442 >> 0] = -97;
 HEAP8[3443 >> 0] = 95;
 STACKTOP = sp;
 return;
}

function _GamShowKing($pTop) {
 $pTop = $pTop | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $pTop;
 HEAP8[3440 >> 0] = 16;
 HEAP8[3442 >> 0] = 52;
 HEAP8[3441 >> 0] = 13;
 HEAP8[3443 >> 0] = 85;
 $1 = HEAP32[284 >> 2] | 0;
 $2 = $0;
 $3 = $2 & 255;
 $4 = $3 * 6 | 0;
 $5 = $1 + $4 | 0;
 _GamStrShowS(16, 13, $5);
 STACKTOP = sp;
 return;
}

function _ShowFightNoteFace($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $pic = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 _SysLcdPartClear(19, 5, -117, 89);
 _SysRect(19, 5, -117, 89);
 $1 = HEAP32[256 >> 2] | 0;
 $2 = _ResLoadToCon(76, 1, $1) | 0;
 $pic = $2;
 $3 = $0;
 $4 = $pic;
 _GamPicShowExS(37, 7, 84, 64, $3, $4);
 STACKTOP = sp;
 return;
}

function _timed_flush_lcd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP8[366432 >> 0] | 0;
 $1 = $0 << 24 >> 24;
 $2 = ($1 | 0) != 0;
 $3 = HEAP32[2020 >> 2] | 0;
 $4 = ($3 | 0) != (0 | 0);
 $or$cond = $2 & $4;
 if (!$or$cond) {
  return;
 }
 $5 = HEAP32[2020 >> 2] | 0;
 FUNCTION_TABLE_vi[$5 & 31](366433);
 HEAP8[366432 >> 0] = 0;
 return;
}

function __shm_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _malloc(1920) | 0;
 HEAP32[376 >> 2] = $0;
 $1 = _malloc(1920) | 0;
 HEAP32[380 >> 2] = $1;
 $2 = _malloc(10240) | 0;
 HEAP32[384 >> 2] = $2;
 $3 = _malloc(30) | 0;
 HEAP32[388 >> 2] = $3;
 $4 = _malloc(300) | 0;
 HEAP32[392 >> 2] = $4;
 $5 = _malloc(1200) | 0;
 HEAP32[396 >> 2] = $5;
 return;
}

function _GamSetResourcePath($datPath, $fontPath) {
 $datPath = $datPath | 0;
 $fontPath = $fontPath | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $datPath;
 $1 = $fontPath;
 $2 = $0;
 $3 = ___strdup($2) | 0;
 HEAP32[248 >> 2] = $3;
 $4 = $1;
 $5 = ___strdup($4) | 0;
 HEAP32[240 >> 2] = $5;
 STACKTOP = sp;
 return;
}

function _SysRectClear($x1, $y1, $x2, $y2) {
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $x2 = $x2 | 0;
 $y2 = $y2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x1;
 $1 = $y1;
 $2 = $x2;
 $3 = $y2;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _SysLcdPartClear($4, $5, $6, $7);
 _logLcd();
 STACKTOP = sp;
 return;
}

function _schedule_timer($timer) {
 $timer = $timer | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $timer;
 $1 = $0;
 $2 = $0;
 $3 = $2 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = +($4 | 0);
 $6 = $5 * 10.0;
 $7 = ~~$6;
 _emscripten_async_call(16 | 0, $1 | 0, $7 | 0);
 STACKTOP = sp;
 return;
}

function _FgtRPicShowV($id, $idx, $sx, $sy) {
 $id = $id | 0;
 $idx = $idx | 0;
 $sx = $sx | 0;
 $sy = $sy | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $id;
 $1 = $idx;
 $2 = $sx;
 $3 = $sy;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _PlcRPicShow($4, $5, $6, $7, 0);
 STACKTOP = sp;
 return;
}

function _IsLoss() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[384 >> 2] | 0;
 $ptr = $1;
 $2 = HEAP8[3640 >> 0] | 0;
 $3 = $ptr;
 $4 = _GetKingCitys($2, $3) | 0;
 $5 = $4 << 24 >> 24 != 0;
 if ($5) {
  $0 = 0;
 } else {
  $0 = 1;
 }
 $6 = $0;
 STACKTOP = sp;
 return $6 | 0;
}

function _IsWin() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ptr = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[384 >> 2] | 0;
 $ptr = $1;
 $2 = HEAP8[3640 >> 0] | 0;
 $3 = $ptr;
 $4 = _GetEnemyKing($2, $3) | 0;
 $5 = $4 << 24 >> 24 != 0;
 if ($5) {
  $0 = 0;
 } else {
  $0 = 1;
 }
 $6 = $0;
 STACKTOP = sp;
 return $6 | 0;
}

function _DataBankSwitch($logicStartBank, $bankNumber, $physicalStartBank) {
 $logicStartBank = $logicStartBank | 0;
 $bankNumber = $bankNumber | 0;
 $physicalStartBank = $physicalStartBank | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $logicStartBank;
 $1 = $bankNumber;
 $2 = $physicalStartBank;
 STACKTOP = sp;
 return;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $f + 60 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $1;
 $2 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $3 = ___syscall_ret($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _FgtIntVar() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP8[3466 >> 0] = 3;
 HEAP8[3465 >> 0] = 0;
 HEAP8[3467 >> 0] = 0;
 $0 = HEAP8[3472 >> 0] | 0;
 $1 = $0 & 255;
 $2 = 1 == ($1 | 0);
 if ($2) {
  HEAP8[3468 >> 0] = 0;
  _CountInitGen();
  return 0;
 } else {
  HEAP8[3468 >> 0] = 10;
  _CountInitGen();
  return 0;
 }
 return 0 | 0;
}

function _sendKey($key) {
 $key = $key | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $msg = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $msg = sp + 4 | 0;
 $0 = $key;
 HEAP8[$msg >> 0] = 5;
 $1 = $0;
 $2 = $1 & 65535;
 $3 = $msg + 1 | 0;
 HEAP8[$3 >> 0] = $2 & 255;
 HEAP8[$3 + 1 >> 0] = $2 >> 8;
 _GuiPushMsg($msg) | 0;
 STACKTOP = sp;
 return;
}

function _rom_ftell($fp) {
 $fp = $fp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_fp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp;
 $1 = $0;
 $_fp = $1;
 $2 = $_fp;
 $3 = $2 + 20 | 0;
 $4 = HEAPU8[$3 >> 0] | HEAPU8[$3 + 1 >> 0] << 8 | HEAPU8[$3 + 2 >> 0] << 16 | HEAPU8[$3 + 3 >> 0] << 24;
 STACKTOP = sp;
 return $4 | 0;
}

function _FgtMoveBack($flag) {
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $flag;
 $1 = $0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24 != 0;
 if ($3) {
  _FgtShowMvRng();
  STACKTOP = sp;
  return;
 } else {
  $4 = $0;
  _FgtAllRight($4);
  STACKTOP = sp;
  return;
 }
}

function _FgtCmdBack($flag) {
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $flag;
 $1 = $0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24 != 0;
 if ($3) {
  _FgtShowAtRng();
  STACKTOP = sp;
  return;
 } else {
  $4 = $0;
  _FgtAllRight($4);
  STACKTOP = sp;
  return;
 }
}

function _AccractbusinessDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function _GetGoodsName($goods, $str) {
 $goods = $goods | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $goods;
 $1 = $str;
 $2 = $0;
 $3 = $2 & 255;
 $4 = $3 + 1 | 0;
 $5 = $4 & 255;
 $6 = $1;
 _ResLoadToMem(73, $5, $6) | 0;
 STACKTOP = sp;
 return;
}

function _ConscriptionDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _ReconnoitreDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _InspectionDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _FgtStrShowV($x, $y, $buf) {
 $x = $x | 0;
 $y = $y | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $buf;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = HEAP32[272 >> 2] | 0;
 _GamStrShowV($3, $4, $5, $6);
 STACKTOP = sp;
 return;
}

function _gam_timer2_open($interval, $callback) {
 $interval = $interval | 0;
 $callback = $callback | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $interval;
 $1 = $callback;
 $2 = $0;
 HEAP32[368 >> 2] = $2;
 $3 = $1;
 HEAP32[372 >> 2] = $3;
 __timer_open(360);
 STACKTOP = sp;
 return;
}

function _ExchangeDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _GetCityName($city, $str) {
 $city = $city | 0;
 $str = $str | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $city;
 $1 = $str;
 $2 = $0;
 $3 = $2 & 255;
 $4 = $3 + 1 | 0;
 $5 = $4 & 255;
 $6 = $1;
 _ResLoadToMem(58, $5, $6) | 0;
 STACKTOP = sp;
 return;
}

function _TransIdxToGen3($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3480 + $2 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 & 255;
 $6 = $5 - 1 | 0;
 $7 = $6 & 255;
 STACKTOP = sp;
 return $7 | 0;
}

function _TransIdxToGen2($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3480 + $2 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 & 255;
 $6 = $5 - 1 | 0;
 $7 = $6 & 255;
 STACKTOP = sp;
 return $7 | 0;
}

function _TransIdxToGen1($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $0;
 $2 = $1 & 255;
 $3 = 3480 + $2 | 0;
 $4 = HEAP8[$3 >> 0] | 0;
 $5 = $4 & 255;
 $6 = $5 - 1 | 0;
 $7 = $6 & 255;
 STACKTOP = sp;
 return $7 | 0;
}

function _FatherDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _AssartDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _itoa($num, $str, $radix) {
 $num = $num | 0;
 $str = $str | 0;
 $radix = $radix | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $num;
 $1 = $str;
 $2 = $radix;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = _ltoa($3, $4, $5) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _NopDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 $2 = $1 + 2 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $0;
 $5 = $4 + 1 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 _AddPerson($3, $6) | 0;
 STACKTOP = sp;
 return 1;
}

function _FgtAllRight($flag) {
 $flag = $flag | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $flag;
 $1 = $0;
 $2 = HEAP8[$1 >> 0] | 0;
 $3 = $2 << 24 >> 24 != 0;
 if ($3) {
  STACKTOP = sp;
  return;
 }
 _FgtRefrashMap();
 _FgtShowState();
 _FgtShowInf();
 STACKTOP = sp;
 return;
}

function _setValue($key, $value) {
 $key = $key | 0;
 $value = $value | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $key;
 $1 = $value;
 $2 = $0;
 $3 = $2;
 $4 = $1;
 $5 = $4;
 $6 = _emscripten_asm_const_2(1, $3 | 0, $5 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _gam_fload($bptr, $addr, $fhandle) {
 $bptr = $bptr | 0;
 $addr = $addr | 0;
 $fhandle = $fhandle | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $bptr;
 $1 = $addr;
 $2 = $fhandle;
 $3 = $0;
 $4 = $1;
 $5 = $3 + $4 | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _FgtLoadToCon($ResId, $idx) {
 $ResId = $ResId | 0;
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $ResId;
 $1 = $idx;
 $2 = $0;
 $3 = $1;
 $4 = HEAP32[256 >> 2] | 0;
 $5 = _ResLoadToCon($2, $3, $4) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _GamAsciiS($x, $y, $asc) {
 $x = $x | 0;
 $y = $y | 0;
 $asc = $asc | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $asc;
 HEAP32[268 >> 2] = 0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _GamAscii($3, $4, $5);
 STACKTOP = sp;
 return;
}

function _FgtShowState() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _FgtShowStateBackground();
 $0 = HEAPU8[3476 >> 0] | HEAPU8[3476 + 1 >> 0] << 8;
 $1 = $0 & 65535;
 $2 = HEAP32[272 >> 2] | 0;
 _PlcNumShow(14, 83, $1, 3, $2);
 $3 = HEAP8[3466 >> 0] | 0;
 _FgtRPicShowV(9, $3, 47, 82);
 return;
}

function _sav_fclose($fp_) {
 $fp_ = $fp_ | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $fp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp_;
 $1 = $0;
 $fp = $1;
 $2 = $fp;
 $3 = $2 + 28 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 _free($4);
 $5 = $fp;
 _free($5);
 STACKTOP = sp;
 return 0;
}

function _GetPeriodKings($period, $kings) {
 $period = $period | 0;
 $kings = $kings | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $period;
 $1 = $kings;
 $2 = $0;
 _LoadPeriod($2);
 $3 = $1;
 $4 = _GetAllKing($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _rom_fwrite($buf, $size, $count, $fhandle) {
 $buf = $buf | 0;
 $size = $size | 0;
 $count = $count | 0;
 $fhandle = $fhandle | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $buf;
 $1 = $size;
 $2 = $count;
 $3 = $fhandle;
 STACKTOP = sp;
 return 0;
}

function _getValue($key) {
 $key = $key | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $value = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $key;
 $1 = $0;
 $2 = $1;
 $3 = _emscripten_asm_const_1(0, $2 | 0) | 0;
 $value = $3;
 $4 = $value;
 $5 = $4;
 STACKTOP = sp;
 return $5 | 0;
}

function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[2024 >> 2] | 0;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  $$0 = 2280;
 } else {
  $2 = _pthread_self() | 0;
  $3 = $2 + 60 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $$0 = $4;
 }
 return $$0 | 0;
}

function _GetDataBankNumber($logicStartBank, $physicalBankNumber) {
 $logicStartBank = $logicStartBank | 0;
 $physicalBankNumber = $physicalBankNumber | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $logicStartBank;
 $1 = $physicalBankNumber;
 STACKTOP = sp;
 return;
}

function ___strdup($s) {
 $s = $s | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _strlen($s) | 0;
 $1 = $0 + 1 | 0;
 $2 = _malloc($1) | 0;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $$0 = 0;
 } else {
  _memcpy($2 | 0, $s | 0, $1 | 0) | 0;
  $$0 = $2;
 }
 return $$0 | 0;
}

function _printf($fmt, $varargs) {
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = HEAP32[2272 >> 2] | 0;
 $1 = _vfprintf($0, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function _FgtLoadToMem2($idx, $buf) {
 $idx = $idx | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $buf;
 $2 = $0;
 $3 = $1;
 $4 = _ResLoadToMem(1, $2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _GamConRst() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _SysTimer1Close();
 $0 = HEAP32[260 >> 2] | 0;
 _gam_fclose($0) | 0;
 $1 = HEAP8[3436 >> 0] | 0;
 _SysSetKeySound($1);
 $2 = HEAPU8[3437 >> 0] | HEAPU8[3437 + 1 >> 0] << 8;
 _GuiSetKbdState($2);
 return;
}

function _SysMemInit($start, $len) {
 $start = $start | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $start;
 $1 = $len;
 _gam_timer_init();
 _gam_timer_set_callback(18);
 _gam_timer2_open(3, 19);
 STACKTOP = sp;
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _gam_fclose($fp) {
 $fp = $fp | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $0;
 $4 = FUNCTION_TABLE_ii[$2 & 15]($3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $r >>> 0 > 4294963200;
 if ($0) {
  $1 = 0 - $r | 0;
  $2 = ___errno_location() | 0;
  HEAP32[$2 >> 2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return $$0 | 0;
}

function _main($argc, $argv) {
 $argc = $argc | 0;
 $argv = $argv | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $argc;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $argv;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 90192 | 0);
 return HEAP32[EMTSTACKTOP >> 2] | 0;
}

function _FgtLoadToMem3($idx, $buf) {
 $idx = $idx | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $buf;
 $2 = $0;
 $3 = $1;
 _ResLoadToMem(1, $2, $3) | 0;
 STACKTOP = sp;
 return;
}

function _SysLine($x1, $y1, $x2, $y2) {
 $x1 = $x1 | 0;
 $y1 = $y1 | 0;
 $x2 = $x2 | 0;
 $y2 = $y2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x1;
 $1 = $y1;
 $2 = $x2;
 $3 = $y2;
 STACKTOP = sp;
 return;
}

function _FgtLoadToMem($idx, $buf) {
 $idx = $idx | 0;
 $buf = $buf | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $idx;
 $1 = $buf;
 $2 = $0;
 $3 = $1;
 _ResLoadToMem(1, $2, $3) | 0;
 STACKTOP = sp;
 return;
}

function _mbsinit($st) {
 $st = $st | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($st | 0) == (0 | 0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st >> 2] | 0;
  $2 = ($1 | 0) == 0;
  $4 = $2;
 }
 $3 = $4 & 1;
 return $3 | 0;
}

function _gam_sem_signal($sem) {
 $sem = $sem | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $sem;
 $1 = $0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 1 | 0;
 HEAP32[$1 >> 2] = $3;
 STACKTOP = sp;
 return;
}

function _GamVarRst() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[280 >> 2] | 0;
 _free($0);
 $1 = HEAP32[284 >> 2] | 0;
 _free($1);
 $2 = HEAP32[288 >> 2] | 0;
 _free($2);
 $3 = HEAP32[332 >> 2] | 0;
 _free($3);
 return;
}

function _GamSetDataDir($dataDir_) {
 $dataDir_ = $dataDir_ | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $dataDir_;
 $1 = $0;
 $2 = ___strdup($1) | 0;
 HEAP32[252 >> 2] = $2;
 STACKTOP = sp;
 return;
}

function _GamSetAltLibPath($datPath) {
 $datPath = $datPath | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $datPath;
 $1 = $0;
 $2 = ___strdup($1) | 0;
 HEAP32[244 >> 2] = $2;
 STACKTOP = sp;
 return;
}

function _GamSetLcdFlushCallback($lcd_fluch_cb) {
 $lcd_fluch_cb = $lcd_fluch_cb | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $lcd_fluch_cb;
 $1 = $0;
 HEAP32[2020 >> 2] = $1;
 STACKTOP = sp;
 return;
}

function _GuiInit() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _gam_sem_create() | 0;
 HEAP32[2012 >> 2] = $0;
 $1 = _gam_lock_create() | 0;
 HEAP32[2016 >> 2] = $1;
 HEAP32[2008 >> 2] = 2004;
 HEAP32[2004 >> 2] = 2004;
 return 1;
}

function _GamMsgBox($buf, $delay) {
 $buf = $buf | 0;
 $delay = $delay | 0;
 if ((asyncState | 0) != 2) {
  HEAP32[EMTSTACKTOP + 8 >> 2] = $buf;
  HEAP32[EMTSTACKTOP + 16 >> 2] = $delay;
  if ((asyncState | 0) == 1) asyncState = 3;
 }
 emterpret(eb + 62048 | 0);
}

function __lcd_flush_cb($buffer) {
 $buffer = $buffer | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $buffer;
 $1 = $0;
 $2 = _emscripten_asm_const_1(3, $1 | 0) | 0;
 STACKTOP = sp;
 return;
}

function _gam_timer_open($interval) {
 $interval = $interval | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $interval;
 $1 = $0;
 HEAP32[352 >> 2] = $1;
 __timer_open(344);
 STACKTOP = sp;
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($s | 0) == (0 | 0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = _wcrtomb($s, $wc, 0) | 0;
  $$0 = $1;
 }
 return $$0 | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function _gam_sem_create() {
 var $0 = 0, $1 = 0, $2 = 0, $p = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _malloc(4) | 0;
 $p = $0;
 $1 = $p;
 HEAP32[$1 >> 2] = 0;
 $2 = $p;
 STACKTOP = sp;
 return $2 | 0;
}

function _SysTimer1Open($times) {
 $times = $times | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $times;
 $1 = $0;
 $2 = $1 & 255;
 _gam_timer_open($2);
 STACKTOP = sp;
 return;
}

function _srand($s) {
 $s = $s | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $s + -1 | 0;
 $1 = 8;
 $2 = $1;
 HEAP32[$2 >> 2] = $0;
 $3 = $1 + 4 | 0;
 $4 = $3;
 HEAP32[$4 >> 2] = 0;
 return;
}

function _rom_fnew() {
 var $0 = 0, $1 = 0, $2 = 0, $fp = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _calloc(1, 32) | 0;
 $fp = $0;
 $1 = $fp;
 _rom_finit($1);
 $2 = $fp;
 STACKTOP = sp;
 return $2 | 0;
}

function _SysAscii($x, $y, $asc) {
 $x = $x | 0;
 $y = $y | 0;
 $asc = $asc | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $x;
 $1 = $y;
 $2 = $asc;
 STACKTOP = sp;
 return;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function _FgtLoadConsts() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _ResItemGet(2, 17, 3040) | 0;
 _ResItemGet(2, 18, 16) | 0;
 _ResItemGet(2, 19, 160) | 0;
 _ResItemGet(2, 20, 184) | 0;
 _ResItemGet(2, 21, 208) | 0;
 return;
}

function _isspace($c) {
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ($c | 0) == 32;
 $1 = $c + -9 | 0;
 $2 = $1 >>> 0 < 5;
 $3 = $0 | $2;
 $4 = $3 & 1;
 return $4 | 0;
}

function _GamShowFrame($vscr) {
 $vscr = $vscr | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $vscr;
 $1 = $0;
 _SysPicture(0, 0, -97, 95, $1, 0);
 STACKTOP = sp;
 return;
}

function _strcat($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _strlen($dest) | 0;
 $1 = $dest + $0 | 0;
 _strcpy($1, $src) | 0;
 return $dest | 0;
}

function _cleanup392($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = $p + 68 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($1 | 0) == 0;
 if ($2) {
  ___unlockfile($p);
 }
 return;
}

function _GuiPushMsg($pMsg) {
 $pMsg = $pMsg | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $pMsg;
 $1 = $0;
 _msg_queue_put(2004, $1);
 STACKTOP = sp;
 return 1;
}

function _gam_timer_set_callback($cb) {
 $cb = $cb | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $cb;
 $1 = $0;
 HEAP32[356 >> 2] = $1;
 STACKTOP = sp;
 return;
}

function _gamTraceP($num) {
 $num = $num | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $num;
 $1 = $0;
 _gamTracel($1);
 _gamPause();
 STACKTOP = sp;
 return;
}

function _DelOrder($Order) {
 $Order = $Order | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 $1 = $0;
 HEAP8[$1 >> 0] = -1;
 STACKTOP = sp;
 return 1;
}

function _SysSetKeySound($keySoundFlag) {
 $keySoundFlag = $keySoundFlag | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $keySoundFlag;
 STACKTOP = sp;
 return;
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
 return $0 | 0;
}

function _FgtShowStateBackground() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[272 >> 2] | 0;
 _GamePictureDummy(0, 80, -97, 95, 0, $0, 4);
 _FgtRPicShowV(8, 1, 0, 80);
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = ___string_read($f, $buf, $len) | 0;
 return $0 | 0;
}

function _rom_fclose($fp) {
 $fp = $fp | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $fp;
 $1 = $0;
 _free($1);
 STACKTOP = sp;
 return 0;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __timercb() {
 var $msg = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $msg = sp;
 HEAP8[$msg >> 0] = 6;
 _GuiPushMsg($msg) | 0;
 STACKTOP = sp;
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function _GuiSetInputFilter($filter) {
 $filter = $filter | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $filter;
 STACKTOP = sp;
 return;
}

function _RealienateDrv($Order) {
 $Order = $Order | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $Order;
 STACKTOP = sp;
 return 1;
}

function _GuiSetKbdState($state) {
 $state = $state | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $state;
 STACKTOP = sp;
 return;
}

function _GuiTranslateMsg($pMsg) {
 $pMsg = $pMsg | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $pMsg;
 STACKTOP = sp;
 return 1;
}

function _GuiSetKbdType($type) {
 $type = $type | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $type;
 STACKTOP = sp;
 return;
}

function _gam_lock_unlock($lck) {
 $lck = $lck | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $lck;
 STACKTOP = sp;
 return;
}

function _gam_lock_lock($lck) {
 $lck = $lck | 0;
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = $lck;
 STACKTOP = sp;
 return;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _ShowMapClear() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[272 >> 2] | 0;
 _GamShowFrame($0);
 _SysRect(-128, 0, -97, 95);
 return;
}

function _strcpy($dest, $src) {
 $dest = $dest | 0;
 $src = $src | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 ___stpcpy($dest, $src) | 0;
 return $dest | 0;
}

function _SysGetTimer1Number() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = _gam_timer_interval() | 0;
 $1 = $0 & 255;
 return $1 | 0;
}

function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +_copysign($x, $y);
 return +$0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +_scalbn($x, $n);
 return +$0;
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +_frexp($x, $e);
 return +$0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = +_fmod($x, $y);
 return +$0;
}

function _GamLoadEngineConfig() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _ResItemGet(2, 16, 3396) | 0;
 _FgtLoadConsts();
 return;
}

function _FgtShowFrame() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[272 >> 2] | 0;
 _GamShowFrame($0);
 return;
}

function _gam_timer_interval() {
 var $0 = 0, label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 $0 = HEAP32[352 >> 2] | 0;
 return $0 | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0;
}

function _gam_timer_close() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 HEAP32[348 >> 2] = 0;
 return;
}

function _SysTimer1Close() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 _gam_timer_close();
 return;
}

function b3(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(3);
 return 0;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 31](a1 | 0);
}

function ___unlockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0;
}

function _FlashInit() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 __shm_init();
 return;
}

function _gam_lock_create() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0 | 0;
}

function _SysGetKeySound() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0;
}

function _GuiGetKbdState() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0;
}

function _SysIconAllClear() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}

function _gam_timer_init() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return;
}

function _SysGetSecond() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return 0;
}

function _SysGetKey() {
 var label = 0, sp = 0;
 label = 0;
 sp = STACKTOP;
 return -1;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 31]();
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function emtStackRestore(x) {
 x = x | 0;
 EMTSTACKTOP = x;
}

function setAsyncState(x) {
 x = x | 0;
 asyncState = x;
}

function b0(p0) {
 p0 = p0 | 0;
 abort(0);
 return 0;
}

function emtStackSave() {
 return EMTSTACKTOP | 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b2(p0) {
 p0 = p0 | 0;
 abort(2);
}

function b4() {
 abort(4);
}

// EMSCRIPTEN_END_FUNCS

var FUNCTION_TABLE_ii = [b0,b0,___stdio_close,b0,b0,b0,b0,b0,_sav_fclose,_sav_fclose_w,b0,_rom_fclose,b0,b0,b0,_rom_ftell];
var FUNCTION_TABLE_iiii = [b1,_sn_write,b1,___stdout_write,___stdio_seek,b1,b1,b1,b1,b1,b1,b1,_rom_fseek,b1,b1,b1,b1,b1,b1,b1,b1,___stdio_write,_do_read,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,b2,b2,b2,b2,_FgtAllRight,_FgtMoveBack,_FgtCmdBack,b2,b2,b2,b2,b2,b2,b2,b2,__timer_cb,__lcd_flush_cb,b2,b2,_cleanup392,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iiiii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_sav_fwrite,b3,b3,_rom_fread,_rom_fwrite,b3];
var FUNCTION_TABLE_v = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__timercb,_timed_flush_lcd,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];

  return { _i64Subtract: _i64Subtract, _free: _free, _main: _main, _i64Add: _i64Add, _memset: _memset, _malloc: _malloc, _sendKey: _sendKey, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, emterpret: emterpret, setAsyncState: setAsyncState, emtStackSave: emtStackSave, emtStackRestore: emtStackRestore, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _sendKey = Module["_sendKey"] = asm["_sendKey"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  var initialEmtStackTop = asm.emtStackSave();

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      // an infinite loop keeps the C stack around, but the emterpreter stack must be unwound - we do not want to restore the call stack at infinite loop
      asm.emtStackRestore(initialEmtStackTop);
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}








